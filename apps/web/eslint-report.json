[
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\appointments-new\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setDoctors' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 29
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAppointments'. Either include it or remove the dependency array.",
        "line": 85,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 85,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [user, setUser, fetchAppointments]",
            "fix": { "range": [2569, 2584], "text": "[user, setUser, fetchAppointments]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Text,\r\n  Group,\r\n  Badge,\r\n  SimpleGrid,\r\n  Stack,\r\n  Button,\r\n  Title,\r\n  Card,\r\n  TextInput,\r\n  Select,\r\n  LoadingOverlay,\r\n  Alert\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconCalendar,\r\n  IconClock,\r\n  IconEdit,\r\n  IconTrash,\r\n  IconEye,\r\n  IconCalendarEvent,\r\n  IconCheck,\r\n  IconAlertCircle\r\n} from '@tabler/icons-react';\r\nimport Layout from '../../components/shared/Layout';\r\nimport DataTable from '../../components/shared/DataTable';\r\nimport AppointmentForm from '../../components/appointments/AppointmentForm';\r\nimport AppointmentDetails from '../../components/appointments/AppointmentDetails';\r\nimport { useAppStore } from '../../stores/appStore';\r\nimport { User, UserRole, TableColumn } from '../../types/common';\r\nimport appointmentsService from '../../services/appointments.service';\r\nimport patientsService from '../../services/patients.service';\r\nimport type { CreateAppointmentDto, UpdateAppointmentDto, AppointmentFilters } from '../../services/appointments.service';\r\n\r\nconst mockUser: User = {\r\n  id: '1',\r\n  username: 'sjohnson',\r\n  email: 'sarah.johnson@hospital.com',\r\n  firstName: 'Sarah',\r\n  lastName: 'Johnson',\r\n  role: UserRole.DOCTOR,\r\n  permissions: [],\r\n  isActive: true,\r\n  tenantInfo: {\r\n    tenantId: 'T001',\r\n    tenantName: 'Main Hospital',\r\n  },\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nfunction AppointmentsPage() {\r\n  const { user, setUser } = useAppStore();\r\n  const [appointments, setAppointments] = useState<any[]>([]);\r\n  const [patients, setPatients] = useState<any[]>([]);\r\n  const [doctors, setDoctors] = useState<any[]>([]);\r\n  const [stats, setStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedAppointment, setSelectedAppointment] = useState<any>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n  const [dateFilter, setDateFilter] = useState<Date | null>(null);\r\n\r\n  const [formOpened, { open: openForm, close: closeForm }] = useDisclosure(false);\r\n  const [detailsOpened, { open: openDetails, close: closeDetails }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setUser(mockUser);\r\n    }\r\n    fetchAppointments();\r\n    fetchStats();\r\n    fetchPatients();\r\n  }, [user, setUser]);\r\n\r\n  const fetchAppointments = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const filters: AppointmentFilters = {};\r\n      if (searchQuery) filters.search = searchQuery;\r\n      if (statusFilter) filters.status = statusFilter;\r\n      if (dateFilter) {\r\n        filters.startDate = dateFilter.toISOString();\r\n        filters.endDate = dateFilter.toISOString();\r\n      }\r\n\r\n      const response = await appointmentsService.getAppointments(filters);\r\n      if (response.success && response.data) {\r\n        setAppointments(response.data || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching appointments:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to fetch appointments',\r\n        color: 'red',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await appointmentsService.getAppointmentStats();\r\n      if (response.success && response.data) {\r\n        setStats(response.data);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching stats:', error);\r\n    }\r\n  };\r\n\r\n  const fetchPatients = async () => {\r\n    try {\r\n      const response = await patientsService.getPatients();\r\n      if (response.success && response.data) {\r\n        setPatients(response.data.patients || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching patients:', error);\r\n    }\r\n  };\r\n\r\n  const handleCreateAppointment = async (data: CreateAppointmentDto) => {\r\n    try {\r\n      const response = await appointmentsService.createAppointment(data);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Appointment created successfully',\r\n          color: 'green',\r\n        });\r\n        fetchAppointments();\r\n        fetchStats();\r\n        closeForm();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error creating appointment:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to create appointment',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleUpdateAppointment = async (data: UpdateAppointmentDto) => {\r\n    if (!selectedAppointment) return;\r\n\r\n    try {\r\n      const response = await appointmentsService.updateAppointment(selectedAppointment.id, data);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Appointment updated successfully',\r\n          color: 'green',\r\n        });\r\n        fetchAppointments();\r\n        fetchStats();\r\n        closeForm();\r\n        setSelectedAppointment(null);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error updating appointment:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to update appointment',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleDeleteAppointment = async (appointment: any) => {\r\n    if (!window.confirm('Are you sure you want to delete this appointment?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await appointmentsService.deleteAppointment(appointment.id);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Appointment deleted successfully',\r\n          color: 'green',\r\n        });\r\n        fetchAppointments();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error deleting appointment:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to delete appointment',\r\n        color: 'red',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = async (appointmentId: string, status: string) => {\r\n    try {\r\n      const response = await appointmentsService.updateAppointmentStatus(appointmentId, status);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: `Appointment status updated to ${status}`,\r\n          color: 'green',\r\n        });\r\n        fetchAppointments();\r\n        fetchStats();\r\n        closeDetails();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error updating status:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to update status',\r\n        color: 'red',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleViewAppointment = (appointment: any) => {\r\n    setSelectedAppointment(appointment);\r\n    openDetails();\r\n  };\r\n\r\n  const handleEditAppointment = (appointment: any) => {\r\n    setSelectedAppointment(appointment);\r\n    openForm();\r\n  };\r\n\r\n  const handleNewAppointment = () => {\r\n    setSelectedAppointment(null);\r\n    openForm();\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    const colors: Record<string, string> = {\r\n      SCHEDULED: 'blue',\r\n      ARRIVED: 'teal',\r\n      IN_PROGRESS: 'yellow',\r\n      COMPLETED: 'green',\r\n      CANCELLED: 'red',\r\n      NO_SHOW: 'gray',\r\n      RESCHEDULED: 'orange'\r\n    };\r\n    return colors[status] || 'gray';\r\n  };\r\n\r\n  const formatDateTime = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return {\r\n      date: date.toLocaleDateString(),\r\n      time: date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n    };\r\n  };\r\n\r\n  const columns: TableColumn[] = [\r\n    {\r\n      key: 'patient',\r\n      title: 'Patient',\r\n      sortable: true,\r\n      render: (appointment: any) => (\r\n        <div>\r\n          <Text fw={500}>\r\n            {appointment.patient?.firstName} {appointment.patient?.lastName}\r\n          </Text>\r\n          <Text size=\"xs\" c=\"dimmed\">\r\n            {appointment.patient?.medicalRecordNumber || appointment.patient?.id}\r\n          </Text>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'doctor',\r\n      title: 'Doctor',\r\n      sortable: true,\r\n      render: (appointment: any) => (\r\n        <Text>\r\n          Dr. {appointment.doctor?.firstName} {appointment.doctor?.lastName}\r\n        </Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'dateTime',\r\n      title: 'Date & Time',\r\n      sortable: true,\r\n      render: (appointment: any) => {\r\n        const { date, time } = formatDateTime(appointment.startTime);\r\n        return (\r\n          <div>\r\n            <Text fw={500}>{date}</Text>\r\n            <Text size=\"xs\" c=\"dimmed\">{time}</Text>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'reason',\r\n      title: 'Reason',\r\n      render: (appointment: any) => (\r\n        <Text lineClamp={2}>{appointment.reason}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'status',\r\n      title: 'Status',\r\n      sortable: true,\r\n      render: (appointment: any) => (\r\n        <Badge color={getStatusColor(appointment.status)}>\r\n          {appointment.status}\r\n        </Badge>\r\n      )\r\n    },\r\n    {\r\n      key: 'actions',\r\n      title: 'Actions',\r\n      render: (appointment: any) => (\r\n        <Group gap=\"xs\">\r\n          <Button\r\n            size=\"xs\"\r\n            variant=\"subtle\"\r\n            leftSection={<IconEye size={14} />}\r\n            onClick={() => handleViewAppointment(appointment)}\r\n          >\r\n            View\r\n          </Button>\r\n          <Button\r\n            size=\"xs\"\r\n            variant=\"subtle\"\r\n            leftSection={<IconEdit size={14} />}\r\n            onClick={() => handleEditAppointment(appointment)}\r\n          >\r\n            Edit\r\n          </Button>\r\n          <Button\r\n            size=\"xs\"\r\n            variant=\"subtle\"\r\n            color=\"red\"\r\n            leftSection={<IconTrash size={14} />}\r\n            onClick={() => handleDeleteAppointment(appointment)}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </Group>\r\n      )\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Layout user={user ? { \r\n      id: user.id, \r\n      name: `${user.firstName} ${user.lastName}`, \r\n      email: user.email, \r\n      role: user.role,\r\n      avatar: undefined \r\n    } : mockUser ? {\r\n      id: mockUser.id,\r\n      name: `${mockUser.firstName} ${mockUser.lastName}`,\r\n      email: mockUser.email,\r\n      role: mockUser.role,\r\n      avatar: undefined\r\n    } : undefined} notifications={0} onLogout={() => {}}>\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <Stack gap=\"lg\">\r\n          {/* Header */}\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Title order={2}>Appointment Management</Title>\r\n              <Text c=\"dimmed\" size=\"sm\">\r\n                Manage and schedule patient appointments\r\n              </Text>\r\n            </div>\r\n            <Button\r\n              leftSection={<IconPlus size={16} />}\r\n              onClick={handleNewAppointment}\r\n            >\r\n              Book Appointment\r\n            </Button>\r\n          </Group>\r\n\r\n          {/* Statistics Cards */}\r\n          {stats && (\r\n            <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }}>\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Total\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.total}\r\n                    </Text>\r\n                  </div>\r\n                  <IconCalendarEvent size={32} color=\"#228be6\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Today\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.today}\r\n                    </Text>\r\n                  </div>\r\n                  <IconClock size={32} color=\"#12b886\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Pending\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.pending}\r\n                    </Text>\r\n                  </div>\r\n                  <IconAlertCircle size={32} color=\"#fab005\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Completed\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.completed}\r\n                    </Text>\r\n                  </div>\r\n                  <IconCheck size={32} color=\"#40c057\" />\r\n                </Group>\r\n              </Card>\r\n            </SimpleGrid>\r\n          )}\r\n\r\n          {/* Filters */}\r\n          <Paper withBorder p=\"md\">\r\n            <Grid>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                <TextInput\r\n                  placeholder=\"Search appointments...\"\r\n                  leftSection={<IconSearch size={16} />}\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                />\r\n              </Grid.Col>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                <Select\r\n                  placeholder=\"Filter by status\"\r\n                  data={[\r\n                    { value: '', label: 'All Statuses' },\r\n                    { value: 'SCHEDULED', label: 'Scheduled' },\r\n                    { value: 'ARRIVED', label: 'Arrived' },\r\n                    { value: 'IN_PROGRESS', label: 'In Progress' },\r\n                    { value: 'COMPLETED', label: 'Completed' },\r\n                    { value: 'CANCELLED', label: 'Cancelled' }\r\n                  ]}\r\n                  value={statusFilter}\r\n                  onChange={(value) => setStatusFilter(value || '')}\r\n                />\r\n              </Grid.Col>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                <DatePickerInput\r\n                  placeholder=\"Filter by date\"\r\n                  leftSection={<IconCalendar size={16} />}\r\n                  value={dateFilter}\r\n                  onChange={(value) => setDateFilter(value as unknown as Date | null)}\r\n                  clearable\r\n                />\r\n              </Grid.Col>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                <Button fullWidth onClick={fetchAppointments}>\r\n                  Apply Filters\r\n                </Button>\r\n              </Grid.Col>\r\n            </Grid>\r\n          </Paper>\r\n\r\n          {/* Appointments Table */}\r\n          <Paper withBorder>\r\n            <LoadingOverlay visible={loading} />\r\n            {appointments.length === 0 && !loading ? (\r\n              <Alert icon={<IconAlertCircle size={16} />} title=\"No appointments found\" color=\"blue\">\r\n                No appointments match your current filters. Try adjusting your search criteria or book a new appointment.\r\n              </Alert>\r\n            ) : (\r\n              <DataTable\r\n                columns={columns}\r\n                data={appointments}\r\n                loading={loading}\r\n              />\r\n            )}\r\n          </Paper>\r\n        </Stack>\r\n      </Container>\r\n\r\n      {/* Appointment Form Modal */}\r\n      <AppointmentForm\r\n        opened={formOpened}\r\n        onClose={closeForm}\r\n        appointment={selectedAppointment}\r\n        onSubmit={selectedAppointment ? handleUpdateAppointment : handleCreateAppointment}\r\n        patients={patients}\r\n        doctors={doctors}\r\n      />\r\n\r\n      {/* Appointment Details Modal */}\r\n      {selectedAppointment && (\r\n        <AppointmentDetails\r\n          opened={detailsOpened}\r\n          onClose={closeDetails}\r\n          appointment={selectedAppointment}\r\n          onEdit={handleEditAppointment}\r\n          onDelete={handleDeleteAppointment}\r\n          onStatusChange={handleStatusChange}\r\n        />\r\n      )}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default AppointmentsPage;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\appointments\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'UserRole' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'timeSlots' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 109,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 109,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport {\n  Button,\n  Card,\n  TextInput\n} from '@mantine/core';\nimport Layout from '../../components/shared/Layout';\nimport { UserRole } from '../../types/common';\n\ninterface Appointment {\n  id: string;\n  patientId: string;\n  patientName: string;\n  doctorId: string;\n  doctorName: string;\n  department: string;\n  startTime: string;\n  endTime: string;\n  status: 'SCHEDULED' | 'ARRIVED' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED' | 'NO_SHOW' | 'RESCHEDULED';\n  reason: string;\n  notes?: string;\n  type: 'consultation' | 'follow_up' | 'surgery' | 'emergency' | 'telemedicine';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n}\n\nconst AppointmentsPage = () => {\n  const [currentView, setCurrentView] = useState<'calendar' | 'list'>('calendar');\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [filterDepartment, setFilterDepartment] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const [appointments] = useState<Appointment[]>([\n    {\n      id: '1',\n      patientId: 'p1',\n      patientName: 'John Doe',\n      doctorId: 'd1',\n      doctorName: 'Dr. Sarah Wilson',\n      department: 'Cardiology',\n      startTime: '2024-12-05T09:00:00',\n      endTime: '2024-12-05T09:30:00',\n      status: 'SCHEDULED',\n      reason: 'Regular checkup',\n      type: 'consultation',\n      priority: 'medium'\n    },\n    {\n      id: '2',\n      patientId: 'p2',\n      patientName: 'Emily Johnson',\n      doctorId: 'd2',\n      doctorName: 'Dr. Michael Chen',\n      department: 'Pediatrics',\n      startTime: '2024-12-05T10:30:00',\n      endTime: '2024-12-05T11:00:00',\n      status: 'IN_PROGRESS',\n      reason: 'Vaccination',\n      type: 'consultation',\n      priority: 'low'\n    },\n    {\n      id: '3',\n      patientId: 'p3',\n      patientName: 'Robert Smith',\n      doctorId: 'd3',\n      doctorName: 'Dr. Lisa Rodriguez',\n      department: 'Orthopedics',\n      startTime: '2024-12-05T14:00:00',\n      endTime: '2024-12-05T14:45:00',\n      status: 'SCHEDULED',\n      reason: 'Knee pain assessment',\n      type: 'consultation',\n      priority: 'high'\n    },\n    {\n      id: '4',\n      patientId: 'p4',\n      patientName: 'Maria Garcia',\n      doctorId: 'd1',\n      doctorName: 'Dr. Sarah Wilson',\n      department: 'Cardiology',\n      startTime: '2024-12-05T16:30:00',\n      endTime: '2024-12-05T17:15:00',\n      status: 'COMPLETED',\n      reason: 'Post-surgery follow-up',\n      type: 'follow_up',\n      priority: 'high'\n    },\n    {\n      id: '5',\n      patientId: 'p5',\n      patientName: 'David Wilson',\n      doctorId: 'd4',\n      doctorName: 'Dr. James Kumar',\n      department: 'Emergency',\n      startTime: '2024-12-05T08:15:00',\n      endTime: '2024-12-05T09:00:00',\n      status: 'COMPLETED',\n      reason: 'Chest pain',\n      type: 'emergency',\n      priority: 'urgent'\n    }\n  ]);\n\n  const departments = ['Cardiology', 'Pediatrics', 'Orthopedics', 'Emergency', 'Neurology', 'Dermatology'];\n  const timeSlots = Array.from({ length: 24 }, (_, i) => `${i.toString().padStart(2, '0')}:00`);\n\n  const filteredAppointments = appointments.filter(appointment => {\n    const matchesSearch = \n      appointment.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      appointment.doctorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      appointment.department.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = filterStatus === 'all' || appointment.status === filterStatus;\n    const matchesDepartment = filterDepartment === 'all' || appointment.department === filterDepartment;\n    const matchesDate = appointment.startTime.startsWith(selectedDate);\n    \n    return matchesSearch && matchesStatus && matchesDepartment && matchesDate;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'SCHEDULED': return '#3b82f6';\n      case 'ARRIVED': return '#10b981';\n      case 'IN_PROGRESS': return '#f59e0b';\n      case 'COMPLETED': return '#059669';\n      case 'CANCELLED': return '#ef4444';\n      case 'NO_SHOW': return '#dc2626';\n      case 'RESCHEDULED': return '#8b5cf6';\n      default: return '#6b7280';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return '#dc2626';\n      case 'high': return '#ea580c';\n      case 'medium': return '#d97706';\n      case 'low': return '#65a30d';\n      default: return '#6b7280';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'consultation': return '🩺';\n      case 'follow_up': return '🔄';\n      case 'surgery': return '⚕️';\n      case 'emergency': return '🚨';\n      case 'telemedicine': return '💻';\n      default: return '📋';\n    }\n  };\n\n  const AppointmentCard = ({ appointment }: { appointment: Appointment }) => (\n    <Card \n      variant=\"elevated\" \n      style={{ \n        marginBottom: '1rem',\n        borderLeft: `4px solid ${getStatusColor(appointment.status)}`\n      }}\n    >\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n        <div style={{ flex: 1 }}>\n          <div style={{ display: 'flex', alignItems: 'center', marginBottom: '0.5rem' }}>\n            <span style={{ fontSize: '1.2rem', marginRight: '0.5rem' }}>\n              {getTypeIcon(appointment.type)}\n            </span>\n            <h3 style={{ \n              margin: '0 1rem 0 0', \n              fontSize: '1.1rem', \n              fontWeight: '600', \n              color: '#1f2937' \n            }}>\n              {appointment.patientName}\n            </h3>\n            <span style={{\n              padding: '0.25rem 0.5rem',\n              borderRadius: '12px',\n              fontSize: '0.75rem',\n              fontWeight: '600',\n              backgroundColor: `${getPriorityColor(appointment.priority)}15`,\n              color: getPriorityColor(appointment.priority)\n            }}>\n              {appointment.priority.toUpperCase()}\n            </span>\n          </div>\n\n          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>\n            <div>\n              <p style={{ margin: '0 0 0.25rem 0', fontSize: '0.875rem', color: '#6b7280' }}>\n                <strong>Doctor:</strong> {appointment.doctorName}\n              </p>\n              <p style={{ margin: '0 0 0.25rem 0', fontSize: '0.875rem', color: '#6b7280' }}>\n                <strong>Department:</strong> {appointment.department}\n              </p>\n              <p style={{ margin: '0 0 0.25rem 0', fontSize: '0.875rem', color: '#6b7280' }}>\n                <strong>Time:</strong> {new Date(appointment.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - {new Date(appointment.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n              </p>\n            </div>\n            \n            <div>\n              <p style={{ margin: '0 0 0.25rem 0', fontSize: '0.875rem', color: '#6b7280' }}>\n                <strong>Reason:</strong> {appointment.reason}\n              </p>\n              <p style={{ margin: '0 0 0.25rem 0', fontSize: '0.875rem', color: '#6b7280' }}>\n                <strong>Type:</strong> {appointment.type.replace('_', ' ')}\n              </p>\r\n              {appointment.notes && (\r\n                <p style={{ margin: '0 0 0.25rem 0', fontSize: '0.875rem', color: '#6b7280' }}>\r\n                  <strong>Notes:</strong> {appointment.notes}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'end', gap: '0.5rem' }}>\r\n          <span style={{\r\n            padding: '0.25rem 0.75rem',\r\n            borderRadius: '12px',\r\n            fontSize: '0.75rem',\r\n            fontWeight: '600',\r\n            backgroundColor: `${getStatusColor(appointment.status)}15`,\r\n            color: getStatusColor(appointment.status)\r\n          }}>\r\n            {appointment.status.replace('_', ' ')}\r\n          </span>\n          \n          <div style={{ display: 'flex', gap: '0.25rem' }}>\n            <Button size=\"sm\" variant=\"outline\" onClick={() => window.location.href = `/appointments/${appointment.id}`}>\n              View\n            </Button>\n            <Button size=\"sm\" variant=\"primary\" onClick={() => window.location.href = `/appointments/${appointment.id}/edit`}>\n              Edit\n            </Button>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n\n  const CalendarView = () => {\n    const today = new Date(selectedDate);\n    const hours = Array.from({ length: 14 }, (_, i) => i + 8); // 8 AM to 9 PM\n    \n    return (\n      <Card>\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '1.5rem' }}>\n          <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937' }}>\n            Schedule for {today.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}\n          </h3>\n          <div style={{ display: 'flex', gap: '0.5rem' }}>\n            <Button size=\"sm\" variant=\"outline\" onClick={() => {\n              const yesterday = new Date(today);\n              yesterday.setDate(yesterday.getDate() - 1);\n              setSelectedDate(yesterday.toISOString().split('T')[0]);\n            }}>\n              ← Previous\n            </Button>\n            <Button size=\"sm\" variant=\"outline\" onClick={() => {\n              setSelectedDate(new Date().toISOString().split('T')[0]);\n            }}>\n              Today\n            </Button>\n            <Button size=\"sm\" variant=\"outline\" onClick={() => {\n              const tomorrow = new Date(today);\n              tomorrow.setDate(tomorrow.getDate() + 1);\n              setSelectedDate(tomorrow.toISOString().split('T')[0]);\n            }}>\n              Next →\n            </Button>\n          </div>\n        </div>\n\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: '80px 1fr',\n          gap: '0.5rem',\n          maxHeight: '600px',\n          overflowY: 'auto'\n        }}>\n          {hours.map(hour => {\n            const appointmentsInHour = filteredAppointments.filter(apt => {\n              const aptHour = new Date(apt.startTime).getHours();\n              return aptHour === hour;\n            });\n\n            return (\n              <React.Fragment key={hour}>\n                <div style={{\n                  padding: '0.5rem',\n                  fontSize: '0.875rem',\n                  color: '#6b7280',\n                  fontWeight: '500',\n                  textAlign: 'center',\n                  borderTop: '1px solid #f1f5f9'\n                }}>\n                  {hour.toString().padStart(2, '0')}:00\n                </div>\n                <div style={{\n                  minHeight: '60px',\n                  borderTop: '1px solid #f1f5f9',\n                  padding: '0.5rem',\n                  position: 'relative'\n                }}>\n                  {appointmentsInHour.map((appointment, index) => (\n                    <div\n                      key={appointment.id}\n                      style={{\n                        position: 'absolute',\n                        left: `${index * 200 + 8}px`,\n                        width: '190px',\n                        background: `${getStatusColor(appointment.status)}15`,\n                        border: `2px solid ${getStatusColor(appointment.status)}`,\n                        borderRadius: '6px',\n                        padding: '0.5rem',\n                        fontSize: '0.75rem',\n                        cursor: 'pointer'\n                      }}\n                      onClick={() => window.location.href = `/appointments/${appointment.id}`}\n                    >\n                      <div style={{ fontWeight: '600', color: '#1f2937', marginBottom: '0.25rem' }}>\n                        {appointment.patientName}\n                      </div>\n                      <div style={{ color: '#6b7280' }}>\n                        {appointment.doctorName}\n                      </div>\n                      <div style={{ color: '#6b7280' }}>\n                        {new Date(appointment.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </Card>\n    );\n  };\n\n  return (\n    <Layout>\n      <div style={{ maxWidth: '1400px', margin: '0 auto' }}>\n        {/* Header */}\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center', \n          marginBottom: '2rem' \n        }}>\n          <div>\n            <h1 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1f2937', marginBottom: '0.5rem' }}>\n              Appointment Management\n            </h1>\n            <p style={{ color: '#6b7280', fontSize: '1rem' }}>\n              Manage patient appointments, scheduling, and medical consultations\n            </p>\n          </div>\n          <Button onClick={() => window.location.href = '/appointments/new'}>\n            + Schedule New Appointment\n          </Button>\n        </div>\n\n        {/* Controls */}\n        <Card style={{ marginBottom: '2rem' }}>\n          <div style={{ \n            display: 'grid', \n            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', \n            gap: '1rem',\n            alignItems: 'end'\n          }}>\n            <div>\n              <label style={{ \n                display: 'block', \n                marginBottom: '0.5rem', \n                fontSize: '0.875rem', \n                fontWeight: '600', \n                color: '#374151' \n              }}>\n                View Mode\n              </label>\n              <div style={{ display: 'flex', gap: '0.5rem' }}>\n                <Button \n                  variant={currentView === 'calendar' ? 'primary' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setCurrentView('calendar')}\n                >\n                  📅 Calendar\n                </Button>\n                <Button \n                  variant={currentView === 'list' ? 'primary' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setCurrentView('list')}\n                >\n                  📋 List\n                </Button>\n              </div>\n            </div>\n\n            <div>\n              <label style={{ \n                display: 'block', \n                marginBottom: '0.5rem', \n                fontSize: '0.875rem', \n                fontWeight: '600', \n                color: '#374151' \n              }}>\n                Date\n              </label>\n              <input\n                type=\"date\"\n                value={selectedDate}\n                onChange={(e) => setSelectedDate(e.target.value)}\n                style={{\n                  width: '100%',\n                  padding: '0.75rem 1rem',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  fontSize: '1rem',\n                  backgroundColor: 'white',\n                  color: '#374151'\n                }}\n              />\n            </div>\n\n            <TextInput\n              placeholder=\"Search appointments...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              label=\"Search\"\n            />\n            \n            <div>\n              <label style={{ \n                display: 'block', \n                marginBottom: '0.5rem', \n                fontSize: '0.875rem', \n                fontWeight: '600', \n                color: '#374151' \n              }}>\n                Status Filter\n              </label>\n              <select\n                value={filterStatus}\n                onChange={(e) => setFilterStatus(e.target.value)}\n                style={{\n                  width: '100%',\n                  padding: '0.75rem 1rem',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  fontSize: '1rem',\n                  backgroundColor: 'white',\n                  color: '#374151'\n                }}\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"SCHEDULED\">Scheduled</option>\n                <option value=\"ARRIVED\">Arrived</option>\n                <option value=\"IN_PROGRESS\">In Progress</option>\n                <option value=\"COMPLETED\">Completed</option>\n                <option value=\"CANCELLED\">Cancelled</option>\n                <option value=\"NO_SHOW\">No Show</option>\n              </select>\n            </div>\n            \n            <div>\n              <label style={{ \n                display: 'block', \n                marginBottom: '0.5rem', \n                fontSize: '0.875rem', \n                fontWeight: '600', \n                color: '#374151' \n              }}>\n                Department\n              </label>\n              <select\n                value={filterDepartment}\n                onChange={(e) => setFilterDepartment(e.target.value)}\n                style={{\n                  width: '100%',\n                  padding: '0.75rem 1rem',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  fontSize: '1rem',\n                  backgroundColor: 'white',\n                  color: '#374151'\n                }}\n              >\n                <option value=\"all\">All Departments</option>\n                {departments.map(dept => (\n                  <option key={dept} value={dept}>{dept}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </Card>\n\n        {/* Statistics */}\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', \n          gap: '1rem',\n          marginBottom: '2rem'\n        }}>\n          <Card variant=\"bordered\">\n            <div style={{ textAlign: 'center' }}>\n              <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#3b82f6' }}>\n                {filteredAppointments.length}\n              </div>\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Today&apos;s Appointments</div>\n            </div>\n          </Card>\n          \n          <Card variant=\"bordered\">\n            <div style={{ textAlign: 'center' }}>\n              <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#10b981' }}>\n                {filteredAppointments.filter(a => a.status === 'COMPLETED').length}\n              </div>\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Completed</div>\n            </div>\n          </Card>\n          \n          <Card variant=\"bordered\">\n            <div style={{ textAlign: 'center' }}>\n              <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#f59e0b' }}>\n                {filteredAppointments.filter(a => a.status === 'IN_PROGRESS').length}\n              </div>\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>In Progress</div>\n            </div>\n          </Card>\n          \n          <Card variant=\"bordered\">\n            <div style={{ textAlign: 'center' }}>\n              <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#ef4444' }}>\n                {filteredAppointments.filter(a => a.status === 'CANCELLED').length}\n              </div>\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Cancelled</div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        {currentView === 'calendar' ? (\n          <CalendarView />\n        ) : (\n          <div>\n            <div style={{ \n              display: 'flex', \n              justifyContent: 'space-between', \n              alignItems: 'center', \n              marginBottom: '1rem' \n            }}>\n              <h2 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937' }}>\n                Appointments ({filteredAppointments.length})\n              </h2>\n              <div style={{ display: 'flex', gap: '0.5rem' }}>\n                <Button variant=\"secondary\" size=\"sm\">\n                  Export\n                </Button>\n                <Button variant=\"secondary\" size=\"sm\">\n                  Print Schedule\n                </Button>\n              </div>\n            </div>\n            \n            {filteredAppointments.length > 0 ? (\n              filteredAppointments\n                .sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime())\n                .map(appointment => (\n                  <AppointmentCard key={appointment.id} appointment={appointment} />\n                ))\n            ) : (\n              <Card>\n                <div style={{ textAlign: 'center', padding: '2rem' }}>\n                  <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>📅</div>\n                  <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\n                    No appointments found\n                  </h3>\n                  <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\n                    No appointments match your current search criteria for the selected date.\n                  </p>\n                  <Button onClick={() => window.location.href = '/appointments/new'}>\n                    Schedule New Appointment\n                  </Button>\n                </div>\n              </Card>\n            )}\n          </div>\n        )}\n      </div>\n    </Layout>\n  );\n};\n\nexport default AppointmentsPage;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\billing-new\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Table' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PaymentFilters' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 67,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 81
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchInvoices'. Either include it or remove the dependency array.",
        "line": 97,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 97,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [user, setUser, fetchInvoices]",
            "fix": { "range": [2878, 2893], "text": "[user, setUser, fetchInvoices]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Text,\r\n  Group,\r\n  Badge,\r\n  SimpleGrid,\r\n  Stack,\r\n  Button,\r\n  Title,\r\n  Card,\r\n  TextInput,\r\n  Select,\r\n  LoadingOverlay,\r\n  Alert,\r\n  Tabs,\r\n  Table,\r\n  ActionIcon,\r\n  Menu\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconCurrencyRupee,\r\n  IconReceipt,\r\n  IconCash,\r\n  IconEdit,\r\n  IconTrash,\r\n  IconEye,\r\n  IconDotsVertical,\r\n  IconCalendar,\r\n  IconTrendingUp,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconClock\r\n} from '@tabler/icons-react';\r\nimport Layout from '../../components/shared/Layout';\r\nimport DataTable from '../../components/shared/DataTable';\r\nimport InvoiceForm from '../../components/billing/InvoiceForm';\r\nimport PaymentForm from '../../components/billing/PaymentForm';\r\nimport InvoiceDetails from '../../components/billing/InvoiceDetails';\r\nimport { useAppStore } from '../../stores/appStore';\r\nimport { User, UserRole, TableColumn } from '../../types/common';\r\nimport billingService from '../../services/billing.service';\r\nimport patientsService from '../../services/patients.service';\r\nimport type { CreateInvoiceDto, CreatePaymentDto, InvoiceFilters, PaymentFilters } from '../../services/billing.service';\r\n\r\nconst mockUser: User = {\r\n  id: '1',\r\n  username: 'admin',\r\n  email: 'admin@hospital.com',\r\n  firstName: 'Admin',\r\n  lastName: 'User',\r\n  role: UserRole.ADMIN,\r\n  permissions: [],\r\n  isActive: true,\r\n  tenantInfo: {\r\n    tenantId: 'T001',\r\n    tenantName: 'Main Hospital',\r\n  },\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nfunction BillingPage() {\r\n  const { user, setUser } = useAppStore();\r\n  const [activeTab, setActiveTab] = useState('invoices');\r\n  const [invoices, setInvoices] = useState<any[]>([]);\r\n  const [payments, setPayments] = useState<any[]>([]);\r\n  const [patients, setPatients] = useState<any[]>([]);\r\n  const [stats, setStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedInvoice, setSelectedInvoice] = useState<any>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n  const [dateFilter, setDateFilter] = useState<Date | null>(null);\r\n\r\n  const [invoiceFormOpened, { open: openInvoiceForm, close: closeInvoiceForm }] = useDisclosure(false);\r\n  const [paymentFormOpened, { open: openPaymentForm, close: closePaymentForm }] = useDisclosure(false);\r\n  const [detailsOpened, { open: openDetails, close: closeDetails }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setUser(mockUser);\r\n    }\r\n    fetchInvoices();\r\n    fetchPayments();\r\n    fetchStats();\r\n    fetchPatients();\r\n  }, [user, setUser]);\r\n\r\n  const fetchInvoices = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const filters: InvoiceFilters = {};\r\n      if (searchQuery) filters.search = searchQuery;\r\n      if (statusFilter) filters.status = statusFilter;\r\n      if (dateFilter) {\r\n        filters.startDate = dateFilter.toISOString();\r\n        filters.endDate = dateFilter.toISOString();\r\n      }\r\n\r\n      const response = await billingService.getInvoices(filters);\r\n      if (response.success && response.data) {\r\n        setInvoices(response.data || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching invoices:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to fetch invoices',\r\n        color: 'red',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchPayments = async () => {\r\n    try {\r\n      const response = await billingService.getPayments();\r\n      if (response.success && response.data) {\r\n        setPayments(response.data || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching payments:', error);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await billingService.getBillingStats();\r\n      if (response.success && response.data) {\r\n        setStats(response.data);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching stats:', error);\r\n    }\r\n  };\r\n\r\n  const fetchPatients = async () => {\r\n    try {\r\n      const response = await patientsService.getPatients();\r\n      if (response.success && response.data) {\r\n        setPatients(response.data.patients || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching patients:', error);\r\n    }\r\n  };\r\n\r\n  const handleCreateInvoice = async (data: CreateInvoiceDto) => {\r\n    try {\r\n      const response = await billingService.createInvoice(data);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Invoice created successfully',\r\n          color: 'green',\r\n        });\r\n        fetchInvoices();\r\n        fetchStats();\r\n        closeInvoiceForm();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error creating invoice:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to create invoice',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleUpdateInvoice = async (data: any) => {\r\n    if (!selectedInvoice) return;\r\n\r\n    try {\r\n      const response = await billingService.updateInvoice(selectedInvoice.id, data);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Invoice updated successfully',\r\n          color: 'green',\r\n        });\r\n        fetchInvoices();\r\n        fetchStats();\r\n        closeInvoiceForm();\r\n        setSelectedInvoice(null);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error updating invoice:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to update invoice',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleCancelInvoice = async (invoice: any) => {\r\n    if (!window.confirm('Are you sure you want to cancel this invoice?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await billingService.cancelInvoice(invoice.id);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Invoice cancelled successfully',\r\n          color: 'green',\r\n        });\r\n        fetchInvoices();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error cancelling invoice:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to cancel invoice',\r\n        color: 'red',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCreatePayment = async (data: CreatePaymentDto) => {\r\n    try {\r\n      const response = await billingService.createPayment(data);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Payment recorded successfully',\r\n          color: 'green',\r\n        });\r\n        fetchInvoices();\r\n        fetchPayments();\r\n        fetchStats();\r\n        closePaymentForm();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error recording payment:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to record payment',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleViewInvoice = (invoice: any) => {\r\n    setSelectedInvoice(invoice);\r\n    openDetails();\r\n  };\r\n\r\n  const handleEditInvoice = (invoice: any) => {\r\n    setSelectedInvoice(invoice);\r\n    openInvoiceForm();\r\n  };\r\n\r\n  const handleRecordPayment = (invoice: any) => {\r\n    setSelectedInvoice(invoice);\r\n    openPaymentForm();\r\n  };\r\n\r\n  const handleNewInvoice = () => {\r\n    setSelectedInvoice(null);\r\n    openInvoiceForm();\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    const colors: Record<string, string> = {\r\n      PENDING: 'yellow',\r\n      PARTIALLY_PAID: 'orange',\r\n      PAID: 'green',\r\n      OVERDUE: 'red',\r\n      CANCELLED: 'gray'\r\n    };\r\n    return colors[status] || 'gray';\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return `₹${amount.toFixed(2)}`;\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString();\r\n  };\r\n\r\n  const invoiceColumns: TableColumn[] = [\r\n    {\r\n      key: 'invoiceNumber',\r\n      title: 'Invoice #',\r\n      sortable: true,\r\n      render: (invoice: any) => (\r\n        <Text fw={600}>{invoice.invoiceNumber}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'patient',\r\n      title: 'Patient',\r\n      sortable: true,\r\n      render: (invoice: any) => (\r\n        <div>\r\n          <Text fw={500}>\r\n            {invoice.patient?.firstName} {invoice.patient?.lastName}\r\n          </Text>\r\n          <Text size=\"xs\" c=\"dimmed\">\r\n            {invoice.patient?.medicalRecordNumber || invoice.patient?.id}\r\n          </Text>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'date',\r\n      title: 'Date',\r\n      sortable: true,\r\n      render: (invoice: any) => (\r\n        <Text>{formatDate(invoice.date)}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'dueDate',\r\n      title: 'Due Date',\r\n      sortable: true,\r\n      render: (invoice: any) => (\r\n        <Text>{formatDate(invoice.dueDate)}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'totalAmount',\r\n      title: 'Amount',\r\n      sortable: true,\r\n      render: (invoice: any) => (\r\n        <Text fw={600}>{formatCurrency(invoice.totalAmount)}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'status',\r\n      title: 'Status',\r\n      sortable: true,\r\n      render: (invoice: any) => (\r\n        <Badge color={getStatusColor(invoice.status)}>\r\n          {invoice.status}\r\n        </Badge>\r\n      )\r\n    },\r\n    {\r\n      key: 'actions',\r\n      title: 'Actions',\r\n      render: (invoice: any) => (\r\n        <Group gap=\"xs\">\r\n          <ActionIcon\r\n            variant=\"subtle\"\r\n            onClick={() => handleViewInvoice(invoice)}\r\n          >\r\n            <IconEye size={16} />\r\n          </ActionIcon>\r\n          {invoice.status === 'PENDING' && (\r\n            <ActionIcon\r\n              variant=\"subtle\"\r\n              onClick={() => handleEditInvoice(invoice)}\r\n            >\r\n              <IconEdit size={16} />\r\n            </ActionIcon>\r\n          )}\r\n          {invoice.status !== 'PAID' && invoice.status !== 'CANCELLED' && (\r\n            <ActionIcon\r\n              variant=\"subtle\"\r\n              color=\"green\"\r\n              onClick={() => handleRecordPayment(invoice)}\r\n            >\r\n              <IconCash size={16} />\r\n            </ActionIcon>\r\n          )}\r\n          <Menu position=\"bottom-end\">\r\n            <Menu.Target>\r\n              <ActionIcon variant=\"subtle\">\r\n                <IconDotsVertical size={16} />\r\n              </ActionIcon>\r\n            </Menu.Target>\r\n            <Menu.Dropdown>\r\n              <Menu.Item\r\n                leftSection={<IconEye size={14} />}\r\n                onClick={() => handleViewInvoice(invoice)}\r\n              >\r\n                View Details\r\n              </Menu.Item>\r\n              {invoice.status === 'PENDING' && (\r\n                <Menu.Item\r\n                  leftSection={<IconEdit size={14} />}\r\n                  onClick={() => handleEditInvoice(invoice)}\r\n                >\r\n                  Edit\r\n                </Menu.Item>\r\n              )}\r\n              {invoice.status !== 'PAID' && invoice.status !== 'CANCELLED' && (\r\n                <>\r\n                  <Menu.Item\r\n                    leftSection={<IconCash size={14} />}\r\n                    onClick={() => handleRecordPayment(invoice)}\r\n                  >\r\n                    Record Payment\r\n                  </Menu.Item>\r\n                  <Menu.Divider />\r\n                  <Menu.Item\r\n                    leftSection={<IconTrash size={14} />}\r\n                    color=\"red\"\r\n                    onClick={() => handleCancelInvoice(invoice)}\r\n                  >\r\n                    Cancel Invoice\r\n                  </Menu.Item>\r\n                </>\r\n              )}\r\n            </Menu.Dropdown>\r\n          </Menu>\r\n        </Group>\r\n      )\r\n    }\r\n  ];\r\n\r\n  const paymentColumns: TableColumn[] = [\r\n    {\r\n      key: 'paymentNumber',\r\n      title: 'Payment #',\r\n      sortable: true,\r\n      render: (payment: any) => (\r\n        <Text fw={600}>{payment.paymentNumber}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'invoice',\r\n      title: 'Invoice',\r\n      render: (payment: any) => (\r\n        <Text>{payment.invoice?.invoiceNumber}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'patient',\r\n      title: 'Patient',\r\n      render: (payment: any) => (\r\n        <Text>\r\n          {payment.invoice?.patient?.firstName} {payment.invoice?.patient?.lastName}\r\n        </Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'amount',\r\n      title: 'Amount',\r\n      sortable: true,\r\n      render: (payment: any) => (\r\n        <Text fw={600}>{formatCurrency(payment.amount)}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'paymentMethod',\r\n      title: 'Method',\r\n      render: (payment: any) => (\r\n        <Badge variant=\"light\">{payment.paymentMethod}</Badge>\r\n      )\r\n    },\r\n    {\r\n      key: 'paymentDate',\r\n      title: 'Date',\r\n      sortable: true,\r\n      render: (payment: any) => (\r\n        <Text>{formatDate(payment.paymentDate)}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'status',\r\n      title: 'Status',\r\n      render: (payment: any) => (\r\n        <Badge color={payment.status === 'COMPLETED' ? 'green' : 'gray'}>\r\n          {payment.status}\r\n        </Badge>\r\n      )\r\n    }\r\n  ];\r\n\r\n  const currentUser = user || mockUser;\r\n  const userForLayout = {\r\n    ...currentUser,\r\n    name: `${currentUser.firstName} ${currentUser.lastName}`,\r\n  };\r\n\r\n  return (\r\n    <Layout user={userForLayout} notifications={0} onLogout={() => {}}>\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <Stack gap=\"lg\">\r\n          {/* Header */}\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Title order={2}>Billing & Invoicing</Title>\r\n              <Text c=\"dimmed\" size=\"sm\">\r\n                Manage invoices, payments, and billing operations\r\n              </Text>\r\n            </div>\r\n            <Button\r\n              leftSection={<IconPlus size={16} />}\r\n              onClick={handleNewInvoice}\r\n            >\r\n              Create Invoice\r\n            </Button>\r\n          </Group>\r\n\r\n          {/* Statistics Cards */}\r\n          {stats && (\r\n            <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }}>\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Total Revenue\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      ₹{stats.monthlyRevenue.toFixed(2)}\r\n                    </Text>\r\n                    <Text size=\"xs\" c=\"dimmed\">This month</Text>\r\n                  </div>\r\n                  <IconTrendingUp size={32} color=\"#40c057\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Pending\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.pendingInvoices}\r\n                    </Text>\r\n                    <Text size=\"xs\" c=\"dimmed\">Invoices</Text>\r\n                  </div>\r\n                  <IconClock size={32} color=\"#fab005\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Paid\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.paidInvoices}\r\n                    </Text>\r\n                    <Text size=\"xs\" c=\"dimmed\">Invoices</Text>\r\n                  </div>\r\n                  <IconCheck size={32} color=\"#40c057\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Today\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      ₹{stats.todayRevenue.toFixed(2)}\r\n                    </Text>\r\n                    <Text size=\"xs\" c=\"dimmed\">Revenue</Text>\r\n                  </div>\r\n                  <IconCurrencyRupee size={32} color=\"#228be6\" />\r\n                </Group>\r\n              </Card>\r\n            </SimpleGrid>\r\n          )}\r\n\r\n          {/* Tabs */}\r\n          <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'invoices')}>\r\n            <Tabs.List>\r\n              <Tabs.Tab value=\"invoices\" leftSection={<IconReceipt size={16} />}>\r\n                Invoices\r\n              </Tabs.Tab>\r\n              <Tabs.Tab value=\"payments\" leftSection={<IconCash size={16} />}>\r\n                Payments\r\n              </Tabs.Tab>\r\n            </Tabs.List>\r\n\r\n            <Tabs.Panel value=\"invoices\" pt=\"md\">\r\n              {/* Filters */}\r\n              <Paper withBorder p=\"md\" mb=\"md\">\r\n                <Grid>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                    <TextInput\r\n                      placeholder=\"Search invoices...\"\r\n                      leftSection={<IconSearch size={16} />}\r\n                      value={searchQuery}\r\n                      onChange={(e) => setSearchQuery(e.target.value)}\r\n                    />\r\n                  </Grid.Col>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                    <Select\r\n                      placeholder=\"Filter by status\"\r\n                      data={[\r\n                        { value: '', label: 'All Statuses' },\r\n                        { value: 'PENDING', label: 'Pending' },\r\n                        { value: 'PARTIALLY_PAID', label: 'Partially Paid' },\r\n                        { value: 'PAID', label: 'Paid' },\r\n                        { value: 'CANCELLED', label: 'Cancelled' }\r\n                      ]}\r\n                      value={statusFilter}\r\n                      onChange={(value) => setStatusFilter(value || '')}\r\n                    />\r\n                  </Grid.Col>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                    <DatePickerInput\r\n                      placeholder=\"Filter by date\"\r\n                      leftSection={<IconCalendar size={16} />}\r\n                      value={dateFilter}\r\n                      onChange={(value) => setDateFilter(value as unknown as Date | null)}\r\n                      clearable\r\n                    />\r\n                  </Grid.Col>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                    <Button fullWidth onClick={fetchInvoices}>\r\n                      Apply Filters\r\n                    </Button>\r\n                  </Grid.Col>\r\n                </Grid>\r\n              </Paper>\r\n\r\n              {/* Invoices Table */}\r\n              <Paper withBorder>\r\n                <LoadingOverlay visible={loading} />\r\n                {invoices.length === 0 && !loading ? (\r\n                  <Alert icon={<IconAlertCircle size={16} />} title=\"No invoices found\" color=\"blue\">\r\n                    No invoices match your current filters. Try adjusting your search criteria or create a new invoice.\r\n                  </Alert>\r\n                ) : (\r\n                  <DataTable\r\n                    columns={invoiceColumns}\r\n                    data={invoices}\r\n                    loading={loading}\r\n                  />\r\n                )}\r\n              </Paper>\r\n            </Tabs.Panel>\r\n\r\n            <Tabs.Panel value=\"payments\" pt=\"md\">\r\n              {/* Payments Table */}\r\n              <Paper withBorder>\r\n                <LoadingOverlay visible={loading} />\r\n                {payments.length === 0 && !loading ? (\r\n                  <Alert icon={<IconAlertCircle size={16} />} title=\"No payments found\" color=\"blue\">\r\n                    No payment records available.\r\n                  </Alert>\r\n                ) : (\r\n                  <DataTable\r\n                    columns={paymentColumns}\r\n                    data={payments}\r\n                    loading={loading}\r\n                  />\r\n                )}\r\n              </Paper>\r\n            </Tabs.Panel>\r\n          </Tabs>\r\n        </Stack>\r\n      </Container>\r\n\r\n      {/* Invoice Form Modal */}\r\n      <InvoiceForm\r\n        opened={invoiceFormOpened}\r\n        onClose={closeInvoiceForm}\r\n        invoice={selectedInvoice}\r\n        onSubmit={selectedInvoice ? handleUpdateInvoice : handleCreateInvoice}\r\n        patients={patients}\r\n      />\r\n\r\n      {/* Payment Form Modal */}\r\n      {selectedInvoice && (\r\n        <PaymentForm\r\n          opened={paymentFormOpened}\r\n          onClose={closePaymentForm}\r\n          invoice={selectedInvoice}\r\n          onSubmit={handleCreatePayment}\r\n        />\r\n      )}\r\n\r\n      {/* Invoice Details Modal */}\r\n      {selectedInvoice && (\r\n        <InvoiceDetails\r\n          opened={detailsOpened}\r\n          onClose={closeDetails}\r\n          invoice={selectedInvoice}\r\n          onEdit={handleEditInvoice}\r\n          onDelete={handleCancelInvoice}\r\n          onRecordPayment={handleRecordPayment}\r\n        />\r\n      )}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default BillingPage;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\billing\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\communications\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'NotificationFilters' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 45,
        "column": 49,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 68
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",
        "line": 87,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 87,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [user, setUser, fetchMessages]",
            "fix": { "range": [2412, 2427], "text": "[user, setUser, fetchMessages]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'message' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 268,
        "column": 31,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 268,
        "endColumn": 38
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Grid' is not defined.",
        "line": 582,
        "column": 18,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 582,
        "endColumn": 22
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Grid' is not defined.",
        "line": 583,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 583,
        "endColumn": 24
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Grid' is not defined.",
        "line": 591,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 591,
        "endColumn": 24
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Grid' is not defined.",
        "line": 603,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 603,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Stack,\r\n  Button,\r\n  Title,\r\n  Card,\r\n  Tabs,\r\n  ActionIcon,\r\n  Group,\r\n  Text,\r\n  Badge,\r\n  SimpleGrid,\r\n  Paper,\r\n  LoadingOverlay,\r\n  Alert,\r\n  TextInput,\r\n  Select,\r\n  Avatar,\r\n  Menu\r\n} from '@mantine/core';\r\nimport {\r\n  IconPlus,\r\n  IconMail,\r\n  IconBell,\r\n  IconTrash,\r\n  IconMailOpened,\r\n  IconEye,\r\n  IconCheck,\r\n  IconDotsVertical,\r\n  IconInbox,\r\n  IconSend,\r\n  IconSearch,\r\n  IconAlertCircle\r\n} from '@tabler/icons-react';\r\nimport Layout from '../../components/shared/Layout';\r\nimport DataTable from '../../components/shared/DataTable';\r\nimport MessageForm from '../../components/communications/MessageForm';\r\nimport MessageDetails from '../../components/communications/MessageDetails';\r\nimport { useAppStore } from '../../stores/appStore';\r\nimport { User, UserRole, TableColumn } from '../../types/common';\r\nimport communicationsService from '../../services/communications.service';\r\nimport type { CreateMessageDto, MessageFilters, NotificationFilters } from '../../services/communications.service';\r\n\r\nconst mockUser: User = {\r\n  id: '1',\r\n  username: 'admin',\r\n  email: 'admin@hospital.com',\r\n  firstName: 'Admin',\r\n  lastName: 'User',\r\n  role: UserRole.ADMIN,\r\n  permissions: [],\r\n  isActive: true,\r\n  tenantInfo: {\r\n    tenantId: 'T001',\r\n    tenantName: 'Main Hospital',\r\n  },\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nfunction CommunicationsPage() {\r\n  const { user, setUser } = useAppStore();\r\n  const [activeTab, setActiveTab] = useState('messages');\r\n  const [messages, setMessages] = useState<any[]>([]);\r\n  const [notificationsList, setNotificationsList] = useState<any[]>([]);\r\n  const [users, setUsers] = useState<any[]>([]);\r\n  const [stats, setStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedMessage, setSelectedMessage] = useState<any>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n\r\n  const [messageFormOpened, { open: openMessageForm, close: closeMessageForm }] = useDisclosure(false);\r\n  const [detailsOpened, { open: openDetails, close: closeDetails }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setUser(mockUser);\r\n    }\r\n    fetchMessages();\r\n    fetchNotifications();\r\n    fetchStats();\r\n    fetchUsers();\r\n  }, [user, setUser]);\r\n\r\n  const fetchMessages = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const filters: MessageFilters = {};\r\n      if (searchQuery) filters.search = searchQuery;\r\n      if (statusFilter === 'unread') filters.read = false;\r\n      if (statusFilter === 'read') filters.read = true;\r\n\r\n      const response = await communicationsService.getMessages(filters);\r\n      if (response.success && response.data) {\r\n        setMessages(response.data || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching messages:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to fetch messages',\r\n        color: 'red',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchNotifications = async () => {\r\n    try {\r\n      const response = await communicationsService.getNotifications();\r\n      if (response.success && response.data) {\r\n        setNotificationsList(response.data || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching notifications:', error);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await communicationsService.getStats();\r\n      if (response.success && response.data) {\r\n        setStats(response.data);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching stats:', error);\r\n    }\r\n  };\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      // Mock users - in production, fetch from users API\r\n      setUsers([\r\n        { id: '2', firstName: 'John', lastName: 'Doe', email: 'john@hospital.com' },\r\n        { id: '3', firstName: 'Jane', lastName: 'Smith', email: 'jane@hospital.com' },\r\n      ]);\r\n    } catch (error: any) {\r\n      console.error('Error fetching users:', error);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async (data: CreateMessageDto) => {\r\n    try {\r\n      const response = await communicationsService.sendMessage(data);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Message sent successfully',\r\n          color: 'green',\r\n        });\r\n        fetchMessages();\r\n        fetchStats();\r\n        closeMessageForm();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error sending message:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to send message',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleMarkAsRead = async (messageId: string) => {\r\n    try {\r\n      const response = await communicationsService.markMessageAsRead(messageId);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Message marked as read',\r\n          color: 'green',\r\n        });\r\n        fetchMessages();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error marking message as read:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to mark message as read',\r\n        color: 'red',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeleteMessage = async (message: any) => {\r\n    if (!window.confirm('Are you sure you want to delete this message?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await communicationsService.deleteMessage(message.id);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Message deleted successfully',\r\n          color: 'green',\r\n        });\r\n        fetchMessages();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error deleting message:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to delete message',\r\n        color: 'red',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleMarkNotificationAsRead = async (notificationId: string) => {\r\n    try {\r\n      const response = await communicationsService.markNotificationAsRead(notificationId);\r\n      if (response.success) {\r\n        fetchNotifications();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error marking notification as read:', error);\r\n    }\r\n  };\r\n\r\n  const handleMarkAllNotificationsAsRead = async () => {\r\n    try {\r\n      const response = await communicationsService.markAllNotificationsAsRead();\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'All notifications marked as read',\r\n          color: 'green',\r\n        });\r\n        fetchNotifications();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error marking all notifications as read:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteNotification = async (notificationId: string) => {\r\n    try {\r\n      const response = await communicationsService.deleteNotification(notificationId);\r\n      if (response.success) {\r\n        fetchNotifications();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error deleting notification:', error);\r\n    }\r\n  };\r\n\r\n  const handleViewMessage = (message: any) => {\r\n    setSelectedMessage(message);\r\n    openDetails();\r\n    if (!message.read) {\r\n      handleMarkAsRead(message.id);\r\n    }\r\n  };\r\n\r\n  const handleReplyMessage = (message: any) => {\r\n    // Set recipient to sender of original message\r\n    openMessageForm();\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    const colors: Record<string, string> = {\r\n      LOW: 'gray',\r\n      NORMAL: 'blue',\r\n      HIGH: 'orange',\r\n      URGENT: 'red'\r\n    };\r\n    return colors[priority] || 'blue';\r\n  };\r\n\r\n  const getNotificationColor = (type: string) => {\r\n    const colors: Record<string, string> = {\r\n      SUCCESS: 'green',\r\n      WARNING: 'yellow',\r\n      ERROR: 'red',\r\n      INFO: 'blue',\r\n      APPOINTMENT: 'cyan',\r\n      BILLING: 'orange',\r\n      SYSTEM: 'gray'\r\n    };\r\n    return colors[type] || 'blue';\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleString();\r\n  };\r\n\r\n  const messageColumns: TableColumn[] = [\r\n    {\r\n      key: 'read',\r\n      title: '',\r\n      render: (message: any) => (\r\n        <ActionIcon\r\n          size=\"sm\"\r\n          variant=\"subtle\"\r\n          color={message.read ? 'gray' : 'blue'}\r\n        >\r\n          {message.read ? <IconMailOpened size={16} /> : <IconMail size={16} />}\r\n        </ActionIcon>\r\n      )\r\n    },\r\n    {\r\n      key: 'sender',\r\n      title: 'From',\r\n      sortable: true,\r\n      render: (message: any) => (\r\n        <Group gap=\"xs\">\r\n          <Avatar size=\"sm\" radius=\"xl\" color=\"blue\">\r\n            {message.sender?.firstName?.[0]}{message.sender?.lastName?.[0]}\r\n          </Avatar>\r\n          <div>\r\n            <Text fw={message.read ? 400 : 600} size=\"sm\">\r\n              {message.sender?.firstName} {message.sender?.lastName}\r\n            </Text>\r\n            <Text size=\"xs\" c=\"dimmed\">{message.sender?.email}</Text>\r\n          </div>\r\n        </Group>\r\n      )\r\n    },\r\n    {\r\n      key: 'subject',\r\n      title: 'Subject',\r\n      sortable: true,\r\n      render: (message: any) => (\r\n        <Text fw={message.read ? 400 : 600} lineClamp={1}>\r\n          {message.subject}\r\n        </Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'priority',\r\n      title: 'Priority',\r\n      sortable: true,\r\n      render: (message: any) => (\r\n        <Badge size=\"sm\" color={getPriorityColor(message.priority)}>\r\n          {message.priority}\r\n        </Badge>\r\n      )\r\n    },\r\n    {\r\n      key: 'createdAt',\r\n      title: 'Date',\r\n      sortable: true,\r\n      render: (message: any) => (\r\n        <Text size=\"sm\">{formatDate(message.createdAt)}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'actions',\r\n      title: 'Actions',\r\n      render: (message: any) => (\r\n        <Group gap=\"xs\">\r\n          <ActionIcon\r\n            variant=\"subtle\"\r\n            onClick={() => handleViewMessage(message)}\r\n          >\r\n            <IconEye size={16} />\r\n          </ActionIcon>\r\n          {!message.read && (\r\n            <ActionIcon\r\n              variant=\"subtle\"\r\n              color=\"green\"\r\n              onClick={() => handleMarkAsRead(message.id)}\r\n            >\r\n              <IconCheck size={16} />\r\n            </ActionIcon>\r\n          )}\r\n          <Menu position=\"bottom-end\">\r\n            <Menu.Target>\r\n              <ActionIcon variant=\"subtle\">\r\n                <IconDotsVertical size={16} />\r\n              </ActionIcon>\r\n            </Menu.Target>\r\n            <Menu.Dropdown>\r\n              <Menu.Item\r\n                leftSection={<IconEye size={14} />}\r\n                onClick={() => handleViewMessage(message)}\r\n              >\r\n                View\r\n              </Menu.Item>\r\n              {!message.read && (\r\n                <Menu.Item\r\n                  leftSection={<IconCheck size={14} />}\r\n                  onClick={() => handleMarkAsRead(message.id)}\r\n                >\r\n                  Mark as Read\r\n                </Menu.Item>\r\n              )}\r\n              <Menu.Divider />\r\n              <Menu.Item\r\n                leftSection={<IconTrash size={14} />}\r\n                color=\"red\"\r\n                onClick={() => handleDeleteMessage(message)}\r\n              >\r\n                Delete\r\n              </Menu.Item>\r\n            </Menu.Dropdown>\r\n          </Menu>\r\n        </Group>\r\n      )\r\n    }\r\n  ];\r\n\r\n  const notificationColumns: TableColumn[] = [\r\n    {\r\n      key: 'title',\r\n      title: 'Title',\r\n      sortable: true,\r\n      render: (notification: any) => (\r\n        <Text fw={notification.read ? 400 : 600}>\r\n          {notification.title}\r\n        </Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'message',\r\n      title: 'Message',\r\n      render: (notification: any) => (\r\n        <Text lineClamp={2}>{notification.message}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'type',\r\n      title: 'Type',\r\n      sortable: true,\r\n      render: (notification: any) => (\r\n        <Badge size=\"sm\" color={getNotificationColor(notification.type)}>\r\n          {notification.type}\r\n        </Badge>\r\n      )\r\n    },\r\n    {\r\n      key: 'createdAt',\r\n      title: 'Date',\r\n      sortable: true,\r\n      render: (notification: any) => (\r\n        <Text size=\"sm\">{formatDate(notification.createdAt)}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'actions',\r\n      title: 'Actions',\r\n      render: (notification: any) => (\r\n        <Group gap=\"xs\">\r\n          {!notification.read && (\r\n            <ActionIcon\r\n              variant=\"subtle\"\r\n              color=\"green\"\r\n              onClick={() => handleMarkNotificationAsRead(notification.id)}\r\n            >\r\n              <IconCheck size={16} />\r\n            </ActionIcon>\r\n          )}\r\n          <ActionIcon\r\n            variant=\"subtle\"\r\n            color=\"red\"\r\n            onClick={() => handleDeleteNotification(notification.id)}\r\n          >\r\n            <IconTrash size={16} />\r\n          </ActionIcon>\r\n        </Group>\r\n      )\r\n    }\r\n  ];\r\n\r\n  const layoutUser = user || mockUser;\r\n  const userForLayout = {\r\n    id: layoutUser.id,\r\n    name: `${layoutUser.firstName} ${layoutUser.lastName}`,\r\n    email: layoutUser.email,\r\n    role: layoutUser.role,\r\n  };\r\n\r\n  return (\r\n    <Layout user={userForLayout} notifications={0} onLogout={() => {}}>\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <Stack gap=\"lg\">\r\n          {/* Header */}\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Title order={2}>Communications</Title>\r\n              <Text c=\"dimmed\" size=\"sm\">\r\n                Manage messages and notifications\r\n              </Text>\r\n            </div>\r\n            <Button\r\n              leftSection={<IconPlus size={16} />}\r\n              onClick={openMessageForm}\r\n            >\r\n              New Message\r\n            </Button>\r\n          </Group>\r\n\r\n          {/* Statistics Cards */}\r\n          {stats && (\r\n            <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }}>\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Unread Messages\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.unreadMessages}\r\n                    </Text>\r\n                  </div>\r\n                  <IconMail size={32} color=\"#228be6\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Total Messages\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.totalMessages}\r\n                    </Text>\r\n                  </div>\r\n                  <IconInbox size={32} color=\"#12b886\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Unread Notifications\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.unreadNotifications}\r\n                    </Text>\r\n                  </div>\r\n                  <IconBell size={32} color=\"#fab005\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Sent Messages\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.sentMessages}\r\n                    </Text>\r\n                  </div>\r\n                  <IconSend size={32} color=\"#40c057\" />\r\n                </Group>\r\n              </Card>\r\n            </SimpleGrid>\r\n          )}\r\n\r\n          {/* Tabs */}\r\n          <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'messages')}>\r\n            <Tabs.List>\r\n              <Tabs.Tab value=\"messages\" leftSection={<IconMail size={16} />}>\r\n                Messages\r\n              </Tabs.Tab>\r\n              <Tabs.Tab value=\"notifications\" leftSection={<IconBell size={16} />}>\r\n                Notifications\r\n              </Tabs.Tab>\r\n            </Tabs.List>\r\n\r\n            <Tabs.Panel value=\"messages\" pt=\"md\">\r\n              {/* Filters */}\r\n              <Paper withBorder p=\"md\" mb=\"md\">\r\n                <Grid>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 4 }}>\r\n                    <TextInput\r\n                      placeholder=\"Search messages...\"\r\n                      leftSection={<IconSearch size={16} />}\r\n                      value={searchQuery}\r\n                      onChange={(e) => setSearchQuery(e.target.value)}\r\n                    />\r\n                  </Grid.Col>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 4 }}>\r\n                    <Select\r\n                      placeholder=\"Filter by status\"\r\n                      data={[\r\n                        { value: '', title: 'All Messages' },\r\n                        { value: 'unread', title: 'Unread' },\r\n                        { value: 'read', title: 'Read' }\r\n                      ]}\r\n                      value={statusFilter}\r\n                      onChange={(value) => setStatusFilter(value || '')}\r\n                    />\r\n                  </Grid.Col>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 4 }}>\r\n                    <Button fullWidth onClick={fetchMessages}>\r\n                      Apply Filters\r\n                    </Button>\r\n                  </Grid.Col>\r\n                </Grid>\r\n              </Paper>\r\n\r\n              {/* Messages Table */}\r\n              <Paper withBorder>\r\n                <LoadingOverlay visible={loading} />\r\n                {messages.length === 0 && !loading ? (\r\n                  <Alert icon={<IconAlertCircle size={16} />} title=\"No messages found\" color=\"blue\">\r\n                    No messages match your current filters.\r\n                  </Alert>\r\n                ) : (\r\n                  <DataTable\r\n                    columns={messageColumns}\r\n                    data={messages}\r\n                    loading={loading}\r\n                  />\r\n                )}\r\n              </Paper>\r\n            </Tabs.Panel>\r\n\r\n            <Tabs.Panel value=\"notifications\" pt=\"md\">\r\n              {/* Notifications Header */}\r\n              <Group justify=\"space-between\" mb=\"md\">\r\n                <Text size=\"sm\" c=\"dimmed\">\r\n                  {notificationsList.length} notifications\r\n                </Text>\r\n                {stats && stats.unreadNotifications > 0 && (\r\n                  <Button\r\n                    size=\"xs\"\r\n                    variant=\"subtle\"\r\n                    leftSection={<IconCheck size={14} />}\r\n                    onClick={handleMarkAllNotificationsAsRead}\r\n                  >\r\n                    Mark All as Read\r\n                  </Button>\r\n                )}\r\n              </Group>\r\n\r\n              {/* Notifications Table */}\r\n              <Paper withBorder>\r\n                <LoadingOverlay visible={loading} />\r\n                {notificationsList.length === 0 && !loading ? (\r\n                  <Alert icon={<IconAlertCircle size={16} />} title=\"No notifications\" color=\"blue\">\r\n                    You have no notifications.\r\n                  </Alert>\r\n                ) : (\r\n                  <DataTable\r\n                    columns={notificationColumns}\r\n                    data={notificationsList}\r\n                    loading={loading}\r\n                  />\r\n                )}\r\n              </Paper>\r\n            </Tabs.Panel>\r\n          </Tabs>\r\n        </Stack>\r\n      </Container>\r\n\r\n      {/* Message Form Modal */}\r\n      <MessageForm\r\n        opened={messageFormOpened}\r\n        onClose={closeMessageForm}\r\n        onSubmit={handleSendMessage}\r\n        users={users}\r\n      />\r\n\r\n      {/* Message Details Modal */}\r\n      {selectedMessage && (\r\n        <MessageDetails\r\n          opened={detailsOpened}\r\n          onClose={closeDetails}\r\n          message={selectedMessage}\r\n          onDelete={handleDeleteMessage}\r\n          onReply={handleReplyMessage}\r\n        />\r\n      )}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default CommunicationsPage;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\components\\Layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\components\\ResponsiveLayout.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setNotifications' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 41
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\nimport Link from 'next/link';\r\nimport { usePathname } from 'next/navigation';\r\nimport { useState, useEffect, ReactNode } from 'react';\r\nimport type React from 'react';\r\n\r\ninterface LayoutProps {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface MenuItem {\r\n  title: string;\r\n  href: string;\r\n  icon: string;\r\n  roles: string[];\r\n  badge?: string;\r\n}\r\n\r\nconst ResponsiveLayout = ({ children }: LayoutProps) => {\r\n  const pathname = usePathname();\r\n  const [sidebarOpen, setSidebarOpen] = useState(false);\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [userMenuOpen, setUserMenuOpen] = useState(false);\r\n  const [notifications, setNotifications] = useState([\r\n    { id: 1, title: 'New appointment scheduled', time: '5 min ago', type: 'info' },\r\n    { id: 2, title: 'Lab results available', time: '10 min ago', type: 'success' },\r\n    { id: 3, title: 'Emergency alert: Bed 205', time: '15 min ago', type: 'urgent' }\r\n  ]);\r\n  const [showNotifications, setShowNotifications] = useState(false);\r\n\r\n  const [currentUser] = useState({\r\n    name: 'Dr. Sarah Johnson',\r\n    role: 'DOCTOR',\r\n    email: 'sarah.johnson@hospital.com',\r\n    avatar: '👩‍⚕️',\r\n    initials: 'SJ'\r\n  });\r\n\r\n  const menuItems: MenuItem[] = [\r\n    {\r\n      title: 'Dashboard',\r\n      href: '/dashboard',\r\n      icon: '📊',\r\n      roles: ['ADMIN', 'DOCTOR', 'NURSE', 'RECEPTIONIST']\r\n    },\r\n    {\r\n      title: 'Patients',\r\n      href: '/patients',\r\n      icon: '👥',\r\n      roles: ['ADMIN', 'DOCTOR', 'NURSE', 'RECEPTIONIST']\r\n    },\r\n    {\r\n      title: 'Appointments',\r\n      href: '/appointments',\r\n      icon: '📅',\r\n      roles: ['ADMIN', 'DOCTOR', 'NURSE', 'RECEPTIONIST']\r\n    },\r\n    {\r\n      title: 'Medical Records',\r\n      href: '/medical-records',\r\n      icon: '📋',\r\n      roles: ['ADMIN', 'DOCTOR', 'NURSE']\r\n    },\r\n    {\r\n      title: 'Prescriptions',\r\n      href: '/prescriptions',\r\n      icon: '💊',\r\n      roles: ['ADMIN', 'DOCTOR', 'PHARMACIST']\r\n    },\r\n    {\r\n      title: 'Lab Tests',\r\n      href: '/lab-tests',\r\n      icon: '🧪',\r\n      roles: ['ADMIN', 'DOCTOR', 'LAB_TECHNICIAN']\r\n    },\r\n    {\r\n      title: 'Radiology',\r\n      href: '/radiology',\r\n      icon: '🩻',\r\n      roles: ['ADMIN', 'DOCTOR', 'RADIOLOGIST']\r\n    },\r\n    {\r\n      title: 'Telemedicine',\r\n      href: '/telemedicine',\r\n      icon: '💻',\r\n      roles: ['ADMIN', 'DOCTOR'],\r\n      badge: 'New'\r\n    },\r\n    {\r\n      title: 'Billing',\r\n      href: '/billing',\r\n      icon: '💰',\r\n      roles: ['ADMIN', 'ACCOUNTANT', 'RECEPTIONIST']\r\n    },\r\n    {\r\n      title: 'Staff',\r\n      href: '/staff',\r\n      icon: '👨‍⚕️',\r\n      roles: ['ADMIN', 'HOSPITAL_ADMIN']\r\n    },\r\n    {\r\n      title: 'Reports',\r\n      href: '/reports',\r\n      icon: '📈',\r\n      roles: ['ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR']\r\n    },\r\n    {\r\n      title: 'Settings',\r\n      href: '/settings',\r\n      icon: '⚙️',\r\n      roles: ['ADMIN', 'HOSPITAL_ADMIN']\r\n    }\r\n  ];\r\n\r\n  const filteredMenuItems = menuItems.filter(item => \r\n    item.roles.includes(currentUser.role)\r\n  );\r\n\r\n  const isActive = (href: string) => pathname.startsWith(href);\r\n\r\n  // Handle responsive design\r\n  useEffect(() => {\r\n    const checkIfMobile = () => {\r\n      const mobile = window.innerWidth < 768;\r\n      setIsMobile(mobile);\r\n      if (!mobile) {\r\n        setSidebarOpen(true);\r\n      } else {\r\n        setSidebarOpen(false);\r\n      }\r\n    };\r\n    \r\n    checkIfMobile();\r\n    window.addEventListener('resize', checkIfMobile);\r\n    return () => window.removeEventListener('resize', checkIfMobile);\r\n  }, []);\r\n\r\n  // Close sidebar when clicking outside on mobile\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (isMobile && sidebarOpen) {\r\n        const sidebar = document.getElementById('sidebar');\r\n        const menuButton = document.getElementById('mobile-menu-button');\r\n        \r\n        if (sidebar && !sidebar.contains(event.target as Node) && \r\n            menuButton && !menuButton.contains(event.target as Node)) {\r\n          setSidebarOpen(false);\r\n        }\r\n      }\r\n    };\r\n    \r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, [isMobile, sidebarOpen]);\r\n\r\n  // Close dropdowns when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      const userMenu = document.getElementById('user-menu');\r\n      const notificationMenu = document.getElementById('notification-menu');\r\n      \r\n      if (userMenu && !userMenu.contains(event.target as Node)) {\r\n        setUserMenuOpen(false);\r\n      }\r\n      \r\n      if (notificationMenu && !notificationMenu.contains(event.target as Node)) {\r\n        setShowNotifications(false);\r\n      }\r\n    };\r\n    \r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  const sidebarWidth = isMobile ? '100%' : (sidebarOpen ? '280px' : '80px');\r\n  const mainMarginLeft = isMobile ? '0' : (sidebarOpen ? '280px' : '80px');\r\n\r\n  return (\r\n    <div style={{ display: 'flex', minHeight: '100vh', background: '#f8fafc' }}>\r\n      {/* Mobile Overlay */}\r\n      {isMobile && sidebarOpen && (\r\n        <div style={{\r\n          position: 'fixed',\r\n          top: 0,\r\n          left: 0,\r\n          right: 0,\r\n          bottom: 0,\r\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n          zIndex: 999,\r\n        }} />\r\n      )}\r\n\r\n      {/* Sidebar */}\r\n      <div \r\n        id=\"sidebar\"\r\n        style={{\r\n          width: sidebarWidth,\r\n          maxWidth: isMobile ? '320px' : 'none',\r\n          transform: isMobile && !sidebarOpen ? 'translateX(-100%)' : 'translateX(0)',\r\n          transition: 'all 0.3s ease',\r\n          background: 'linear-gradient(180deg, #667eea 0%, #764ba2 100%)',\r\n          color: 'white',\r\n          position: isMobile ? 'fixed' : 'fixed',\r\n          height: '100vh',\r\n          zIndex: 1000,\r\n          overflowY: 'auto',\r\n          boxShadow: isMobile ? '2px 0 10px rgba(0,0,0,0.1)' : 'none'\r\n        }}\r\n      >\r\n        {/* Logo */}\r\n        <div style={{\r\n          padding: '1.5rem',\r\n          borderBottom: '1px solid rgba(255,255,255,0.1)',\r\n          textAlign: 'center'\r\n        }}>\r\n          <Link href=\"/dashboard\" style={{ \r\n            color: 'white', \r\n            textDecoration: 'none',\r\n            fontSize: (sidebarOpen && !isMobile) ? '1.5rem' : '1rem',\r\n            fontWeight: 'bold'\r\n          }}>\r\n            {(sidebarOpen && !isMobile) ? 'HMS SAAS' : 'HMS'}\r\n          </Link>\r\n        </div>\r\n\r\n        {/* Desktop Toggle Button */}\r\n        {!isMobile && (\r\n          <button\r\n            onClick={() => setSidebarOpen(!sidebarOpen)}\r\n            style={{\r\n              position: 'absolute',\r\n              right: '-12px',\r\n              top: '100px',\r\n              background: 'white',\r\n              color: '#667eea',\r\n              border: 'none',\r\n              borderRadius: '50%',\r\n              width: '24px',\r\n              height: '24px',\r\n              cursor: 'pointer',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              fontSize: '12px',\r\n              boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\r\n              zIndex: 1001\r\n            }}\r\n          >\r\n            {sidebarOpen ? '◀' : '▶'}\r\n          </button>\r\n        )}\r\n\r\n        {/* Navigation */}\r\n        <nav style={{ padding: '1rem 0' }}>\r\n          {filteredMenuItems.map((item) => (\r\n            <Link\r\n              key={item.href}\r\n              href={item.href}\r\n              onClick={() => isMobile && setSidebarOpen(false)}\r\n              style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: (sidebarOpen || isMobile) ? 'flex-start' : 'center',\r\n                padding: '0.875rem 1.5rem',\r\n                color: isActive(item.href) ? 'white' : 'rgba(255,255,255,0.8)',\r\n                textDecoration: 'none',\r\n                background: isActive(item.href) ? 'rgba(255,255,255,0.1)' : 'transparent',\r\n                borderRight: isActive(item.href) ? '4px solid white' : 'none',\r\n                transition: 'all 0.2s ease',\r\n                position: 'relative'\r\n              }}\r\n            >\r\n              <span style={{ \r\n                fontSize: '1.2rem', \r\n                marginRight: (sidebarOpen || isMobile) ? '0.75rem' : '0' \r\n              }}>\r\n                {item.icon}\r\n              </span>\r\n              \r\n              {(sidebarOpen || isMobile) && (\r\n                <>\r\n                  <span style={{ \r\n                    fontSize: '0.95rem', \r\n                    fontWeight: '500',\r\n                    flex: 1\r\n                  }}>\r\n                    {item.title}\r\n                  </span>\r\n                  {item.badge && (\r\n                    <span style={{\r\n                      fontSize: '0.75rem',\r\n                      padding: '0.25rem 0.5rem',\r\n                      backgroundColor: '#ef4444',\r\n                      borderRadius: '12px',\r\n                      marginLeft: '0.5rem'\r\n                    }}>\r\n                      {item.badge}\r\n                    </span>\r\n                  )}\r\n                </>\r\n              )}\r\n            </Link>\r\n          ))}\r\n        </nav>\r\n\r\n        {/* User Profile */}\r\n        {(sidebarOpen || isMobile) && (\r\n          <div style={{\r\n            position: 'absolute',\r\n            bottom: '0',\r\n            width: '100%',\r\n            padding: '1rem',\r\n            borderTop: '1px solid rgba(255,255,255,0.1)',\r\n            background: 'rgba(0,0,0,0.1)'\r\n          }}>\r\n            <Link href=\"/profile\" style={{ \r\n              color: 'inherit', \r\n              textDecoration: 'none',\r\n              display: 'flex',\r\n              alignItems: 'center'\r\n            }}>\r\n              <div style={{\r\n                width: '40px',\r\n                height: '40px',\r\n                borderRadius: '50%',\r\n                background: 'rgba(255,255,255,0.2)',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                marginRight: '0.75rem',\r\n                fontSize: '1.2rem'\r\n              }}>\r\n                {currentUser.avatar}\r\n              </div>\r\n              <div>\r\n                <div style={{ fontSize: '0.9rem', fontWeight: '600' }}>\r\n                  {currentUser.name}\r\n                </div>\r\n                <div style={{ fontSize: '0.75rem', opacity: 0.8 }}>\r\n                  {currentUser.role.replace('_', ' ')}\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div style={{\r\n        marginLeft: mainMarginLeft,\r\n        transition: 'margin-left 0.3s ease',\r\n        flex: 1,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        minHeight: '100vh',\r\n        width: `calc(100% - ${mainMarginLeft})`\r\n      }}>\r\n        {/* Header */}\r\n        <header style={{\r\n          background: 'white',\r\n          padding: isMobile ? '1rem' : '1rem 2rem',\r\n          borderBottom: '1px solid #e2e8f0',\r\n          boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\r\n          position: 'sticky',\r\n          top: 0,\r\n          zIndex: 100\r\n        }}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n              {/* Mobile Menu Button */}\r\n              {isMobile && (\r\n                <button\r\n                  id=\"mobile-menu-button\"\r\n                  onClick={() => setSidebarOpen(!sidebarOpen)}\r\n                  style={{\r\n                    marginRight: '1rem',\r\n                    padding: '0.5rem',\r\n                    background: 'none',\r\n                    border: 'none',\r\n                    fontSize: '1.5rem',\r\n                    cursor: 'pointer',\r\n                    color: '#667eea'\r\n                  }}\r\n                >\r\n                  ☰\r\n                </button>\r\n              )}\r\n              \r\n              <div>\r\n                <h1 style={{ \r\n                  fontSize: isMobile ? '1.25rem' : '1.5rem', \r\n                  fontWeight: '600', \r\n                  color: '#1f2937',\r\n                  margin: 0\r\n                }}>\r\n                  {isMobile ? 'HMS' : 'Hospital Management System'}\r\n                </h1>\r\n              </div>\r\n            </div>\r\n            \r\n            <div style={{ display: 'flex', alignItems: 'center', gap: isMobile ? '0.5rem' : '1rem' }}>\r\n              {/* Search (Desktop only) */}\r\n              {!isMobile && (\r\n                <div style={{\r\n                  position: 'relative',\r\n                  display: 'flex',\r\n                  alignItems: 'center'\r\n                }}>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search...\"\r\n                    style={{\r\n                      padding: '0.5rem 0.75rem 0.5rem 2rem',\r\n                      border: '1px solid #e2e8f0',\r\n                      borderRadius: '6px',\r\n                      fontSize: '0.875rem',\r\n                      width: '200px',\r\n                      outline: 'none'\r\n                    }}\r\n                  />\r\n                  <span style={{\r\n                    position: 'absolute',\r\n                    left: '0.75rem',\r\n                    color: '#6b7280'\r\n                  }}>\r\n                    🔍\r\n                  </span>\r\n                </div>\r\n              )}\r\n\r\n              {/* Notifications */}\r\n              <div style={{ position: 'relative' }} id=\"notification-menu\">\r\n                <button\r\n                  onClick={() => setShowNotifications(!showNotifications)}\r\n                  style={{\r\n                    padding: '0.5rem',\r\n                    borderRadius: '8px',\r\n                    background: '#f3f4f6',\r\n                    border: 'none',\r\n                    cursor: 'pointer',\r\n                    fontSize: '1.2rem',\r\n                    position: 'relative'\r\n                  }}\r\n                >\r\n                  🔔\r\n                  {notifications.length > 0 && (\r\n                    <span style={{\r\n                      position: 'absolute',\r\n                      top: '0.25rem',\r\n                      right: '0.25rem',\r\n                      backgroundColor: '#ef4444',\r\n                      color: 'white',\r\n                      borderRadius: '50%',\r\n                      width: '0.75rem',\r\n                      height: '0.75rem',\r\n                      fontSize: '0.625rem',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center'\r\n                    }}>\r\n                      {notifications.length}\r\n                    </span>\r\n                  )}\r\n                </button>\r\n\r\n                {/* Notification Dropdown */}\r\n                {showNotifications && (\r\n                  <div style={{\r\n                    position: 'absolute',\r\n                    top: '100%',\r\n                    right: 0,\r\n                    marginTop: '0.5rem',\r\n                    width: isMobile ? '280px' : '320px',\r\n                    backgroundColor: 'white',\r\n                    border: '1px solid #e2e8f0',\r\n                    borderRadius: '8px',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                    zIndex: 1000,\r\n                    maxHeight: '400px',\r\n                    overflowY: 'auto'\r\n                  }}>\r\n                    <div style={{\r\n                      padding: '1rem',\r\n                      borderBottom: '1px solid #e2e8f0',\r\n                      fontWeight: '600',\r\n                      color: '#1f2937'\r\n                    }}>\r\n                      Notifications\r\n                    </div>\r\n                    \r\n                    {notifications.map(notification => (\r\n                      <div key={notification.id} style={{\r\n                        padding: '0.75rem 1rem',\r\n                        borderBottom: '1px solid #f3f4f6',\r\n                        display: 'flex',\r\n                        alignItems: 'flex-start',\r\n                        gap: '0.75rem',\r\n                        cursor: 'pointer',\r\n                        transition: 'background 0.2s ease'\r\n                      }}\r\n                      onMouseEnter={(e: React.MouseEvent<HTMLDivElement>) => (e.currentTarget.style.background = '#f8fafc')}\r\n                      onMouseLeave={(e: React.MouseEvent<HTMLDivElement>) => (e.currentTarget.style.background = 'white')}>\r\n                        <div style={{\r\n                          width: '8px',\r\n                          height: '8px',\r\n                          borderRadius: '50%',\r\n                          backgroundColor: notification.type === 'urgent' ? '#ef4444' : \r\n                                         notification.type === 'success' ? '#10b981' : '#3b82f6',\r\n                          marginTop: '0.25rem'\r\n                        }} />\r\n                        <div style={{ flex: 1 }}>\r\n                          <div style={{ fontSize: '0.875rem', color: '#1f2937', marginBottom: '0.25rem' }}>\r\n                            {notification.title}\r\n                          </div>\r\n                          <div style={{ fontSize: '0.75rem', color: '#6b7280' }}>\r\n                            {notification.time}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                    \r\n                    <div style={{\r\n                      padding: '0.75rem 1rem',\r\n                      textAlign: 'center'\r\n                    }}>\r\n                      <Link href=\"/notifications\" style={{\r\n                        color: '#667eea',\r\n                        textDecoration: 'none',\r\n                        fontSize: '0.875rem',\r\n                        fontWeight: '500'\r\n                      }}>\r\n                        View All Notifications\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* User Menu */}\r\n              <div style={{ position: 'relative' }} id=\"user-menu\">\r\n                <button\r\n                  onClick={() => setUserMenuOpen(!userMenuOpen)}\r\n                  style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '0.5rem',\r\n                    background: 'none',\r\n                    border: 'none',\r\n                    cursor: 'pointer',\r\n                    padding: '0.25rem',\r\n                    borderRadius: '8px'\r\n                  }}\r\n                >\r\n                  <div style={{\r\n                    width: '32px',\r\n                    height: '32px',\r\n                    borderRadius: '50%',\r\n                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    color: 'white',\r\n                    fontSize: '0.9rem'\r\n                  }}>\r\n                    {currentUser.avatar}\r\n                  </div>\r\n                  {!isMobile && (\r\n                    <span style={{ fontSize: '0.9rem', fontWeight: '500', color: '#1f2937' }}>\r\n                      {currentUser.name}\r\n                    </span>\r\n                  )}\r\n                </button>\r\n\r\n                {/* User Dropdown */}\r\n                {userMenuOpen && (\r\n                  <div style={{\r\n                    position: 'absolute',\r\n                    top: '100%',\r\n                    right: 0,\r\n                    marginTop: '0.5rem',\r\n                    width: '200px',\r\n                    backgroundColor: 'white',\r\n                    border: '1px solid #e2e8f0',\r\n                    borderRadius: '8px',\r\n                    boxShadow: '0 10px 25px rgba(0,0,0,0.1)',\r\n                    zIndex: 1000\r\n                  }}>\r\n                    <div style={{\r\n                      padding: '0.75rem 1rem',\r\n                      borderBottom: '1px solid #e2e8f0'\r\n                    }}>\r\n                      <div style={{ fontWeight: '600', fontSize: '0.875rem', color: '#1f2937' }}>\r\n                        {currentUser.name}\r\n                      </div>\r\n                      <div style={{ fontSize: '0.75rem', color: '#6b7280' }}>\r\n                        {currentUser.email}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div style={{ padding: '0.5rem 0' }}>\r\n                      <Link href=\"/profile\" style={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '0.75rem',\r\n                        padding: '0.5rem 1rem',\r\n                        color: '#374151',\r\n                        textDecoration: 'none',\r\n                        fontSize: '0.875rem',\r\n                        transition: 'background 0.2s ease'\r\n                      }}\r\n                      onMouseEnter={(e: React.MouseEvent<HTMLAnchorElement>) => (e.currentTarget.style.background = '#f8fafc')}\r\n                      onMouseLeave={(e: React.MouseEvent<HTMLAnchorElement>) => (e.currentTarget.style.background = 'white')}>\r\n                        👤 Profile Settings\r\n                      </Link>\r\n                      \r\n                      <Link href=\"/help\" style={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '0.75rem',\r\n                        padding: '0.5rem 1rem',\r\n                        color: '#374151',\r\n                        textDecoration: 'none',\r\n                        fontSize: '0.875rem',\r\n                        transition: 'background 0.2s ease'\r\n                      }}\r\n                      onMouseEnter={(e: React.MouseEvent<HTMLAnchorElement>) => (e.currentTarget.style.background = '#f8fafc')}\r\n                      onMouseLeave={(e: React.MouseEvent<HTMLAnchorElement>) => (e.currentTarget.style.background = 'white')}>\r\n                        ❓ Help & Support\r\n                      </Link>\r\n                      \r\n                      <hr style={{ margin: '0.5rem 0', border: 'none', borderTop: '1px solid #e2e8f0' }} />\r\n                      \r\n                      <Link href=\"/auth/login\" style={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '0.75rem',\r\n                        padding: '0.5rem 1rem',\r\n                        color: '#dc2626',\r\n                        textDecoration: 'none',\r\n                        fontSize: '0.875rem',\r\n                        transition: 'background 0.2s ease'\r\n                      }}\r\n                      onMouseEnter={(e: React.MouseEvent<HTMLAnchorElement>) => (e.currentTarget.style.background = '#fef2f2')}\r\n                      onMouseLeave={(e: React.MouseEvent<HTMLAnchorElement>) => (e.currentTarget.style.background = 'white')}>\r\n                        🚪 Sign Out\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </header>\r\n\r\n        {/* Page Content */}\r\n        <main style={{ \r\n          flex: 1, \r\n          padding: isMobile ? '1rem' : '2rem',\r\n          overflow: 'auto'\r\n        }}>\r\n          {children}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResponsiveLayout;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\components\\forms\\FormComponents.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 591,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 591,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\nimport React, { useState } from 'react';\r\nimport Input from '../ui/Input';\r\nimport Button from '../ui/Button';\r\nimport Card from '../ui/Card';\r\n\r\n// Form validation utilities\r\nexport const validators = {\r\n  required: (value: any) => {\r\n    if (value === null || value === undefined || value === '') {\r\n      return 'This field is required';\r\n    }\r\n    return null;\r\n  },\r\n\r\n  email: (value: string) => {\r\n    if (!value) return null;\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(value) ? null : 'Please enter a valid email address';\r\n  },\r\n\r\n  phone: (value: string) => {\r\n    if (!value) return null;\r\n    const phoneRegex = /^[\\+]?[\\d\\s\\-\\(\\)]{10,}$/;\r\n    return phoneRegex.test(value) ? null : 'Please enter a valid phone number';\r\n  },\r\n\r\n  minLength: (min: number) => (value: string) => {\r\n    if (!value) return null;\r\n    return value.length >= min ? null : `Must be at least ${min} characters long`;\r\n  },\r\n\r\n  maxLength: (max: number) => (value: string) => {\r\n    if (!value) return null;\r\n    return value.length <= max ? null : `Must be no more than ${max} characters long`;\r\n  },\r\n\r\n  numeric: (value: string) => {\r\n    if (!value) return null;\r\n    return /^\\d+$/.test(value) ? null : 'Must contain only numbers';\r\n  },\r\n\r\n  alphanumeric: (value: string) => {\r\n    if (!value) return null;\r\n    return /^[a-zA-Z0-9]+$/.test(value) ? null : 'Must contain only letters and numbers';\r\n  },\r\n\r\n  date: (value: string) => {\r\n    if (!value) return null;\r\n    const date = new Date(value);\r\n    return !isNaN(date.getTime()) ? null : 'Please enter a valid date';\r\n  },\r\n\r\n  futureDate: (value: string) => {\r\n    if (!value) return null;\r\n    const date = new Date(value);\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    return date >= today ? null : 'Date must be in the future';\r\n  },\r\n\r\n  pastDate: (value: string) => {\r\n    if (!value) return null;\r\n    const date = new Date(value);\r\n    const today = new Date();\r\n    return date < today ? null : 'Date must be in the past';\r\n  },\r\n\r\n  match: (otherValue: string, fieldName: string) => (value: string) => {\r\n    return value === otherValue ? null : `Must match ${fieldName}`;\r\n  },\r\n\r\n  range: (min: number, max: number) => (value: string) => {\r\n    if (!value) return null;\r\n    const num = parseFloat(value);\r\n    if (isNaN(num)) return 'Must be a valid number';\r\n    return (num >= min && num <= max) ? null : `Must be between ${min} and ${max}`;\r\n  }\r\n};\r\n\r\n// Form field configuration interface\r\nexport interface FieldConfig {\r\n  name: string;\r\n  title: string;\r\n  type: 'text' | 'email' | 'password' | 'tel' | 'number' | 'date' | 'select' | 'textarea' | 'checkbox' | 'radio';\r\n  placeholder?: string;\r\n  validators?: Array<(value: any) => string | null>;\r\n  options?: Array<{ value: string; title: string }>;\r\n  rows?: number;\r\n  disabled?: boolean;\r\n  required?: boolean;\r\n  icon?: string;\r\n  helpText?: string;\r\n}\r\n\r\n// Dynamic form component\r\ninterface DynamicFormProps {\r\n  title?: string;\r\n  description?: string;\r\n  fields: FieldConfig[];\r\n  initialValues?: Record<string, any>;\r\n  onSubmit: (values: Record<string, any>) => Promise<void> | void;\r\n  onCancel?: () => void;\r\n  submitLabel?: string;\r\n  isLoading?: boolean;\r\n  layout?: 'single' | 'two-column';\r\n}\r\n\r\nexport const DynamicForm: React.FC<DynamicFormProps> = ({\r\n  title,\r\n  description,\r\n  fields,\r\n  initialValues = {},\r\n  onSubmit,\r\n  onCancel,\r\n  submitLabel = 'Submit',\r\n  isLoading = false,\r\n  layout = 'single'\r\n}) => {\r\n  const [values, setValues] = useState<Record<string, any>>(\r\n    fields.reduce((acc, field) => ({\r\n      ...acc,\r\n      [field.name]: initialValues[field.name] || (field.type === 'checkbox' ? false : '')\r\n    }), {})\r\n  );\r\n\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  const [touched, setTouched] = useState<Record<string, boolean>>({});\r\n\r\n  const validateField = (fieldName: string, value: any): string | null => {\r\n    const field = fields.find(f => f.name === fieldName);\r\n    if (!field?.validators) return null;\r\n\r\n    for (const validator of field.validators) {\r\n      const error = validator(value);\r\n      if (error) return error;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n    let isValid = true;\r\n\r\n    fields.forEach(field => {\r\n      const error = validateField(field.name, values[field.name]);\r\n      if (error) {\r\n        newErrors[field.name] = error;\r\n        isValid = false;\r\n      }\r\n    });\r\n\r\n    setErrors(newErrors);\r\n    return isValid;\r\n  };\r\n\r\n  const handleInputChange = (fieldName: string) => (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\r\n    const value = e.target.type === 'checkbox' ? (e.target as HTMLInputElement).checked : e.target.value;\r\n    \r\n    setValues(prev => ({\r\n      ...prev,\r\n      [fieldName]: value\r\n    }));\r\n\r\n    // Clear error when user starts typing\r\n    if (errors[fieldName] && touched[fieldName]) {\r\n      const error = validateField(fieldName, value);\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        [fieldName]: error || ''\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleBlur = (fieldName: string) => () => {\r\n    setTouched(prev => ({ ...prev, [fieldName]: true }));\r\n    const error = validateField(fieldName, values[fieldName]);\r\n    setErrors(prev => ({\r\n      ...prev,\r\n      [fieldName]: error || ''\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    // Mark all fields as touched\r\n    const allTouched = fields.reduce((acc, field) => ({ ...acc, [field.name]: true }), {});\r\n    setTouched(allTouched);\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await onSubmit(values);\r\n    } catch (error) {\r\n      console.error('Form submission error:', error);\r\n    }\r\n  };\r\n\r\n  const renderField = (field: FieldConfig) => {\r\n    const fieldError = touched[field.name] ? errors[field.name] : undefined;\r\n    const fieldValue = values[field.name] || '';\r\n\r\n    switch (field.type) {\r\n      case 'select':\r\n        return (\r\n          <div key={field.name} style={{ marginBottom: '1.5rem' }}>\r\n            <label style={{\r\n              display: 'block',\r\n              marginBottom: '0.5rem',\r\n              fontSize: '0.875rem',\r\n              fontWeight: '600',\r\n              color: '#374151'\r\n            }}>\r\n              {field.label} {field.required && <span style={{ color: '#ef4444' }}>*</span>}\r\n            </label>\r\n            <select\r\n              value={fieldValue}\r\n              onChange={handleInputChange(field.name)}\r\n              onBlur={handleBlur(field.name)}\r\n              disabled={field.disabled}\r\n              style={{\r\n                width: '100%',\r\n                padding: '0.75rem 1rem',\r\n                border: `1px solid ${fieldError ? '#ef4444' : '#d1d5db'}`,\r\n                borderRadius: '8px',\r\n                fontSize: '1rem',\r\n                backgroundColor: field.disabled ? '#f9fafb' : 'white',\r\n                color: '#374151',\r\n                outline: 'none',\r\n                transition: 'border-color 0.2s ease'\r\n              }}\r\n            >\r\n              <option value=\"\">Select {field.label}</option>\r\n              {field.options?.map(option => (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {fieldError && (\r\n              <p style={{ margin: '0.25rem 0 0 0', fontSize: '0.875rem', color: '#ef4444' }}>\r\n                {fieldError}\r\n              </p>\r\n            )}\r\n            {field.helpText && !fieldError && (\r\n              <p style={{ margin: '0.25rem 0 0 0', fontSize: '0.75rem', color: '#6b7280' }}>\r\n                {field.helpText}\r\n              </p>\r\n            )}\r\n          </div>\r\n        );\r\n\r\n      case 'textarea':\r\n        return (\r\n          <div key={field.name} style={{ marginBottom: '1.5rem' }}>\r\n            <label style={{\r\n              display: 'block',\r\n              marginBottom: '0.5rem',\r\n              fontSize: '0.875rem',\r\n              fontWeight: '600',\r\n              color: '#374151'\r\n            }}>\r\n              {field.label} {field.required && <span style={{ color: '#ef4444' }}>*</span>}\r\n            </label>\r\n            <textarea\r\n              value={fieldValue}\r\n              onChange={handleInputChange(field.name)}\r\n              onBlur={handleBlur(field.name)}\r\n              placeholder={field.placeholder}\r\n              disabled={field.disabled}\r\n              rows={field.rows || 3}\r\n              style={{\r\n                width: '100%',\r\n                padding: '0.75rem 1rem',\r\n                border: `1px solid ${fieldError ? '#ef4444' : '#d1d5db'}`,\r\n                borderRadius: '8px',\r\n                fontSize: '1rem',\r\n                backgroundColor: field.disabled ? '#f9fafb' : 'white',\r\n                color: '#374151',\r\n                outline: 'none',\r\n                transition: 'border-color 0.2s ease',\r\n                resize: 'vertical'\r\n              }}\r\n            />\r\n            {fieldError && (\r\n              <p style={{ margin: '0.25rem 0 0 0', fontSize: '0.875rem', color: '#ef4444' }}>\r\n                {fieldError}\r\n              </p>\r\n            )}\r\n            {field.helpText && !fieldError && (\r\n              <p style={{ margin: '0.25rem 0 0 0', fontSize: '0.75rem', color: '#6b7280' }}>\r\n                {field.helpText}\r\n              </p>\r\n            )}\r\n          </div>\r\n        );\r\n\r\n      case 'checkbox':\r\n        return (\r\n          <div key={field.name} style={{ marginBottom: '1.5rem' }}>\r\n            <label style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              cursor: 'pointer',\r\n              fontSize: '0.875rem',\r\n              color: '#374151'\r\n            }}>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={fieldValue}\r\n                onChange={handleInputChange(field.name)}\r\n                onBlur={handleBlur(field.name)}\r\n                disabled={field.disabled}\r\n                style={{\r\n                  marginRight: '0.75rem',\r\n                  width: '1rem',\r\n                  height: '1rem'\r\n                }}\r\n              />\r\n              {field.label} {field.required && <span style={{ color: '#ef4444' }}>*</span>}\r\n            </label>\r\n            {fieldError && (\r\n              <p style={{ margin: '0.25rem 0 0 0', fontSize: '0.875rem', color: '#ef4444' }}>\r\n                {fieldError}\r\n              </p>\r\n            )}\r\n            {field.helpText && !fieldError && (\r\n              <p style={{ margin: '0.25rem 0 0 0', fontSize: '0.75rem', color: '#6b7280' }}>\r\n                {field.helpText}\r\n              </p>\r\n            )}\r\n          </div>\r\n        );\r\n\r\n      case 'radio':\r\n        return (\r\n          <div key={field.name} style={{ marginBottom: '1.5rem' }}>\r\n            <label style={{\r\n              display: 'block',\r\n              marginBottom: '0.5rem',\r\n              fontSize: '0.875rem',\r\n              fontWeight: '600',\r\n              color: '#374151'\r\n            }}>\r\n              {field.label} {field.required && <span style={{ color: '#ef4444' }}>*</span>}\r\n            </label>\r\n            <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>\r\n              {field.options?.map(option => (\r\n                <label key={option.value} style={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  cursor: 'pointer',\r\n                  fontSize: '0.875rem',\r\n                  color: '#374151'\r\n                }}>\r\n                  <input\r\n                    type=\"radio\"\r\n                    name={field.name}\r\n                    value={option.value}\r\n                    checked={fieldValue === option.value}\r\n                    onChange={handleInputChange(field.name)}\r\n                    onBlur={handleBlur(field.name)}\r\n                    disabled={field.disabled}\r\n                    style={{ marginRight: '0.5rem' }}\r\n                  />\r\n                  {option.label}\r\n                </label>\r\n              ))}\r\n            </div>\r\n            {fieldError && (\r\n              <p style={{ margin: '0.25rem 0 0 0', fontSize: '0.875rem', color: '#ef4444' }}>\r\n                {fieldError}\r\n              </p>\r\n            )}\r\n            {field.helpText && !fieldError && (\r\n              <p style={{ margin: '0.25rem 0 0 0', fontSize: '0.75rem', color: '#6b7280' }}>\r\n                {field.helpText}\r\n              </p>\r\n            )}\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return (\r\n          <div key={field.name} style={{ marginBottom: '1.5rem' }}>\r\n            <Input\r\n              type={field.type}\r\n              label={field.label}\r\n              placeholder={field.placeholder}\r\n              value={fieldValue}\r\n              onChange={handleInputChange(field.name)}\r\n              onBlur={handleBlur(field.name)}\r\n              error={fieldError}\r\n              disabled={field.disabled}\r\n              required={field.required}\r\n              icon={field.icon}\r\n            />\r\n            {field.helpText && !fieldError && (\r\n              <p style={{ margin: '0.25rem 0 0 0', fontSize: '0.75rem', color: '#6b7280' }}>\r\n                {field.helpText}\r\n              </p>\r\n            )}\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <form onSubmit={handleSubmit}>\r\n        {title && (\r\n          <div style={{ marginBottom: '2rem' }}>\r\n            <h2 style={{\r\n              fontSize: '1.5rem',\r\n              fontWeight: '600',\r\n              color: '#1f2937',\r\n              marginBottom: '0.5rem'\r\n            }}>\r\n              {title}\r\n            </h2>\r\n            {description && (\r\n              <p style={{\r\n                fontSize: '1rem',\r\n                color: '#6b7280'\r\n              }}>\r\n                {description}\r\n              </p>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        <div style={{\r\n          display: 'grid',\r\n          gridTemplateColumns: layout === 'two-column' ? 'repeat(auto-fit, minmax(300px, 1fr))' : '1fr',\r\n          gap: '1.5rem'\r\n        }}>\r\n          {fields.map(renderField)}\r\n        </div>\r\n\r\n        <div style={{\r\n          display: 'flex',\r\n          gap: '1rem',\r\n          marginTop: '2rem',\r\n          justifyContent: 'flex-end'\r\n        }}>\r\n          {onCancel && (\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"outline\"\r\n              onClick={onCancel}\r\n              disabled={isLoading}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          )}\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={isLoading}\r\n          >\r\n            {isLoading ? 'Loading...' : submitLabel}\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Example usage component for Patient Registration\r\nexport const PatientRegistrationForm: React.FC = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const patientFields: FieldConfig[] = [\r\n    {\r\n      name: 'firstName',\r\n      title: 'First Name',\r\n      type: 'text',\r\n      placeholder: 'Enter first name',\r\n      validators: [validators.required, validators.minLength(2)],\r\n      required: true,\r\n      icon: '👤'\r\n    },\r\n    {\r\n      name: 'lastName',\r\n      title: 'Last Name',\r\n      type: 'text',\r\n      placeholder: 'Enter last name',\r\n      validators: [validators.required, validators.minLength(2)],\r\n      required: true,\r\n      icon: '👤'\r\n    },\r\n    {\r\n      name: 'email',\r\n      title: 'Email',\r\n      type: 'email',\r\n      placeholder: 'Enter email address',\r\n      validators: [validators.required, validators.email],\r\n      required: true,\r\n      icon: '📧'\r\n    },\r\n    {\r\n      name: 'phone',\r\n      title: 'Phone Number',\r\n      type: 'tel',\r\n      placeholder: 'Enter phone number',\r\n      validators: [validators.required, validators.phone],\r\n      required: true,\r\n      icon: '📞'\r\n    },\r\n    {\r\n      name: 'dateOfBirth',\r\n      title: 'Date of Birth',\r\n      type: 'date',\r\n      validators: [validators.required, validators.pastDate],\r\n      required: true,\r\n      icon: '📅'\r\n    },\r\n    {\r\n      name: 'gender',\r\n      title: 'Gender',\r\n      type: 'select',\r\n      options: [\r\n        { value: 'MALE', title: 'Male' },\r\n        { value: 'FEMALE', title: 'Female' },\r\n        { value: 'OTHER', title: 'Other' }\r\n      ],\r\n      validators: [validators.required],\r\n      required: true\r\n    },\r\n    {\r\n      name: 'address',\r\n      title: 'Address',\r\n      type: 'textarea',\r\n      placeholder: 'Enter full address',\r\n      rows: 3,\r\n      validators: [validators.required],\r\n      required: true\r\n    },\r\n    {\r\n      name: 'emergencyContactName',\r\n      title: 'Emergency Contact Name',\r\n      type: 'text',\r\n      placeholder: 'Enter emergency contact name',\r\n      validators: [validators.required],\r\n      required: true,\r\n      icon: '🚨'\r\n    },\r\n    {\r\n      name: 'emergencyContactPhone',\r\n      title: 'Emergency Contact Phone',\r\n      type: 'tel',\r\n      placeholder: 'Enter emergency contact phone',\r\n      validators: [validators.required, validators.phone],\r\n      required: true,\r\n      icon: '📞'\r\n    },\r\n    {\r\n      name: 'insuranceNumber',\r\n      title: 'Insurance Number',\r\n      type: 'text',\r\n      placeholder: 'Enter insurance number (optional)',\r\n      validators: [validators.alphanumeric],\r\n      helpText: 'Optional: Enter health insurance number if available'\r\n    },\r\n    {\r\n      name: 'allergies',\r\n      title: 'Known Allergies',\r\n      type: 'textarea',\r\n      placeholder: 'List any known allergies',\r\n      rows: 2,\r\n      helpText: 'Please list any known allergies or write \"None\"'\r\n    },\r\n    {\r\n      name: 'consentToTreatment',\r\n      title: 'I consent to medical treatment',\r\n      type: 'checkbox',\r\n      validators: [validators.required],\r\n      required: true\r\n    }\r\n  ];\r\n\r\n  const handleSubmit = async (values: Record<string, any>) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      console.log('Patient registered:', values);\r\n      alert('Patient registered successfully!');\r\n    } catch (error) {\r\n      alert('Failed to register patient. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DynamicForm\r\n      title=\"Patient Registration\"\r\n      description=\"Please fill in all required information to register a new patient\"\r\n      fields={patientFields}\r\n      onSubmit={handleSubmit}\r\n      submitLabel=\"Register Patient\"\r\n      isLoading={isLoading}\r\n      layout=\"two-column\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default DynamicForm;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\components\\ui\\Button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\components\\ui\\Card.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'hoverStyles' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 79,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\n\r\ninterface CardProps {\r\n  children: React.ReactNode;\r\n  title?: string;\r\n  subtitle?: string;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n  variant?: 'default' | 'bordered' | 'elevated' | 'flat';\r\n  padding?: 'none' | 'sm' | 'md' | 'lg';\r\n  onClick?: () => void;\r\n  header?: React.ReactNode;\r\n  footer?: React.ReactNode;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({\r\n  children,\r\n  title,\r\n  subtitle,\r\n  className = '',\r\n  style = {},\r\n  variant = 'default',\r\n  padding = 'md',\r\n  onClick,\r\n  header,\r\n  footer\r\n}) => {\r\n  const getVariantStyles = () => {\r\n    switch (variant) {\r\n      case 'bordered':\r\n        return {\r\n          border: '1px solid #e2e8f0',\r\n          boxShadow: 'none'\r\n        };\r\n      case 'elevated':\r\n        return {\r\n          border: 'none',\r\n          boxShadow: '0 10px 25px rgba(0,0,0,0.1)'\r\n        };\r\n      case 'flat':\r\n        return {\r\n          border: 'none',\r\n          boxShadow: 'none',\r\n          backgroundColor: 'transparent'\r\n        };\r\n      default:\r\n        return {\r\n          border: '1px solid #f1f5f9',\r\n          boxShadow: '0 1px 3px rgba(0,0,0,0.1)'\r\n        };\r\n    }\r\n  };\r\n\r\n  const getPaddingStyles = () => {\r\n    switch (padding) {\r\n      case 'none':\r\n        return { padding: '0' };\r\n      case 'sm':\r\n        return { padding: '1rem' };\r\n      case 'md':\r\n        return { padding: '1.5rem' };\r\n      case 'lg':\r\n        return { padding: '2rem' };\r\n      default:\r\n        return { padding: '1.5rem' };\r\n    }\r\n  };\r\n\r\n  const cardStyles = {\r\n    backgroundColor: variant === 'flat' ? 'transparent' : 'white',\r\n    borderRadius: '12px',\r\n    transition: 'all 0.2s ease',\r\n    cursor: onClick ? 'pointer' : 'default',\r\n    ...getVariantStyles(),\r\n    ...getPaddingStyles(),\r\n    ...style\r\n  };\r\n\r\n  const hoverStyles = onClick ? {\r\n    ':hover': {\r\n      transform: 'translateY(-2px)',\r\n      boxShadow: '0 8px 25px rgba(0,0,0,0.15)'\r\n    }\r\n  } : {};\r\n\r\n  return (\r\n    <div\r\n      className={className}\r\n      style={cardStyles}\r\n      onClick={onClick}\r\n      onMouseEnter={(e) => {\r\n        if (onClick) {\r\n          e.currentTarget.style.transform = 'translateY(-2px)';\r\n          e.currentTarget.style.boxShadow = '0 8px 25px rgba(0,0,0,0.15)';\r\n        }\r\n      }}\r\n      onMouseLeave={(e) => {\r\n        if (onClick) {\r\n          e.currentTarget.style.transform = 'translateY(0)';\r\n          e.currentTarget.style.boxShadow = cardStyles.boxShadow || '';\r\n        }\r\n      }}\r\n    >\r\n      {/* Header */}\r\n      {(title || subtitle || header) && (\r\n        <div style={{\r\n          marginBottom: title || subtitle ? '1rem' : '0',\r\n          paddingBottom: title || subtitle ? '1rem' : '0',\r\n          borderBottom: title || subtitle ? '1px solid #f1f5f9' : 'none'\r\n        }}>\r\n          {header}\r\n          {title && (\r\n            <h3 style={{\r\n              margin: '0 0 0.5rem 0',\r\n              fontSize: '1.25rem',\r\n              fontWeight: '600',\r\n              color: '#1f2937'\r\n            }}>\r\n              {title}\r\n            </h3>\r\n          )}\r\n          {subtitle && (\r\n            <p style={{\r\n              margin: '0',\r\n              fontSize: '0.875rem',\r\n              color: '#6b7280'\r\n            }}>\r\n              {subtitle}\r\n            </p>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Content */}\r\n      <div>\r\n        {children}\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      {footer && (\r\n        <div style={{\r\n          marginTop: '1rem',\r\n          paddingTop: '1rem',\r\n          borderTop: '1px solid #f1f5f9'\r\n        }}>\r\n          {footer}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\components\\ui\\Input.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'focusStyles' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 69,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\n\r\ninterface InputProps {\r\n  type?: string;\r\n  placeholder?: string;\r\n  value?: string;\r\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\r\n  disabled?: boolean;\r\n  required?: boolean;\r\n  label?: string;\r\n  error?: string;\r\n  icon?: string;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n  size?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({\r\n  type = 'text',\r\n  placeholder,\r\n  value,\r\n  onChange,\r\n  onBlur,\r\n  disabled = false,\r\n  required = false,\r\n  label,\r\n  error,\r\n  icon,\r\n  className = '',\r\n  style = {},\r\n  size = 'md'\r\n}) => {\r\n  const getSizeStyles = () => {\r\n    switch (size) {\r\n      case 'sm':\r\n        return {\r\n          padding: '0.5rem 0.75rem',\r\n          fontSize: '0.875rem'\r\n        };\r\n      case 'md':\r\n        return {\r\n          padding: '0.75rem 1rem',\r\n          fontSize: '1rem'\r\n        };\r\n      case 'lg':\r\n        return {\r\n          padding: '1rem 1.25rem',\r\n          fontSize: '1.125rem'\r\n        };\r\n      default:\r\n        return {};\r\n    }\r\n  };\r\n\r\n  const inputStyles = {\r\n    width: '100%',\r\n    border: error ? '2px solid #ef4444' : '1px solid #d1d5db',\r\n    borderRadius: '8px',\r\n    outline: 'none',\r\n    transition: 'all 0.2s ease',\r\n    backgroundColor: disabled ? '#f9fafb' : 'white',\r\n    color: disabled ? '#9ca3af' : '#374151',\r\n    boxSizing: 'border-box' as const,\r\n    ...getSizeStyles(),\r\n    ...style\r\n  };\r\n\r\n  const focusStyles = {\r\n    ':focus': {\r\n      borderColor: '#667eea',\r\n      boxShadow: '0 0 0 3px rgba(102, 126, 234, 0.1)'\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginBottom: '1rem' }}>\r\n      {label && (\r\n        <label style={{\r\n          display: 'block',\r\n          marginBottom: '0.5rem',\r\n          fontSize: '0.875rem',\r\n          fontWeight: '600',\r\n          color: '#374151'\r\n        }}>\r\n          {label}\r\n          {required && <span style={{ color: '#ef4444', marginLeft: '0.25rem' }}>*</span>}\r\n        </label>\r\n      )}\r\n      \r\n      <div style={{ position: 'relative' }}>\r\n        {icon && (\r\n          <div style={{\r\n            position: 'absolute',\r\n            left: '0.75rem',\r\n            top: '50%',\r\n            transform: 'translateY(-50%)',\r\n            fontSize: '1.2rem',\r\n            color: '#9ca3af',\r\n            pointerEvents: 'none'\r\n          }}>\r\n            {icon}\r\n          </div>\r\n        )}\r\n        \r\n        <input\r\n          type={type}\r\n          placeholder={placeholder}\r\n          value={value}\r\n          onChange={onChange}\r\n          onBlur={onBlur}\r\n          disabled={disabled}\r\n          required={required}\r\n          className={className}\r\n          style={{\r\n            ...inputStyles,\r\n            paddingLeft: icon ? '3rem' : inputStyles.paddingLeft\r\n          }}\r\n          onFocus={(e) => {\r\n            e.target.style.borderColor = '#667eea';\r\n            e.target.style.boxShadow = '0 0 0 3px rgba(102, 126, 234, 0.1)';\r\n          }}\r\n          onBlurCapture={(e) => {\r\n            e.target.style.borderColor = error ? '#ef4444' : '#d1d5db';\r\n            e.target.style.boxShadow = 'none';\r\n            if (onBlur) onBlur(e);\r\n          }}\r\n        />\r\n      </div>\r\n      \r\n      {error && (\r\n        <p style={{\r\n          color: '#ef4444',\r\n          fontSize: '0.875rem',\r\n          marginTop: '0.25rem',\r\n          marginBottom: '0'\r\n        }}>\r\n          {error}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\admin\\tenants\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TenantType' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 46
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchTenants'. Either include it or remove the dependency array.",
        "line": 49,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 49,
        "endColumn": 20,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchTenants, statusFilter]",
            "fix": { "range": [1556, 1570], "text": "[fetchTenants, statusFilter]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { tenantsService, Tenant as TenantType } from '@/services/tenants.service';\r\nimport { \r\n  Card, Title, Text, Stack, Badge, Group, Button, Table, \r\n  TextInput, Select, Modal, Tabs, Progress, ActionIcon \r\n} from '@mantine/core';\r\nimport { \r\n  IconBuilding, IconPlus, IconEdit, IconTrash, IconEye, \r\n  IconSearch, IconUsers, IconCreditCard, IconSettings \r\n} from '@tabler/icons-react';\r\n\r\ntype TenantStatus = 'ACTIVE' | 'TRIAL' | 'SUSPENDED' | 'INACTIVE';\r\ntype SubscriptionPlan = 'FREE' | 'BASIC' | 'PROFESSIONAL' | 'ENTERPRISE';\r\n\r\ninterface Tenant {\r\n  id: string;\r\n  name: string;\r\n  slug: string;\r\n  type: string;\r\n  status: TenantStatus;\r\n  subscriptionPlan: SubscriptionPlan;\r\n  subscriptionEndDate: string;\r\n  users: number;\r\n  patients: number;\r\n  createdAt: string;\r\n  contactEmail: string;\r\n}\r\n\r\nexport default function TenantsManagementPage() {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string | null>('all');\r\n  const [createModalOpen, setCreateModalOpen] = useState(false);\r\n  const [selectedTenant, setSelectedTenant] = useState<Tenant | null>(null);\r\n  const [tenants, setTenants] = useState<Tenant[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [stats, setStats] = useState({\r\n    total: 0,\r\n    active: 0,\r\n    trial: 0,\r\n    totalUsers: 0\r\n  });\r\n\r\n  // Fetch tenants from API\r\n  useEffect(() => {\r\n    fetchTenants();\r\n  }, [statusFilter]);\r\n\r\n  const fetchTenants = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await tenantsService.getAllTenants(1, 100, statusFilter || undefined);\r\n      const tenantsData = response.data?.items || [];\r\n      setTenants(tenantsData);\r\n\r\n      // Calculate stats\r\n      setStats({\r\n        total: tenantsData.length,\r\n        active: tenantsData.filter((t: any) => t.isActive).length,\r\n        trial: tenantsData.filter((t: any) => t.status === 'TRIAL').length,\r\n        totalUsers: tenantsData.reduce((sum: number, t: any) => sum + (t.users || 0), 0)\r\n      });\r\n    } catch (err: any) {\r\n      console.error('Failed to fetch tenants:', err);\r\n      setError(err.message || 'Failed to load tenants');\r\n      setTenants([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Mock fallback data for development\r\n  const mockTenants: Tenant[] = [\r\n    {\r\n      id: '1',\r\n      name: 'City General Hospital',\r\n      slug: 'city-general',\r\n      type: 'HOSPITAL',\r\n      status: 'ACTIVE',\r\n      subscriptionPlan: 'ENTERPRISE',\r\n      subscriptionEndDate: '2025-12-31',\r\n      users: 125,\r\n      patients: 5420,\r\n      createdAt: '2024-01-15',\r\n      contactEmail: 'admin@citygeneral.com'\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Metro Clinic',\r\n      slug: 'metro-clinic',\r\n      type: 'CLINIC',\r\n      status: 'TRIAL',\r\n      subscriptionPlan: 'PROFESSIONAL',\r\n      subscriptionEndDate: '2024-04-01',\r\n      users: 15,\r\n      patients: 450,\r\n      createdAt: '2024-03-01',\r\n      contactEmail: 'contact@metroclinic.com'\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Care Plus Medical Center',\r\n      slug: 'care-plus',\r\n      type: 'HOSPITAL',\r\n      status: 'ACTIVE',\r\n      subscriptionPlan: 'PROFESSIONAL',\r\n      subscriptionEndDate: '2025-06-30',\r\n      users: 80,\r\n      patients: 3200,\r\n      createdAt: '2024-02-10',\r\n      contactEmail: 'info@careplus.com'\r\n    },\r\n    {\r\n      id: '4',\r\n      name: 'Quick Care Clinic',\r\n      slug: 'quick-care',\r\n      type: 'CLINIC',\r\n      status: 'SUSPENDED',\r\n      subscriptionPlan: 'BASIC',\r\n      subscriptionEndDate: '2024-03-01',\r\n      users: 8,\r\n      patients: 120,\r\n      createdAt: '2023-11-20',\r\n      contactEmail: 'admin@quickcare.com'\r\n    }\r\n  ];\r\n\r\n  const getStatusColor = (status: TenantStatus) => {\r\n    const colors = {\r\n      ACTIVE: 'green',\r\n      TRIAL: 'yellow',\r\n      SUSPENDED: 'red',\r\n      INACTIVE: 'gray'\r\n    };\r\n    return colors[status];\r\n  };\r\n\r\n  const getPlanColor = (plan: SubscriptionPlan) => {\r\n    const colors = {\r\n      FREE: 'gray',\r\n      BASIC: 'blue',\r\n      PROFESSIONAL: 'violet',\r\n      ENTERPRISE: 'grape'\r\n    };\r\n    return colors[plan];\r\n  };\r\n\r\n  // Use mock data if API fails or is empty\r\n  const displayTenants = tenants.length > 0 ? tenants : mockTenants;\r\n\r\n  const filteredTenants = displayTenants.filter(tenant => {\r\n    const matchesSearch = tenant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n                         tenant.slug.toLowerCase().includes(searchQuery.toLowerCase());\r\n    const matchesStatus = statusFilter === 'all' || tenant.status === statusFilter || \r\n                         (statusFilter === 'ACTIVE' && tenant.isActive);\r\n    return matchesSearch && matchesStatus;\r\n  });\r\n\r\n  const statsCards = [\r\n    { label: 'Total Tenants', value: stats.total, icon: IconBuilding, color: '#667eea' },\r\n    { label: 'Active', value: stats.active, icon: IconBuilding, color: '#10b981' },\r\n    { label: 'Trial', value: stats.trial, icon: IconBuilding, color: '#f59e0b' },\r\n    { label: 'Total Users', value: stats.totalUsers, icon: IconUsers, color: '#3b82f6' },\r\n  ];\r\n\r\n  return (\r\n    <Stack gap=\"xl\">\r\n      {/* Header */}\r\n      <div>\r\n        <Title order={2} mb=\"xs\">Tenant Management</Title>\r\n        <Text c=\"dimmed\">Manage all hospitals and clinics using your platform</Text>\r\n      </div>\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder style={{ borderColor: '#ef4444' }}>\r\n          <Text c=\"red\" size=\"sm\">{error}</Text>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Stats Overview */}\r\n      <Group>\r\n        {statsCards.map((stat, idx) => (\r\n          <Card key={idx} shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder style={{ flex: 1 }}>\r\n            <Group justify=\"apart\">\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\">{stat.label}</Text>\r\n                <Title order={3}>{stat.value}</Title>\r\n              </div>\r\n              <stat.icon size={32} color={stat.color} />\r\n            </Group>\r\n          </Card>\r\n        ))}\r\n      </Group>\r\n\r\n      {/* Filters and Actions */}\r\n      <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\r\n        <Group justify=\"space-between\" mb=\"md\">\r\n          <Group style={{ flex: 1 }}>\r\n            <TextInput\r\n              placeholder=\"Search tenants...\"\r\n              leftSection={<IconSearch size={16} />}\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n              style={{ flex: 1, maxWidth: '400px' }}\r\n            />\r\n            <Select\r\n              placeholder=\"Filter by status\"\r\n              data={[\r\n                { value: 'all', label: 'All Status' },\r\n                { value: 'ACTIVE', label: 'Active' },\r\n                { value: 'TRIAL', label: 'Trial' },\r\n                { value: 'SUSPENDED', label: 'Suspended' },\r\n                { value: 'INACTIVE', label: 'Inactive' },\r\n              ]}\r\n              value={statusFilter}\r\n              onChange={setStatusFilter}\r\n              style={{ width: '200px' }}\r\n            />\r\n          </Group>\r\n          <Button \r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={() => setCreateModalOpen(true)}\r\n            style={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }}\r\n          >\r\n            Add New Tenant\r\n          </Button>\r\n        </Group>\r\n\r\n        {/* Loading State */}\r\n        {loading && (\r\n          <Text ta=\"center\" c=\"dimmed\" py=\"xl\">Loading tenants...</Text>\r\n        )}\r\n\r\n        {/* Tenants Table */}\r\n        {!loading && (\r\n        <Table highlightOnHover>\r\n          <Table.Thead>\r\n            <Table.Tr>\r\n              <Table.Th>Tenant</Table.Th>\r\n              <Table.Th>Type</Table.Th>\r\n              <Table.Th>Status</Table.Th>\r\n              <Table.Th>Plan</Table.Th>\r\n              <Table.Th>Users/Patients</Table.Th>\r\n              <Table.Th>Subscription End</Table.Th>\r\n              <Table.Th>Actions</Table.Th>\r\n            </Table.Tr>\r\n          </Table.Thead>\r\n          <Table.Tbody>\r\n            {filteredTenants.map((tenant) => (\r\n              <Table.Tr key={tenant.id}>\r\n                <Table.Td>\r\n                  <div>\r\n                    <Text fw={600}>{tenant.name}</Text>\r\n                    <Text size=\"xs\" c=\"dimmed\">{tenant.slug}</Text>\r\n                  </div>\r\n                </Table.Td>\r\n                <Table.Td>{tenant.type}</Table.Td>\r\n                <Table.Td>\r\n                  <Badge color={getStatusColor(tenant.status)} variant=\"light\">\r\n                    {tenant.status}\r\n                  </Badge>\r\n                </Table.Td>\r\n                <Table.Td>\r\n                  <Badge color={getPlanColor(tenant.subscriptionPlan)} variant=\"filled\">\r\n                    {tenant.subscriptionPlan}\r\n                  </Badge>\r\n                </Table.Td>\r\n                <Table.Td>\r\n                  <Text size=\"sm\">{tenant.users} / {tenant.patients}</Text>\r\n                </Table.Td>\r\n                <Table.Td>\r\n                  <Text size=\"sm\">{new Date(tenant.subscriptionEndDate).toLocaleDateString()}</Text>\r\n                </Table.Td>\r\n                <Table.Td>\r\n                  <Group gap=\"xs\">\r\n                    <ActionIcon \r\n                      variant=\"light\" \r\n                      color=\"blue\"\r\n                      onClick={() => setSelectedTenant(tenant)}\r\n                    >\r\n                      <IconEye size={16} />\r\n                    </ActionIcon>\r\n                    <ActionIcon variant=\"light\" color=\"orange\">\r\n                      <IconEdit size={16} />\r\n                    </ActionIcon>\r\n                    <ActionIcon variant=\"light\" color=\"red\">\r\n                      <IconTrash size={16} />\r\n                    </ActionIcon>\r\n                  </Group>\r\n                </Table.Td>\r\n              </Table.Tr>\r\n            ))}\r\n          </Table.Tbody>\r\n        </Table>\r\n        )}\r\n      </Card>\r\n\r\n      {/* Tenant Details Modal */}\r\n      <Modal\r\n        opened={selectedTenant !== null}\r\n        onClose={() => setSelectedTenant(null)}\r\n        title={<Title order={3}>{selectedTenant?.name}</Title>}\r\n        size=\"lg\"\r\n      >\r\n        {selectedTenant && (\r\n          <Tabs defaultValue=\"details\">\r\n            <Tabs.List>\r\n              <Tabs.Tab value=\"details\" leftSection={<IconBuilding size={16} />}>\r\n                Details\r\n              </Tabs.Tab>\r\n              <Tabs.Tab value=\"users\" leftSection={<IconUsers size={16} />}>\r\n                Users\r\n              </Tabs.Tab>\r\n              <Tabs.Tab value=\"subscription\" leftSection={<IconCreditCard size={16} />}>\r\n                Subscription\r\n              </Tabs.Tab>\r\n              <Tabs.Tab value=\"settings\" leftSection={<IconSettings size={16} />}>\r\n                Settings\r\n              </Tabs.Tab>\r\n            </Tabs.List>\r\n\r\n            <Tabs.Panel value=\"details\" pt=\"md\">\r\n              <Stack gap=\"sm\">\r\n                <div>\r\n                  <Text size=\"sm\" c=\"dimmed\">Contact Email</Text>\r\n                  <Text fw={500}>{selectedTenant.contactEmail}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" c=\"dimmed\">Created Date</Text>\r\n                  <Text fw={500}>{new Date(selectedTenant.createdAt).toLocaleDateString()}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" c=\"dimmed\">Total Users</Text>\r\n                  <Text fw={500}>{selectedTenant.users}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" c=\"dimmed\">Total Patients</Text>\r\n                  <Text fw={500}>{selectedTenant.patients}</Text>\r\n                </div>\r\n              </Stack>\r\n            </Tabs.Panel>\r\n\r\n            <Tabs.Panel value=\"subscription\" pt=\"md\">\r\n              <Stack gap=\"md\">\r\n                <div>\r\n                  <Text size=\"sm\" c=\"dimmed\" mb=\"xs\">Current Plan</Text>\r\n                  <Badge size=\"lg\" color={getPlanColor(selectedTenant.subscriptionPlan)}>\r\n                    {selectedTenant.subscriptionPlan}\r\n                  </Badge>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" c=\"dimmed\" mb=\"xs\">Subscription End Date</Text>\r\n                  <Text fw={600}>{new Date(selectedTenant.subscriptionEndDate).toLocaleDateString()}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" c=\"dimmed\" mb=\"xs\">Usage</Text>\r\n                  <div>\r\n                    <Text size=\"xs\" mb={4}>Users: {selectedTenant.users} / 150</Text>\r\n                    <Progress value={(selectedTenant.users / 150) * 100} color=\"blue\" />\r\n                  </div>\r\n                  <div style={{ marginTop: '0.5rem' }}>\r\n                    <Text size=\"xs\" mb={4}>Patients: {selectedTenant.patients} / 10000</Text>\r\n                    <Progress value={(selectedTenant.patients / 10000) * 100} color=\"green\" />\r\n                  </div>\r\n                </div>\r\n              </Stack>\r\n            </Tabs.Panel>\r\n          </Tabs>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Create Tenant Modal */}\r\n      <Modal\r\n        opened={createModalOpen}\r\n        onClose={() => setCreateModalOpen(false)}\r\n        title={<Title order={3}>Add New Tenant</Title>}\r\n        size=\"md\"\r\n      >\r\n        <Text c=\"dimmed\" mb=\"md\">\r\n          This will be connected to the tenant registration API endpoint\r\n        </Text>\r\n        <Stack gap=\"md\">\r\n          <TextInput label=\"Hospital/Clinic Name\" placeholder=\"Enter name\" required />\r\n          <TextInput label=\"Slug\" placeholder=\"hospital-name\" required />\r\n          <Select\r\n            label=\"Type\"\r\n            placeholder=\"Select type\"\r\n            data={[\r\n              { value: 'HOSPITAL', label: 'Hospital' },\r\n              { value: 'CLINIC', label: 'Clinic' },\r\n              { value: 'DIAGNOSTIC_CENTER', label: 'Diagnostic Center' },\r\n            ]}\r\n            required\r\n          />\r\n          <Select\r\n            label=\"Subscription Plan\"\r\n            placeholder=\"Select plan\"\r\n            data={[\r\n              { value: 'FREE', label: 'Free' },\r\n              { value: 'BASIC', label: 'Basic' },\r\n              { value: 'PROFESSIONAL', label: 'Professional' },\r\n              { value: 'ENTERPRISE', label: 'Enterprise' },\r\n            ]}\r\n            required\r\n          />\r\n          <TextInput label=\"Admin Email\" placeholder=\"admin@example.com\" type=\"email\" required />\r\n          <Group justify=\"flex-end\" mt=\"md\">\r\n            <Button variant=\"light\" onClick={() => setCreateModalOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button style={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }}>\r\n              Create Tenant\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Stack>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\ai-assistant\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MedicalKnowledgeBase' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 147,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 147,
        "endColumn": 31
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconMedicalCross' is not defined.",
        "line": 568,
        "column": 33,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 568,
        "endColumn": 49
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconPill' is not defined.",
        "line": 569,
        "column": 40,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 569,
        "endColumn": 48
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconShield' is not defined.",
        "line": 570,
        "column": 39,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 570,
        "endColumn": 49
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconAlertTriangle' is not defined.",
        "line": 572,
        "column": 29,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 572,
        "endColumn": 46
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconMessageCircle' is not defined.",
        "line": 621,
        "column": 33,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 621,
        "endColumn": 50
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconClockHour4' is not defined.",
        "line": 644,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 644,
        "endColumn": 30
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconCheck' is not defined.",
        "line": 656,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 656,
        "endColumn": 25
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconAlertTriangle' is not defined.",
        "line": 668,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 668,
        "endColumn": 33
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconMoodCheck' is not defined.",
        "line": 716,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 716,
        "endColumn": 29
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconMessageCircle' is not defined.",
        "line": 732,
        "column": 51,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 732,
        "endColumn": 68
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconPill' is not defined.",
        "line": 738,
        "column": 56,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 738,
        "endColumn": 64
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconCheck' is not defined.",
        "line": 840,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 840,
        "endColumn": 35
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconShare' is not defined.",
        "line": 919,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 919,
        "endColumn": 35
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconPill' is not defined.",
        "line": 1102,
        "column": 24,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1102,
        "endColumn": 32
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconShield' is not defined.",
        "line": 1111,
        "column": 24,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1111,
        "endColumn": 34
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconMedicalCross' is not defined.",
        "line": 1171,
        "column": 24,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1171,
        "endColumn": 40
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconPill' is not defined.",
        "line": 1180,
        "column": 24,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1180,
        "endColumn": 32
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Chip' is not defined.",
        "line": 1338,
        "column": 30,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1338,
        "endColumn": 34
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Chip' is not defined.",
        "line": 1350,
        "column": 30,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1350,
        "endColumn": 34
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconCheck' is not defined.",
        "line": 1369,
        "column": 39,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1369,
        "endColumn": 48
      }
    ],
    "suppressedMessages": [],
    "errorCount": 20,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useMemo } from 'react';\nimport {\n  Container,\n  Paper,\n  Title,\n  Group,\n  Button,\n  TextInput,\n  Select,\n  Badge,\n  Modal,\n  Text,\n  Tabs,\n  Card,\n  ActionIcon,\n  Stack,\n  SimpleGrid,\n  ScrollArea,\n  ThemeIcon,\n  Progress,\n  Textarea,\n  Divider,\n  Alert,\n  Loader,\n  Accordion,\n  Rating,\n  Spoiler\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport EmptyState from '../../../components/EmptyState';\nimport { notifications } from '@mantine/notifications';\n// Charts removed due to MantineProvider compatibility issues with Next.js 15.5.4\n// import { LineChart, BarChart, DonutChart, AreaChart, PieChart } from '@mantine/charts';\nimport {\n  IconPlus,\n  IconSearch,\n  IconEye,\n  IconStethoscope,\n  IconChartBar,\n  IconFileText,\n  IconRefresh,\n  IconX,\n  IconSend,\n  IconBulb,\n  IconRobot,\n  IconTarget,\n  IconStar,\n  IconBookmark,\n  IconBrain,\n  IconQuestionMark,\n  IconInfoCircle,\n  IconSparkles\n} from '@tabler/icons-react';\n\n// Types\ninterface AIInsight {\n  id: string;\n  type: 'diagnosis' | 'treatment' | 'drug-interaction' | 'risk-assessment' | 'recommendation' | 'alert';\n  title: string;\n  description: string;\n  confidence: number; // 0-100\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  category: 'clinical' | 'medication' | 'diagnostic' | 'preventive' | 'emergency';\n  patientId?: string;\n  patientName?: string;\n  generatedBy: string; // AI model name\n  generatedDate: string;\n  reviewedBy?: string;\n  reviewedDate?: string;\n  status: 'pending' | 'reviewed' | 'accepted' | 'rejected' | 'implemented';\n  evidence: Array<{\n    source: string;\n    relevance: number;\n    description: string;\n  }>;\n  recommendations: Array<{\n    action: string;\n    priority: 'low' | 'medium' | 'high';\n    timeframe: string;\n  }>;\n  metadata: {\n    symptoms?: string[];\n    vitals?: Record<string, any>;\n    labResults?: Record<string, any>;\n    medications?: string[];\n    allergies?: string[];\n  };\n}\n\ninterface AIQuery {\n  id: string;\n  question: string;\n  context: {\n    patientId?: string;\n    symptoms?: string[];\n    vitals?: Record<string, any>;\n    history?: string[];\n  };\n  response: string;\n  confidence: number;\n  model: string;\n  timestamp: string;\n  userId: string;\n  userName: string;\n  category: 'diagnosis' | 'treatment' | 'medication' | 'general' | 'emergency';\n  feedback?: {\n    rating: number;\n    helpful: boolean;\n    comments?: string;\n  };\n}\n\ninterface ClinicalGuideline {\n  id: string;\n  title: string;\n  category: 'diagnosis' | 'treatment' | 'prevention' | 'emergency';\n  condition: string;\n  description: string;\n  recommendations: Array<{\n    level: 'A' | 'B' | 'C';\n    strength: 'strong' | 'moderate' | 'weak';\n    recommendation: string;\n    evidence: string;\n  }>;\n  lastUpdated: string;\n  source: string;\n  version: string;\n  applicability: string[];\n}\n\ninterface DrugInteraction {\n  id: string;\n  drug1: string;\n  drug2: string;\n  interactionType: 'major' | 'moderate' | 'minor';\n  mechanism: string;\n  clinicalEffect: string;\n  recommendation: string;\n  frequency: 'common' | 'uncommon' | 'rare';\n  onset: 'rapid' | 'delayed';\n  severity: 'severe' | 'moderate' | 'mild';\n  documentation: 'excellent' | 'good' | 'fair' | 'poor';\n}\n\ninterface MedicalKnowledgeBase {\n  id: string;\n  title: string;\n  category: 'disease' | 'symptom' | 'procedure' | 'medication' | 'anatomy';\n  content: string;\n  tags: string[];\n  lastUpdated: string;\n  references: Array<{\n    title: string;\n    authors: string[];\n    journal: string;\n    year: number;\n    doi?: string;\n  }>;\n}\n\n// Mock data\nconst _mockAIInsights: AIInsight[] = [\n  {\n    id: '1',\n    type: 'diagnosis',\n    title: 'Possible Acute Coronary Syndrome',\n    description: 'Based on presenting symptoms (chest pain, shortness of breath) and elevated troponin levels, there is a high probability of acute coronary syndrome. Immediate cardiology consultation recommended.',\n    confidence: 87,\n    severity: 'critical',\n    category: 'clinical',\n    patientId: 'P2024001',\n    patientName: 'Rajesh Kumar',\n    generatedBy: 'MedAI-Clinical v2.1',\n    generatedDate: '2024-01-15T10:30:00Z',\n    reviewedBy: 'Dr. Sharma',\n    reviewedDate: '2024-01-15T10:45:00Z',\n    status: 'accepted',\n    evidence: [\n      {\n        source: 'Clinical symptoms analysis',\n        relevance: 95,\n        description: 'Typical chest pain presentation with radiation to left arm'\n      },\n      {\n        source: 'Laboratory results',\n        relevance: 88,\n        description: 'Elevated troponin I levels (0.8 ng/mL, normal <0.04)'\n      },\n      {\n        source: 'Vital signs assessment',\n        relevance: 75,\n        description: 'Elevated heart rate and blood pressure'\n      }\n    ],\n    recommendations: [\n      {\n        action: 'Immediate cardiology consultation',\n        priority: 'high',\n        timeframe: 'Within 30 minutes'\n      },\n      {\n        action: 'Serial ECG monitoring',\n        priority: 'high',\n        timeframe: 'Every 15 minutes'\n      },\n      {\n        action: 'Antiplatelet therapy initiation',\n        priority: 'medium',\n        timeframe: 'After cardiology clearance'\n      }\n    ],\n    metadata: {\n      symptoms: ['chest pain', 'shortness of breath', 'left arm pain'],\n      vitals: { bp: '150/95', hr: 110, temp: 98.6 },\n      labResults: { troponinI: 0.8, ck_mb: 12.5 }\n    }\n  },\n  {\n    id: '2',\n    type: 'drug-interaction',\n    title: 'Major Drug Interaction Alert',\n    description: 'Warfarin and Aspirin combination may significantly increase bleeding risk. Consider dose adjustment or alternative anticoagulation strategy.',\n    confidence: 94,\n    severity: 'high',\n    category: 'medication',\n    patientId: 'P2024002',\n    patientName: 'Sunita Patel',\n    generatedBy: 'DrugSafe-AI v1.8',\n    generatedDate: '2024-01-15T14:20:00Z',\n    status: 'pending',\n    evidence: [\n      {\n        source: 'Drug interaction database',\n        relevance: 98,\n        description: 'Well-documented major interaction between warfarin and aspirin'\n      },\n      {\n        source: 'Patient bleeding risk factors',\n        relevance: 82,\n        description: 'Age >65, history of GI bleeding'\n      }\n    ],\n    recommendations: [\n      {\n        action: 'Review anticoagulation strategy',\n        priority: 'high',\n        timeframe: 'Before next dose'\n      },\n      {\n        action: 'Monitor INR more frequently',\n        priority: 'medium',\n        timeframe: 'Every 3 days'\n      }\r\n    ],\r\n    metadata: {\r\n      medications: ['warfarin 5mg', 'aspirin 81mg'],\r\n      allergies: []\r\n    }\r\n  },\r\n  {\r\n    id: '3',\r\n    type: 'risk-assessment',\r\n    title: 'High Fall Risk Identified',\r\n    description: 'Patient presents multiple fall risk factors including advanced age, polypharmacy, and recent orthostatic hypotension. Fall prevention measures recommended.',\r\n    confidence: 78,\r\n    severity: 'medium',\r\n    category: 'preventive',\r\n    patientId: 'P2024003',\r\n    patientName: 'Mohammed Ali',\r\n    generatedBy: 'RiskAssess-AI v1.5',\r\n    generatedDate: '2024-01-15T16:15:00Z',\r\n    status: 'reviewed',\r\n    evidence: [\r\n      {\r\n        source: 'MORSE Fall Scale assessment',\r\n        relevance: 85,\r\n        description: 'Score of 55 indicates high fall risk'\r\n      },\r\n      {\r\n        source: 'Medication review',\r\n        relevance: 72,\r\n        description: 'Currently on 6 medications including sedatives'\r\n      }\r\n    ],\r\n    recommendations: [\r\n      {\r\n        action: 'Implement fall precautions protocol',\r\n        priority: 'high',\r\n        timeframe: 'Immediately'\r\n      },\r\n      {\r\n        action: 'Physical therapy consultation',\r\n        priority: 'medium',\r\n        timeframe: 'Within 24 hours'\r\n      },\r\n      {\r\n        action: 'Medication review for dose optimization',\r\n        priority: 'medium',\r\n        timeframe: 'Within 48 hours'\r\n      }\r\n    ],\r\n    metadata: {\r\n      symptoms: ['dizziness', 'unsteady gait'],\r\n      vitals: { bp_standing: '110/70', bp_sitting: '130/85' },\r\n      medications: ['metformin', 'lisinopril', 'atorvastatin', 'tramadol', 'lorazepam', 'omeprazole']\r\n    }\r\n  }\r\n];\r\n\r\nconst _mockAIQueries: AIQuery[] = [\r\n  {\r\n    id: '1',\r\n    question: 'What are the differential diagnoses for chest pain in a 45-year-old male with diabetes?',\n    context: {\n      patientId: 'P2024001',\n      symptoms: ['chest pain', 'shortness of breath'],\n      history: ['diabetes mellitus', 'hypertension']\n    },\n    response: 'For a 45-year-old diabetic male presenting with chest pain, the differential diagnoses should include:\\n\\n1. **Acute Coronary Syndrome** (highest priority)\\n   - Myocardial infarction\\n   - Unstable angina\\n   - Diabetics may have atypical presentations\\n\\n2. **Pulmonary causes**\\n   - Pulmonary embolism\\n   - Pneumonia\\n   - Pneumothorax\\n\\n3. **Gastrointestinal causes**\\n   - GERD\\n   - Esophageal spasm\\n   - Peptic ulcer disease\\n\\n4. **Musculoskeletal causes**\\n   - Costochondritis\\n   - Muscle strain\\n\\nGiven the diabetes history, cardiac causes should be prioritized. Recommend immediate ECG, cardiac enzymes, and chest X-ray.',\n    confidence: 92,\n    model: 'MedAI-Clinical v2.1',\n    timestamp: '2024-01-15T10:15:00Z',\n    userId: 'D001',\n    userName: 'Dr. Sharma',\n    category: 'diagnosis',\n    feedback: {\n      rating: 5,\n      helpful: true,\n      comments: 'Very comprehensive and practical response'\n    }\n  },\n  {\n    id: '2',\n    question: 'What is the recommended antibiotic for community-acquired pneumonia in elderly patients?',\n    context: {},\n    response: 'For community-acquired pneumonia (CAP) in elderly patients, the treatment approach should consider:\\n\\n**First-line treatments:**\\n1. **Amoxicillin/Clavulanate** 875/125 mg BID for 7-10 days\\n2. **Ceftriaxone** 1-2g IV daily (if hospitalized)\\n\\n**Alternative options:**\\n- **Levofloxacin** 750mg daily for 5 days (respiratory fluoroquinolone)\\n- **Azithromycin** + **Amoxicillin** (combination therapy)\\n\\n**Special considerations for elderly:**\\n- Adjust doses for renal function\\n- Consider drug interactions with existing medications\\n- Monitor for C. difficile risk with broader spectrum antibiotics\\n- Higher risk for atypical pathogens (Legionella, Mycoplasma)\\n\\n**Severity assessment:** Use CURB-65 or PSI to guide inpatient vs outpatient management.',\n    confidence: 89,\n    model: 'MedAI-Clinical v2.1',\n    timestamp: '2024-01-15T11:30:00Z',\n    userId: 'D002',\n    userName: 'Dr. Reddy',\n    category: 'treatment',\n    feedback: {\n      rating: 4,\n      helpful: true\n    }\n  },\n  {\n    id: '3',\n    question: 'Can metformin and contrast dye be given together safely?',\n    context: {\n      symptoms: ['scheduled for CT with contrast']\n    },\n    response: 'Metformin and iodinated contrast media interaction requires careful management:\\n\\n**Key Concerns:**\\n- Risk of contrast-induced nephropathy (CIN)\\n- Potential for lactic acidosis if kidney function deteriorates\\n\\n**Current Guidelines:**\\n1. **eGFR ≥30 mL/min/1.73m²**: Continue metformin, no need to hold\\n2. **eGFR <30 mL/min/1.73m²**: Hold metformin 48 hours before contrast\\n\\n**Post-contrast management:**\\n- Check creatinine 48-72 hours post-contrast\\n- Restart metformin only if creatinine stable/improved\\n- Ensure adequate hydration\\n\\n**Important:** Recent guidelines (2020) are less restrictive than previous recommendations, focusing on actual kidney function rather than blanket holds.\\n\\n**Patient counseling:** Explain the rationale and importance of follow-up labs.',\n    confidence: 94,\n    model: 'DrugSafe-AI v1.8',\n    timestamp: '2024-01-15T13:45:00Z',\n    userId: 'D003',\n    userName: 'Dr. Singh',\n    category: 'medication'\n  }\n];\n\nconst _mockClinicalGuidelines: ClinicalGuideline[] = [\n  {\n    id: '1',\n    title: 'Management of Acute Coronary Syndromes',\n    category: 'treatment',\n    condition: 'Acute Coronary Syndrome',\n    description: 'Evidence-based guidelines for the diagnosis and management of acute coronary syndromes including STEMI, NSTEMI, and unstable angina.',\n    recommendations: [\n      {\n        level: 'A',\n        strength: 'strong',\n        recommendation: 'Administer dual antiplatelet therapy (aspirin + P2Y12 inhibitor) to all patients with ACS unless contraindicated',\n        evidence: 'Multiple large randomized controlled trials demonstrate significant reduction in cardiovascular events'\n      },\n      {\n        level: 'A',\n        strength: 'strong',\n        recommendation: 'Perform primary PCI within 90 minutes for STEMI patients presenting to PCI-capable centers',\n        evidence: 'Time-dependent mortality benefit demonstrated in large registry studies'\n      },\n      {\n        level: 'B',\n        strength: 'moderate',\n        recommendation: 'Consider high-intensity statin therapy in all ACS patients',\n        evidence: 'Observational studies show improved outcomes with early statin initiation'\n      }\n    ],\n    lastUpdated: '2024-01-01T00:00:00Z',\n    source: 'American Heart Association',\n    version: '2024.1',\n    applicability: ['Emergency Medicine', 'Cardiology', 'Internal Medicine']\n  },\n  {\n    id: '2',\n    title: 'Antibiotic Stewardship in Community-Acquired Pneumonia',\n    category: 'treatment',\n    condition: 'Community-Acquired Pneumonia',\n    description: 'Guidelines for appropriate antibiotic selection and duration in community-acquired pneumonia.',\n    recommendations: [\n      {\n        level: 'A',\n        strength: 'strong',\n        recommendation: 'Use severity assessment tools (CURB-65, PSI) to guide treatment location and antibiotic choice',\n        evidence: 'Validated prediction rules improve patient outcomes and resource utilization'\n      },\n      {\n        level: 'A',\n        strength: 'strong',\n        recommendation: 'Limit antibiotic duration to 5-7 days for uncomplicated CAP with good clinical response',\n        evidence: 'Non-inferiority trials show shorter courses are as effective as longer durations'\n      }\n    ],\n    lastUpdated: '2023-12-15T00:00:00Z',\n    source: 'Infectious Diseases Society of America',\n    version: '2023.2',\n    applicability: ['Internal Medicine', 'Emergency Medicine', 'Pulmonology']\n  }\n];\n\nconst _mockDrugInteractions: DrugInteraction[] = [\n  {\n    id: '1',\n    drug1: 'Warfarin',\n    drug2: 'Aspirin',\n    interactionType: 'major',\n    mechanism: 'Pharmacodynamic synergism',\n    clinicalEffect: 'Increased risk of bleeding due to additive antiplatelet and anticoagulant effects',\n    recommendation: 'Monitor INR more frequently. Consider gastroprotection with PPI. Assess bleeding risk vs. thrombotic risk.',\n    frequency: 'common',\n    onset: 'delayed',\n    severity: 'severe',\n    documentation: 'excellent'\n  },\n  {\n    id: '2',\n    drug1: 'Metformin',\n    drug2: 'Iodinated Contrast',\n    interactionType: 'moderate',\n    mechanism: 'Increased risk of lactic acidosis in presence of contrast-induced nephropathy',\n    clinicalEffect: 'Potential for lactic acidosis if kidney function deteriorates after contrast exposure',\n    recommendation: 'Hold metformin in patients with eGFR <30. Monitor renal function post-contrast. Resume metformin when creatinine stable.',\n    frequency: 'uncommon',\n    onset: 'delayed',\n    severity: 'severe',\n    documentation: 'good'\n  },\n  {\n    id: '3',\n    drug1: 'Digoxin',\n    drug2: 'Amiodarone',\n    interactionType: 'major',\n    mechanism: 'Amiodarone inhibits P-glycoprotein, reducing digoxin clearance',\n    clinicalEffect: 'Significantly increased digoxin levels leading to potential toxicity',\n    recommendation: 'Reduce digoxin dose by 50% when starting amiodarone. Monitor digoxin levels closely.',\n    frequency: 'common',\n    onset: 'delayed',\n    severity: 'severe',\n    documentation: 'excellent'\n  }\n];\n\nconst AIAssistant = () => {\n  // State management\n  const [activeTab, setActiveTab] = useState<string>('insights');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [selectedSeverity, setSelectedSeverity] = useState<string>('');\n  const [selectedInsight, setSelectedInsight] = useState<AIInsight | null>(null);\n  const [_selectedQuery, setSelectedQuery] = useState<AIQuery | null>(null);\n  const [newQuery, setNewQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Modal states\n  const [insightDetailOpened, { open: openInsightDetail, close: closeInsightDetail }] = useDisclosure(false);\n  const [_queryDetailOpened, { open: _openQueryDetail, close: _closeQueryDetail }] = useDisclosure(false);\n  const [askAIOpened, { open: openAskAI, close: closeAskAI }] = useDisclosure(false);\n  const [_guidelineOpened, { open: _openGuideline, close: _closeGuideline }] = useDisclosure(false);\n\n  // Filter insights\n  const filteredInsights = useMemo(() => {\n    return [].filter /* TODO: Fetch from API */((insight) => {\n      const matchesSearch = \n        insight.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        insight.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        (insight.patientName && insight.patientName.toLowerCase().includes(searchQuery.toLowerCase()));\n      \n      const matchesCategory = !selectedCategory || insight.category === selectedCategory;\n      const matchesSeverity = !selectedSeverity || insight.severity === selectedSeverity;\n\n      return matchesSearch && matchesCategory && matchesSeverity;\n    });\n  }, [searchQuery, selectedCategory, selectedSeverity]);\n\n  // Filter queries\n  const filteredQueries = useMemo(() => {\n    return [].filter /* TODO: Fetch from API */((query) => {\n      const matchesSearch = \n        query.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        query.response.toLowerCase().includes(searchQuery.toLowerCase());\n      \n      return matchesSearch;\n    });\n  }, [searchQuery]);\n\n  const handleViewInsight = (insight: AIInsight) => {\n    setSelectedInsight(insight);\n    openInsightDetail();\n  };\n\n  const handleViewQuery = (_query: AIQuery) => {\n    setSelectedQuery(_query);\n    _openQueryDetail();\n  };\n\n  const handleAskAI = async () => {\n    if (!newQuery.trim()) return;\n\n    setIsLoading(true);\n    // Simulate AI processing\n    setTimeout(() => {\n      setIsLoading(false);\n      notifications.show({\n        title: 'AI Response Generated',\n        message: 'Your question has been processed and the response is ready',\n        color: 'green',\n      });\n      closeAskAI();\n      setNewQuery('');\n    }, 3000);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const formatDateTime = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'red';\n      case 'high': return 'orange';\n      case 'medium': return 'yellow';\n      case 'low': return 'green';\n      default: return 'gray';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'diagnosis': return <IconStethoscope size={16} />;\n      case 'treatment': return <IconMedicalCross size={16} />;\n      case 'drug-interaction': return <IconPill size={16} />;\n      case 'risk-assessment': return <IconShield size={16} />;\n      case 'recommendation': return <IconBulb size={16} />;\n      case 'alert': return <IconAlertTriangle size={16} />;\n      default: return <IconBrain size={16} />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'accepted': return 'green';\n      case 'implemented': return 'teal';\n      case 'reviewed': return 'blue';\n      case 'rejected': return 'red';\n      case 'pending': return 'yellow';\n      default: return 'gray';\n    }\n  };\n\n  // AI Assistant stats\n  const aiStats = {\n    totalInsights: 0 /* TODO: Fetch from API */,\n    pendingInsights: [].filter /* TODO: Fetch from API */(i => i.status === 'pending').length,\n    acceptedInsights: [].filter /* TODO: Fetch from API */(i => i.status === 'accepted').length,\n    criticalInsights: [].filter /* TODO: Fetch from API */(i => i.severity === 'critical').length,\n    totalQueries: 0 /* TODO: Fetch from API */,\n    avgConfidence: Math.round([].reduce /* TODO: Fetch from API */((acc, i) => acc + i.confidence, 0) / 0 /* TODO: Fetch from API */),\n    avgRating: [].filter /* TODO: Fetch from API */(q => q.feedback?.rating).reduce((acc, q) => acc + (q.feedback?.rating || 0), 0) / [].filter /* TODO: Fetch from API */(q => q.feedback?.rating).length,\n    helpfulResponses: [].filter /* TODO: Fetch from API */(q => q.feedback?.helpful).length\n  };\n\n  return (\n    <Container size=\"xl\" py=\"md\">\n      {/* Header */}\n      <Group justify=\"space-between\" mb=\"lg\">\n        <div>\n          <Group mb=\"xs\">\n            <ThemeIcon color=\"blue\" size=\"xl\" variant=\"light\">\n              <IconBrain size={24} />\n            </ThemeIcon>\n            <div>\n              <Title order={1}>AI Clinical Assistant</Title>\n              <Text c=\"dimmed\" size=\"sm\">\n                Intelligent clinical decision support and medical insights\n              </Text>\n            </div>\n          </Group>\n        </div>\n        <Group>\n          <Button variant=\"light\" leftSection={<IconRefresh size={16} />}>\n            Refresh Insights\n          </Button>\n          <Button leftSection={<IconMessageCircle size={16} />} onClick={openAskAI}>\n            Ask AI\n          </Button>\n        </Group>\n      </Group>\n\n      {/* Quick Stats */}\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4, lg: 8 }} mb=\"lg\" spacing=\"sm\">\n        <Card padding=\"md\" radius=\"md\" withBorder>\n          <Group justify=\"center\">\n            <ThemeIcon color=\"blue\" size=\"lg\" radius=\"md\" variant=\"light\">\n              <IconSparkles size={20} />\n            </ThemeIcon>\n            <div>\n              <Text size=\"lg\" fw={700}>{aiStats.totalInsights}</Text>\n              <Text size=\"xs\" c=\"dimmed\">AI Insights</Text>\n            </div>\n          </Group>\n        </Card>\n\n        <Card padding=\"md\" radius=\"md\" withBorder>\n          <Group justify=\"center\">\n            <ThemeIcon color=\"yellow\" size=\"lg\" radius=\"md\" variant=\"light\">\n              <IconClockHour4 size={20} />\n            </ThemeIcon>\n            <div>\n              <Text size=\"lg\" fw={700}>{aiStats.pendingInsights}</Text>\n              <Text size=\"xs\" c=\"dimmed\">Pending Review</Text>\n            </div>\n          </Group>\n        </Card>\n\n        <Card padding=\"md\" radius=\"md\" withBorder>\n          <Group justify=\"center\">\n            <ThemeIcon color=\"green\" size=\"lg\" radius=\"md\" variant=\"light\">\n              <IconCheck size={20} />\n            </ThemeIcon>\n            <div>\n              <Text size=\"lg\" fw={700}>{aiStats.acceptedInsights}</Text>\n              <Text size=\"xs\" c=\"dimmed\">Accepted</Text>\n            </div>\n          </Group>\n        </Card>\n\n        <Card padding=\"md\" radius=\"md\" withBorder>\n          <Group justify=\"center\">\n            <ThemeIcon color=\"red\" size=\"lg\" radius=\"md\" variant=\"light\">\n              <IconAlertTriangle size={20} />\n            </ThemeIcon>\n            <div>\n              <Text size=\"lg\" fw={700}>{aiStats.criticalInsights}</Text>\n              <Text size=\"xs\" c=\"dimmed\">Critical</Text>\n            </div>\n          </Group>\n        </Card>\n\n        <Card padding=\"md\" radius=\"md\" withBorder>\n          <Group justify=\"center\">\n            <ThemeIcon color=\"purple\" size=\"lg\" radius=\"md\" variant=\"light\">\n              <IconQuestionMark size={20} />\n            </ThemeIcon>\n            <div>\n              <Text size=\"lg\" fw={700}>{aiStats.totalQueries}</Text>\n              <Text size=\"xs\" c=\"dimmed\">AI Queries</Text>\n            </div>\n          </Group>\n        </Card>\n\n        <Card padding=\"md\" radius=\"md\" withBorder>\n          <Group justify=\"center\">\n            <ThemeIcon color=\"teal\" size=\"lg\" radius=\"md\" variant=\"light\">\n              <IconTarget size={20} />\n            </ThemeIcon>\n            <div>\n              <Text size=\"lg\" fw={700}>{aiStats.avgConfidence}%</Text>\n              <Text size=\"xs\" c=\"dimmed\">Avg Confidence</Text>\n            </div>\n          </Group>\n        </Card>\n\n        <Card padding=\"md\" radius=\"md\" withBorder>\n          <Group justify=\"center\">\n            <ThemeIcon color=\"orange\" size=\"lg\" radius=\"md\" variant=\"light\">\n              <IconStar size={20} />\n            </ThemeIcon>\n            <div>\n              <Text size=\"lg\" fw={700}>{aiStats.avgRating.toFixed(1)}</Text>\n              <Text size=\"xs\" c=\"dimmed\">Avg Rating</Text>\n            </div>\n          </Group>\n        </Card>\n\n        <Card padding=\"md\" radius=\"md\" withBorder>\n          <Group justify=\"center\">\n            <ThemeIcon color=\"lime\" size=\"lg\" radius=\"md\" variant=\"light\">\n              <IconMoodCheck size={20} />\n            </ThemeIcon>\n            <div>\r\n              <Text size=\"lg\" fw={700}>{aiStats.helpfulResponses}</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Helpful</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'insights')}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"insights\" leftSection={<IconBulb size={16} />}>\r\n            AI Insights\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"queries\" leftSection={<IconMessageCircle size={16} />}>\r\n            AI Queries\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"guidelines\" leftSection={<IconFileText size={16} />}>\r\n            Clinical Guidelines\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"interactions\" leftSection={<IconPill size={16} />}>\r\n            Drug Interactions\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconChartBar size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* AI Insights Tab */}\r\n        <Tabs.Panel value=\"insights\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search insights...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Category\"\r\n                data={[\r\n                  { value: 'clinical', label: 'Clinical' },\r\n                  { value: 'medication', label: 'Medication' },\r\n                  { value: 'diagnostic', label: 'Diagnostic' },\r\n                  { value: 'preventive', label: 'Preventive' },\r\n                  { value: 'emergency', label: 'Emergency' },\r\n                  { value: 'all', label: 'All' }\r\n                ]}\r\n                value={selectedCategory}\r\n                onChange={(value) => setSelectedCategory(value || 'all')}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Severity\"\r\n                data={[\r\n                  { value: 'critical', label: 'Critical' },\r\n                  { value: 'high', label: 'High' },\r\n                  { value: 'medium', label: 'Medium' },\r\n                  { value: 'low', label: 'Low' }\r\n                ]}\r\n                value={selectedSeverity}\r\n                onChange={(value) => setSelectedSeverity(value || '')}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Insights Cards */}\r\n            <Stack gap=\"md\">\r\n              {filteredInsights.length === 0 ? (\r\n                <EmptyState\r\n                  icon={<IconRobot size={48} />}\r\n                  title=\"No AI insights\"\r\n                  description=\"Start using AI assistant\"\r\n                  size=\"sm\"\r\n                />\r\n              ) : (\r\n                filteredInsights.map((insight) => (\r\n                  <Card key={insight.id} padding=\"lg\" radius=\"md\" withBorder onClick={() => handleViewInsight(insight)} style={{ cursor: 'pointer' }}>\r\n                    <Group justify=\"space-between\" mb=\"md\">\r\n                      <div>\r\n                        <Group mb=\"xs\">\r\n                          <ThemeIcon size=\"sm\" variant=\"light\" color={getSeverityColor(insight.severity)}>\r\n                            {getTypeIcon(insight.type)}\r\n                          </ThemeIcon>\r\n                          <Title order={4}>{insight.title}</Title>\r\n                        </Group>\r\n                        {insight.patientName && (\r\n                          <Text c=\"dimmed\" size=\"sm\">Patient: {insight.patientName}</Text>\r\n                        )}\r\n                      </div>\r\n                      <Group>\r\n                        <Badge color={getSeverityColor(insight.severity)} variant=\"light\" size=\"lg\">\r\n                          {insight.severity.toUpperCase()}\r\n                        </Badge>\r\n                        <Badge color={getStatusColor(insight.status)} variant=\"outline\">\r\n                          {insight.status.toUpperCase()}\r\n                        </Badge>\r\n                      </Group>\r\n                    </Group>\r\n\r\n                    <Text size=\"sm\" mb=\"md\" lineClamp={2}>\r\n                      {insight.description}\r\n                    </Text>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <div>\r\n                      <Text size=\"xs\" c=\"dimmed\">\r\n                        Generated by {insight.generatedBy} • {formatDateTime(insight.generatedDate)}\r\n                      </Text>\r\n                      {insight.reviewedBy && (\r\n                        <Text size=\"xs\" c=\"dimmed\">\r\n                          Reviewed by {insight.reviewedBy} • {formatDateTime(insight.reviewedDate!)}\r\n                        </Text>\r\n                      )}\r\n                    </div>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconCheck size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"red\">\r\n                        <IconX size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              )))\r\n              }\r\n            </Stack>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* AI Queries Tab */}\r\n        <Tabs.Panel value=\"queries\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Recent AI Queries</Title>\r\n              <Button leftSection={<IconPlus size={16} />} onClick={openAskAI}>\r\n                Ask New Question\r\n              </Button>\r\n            </Group>\r\n            \r\n            <Stack gap=\"lg\">\r\n              {filteredQueries.map((query) => (\r\n                <Card key={query.id} padding=\"lg\" radius=\"md\" withBorder onClick={() => handleViewQuery(query)} style={{ cursor: 'pointer' }}>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div style={{ flex: 1 }}>\r\n                      <Text fw={600} size=\"md\" mb=\"xs\" lineClamp={2}>\r\n                        {query.question}\r\n                      </Text>\r\n                      <Group gap=\"sm\">\r\n                        <Badge variant=\"light\" size=\"sm\" tt=\"capitalize\">\r\n                          {query.category}\r\n                        </Badge>\r\n                        <Text size=\"xs\" c=\"dimmed\">\r\n                          by {query.userName} • {formatDateTime(query.timestamp)}\r\n                        </Text>\r\n                      </Group>\r\n                    </div>\r\n                    <Group>\r\n                      <Group gap=\"xs\">\r\n                        <Text size=\"xs\" c=\"dimmed\">Confidence:</Text>\r\n                        <Progress value={query.confidence} size=\"sm\" w={60} color=\"green\" />\r\n                        <Text size=\"xs\" fw={500}>{query.confidence}%</Text>\r\n                      </Group>\r\n                      {query.feedback && (\r\n                        <Group gap=\"xs\">\r\n                          <Rating value={query.feedback.rating} readOnly size=\"sm\" />\r\n                          <Text size=\"xs\" c=\"dimmed\">({query.feedback.rating})</Text>\r\n                        </Group>\r\n                      )}\r\n                    </Group>\r\n                  </Group>\r\n\r\n                  <Spoiler maxHeight={60} showLabel=\"Show more\" hideLabel=\"Hide\">\r\n                    <Text size=\"sm\" c=\"dimmed\">\r\n                      {query.response}\r\n                    </Text>\r\n                  </Spoiler>\r\n\r\n                  <Group justify=\"space-between\" mt=\"md\">\r\n                    <Group gap=\"xs\">\r\n                      <ThemeIcon size=\"sm\" variant=\"light\" color=\"blue\">\r\n                        <IconRobot size={14} />\r\n                      </ThemeIcon>\r\n                      <Text size=\"xs\" c=\"dimmed\">\r\n                        {query.model}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconBookmark size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconShare size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </Stack>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Clinical Guidelines Tab */}\r\n        <Tabs.Panel value=\"guidelines\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Evidence-Based Clinical Guidelines</Title>\r\n            \r\n            <Accordion variant=\"contained\">\r\n              {[].map /* TODO: Fetch from API */((guideline) => (\r\n                <Accordion.Item key={guideline.id} value={guideline.id}>\r\n                  <Accordion.Control>\r\n                    <Group justify=\"space-between\">\r\n                      <div>\r\n                        <Text fw={600}>{guideline.title}</Text>\r\n                        <Group gap=\"sm\" mt=\"xs\">\r\n                          <Badge variant=\"light\" size=\"sm\" tt=\"capitalize\">\r\n                            {guideline.category}\r\n                          </Badge>\r\n                          <Text size=\"sm\" c=\"dimmed\">{guideline.condition}</Text>\r\n                        </Group>\r\n                      </div>\r\n                      <Group gap=\"xs\">\r\n                        <Text size=\"xs\" c=\"dimmed\">\r\n                          {guideline.source} • v{guideline.version}\r\n                        </Text>\r\n                      </Group>\r\n                    </Group>\r\n                  </Accordion.Control>\r\n                  <Accordion.Panel>\r\n                    <Stack gap=\"md\">\r\n                      <Text size=\"sm\">\r\n                        {guideline.description}\r\n                      </Text>\r\n\r\n                      <Divider />\r\n\r\n                      <div>\r\n                        <Text size=\"sm\" fw={600} mb=\"md\">Recommendations:</Text>\r\n                        <Stack gap=\"sm\">\r\n                          {guideline.recommendations.map((rec, index) => (\r\n                            <Card key={index} padding=\"sm\" radius=\"sm\" withBorder>\r\n                              <Group justify=\"space-between\" mb=\"xs\">\r\n                                <Group gap=\"xs\">\r\n                                  <Badge size=\"xs\" color=\"blue\" variant=\"filled\">\r\n                                    Level {rec.level}\r\n                                  </Badge>\r\n                                  <Badge size=\"xs\" color=\"green\" variant=\"outline\">\r\n                                    {rec.strength}\r\n                                  </Badge>\r\n                                </Group>\r\n                              </Group>\r\n                              <Text size=\"sm\" mb=\"xs\">\r\n                                {rec.recommendation}\r\n                              </Text>\r\n                              <Text size=\"xs\" c=\"dimmed\">\r\n                                <strong>Evidence:</strong> {rec.evidence}\r\n                              </Text>\r\n                            </Card>\r\n                          ))}\r\n                        </Stack>\r\n                      </div>\r\n\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"xs\" c=\"dimmed\">\r\n                          Applicable to: {guideline.applicability.join(', ')}\r\n                        </Text>\r\n                        <Text size=\"xs\" c=\"dimmed\">\r\n                          Last updated: {formatDate(guideline.lastUpdated)}\r\n                        </Text>\r\n                      </Group>\r\n                    </Stack>\r\n                  </Accordion.Panel>\r\n                </Accordion.Item>\r\n              ))}\r\n            </Accordion>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Drug Interactions Tab */}\r\n        <Tabs.Panel value=\"interactions\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Drug Interaction Checker</Title>\r\n            \r\n            <Stack gap=\"md\">\r\n              {[].map /* TODO: Fetch from API */((interaction) => (\r\n                <Card key={interaction.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Group mb=\"xs\">\r\n                        <Text fw={600} size=\"lg\">\r\n                          {interaction.drug1} + {interaction.drug2}\r\n                        </Text>\r\n                      </Group>\r\n                      <Group gap=\"sm\">\r\n                        <Badge color={getSeverityColor(interaction.severity)} variant=\"light\">\r\n                          {interaction.interactionType.toUpperCase()}\r\n                        </Badge>\r\n                        <Badge variant=\"outline\" size=\"sm\">\r\n                          {interaction.severity}\r\n                        </Badge>\r\n                        <Badge variant=\"outline\" size=\"sm\" color=\"gray\">\r\n                          {interaction.frequency}\r\n                        </Badge>\r\n                      </Group>\r\n                    </div>\r\n                    <Group gap=\"xs\">\r\n                      <Text size=\"xs\" c=\"dimmed\">Documentation:</Text>\r\n                      <Badge size=\"sm\" color={interaction.documentation === 'excellent' ? 'green' : interaction.documentation === 'good' ? 'blue' : 'orange'}>\r\n                        {interaction.documentation}\r\n                      </Badge>\r\n                    </Group>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\">\r\n                    <div>\r\n                      <Text size=\"sm\" fw={600} c=\"dimmed\">Mechanism:</Text>\r\n                      <Text size=\"sm\">{interaction.mechanism}</Text>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Text size=\"sm\" fw={600} c=\"dimmed\">Clinical Effect:</Text>\r\n                      <Text size=\"sm\">{interaction.clinicalEffect}</Text>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Text size=\"sm\" fw={600} c=\"dimmed\">Recommendation:</Text>\r\n                      <Text size=\"sm\">{interaction.recommendation}</Text>\r\n                    </div>\r\n                  </Stack>\r\n\r\n                  <Group justify=\"space-between\" mt=\"md\">\r\n                    <Group gap=\"md\">\r\n                      <Group gap=\"xs\">\r\n                        <Text size=\"xs\" c=\"dimmed\">Onset:</Text>\r\n                        <Text size=\"xs\" fw={500}>{interaction.onset}</Text>\r\n                      </Group>\r\n                      <Group gap=\"xs\">\r\n                        <Text size=\"xs\" c=\"dimmed\">Severity:</Text>\r\n                        <Text size=\"xs\" fw={500}>{interaction.severity}</Text>\r\n                      </Group>\r\n                    </Group>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconInfoCircle size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconBookmark size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </Stack>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Analytics Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\" mt=\"md\">\r\n            {/* Insight Types Distribution */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">AI Insights by Type</Title>\r\n              <Stack gap=\"md\">\r\n                <Group justify=\"space-between\">\r\n                  <Group gap=\"xs\">\r\n                    <ThemeIcon color=\"blue\" size=\"sm\" radius=\"xl\">\r\n                      <IconStethoscope size={14} />\r\n                    </ThemeIcon>\r\n                    <Text size=\"sm\">Diagnosis</Text>\r\n                  </Group>\r\n                  <Badge color=\"blue\" variant=\"light\">1</Badge>\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Group gap=\"xs\">\r\n                    <ThemeIcon color=\"red\" size=\"sm\" radius=\"xl\">\r\n                      <IconPill size={14} />\r\n                    </ThemeIcon>\r\n                    <Text size=\"sm\">Drug Interaction</Text>\r\n                  </Group>\r\n                  <Badge color=\"red\" variant=\"light\">1</Badge>\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Group gap=\"xs\">\r\n                    <ThemeIcon color=\"orange\" size=\"sm\" radius=\"xl\">\r\n                      <IconShield size={14} />\r\n                    </ThemeIcon>\r\n                    <Text size=\"sm\">Risk Assessment</Text>\r\n                  </Group>\r\n                  <Badge color=\"orange\" variant=\"light\">1</Badge>\r\n                </Group>\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* Confidence Levels */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">AI Confidence Distribution</Title>\r\n              <Stack gap=\"sm\">\r\n                <div>\r\n                  <Group justify=\"space-between\" mb=\"xs\">\r\n                    <Text size=\"sm\">90-100%</Text>\r\n                    <Text size=\"sm\" fw={500}>2</Text>\r\n                  </Group>\r\n                  <Progress value={100} color=\"teal\" size=\"lg\" />\r\n                </div>\r\n                <div>\r\n                  <Group justify=\"space-between\" mb=\"xs\">\r\n                    <Text size=\"sm\">80-89%</Text>\r\n                    <Text size=\"sm\" fw={500}>1</Text>\r\n                  </Group>\r\n                  <Progress value={50} color=\"teal\" size=\"lg\" />\r\n                </div>\r\n                <div>\r\n                  <Group justify=\"space-between\" mb=\"xs\">\r\n                    <Text size=\"sm\">70-79%</Text>\r\n                    <Text size=\"sm\" fw={500}>0</Text>\r\n                  </Group>\r\n                  <Progress value={0} color=\"teal\" size=\"lg\" />\r\n                </div>\r\n                <div>\r\n                  <Group justify=\"space-between\" mb=\"xs\">\r\n                    <Text size=\"sm\">60-69%</Text>\r\n                    <Text size=\"sm\" fw={500}>0</Text>\r\n                  </Group>\r\n                  <Progress value={0} color=\"teal\" size=\"lg\" />\r\n                </div>\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* Query Categories */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">AI Queries by Category</Title>\r\n              <Stack gap=\"md\">\r\n                <Group justify=\"space-between\">\r\n                  <Group gap=\"xs\">\r\n                    <ThemeIcon color=\"blue\" size=\"sm\" radius=\"xl\">\r\n                      <IconStethoscope size={14} />\r\n                    </ThemeIcon>\r\n                    <Text size=\"sm\">Diagnosis</Text>\r\n                  </Group>\r\n                  <Badge color=\"blue\" variant=\"light\">1</Badge>\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Group gap=\"xs\">\r\n                    <ThemeIcon color=\"green\" size=\"sm\" radius=\"xl\">\r\n                      <IconMedicalCross size={14} />\r\n                    </ThemeIcon>\r\n                    <Text size=\"sm\">Treatment</Text>\r\n                  </Group>\r\n                  <Badge color=\"green\" variant=\"light\">1</Badge>\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Group gap=\"xs\">\r\n                    <ThemeIcon color=\"orange\" size=\"sm\" radius=\"xl\">\r\n                      <IconPill size={14} />\r\n                    </ThemeIcon>\r\n                    <Text size=\"sm\">Medication</Text>\r\n                  </Group>\r\n                  <Badge color=\"orange\" variant=\"light\">1</Badge>\r\n                </Group>\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* User Satisfaction */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">User Satisfaction Trends</Title>\r\n              <Stack gap=\"sm\">\r\n                <div>\r\n                  <Group justify=\"space-between\" mb=\"xs\">\r\n                    <Text size=\"sm\">Week 1</Text>\r\n                    <Group gap=\"md\">\r\n                      <Badge color=\"blue\" variant=\"light\">Rating: 4.2</Badge>\r\n                      <Badge color=\"green\" variant=\"light\">Helpful: 85%</Badge>\r\n                    </Group>\r\n                  </Group>\r\n                  <Progress value={85} color=\"green\" size=\"md\" />\r\n                </div>\r\n                <div>\r\n                  <Group justify=\"space-between\" mb=\"xs\">\r\n                    <Text size=\"sm\">Week 2</Text>\r\n                    <Group gap=\"md\">\r\n                      <Badge color=\"blue\" variant=\"light\">Rating: 4.5</Badge>\r\n                      <Badge color=\"green\" variant=\"light\">Helpful: 88%</Badge>\r\n                    </Group>\r\n                  </Group>\r\n                  <Progress value={88} color=\"green\" size=\"md\" />\r\n                </div>\r\n                <div>\r\n                  <Group justify=\"space-between\" mb=\"xs\">\r\n                    <Text size=\"sm\">Week 3</Text>\r\n                    <Group gap=\"md\">\r\n                      <Badge color=\"blue\" variant=\"light\">Rating: 4.3</Badge>\r\n                      <Badge color=\"green\" variant=\"light\">Helpful: 82%</Badge>\r\n                    </Group>\r\n                  </Group>\r\n                  <Progress value={82} color=\"green\" size=\"md\" />\r\n                </div>\r\n                <div>\r\n                  <Group justify=\"space-between\" mb=\"xs\">\r\n                    <Text size=\"sm\">Week 4</Text>\r\n                    <Group gap=\"md\">\r\n                      <Badge color=\"blue\" variant=\"light\">Rating: 4.7</Badge>\r\n                      <Badge color=\"green\" variant=\"light\">Helpful: 91%</Badge>\r\n                    </Group>\r\n                  </Group>\r\n                  <Progress value={91} color=\"green\" size=\"md\" />\r\n                </div>\r\n              </Stack>\r\n            </Card>\r\n          </SimpleGrid>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Insight Detail Modal */}\r\n      <Modal\r\n        opened={insightDetailOpened}\r\n        onClose={closeInsightDetail}\r\n        title=\"AI Insight Details\"\r\n        size=\"xl\"\r\n      >\r\n        {selectedInsight && (\r\n          <ScrollArea h={600}>\r\n            <Stack gap=\"md\">\r\n              {/* Insight Header */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Group justify=\"space-between\" mb=\"md\">\r\n                  <div>\r\n                    <Group mb=\"xs\">\r\n                      <ThemeIcon variant=\"light\" color={getSeverityColor(selectedInsight.severity)}>\r\n                        {getTypeIcon(selectedInsight.type)}\r\n                      </ThemeIcon>\r\n                      <Title order={3}>{selectedInsight.title}</Title>\r\n                    </Group>\r\n                    {selectedInsight.patientName && (\r\n                      <Text c=\"dimmed\">Patient: {selectedInsight.patientName}</Text>\r\n                    )}\r\n                  </div>\r\n                  <Group>\r\n                    <Badge color={getSeverityColor(selectedInsight.severity)} variant=\"light\" size=\"lg\">\r\n                      {selectedInsight.severity.toUpperCase()}\r\n                    </Badge>\r\n                    <Badge color={getStatusColor(selectedInsight.status)} variant=\"outline\" size=\"lg\">\r\n                      {selectedInsight.status.toUpperCase()}\r\n                    </Badge>\r\n                  </Group>\r\n                </Group>\r\n\r\n                <Text mb=\"md\">{selectedInsight.description}</Text>\r\n\r\n                <Group gap=\"md\">\r\n                  <Group gap=\"xs\">\r\n                    <Text size=\"sm\" c=\"dimmed\">Confidence:</Text>\r\n                    <Progress value={selectedInsight.confidence} size=\"lg\" w={120} color=\"blue\" />\r\n                    <Text size=\"sm\" fw={600}>{selectedInsight.confidence}%</Text>\r\n                  </Group>\r\n                  <Group gap=\"xs\">\r\n                    <Text size=\"sm\" c=\"dimmed\">Generated by:</Text>\r\n                    <Text size=\"sm\" fw={500}>{selectedInsight.generatedBy}</Text>\r\n                  </Group>\r\n                </Group>\r\n              </Card>\r\n\r\n              {/* Evidence */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={5} mb=\"md\">Supporting Evidence</Title>\r\n                <Stack gap=\"sm\">\r\n                  {selectedInsight.evidence.map((evidence, index) => (\r\n                    <Card key={index} padding=\"sm\" radius=\"sm\" withBorder>\r\n                      <Group justify=\"space-between\" mb=\"xs\">\r\n                        <Text size=\"sm\" fw={500}>{evidence.source}</Text>\r\n                        <Group gap=\"xs\">\r\n                          <Text size=\"xs\" c=\"dimmed\">Relevance:</Text>\r\n                          <Progress value={evidence.relevance} size=\"sm\" w={60} color=\"green\" />\r\n                          <Text size=\"xs\" fw={500}>{evidence.relevance}%</Text>\r\n                        </Group>\r\n                      </Group>\r\n                      <Text size=\"sm\" c=\"dimmed\">{evidence.description}</Text>\r\n                    </Card>\r\n                  ))}\r\n                </Stack>\r\n              </Card>\r\n\r\n              {/* Recommendations */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={5} mb=\"md\">Recommendations</Title>\r\n                <Stack gap=\"sm\">\r\n                  {selectedInsight.recommendations.map((rec, index) => (\r\n                    <Card key={index} padding=\"sm\" radius=\"sm\" withBorder>\r\n                      <Group justify=\"space-between\" mb=\"xs\">\r\n                        <Text size=\"sm\" fw={500}>{rec.action}</Text>\r\n                        <Group gap=\"xs\">\r\n                          <Badge size=\"sm\" color={getPriorityColor(rec.priority)} variant=\"light\">\r\n                            {rec.priority.toUpperCase()}\r\n                          </Badge>\r\n                          <Text size=\"xs\" c=\"dimmed\">{rec.timeframe}</Text>\r\n                        </Group>\r\n                      </Group>\r\n                    </Card>\r\n                  ))}\r\n                </Stack>\r\n              </Card>\r\n\r\n              {/* Clinical Context */}\r\n              {selectedInsight.metadata && (\r\n                <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Title order={5} mb=\"md\">Clinical Context</Title>\r\n                  <SimpleGrid cols={2} spacing=\"md\">\r\n                    {selectedInsight.metadata.symptoms && (\r\n                      <div>\r\n                        <Text size=\"sm\" fw={500} c=\"dimmed\" mb=\"xs\">Symptoms</Text>\r\n                        <Group gap=\"xs\">\r\n                          {selectedInsight.metadata.symptoms.map((symptom, index) => (\r\n                            <Chip key={index} size=\"sm\" variant=\"light\">\r\n                              {symptom}\r\n                            </Chip>\r\n                          ))}\r\n                        </Group>\r\n                      </div>\r\n                    )}\r\n                    {selectedInsight.metadata.medications && (\r\n                      <div>\r\n                        <Text size=\"sm\" fw={500} c=\"dimmed\" mb=\"xs\">Current Medications</Text>\r\n                        <Group gap=\"xs\">\r\n                          {selectedInsight.metadata.medications.map((med, index) => (\r\n                            <Chip key={index} size=\"sm\" variant=\"light\" color=\"blue\">\r\n                              {med}\r\n                            </Chip>\r\n                          ))}\r\n                        </Group>\r\n                      </div>\r\n                    )}\r\n                  </SimpleGrid>\r\n                </Card>\r\n              )}\r\n\r\n              {/* Action Buttons */}\r\n              <Group justify=\"flex-end\">\r\n                <Button variant=\"light\" onClick={closeInsightDetail}>\r\n                  Close\r\n                </Button>\r\n                <Button variant=\"light\" color=\"red\" leftSection={<IconX size={16} />}>\r\n                  Reject\r\n                </Button>\r\n                <Button leftSection={<IconCheck size={16} />} color=\"green\">\r\n                  Accept & Implement\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </ScrollArea>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Ask AI Modal */}\r\n      <Modal\r\n        opened={askAIOpened}\r\n        onClose={closeAskAI}\r\n        title=\"Ask AI Assistant\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <Alert icon={<IconInfoCircle size=\"1rem\" />} title=\"AI Assistant Guidelines\" color=\"blue\">\r\n            Ask specific clinical questions for better responses. Include patient context when relevant.\r\n          </Alert>\r\n\r\n          <Textarea\r\n            label=\"Your Question\"\r\n            placeholder=\"Ask about diagnosis, treatment, drug interactions, or any clinical topic...\"\r\n            minRows={4}\r\n            value={newQuery}\r\n            onChange={(event) => setNewQuery(event.currentTarget.value)}\r\n            required\r\n          />\r\n\r\n          <SimpleGrid cols={2} spacing=\"md\">\r\n            <Select\r\n              label=\"Question Category\"\r\n              placeholder=\"Select category\"\r\n              data={[\r\n                { value: 'diagnosis', label: 'Diagnosis' },\r\n                { value: 'treatment', label: 'Treatment' },\r\n                { value: 'medication', label: 'Medication' },\r\n                { value: 'general', label: 'General Medical' },\r\n                { value: 'emergency', label: 'Emergency' }\r\n              ]}\r\n            />\r\n            <Select\r\n              label=\"Patient Context (Optional)\"\r\n              placeholder=\"Select patient\"\r\n              data={[\r\n                { value: 'P001', label: 'Rajesh Kumar' },\r\n                { value: 'P002', label: 'Sunita Patel' },\r\n                { value: 'P003', label: 'Mohammed Ali' }\r\n              ]}\r\n            />\r\n          </SimpleGrid>\r\n\r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAskAI}>\r\n              Cancel\r\n            </Button>\r\n            <Button \r\n              leftSection={isLoading ? <Loader size={16} /> : <IconSend size={16} />}\r\n              onClick={handleAskAI}\r\n              disabled={!newQuery.trim() || isLoading}\r\n            >\r\n              {isLoading ? 'Processing...' : 'Ask AI'}\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst getPriorityColor = (priority: string) => {\r\n  switch (priority) {\r\n    case 'high': return 'red';\r\n    case 'medium': return 'yellow';\r\n    case 'low': return 'green';\r\n    default: return 'gray';\r\n  }\r\n};\r\n\r\nexport default AIAssistant;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\appointments\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Flex' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Anchor' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 44,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 49,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 49,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconActivity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 57,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 58,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 58,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 59,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUserX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCurrencyRupee' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 63,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 63,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVideo' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 64,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHistory' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendarStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReport' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AppointmentSearchFilters' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AppointmentStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 78,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'formatDateTime' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 88,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 88,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'loading' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 110,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 110,
        "endColumn": 17
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAppointments'. Either include it or remove the dependency array.",
        "line": 118,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 118,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAppointments]",
            "fix": { "range": [2982, 2984], "text": "[fetchAppointments]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'fetchAppointments' and 'isClient'. Either include them or remove the dependency array.",
        "line": 168,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 168,
        "endColumn": 65,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [selectedDoctor, selectedStatus, selectedDate, searchQuery, isClient, fetchAppointments]",
            "fix": {
              "range": [4580, 4639],
              "text": "[selectedDoctor, selectedStatus, selectedDate, searchQuery, isClient, fetchAppointments]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'rescheduleOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 173,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 173,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeReschedule' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 173,
        "column": 59,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 173,
        "endColumn": 74
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 22,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Timeline,\r\n  Alert,\r\n  Progress,\r\n  Flex,\r\n  Anchor,\r\n  NumberInput,\r\n  Textarea\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { Calendar, DatePickerInput } from '@mantine/dates';\r\n// import { AreaChart, BarChart, DonutChart, LineChart } from '@mantine/charts';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconCalendar,\r\n  IconClock,\r\n  IconUsers,\r\n  IconChartBar,\r\n  IconPhone,\r\n  IconMail,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconCalendarEvent,\r\n  IconStethoscope,\r\n  IconActivity,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconClockHour3,\r\n  IconUserCheck,\r\n  IconUserX,\r\n  IconCurrencyRupee,\r\n  IconVideo,\r\n  IconBell,\r\n  IconHistory,\r\n  IconCalendarStats,\r\n  IconReport\r\n} from '@tabler/icons-react';\r\n\r\n// Import types and services\r\nimport { \r\n  Appointment, \r\n  AppointmentStatus, \r\n  AppointmentType, \r\n  AppointmentPriority,\r\n  AppointmentSearchFilters,\r\n  AppointmentStats\r\n} from '../../../types/appointment';\r\nimport appointmentsService from '../../../services/appointments.service';\r\n\r\nconst AppointmentManagement = () => {\r\n  // Utility function for consistent date formatting\r\n  const formatDate = (date: string | Date) => {\r\n    return new Date(date).toLocaleDateString('en-CA'); // YYYY-MM-DD format\r\n  };\r\n\r\n  const formatDateTime = (date: string | Date) => {\r\n    return new Date(date).toLocaleString('en-US', {\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: true\r\n    });\r\n  };\r\n\r\n  // State management\r\n  const [isClient, setIsClient] = useState(false);\r\n  const [activeTab, setActiveTab] = useState<string>('appointments');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedDoctor, setSelectedDoctor] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedType, setSelectedType] = useState<string>('');\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n  const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);\r\n  const [appointments, setAppointments] = useState<Appointment[]>([]);\r\n  const [appointmentStats, setAppointmentStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Handle hydration\r\n  useEffect(() => {\r\n    setIsClient(true);\r\n    fetchAppointments();\r\n    fetchStats();\r\n  }, []);\r\n\r\n  // Fetch appointments from API\r\n  const fetchAppointments = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const filters = {\r\n        doctorId: selectedDoctor || undefined,\r\n        status: selectedStatus || undefined,\r\n        startDate: selectedDate ? selectedDate.toISOString() : undefined,\r\n        search: searchQuery || undefined\r\n      };\r\n      const response = await appointmentsService.getAppointments(filters);\r\n      console.log('Appointments API response:', response);\r\n      setAppointments(response.data || []);\r\n      setError(null);\r\n    } catch (err: any) {\r\n      const errorMsg = err.response?.data?.message || err.message || 'Failed to fetch appointments';\r\n      console.warn('Error fetching appointments (using empty data):', errorMsg);\r\n      setError(null);\r\n      setAppointments([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch stats from API\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await appointmentsService.getAppointmentStats();\r\n      console.log('Appointment stats API response:', response);\r\n      setAppointmentStats(response.data);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching appointment stats (using default values):', err.response?.data?.message || err.message);\r\n      setAppointmentStats({ \r\n        total: 0, \r\n        today: 0, \r\n        pending: 0, \r\n        completed: 0,\r\n        scheduled: 0,\r\n        cancelled: 0\r\n      });\r\n    }\r\n  };\r\n\r\n  // Refetch when filters change\r\n  useEffect(() => {\r\n    if (isClient) {\r\n      fetchAppointments();\r\n    }\r\n  }, [selectedDoctor, selectedStatus, selectedDate, searchQuery]);\r\n\r\n  // Modal states\r\n  const [appointmentDetailOpened, { open: openAppointmentDetail, close: closeAppointmentDetail }] = useDisclosure(false);\r\n  const [bookAppointmentOpened, { open: openBookAppointment, close: closeBookAppointment }] = useDisclosure(false);\r\n  const [rescheduleOpened, { open: openReschedule, close: closeReschedule }] = useDisclosure(false);\r\n\r\n  // Filter appointments - now using API data\r\n  const filteredAppointments = useMemo(() => {\r\n    return appointments.filter((appointment) => {\r\n      const matchesType = !selectedType || appointment.appointmentType === selectedType;\r\n      return matchesType; // Other filtering is handled by API\r\n    });\r\n  }, [appointments, selectedType]);\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: AppointmentStatus) => {\r\n    switch (status) {\r\n      case 'SCHEDULED': return 'blue';\r\n      case 'ARRIVED': return 'teal';\r\n      case 'IN_PROGRESS': return 'yellow';\r\n      case 'COMPLETED': return 'green';\r\n      case 'CANCELLED': return 'red';\r\n      case 'NO_SHOW': return 'gray';\r\n      case 'RESCHEDULED': return 'orange';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getTypeColor = (type: AppointmentType) => {\r\n    switch (type) {\r\n      case 'emergency': return 'red';\r\n      case 'consultation': return 'blue';\r\n      case 'follow_up': return 'green';\r\n      case 'surgery_consultation': return 'purple';\r\n      case 'telemedicine': return 'cyan';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: AppointmentPriority) => {\r\n    switch (priority) {\r\n      case 'emergency': return 'red';\r\n      case 'urgent': return 'orange';\r\n      case 'high': return 'yellow';\r\n      case 'normal': return 'blue';\r\n      case 'low': return 'gray';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const handleViewAppointment = (appointment: Appointment) => {\r\n    setSelectedAppointment(appointment);\r\n    openAppointmentDetail();\r\n  };\r\n\r\n  const handleStatusUpdate = async (appointmentId: string, newStatus: AppointmentStatus) => {\r\n    try {\r\n      await appointmentsService.updateAppointmentStatus(appointmentId, newStatus);\r\n      notifications.show({\r\n        title: 'Appointment Updated',\r\n        message: `Appointment status changed to ${newStatus}`,\r\n        color: 'green',\r\n      });\r\n      fetchAppointments(); // Refresh the list\r\n    } catch (error: any) {\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error.response?.data?.message || 'Failed to update appointment status',\r\n        color: 'red',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCancelAppointment = async (appointment: Appointment) => {\r\n    if (!window.confirm(`Cancel appointment for ${appointment.patient.firstName} ${appointment.patient.lastName}?`)) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await appointmentsService.updateAppointmentStatus(appointment.id, 'CANCELLED');\r\n      notifications.show({\r\n        title: 'Appointment Cancelled',\r\n        message: `Appointment for ${appointment.patient.firstName} ${appointment.patient.lastName} has been cancelled`,\r\n        color: 'green',\r\n      });\r\n      fetchAppointments(); // Refresh the list\r\n    } catch (error: any) {\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error.response?.data?.message || 'Failed to cancel appointment',\r\n        color: 'red',\r\n      });\r\n    }\r\n  };\r\n\r\n  // Statistics cards\r\n  const statsCards = appointmentStats ? [\r\n    {\r\n      title: 'Total',\r\n      value: appointmentStats.total || 0,\r\n      icon: IconCalendarEvent,\r\n      color: 'blue',\r\n      trend: null\r\n    },\r\n    {\r\n      title: 'Today',\r\n      value: appointmentStats.today || 0,\r\n      icon: IconClock,\r\n      color: 'green',\r\n      trend: null\r\n    },\r\n    {\r\n      title: 'Pending',\r\n      value: appointmentStats.pending || 0,\r\n      icon: IconClockHour3,\r\n      color: 'yellow',\r\n      trend: null\r\n    },\r\n    {\r\n      title: 'Completed',\r\n      value: appointmentStats.completed || 0,\r\n      icon: IconCheck,\r\n      color: 'teal',\r\n      trend: null\r\n    }\r\n  ] : [];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Appointment Management</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Schedule, manage, and track patient appointments\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={openBookAppointment}\r\n          >\r\n            Book Appointment\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Alert icon={<IconAlertCircle size=\"1rem\" />} title=\"Error\" color=\"red\" variant=\"light\" mb=\"lg\">\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Statistics Cards */}\r\n      {appointmentStats && (\r\n        <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n          {statsCards.map((stat) => {\r\n            const Icon = stat.icon;\r\n            return (\r\n              <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                      {stat.title}\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stat.value}\r\n                    </Text>\r\n                  </div>\r\n                  <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                    <Icon size={24} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n              </Card>\r\n            );\r\n          })}\r\n        </SimpleGrid>\r\n      )}\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'appointments')}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"appointments\" leftSection={<IconCalendarEvent size={16} />}>\r\n            Appointments\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"calendar\" leftSection={<IconCalendar size={16} />}>\r\n            Calendar View\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"queue\" leftSection={<IconUsers size={16} />}>\r\n            Queue Management\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"reminders\" leftSection={<IconBell size={16} />}>\r\n            Reminders\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconChartBar size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Appointments Tab */}\r\n        <Tabs.Panel value=\"appointments\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search appointments...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Doctor\"\r\n                data={[]} // TODO: Fetch from staff API\r\n                value={selectedDoctor}\r\n                onChange={(value) => setSelectedDoctor(value || '')}\r\n                searchable\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'scheduled', label: 'Scheduled' },\r\n                  { value: 'arrived', label: 'Arrived' },\r\n                  { value: 'in_progress', label: 'In Progress' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'cancelled', label: 'Cancelled' },\r\n                  { value: 'no_show', label: 'No Show' },\r\n                  { value: 'rescheduled', label: 'Rescheduled' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={(value) => setSelectedStatus(value || '')}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Type\"\r\n                data={[\r\n                  { value: 'consultation', label: 'Consultation' },\r\n                  { value: 'follow_up', label: 'Follow-up' },\r\n                  { value: 'emergency', label: 'Emergency' },\r\n                  { value: 'telemedicine', label: 'Telemedicine' }\r\n                ]}\r\n                value={selectedType}\r\n                onChange={(value) => setSelectedType(value || '')}\r\n                clearable\r\n              />\r\n              <DatePickerInput\r\n                placeholder=\"Select date\"\r\n                value={selectedDate}\r\n                onChange={setSelectedDate as any}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Appointments Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Patient</Table.Th>\r\n                    <Table.Th>Doctor</Table.Th>\r\n                    <Table.Th>Date & Time</Table.Th>\r\n                    <Table.Th>Type</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Priority</Table.Th>\r\n                    <Table.Th>Fee</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredAppointments.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={7}>\r\n                        <EmptyState\r\n                          icon={<IconCalendar size={48} />}\r\n                          title=\"No appointments found\"\r\n                          description={searchQuery || selectedDoctor || selectedStatus ? \r\n                            \"No appointments match your search criteria. Try adjusting your filters.\" :\r\n                            \"No appointments scheduled yet. Book your first appointment to get started.\"\r\n                          }\r\n                          action={!searchQuery && !selectedDoctor && !selectedStatus ? {\r\n                            label: \"Book Appointment\",\r\n                            onClick: openBookAppointment\r\n                          } : undefined}\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredAppointments.map((appointment) => (\r\n                    <Table.Tr key={appointment.id}>\r\n                      <Table.Td>\r\n                        <Group>\r\n                          <Avatar color=\"blue\" radius=\"xl\">\r\n                            {appointment.patient.firstName[0]}{appointment.patient.lastName[0]}\r\n                          </Avatar>\r\n                          <div>\r\n                            <Text fw={500}>\r\n                              {appointment.patient.firstName} {appointment.patient.lastName}\r\n                            </Text>\r\n                            <Text size=\"sm\" c=\"dimmed\">\r\n                              {appointment.appointmentNumber}\r\n                            </Text>\r\n                          </div>\r\n                        </Group>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text fw={500}>\r\n                            {appointment.doctor.firstName} {appointment.doctor.lastName}\r\n                          </Text>\r\n                          <Text size=\"sm\" c=\"dimmed\">\r\n                            {appointment.department}\r\n                          </Text>\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text fw={500}>\r\n                            {isClient ? formatDate(appointment.appointmentDate) : 'Loading...'}\r\n                          </Text>\r\n                          <Text size=\"sm\" c=\"dimmed\">\r\n                            {appointment.appointmentTime} ({appointment.duration} min)\r\n                          </Text>\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getTypeColor(appointment.appointmentType)} variant=\"light\">\r\n                          {appointment.appointmentType.replace('_', ' ')}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getStatusColor(appointment.status)} variant=\"light\">\r\n                          {appointment.status.replace('_', ' ')}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getPriorityColor(appointment.priority)} variant=\"light\" size=\"sm\">\r\n                          {appointment.priority}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text fw={500}>₹{appointment.consultationFee}</Text>\r\n                          <Badge \r\n                            color={appointment.isPaid ? 'green' : 'red'} \r\n                            variant=\"light\" \r\n                            size=\"xs\"\r\n                          >\r\n                            {appointment.isPaid ? 'Paid' : 'Pending'}\r\n                          </Badge>\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon\r\n                            variant=\"subtle\"\r\n                            color=\"blue\"\r\n                            onClick={() => handleViewAppointment(appointment)}\r\n                          >\r\n                            <IconEye size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon\r\n                            variant=\"subtle\"\r\n                            color=\"green\"\r\n                            onClick={openReschedule}\r\n                          >\r\n                            <IconEdit size={16} />\r\n                          </ActionIcon>\r\n                          <Menu>\r\n                            <Menu.Target>\r\n                              <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                                <IconDotsVertical size={16} />\r\n                              </ActionIcon>\r\n                            </Menu.Target>\r\n                            <Menu.Dropdown>\r\n                              <Menu.Item \r\n                                leftSection={<IconCheck size={14} />}\r\n                                onClick={() => handleStatusUpdate(appointment.id, 'ARRIVED')}\r\n                              >\r\n                                Confirm\r\n                              </Menu.Item>\r\n                              <Menu.Item \r\n                                leftSection={<IconUserCheck size={14} />}\r\n                                onClick={() => handleStatusUpdate(appointment.id, 'ARRIVED')}\r\n                              >\r\n                                Check In\r\n                              </Menu.Item>\r\n                              <Menu.Item \r\n                                leftSection={<IconX size={14} />}\r\n                                color=\"red\"\r\n                                onClick={() => handleCancelAppointment(appointment)}\r\n                              >\r\n                                Cancel\r\n                              </Menu.Item>\r\n                            </Menu.Dropdown>\r\n                          </Menu>\r\n                        </Group>\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  )))\r\n                  }\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Calendar Tab */}\r\n        <Tabs.Panel value=\"calendar\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Appointment Calendar</Title>\r\n              <Group>\r\n                <Select\r\n                  placeholder=\"Select Doctor\"\r\n                  data={[].map /* TODO: Fetch from API */(doctor => ({ \r\n                    value: doctor.staffId, \r\n                    label: `${doctor.firstName} ${doctor.lastName}` \r\n                  }))}\r\n                  value={selectedDoctor}\r\n                  onChange={(value) => setSelectedDoctor(value || '')}\r\n                />\r\n                <Button leftSection={<IconPlus size={16} />}>\r\n                  Add Slot\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }}>\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Calendar</Title>\r\n                <Calendar \r\n                  size=\"md\"\r\n                  static\r\n                  renderDay={(date) => {\r\n                    const dateObj = new Date(date as any);\r\n                    const hasAppointments = appointments.some(apt => \r\n                      new Date(apt.appointmentDate).toDateString() === dateObj.toDateString()\r\n                    );\r\n                    return (\r\n                      <div style={{ \r\n                        width: '100%', \r\n                        height: '100%',\r\n                        backgroundColor: hasAppointments ? '#e3f2fd' : 'transparent',\r\n                        borderRadius: '4px'\r\n                      }}>\r\n                        {dateObj.getDate()}\r\n                      </div>\r\n                    );\r\n                  }}\r\n                />\r\n              </Card>\r\n\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Today&apos;s Schedule</Title>\r\n                <Stack gap=\"sm\">\r\n                  {appointments\r\n                    .filter(apt => \r\n                      new Date(apt.appointmentDate).toDateString() === new Date().toDateString()\r\n                    )\r\n                    .map((appointment) => (\r\n                    <Group key={appointment.id} justify=\"space-between\" p=\"sm\" \r\n                           style={{ border: '1px solid #e9ecef', borderRadius: '8px' }}>\r\n                      <div>\r\n                        <Text fw={500}>{appointment.appointmentTime}</Text>\r\n                        <Text size=\"sm\" c=\"dimmed\">\r\n                          {appointment.patient.firstName} {appointment.patient.lastName}\r\n                        </Text>\r\n                        <Text size=\"xs\" c=\"dimmed\">\r\n                          {appointment.doctor.firstName} {appointment.doctor.lastName}\r\n                        </Text>\r\n                      </div>\r\n                      <Badge color={getStatusColor(appointment.status)} variant=\"light\" size=\"sm\">\r\n                        {appointment.status}\r\n                      </Badge>\r\n                    </Group>\r\n                  ))}\r\n                </Stack>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Queue Management Tab */}\r\n        <Tabs.Panel value=\"queue\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Queue Management</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} mb=\"lg\">\r\n              <Card padding=\"md\" radius=\"md\" withBorder>\r\n                <Group justify=\"center\">\r\n                  <ThemeIcon size=\"xl\" color=\"blue\" variant=\"light\">\r\n                    <IconUsers size={24} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n                <Text ta=\"center\" fw={600} size=\"lg\" mt=\"sm\">8</Text>\r\n                <Text ta=\"center\" size=\"sm\" c=\"dimmed\">Waiting</Text>\r\n              </Card>\r\n              \r\n              <Card padding=\"md\" radius=\"md\" withBorder>\r\n                <Group justify=\"center\">\r\n                  <ThemeIcon size=\"xl\" color=\"green\" variant=\"light\">\r\n                    <IconStethoscope size={24} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n                <Text ta=\"center\" fw={600} size=\"lg\" mt=\"sm\">3</Text>\r\n                <Text ta=\"center\" size=\"sm\" c=\"dimmed\">In Consultation</Text>\r\n              </Card>\r\n              \r\n              <Card padding=\"md\" radius=\"md\" withBorder>\r\n                <Group justify=\"center\">\r\n                  <ThemeIcon size=\"xl\" color=\"orange\" variant=\"light\">\r\n                    <IconClockHour3 size={24} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n                <Text ta=\"center\" fw={600} size=\"lg\" mt=\"sm\">15 min</Text>\r\n                <Text ta=\"center\" size=\"sm\" c=\"dimmed\">Avg Wait Time</Text>\r\n              </Card>\r\n            </SimpleGrid>\r\n\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Current Queue</Title>\r\n              {appointments\r\n                .filter(apt => apt.status === 'SCHEDULED' || apt.status === 'ARRIVED')\r\n                .slice(0, 5) // Show first 5 appointments as a simple queue\r\n                .map((appointment, index) => (\r\n                <Group key={appointment.id} justify=\"space-between\" \r\n                       p=\"md\" style={{ backgroundColor: '#f8f9fa', borderRadius: '8px' }}>\r\n                  <Group>\r\n                    <Badge color=\"blue\" variant=\"light\" size=\"lg\">\r\n                      {index + 1}\r\n                    </Badge>\r\n                    <div>\r\n                      <Text fw={500}>\r\n                        {appointment.patient.firstName} {appointment.patient.lastName}\r\n                      </Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {appointment.reason || 'Consultation'}\r\n                      </Text>\r\n                    </div>\r\n                  </Group>\r\n                  <Group>\r\n                    <Text size=\"sm\" c=\"dimmed\">\r\n                      Est. {appointment.appointmentTime}\r\n                    </Text>\r\n                    <Badge color={appointment.status === 'ARRIVED' ? 'green' : 'blue'} variant=\"light\">\r\n                      {appointment.status}\r\n                    </Badge>\r\n                  </Group>\r\n                </Group>\r\n              ))}\r\n            </Card>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Reminders Tab */}\r\n        <Tabs.Panel value=\"reminders\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Appointment Reminders</Title>\r\n              <Button leftSection={<IconBell size={16} />}>\r\n                Configure Reminders\r\n              </Button>\r\n            </Group>\r\n\r\n            <SimpleGrid cols={{ base: 1, md: 2 }} spacing=\"lg\">\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Reminder Settings</Title>\r\n                <Stack gap=\"md\">\r\n                  <Group justify=\"space-between\">\r\n                    <Text>24-hour reminder</Text>\r\n                    <Badge color=\"green\" variant=\"light\">Enabled</Badge>\r\n                  </Group>\r\n                  <Group justify=\"space-between\">\r\n                    <Text>2-hour reminder</Text>\r\n                    <Badge color=\"green\" variant=\"light\">Enabled</Badge>\r\n                  </Group>\r\n                  <Group justify=\"space-between\">\r\n                    <Text>SMS notifications</Text>\r\n                    <Badge color=\"blue\" variant=\"light\">Active</Badge>\r\n                  </Group>\r\n                  <Group justify=\"space-between\">\r\n                    <Text>Email notifications</Text>\r\n                    <Badge color=\"blue\" variant=\"light\">Active</Badge>\r\n                  </Group>\r\n                </Stack>\r\n              </Card>\r\n\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Recent Reminders</Title>\r\n                <Timeline>\r\n                  {[\r\n                    { id: '1', reminderType: 'appointment_reminder', message: 'Upcoming appointment in 2 hours', scheduledTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(), status: 'sent' },\r\n                    { id: '2', reminderType: 'follow_up', message: 'Follow-up appointment reminder', scheduledTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), status: 'pending' },\r\n                    { id: '3', reminderType: 'appointment_reminder', message: 'Appointment confirmation sent', scheduledTime: new Date(Date.now() - 60 * 60 * 1000).toISOString(), status: 'sent' }\r\n                  ].map((reminder) => (\r\n                    <Timeline.Item \r\n                      key={reminder.id}\r\n                      bullet={<IconBell size={12} />}\r\n                      title={reminder.reminderType.replace('_', ' ').toUpperCase()}\r\n                    >\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {reminder.message}\r\n                      </Text>\r\n                      <Text size=\"xs\" c=\"dimmed\" mt=\"xs\">\r\n                        {new Date(reminder.scheduledTime).toLocaleString()}\r\n                      </Text>\r\n                      <Badge \r\n                        color={reminder.status === 'sent' ? 'green' : 'blue'} \r\n                        variant=\"light\" \r\n                        size=\"xs\" \r\n                        mt=\"xs\"\r\n                      >\r\n                        {reminder.status}\r\n                      </Badge>\r\n                    </Timeline.Item>\r\n                  ))}\r\n                </Timeline>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Analytics Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Appointment Analytics</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {/* Appointments by Status */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Appointments by Status</Title>\r\n                <Text c=\"dimmed\" ta=\"center\" p=\"xl\">\r\n                  Chart component temporarily disabled\r\n                </Text>\r\n              </Card>\r\n              \r\n              {/* Appointments by Type */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Appointments by Type</Title>\r\n                <Text c=\"dimmed\" ta=\"center\" p=\"xl\">\r\n                  Chart component temporarily disabled\r\n                </Text>\r\n              </Card>\r\n              \r\n              {/* Daily Appointments Trend */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder style={{ gridColumn: '1 / -1' }}>\r\n                <Title order={4} mb=\"md\">Daily Appointments</Title>\r\n                <Text c=\"dimmed\" ta=\"center\" p=\"xl\">\r\n                  Chart component temporarily disabled\r\n                </Text>\r\n              </Card>\r\n              \r\n              {/* Peak Hours */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Peak Hours</Title>\r\n                <Text c=\"dimmed\" ta=\"center\" p=\"xl\">\r\n                  Chart component temporarily disabled\r\n                </Text>\r\n              </Card>\r\n              \r\n              {/* Revenue Metrics */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Revenue Overview</Title>\r\n                <Stack gap=\"md\">\r\n                  <div>\r\n                    <Group justify=\"space-between\" mb=\"xs\">\r\n                      <Text size=\"sm\">Total Revenue</Text>\r\n                      <Text size=\"sm\" fw={500}>₹{(appointmentStats?.totalRevenue || 0).toLocaleString()}</Text>\r\n                    </Group>\r\n                    <Progress value={85} color=\"green\" />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <Group justify=\"space-between\" mb=\"xs\">\r\n                      <Text size=\"sm\">Pending Payments</Text>\r\n                      <Text size=\"sm\" fw={500}>₹{(appointmentStats?.pendingPayments || 0).toLocaleString()}</Text>\r\n                    </Group>\r\n                    <Progress value={15} color=\"red\" />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <Group justify=\"space-between\" mb=\"xs\">\r\n                      <Text size=\"sm\">Average Fee</Text>\r\n                      <Text size=\"sm\" fw={500}>₹{appointmentStats?.averageFee || 0}</Text>\r\n                    </Group>\r\n                    <Progress value={75} color=\"blue\" />\r\n                  </div>\r\n                </Stack>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Appointment Detail Modal */}\r\n      <Modal\r\n        opened={appointmentDetailOpened}\r\n        onClose={closeAppointmentDetail}\r\n        title=\"Appointment Details\"\r\n        size=\"lg\"\r\n      >\r\n        {selectedAppointment && (\r\n          <Stack gap=\"md\">\r\n            {/* Basic Info */}\r\n            <Group>\r\n              <Avatar size=\"xl\" color=\"blue\" radius=\"xl\">\r\n                {selectedAppointment.patient.firstName[0]}{selectedAppointment.patient.lastName[0]}\r\n              </Avatar>\r\n              <div>\r\n                <Title order={3}>\r\n                  {selectedAppointment.patient.firstName} {selectedAppointment.patient.lastName}\r\n                </Title>\r\n                <Text c=\"dimmed\">{selectedAppointment.appointmentNumber}</Text>\r\n                <Badge color={getStatusColor(selectedAppointment.status)} variant=\"light\" mt=\"xs\">\r\n                  {selectedAppointment.status.replace('_', ' ')}\r\n                </Badge>\r\n              </div>\r\n            </Group>\r\n\r\n            <Divider />\r\n\r\n            {/* Appointment Details */}\r\n            <SimpleGrid cols={2}>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Doctor</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">\r\n                  {selectedAppointment.doctor.firstName} {selectedAppointment.doctor.lastName}\r\n                </Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Department</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">{selectedAppointment.department}</Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Date & Time</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">\r\n                  {new Date(selectedAppointment.appointmentDate).toLocaleDateString()} at {selectedAppointment.appointmentTime}\r\n                </Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Duration</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">{selectedAppointment.duration} minutes</Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Type</Text>\r\n                <Badge color={getTypeColor(selectedAppointment.appointmentType)} variant=\"light\" size=\"sm\">\r\n                  {selectedAppointment.appointmentType.replace('_', ' ')}\r\n                </Badge>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Priority</Text>\r\n                <Badge color={getPriorityColor(selectedAppointment.priority)} variant=\"light\" size=\"sm\">\r\n                  {selectedAppointment.priority}\r\n                </Badge>\r\n              </div>\r\n            </SimpleGrid>\r\n\r\n            {/* Reason and Notes */}\r\n            <div>\r\n              <Text size=\"sm\" fw={500}>Reason for Visit</Text>\r\n              <Text size=\"sm\" c=\"dimmed\">{selectedAppointment.reason}</Text>\r\n            </div>\r\n\r\n            {selectedAppointment.notes && (\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Notes</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">{selectedAppointment.notes}</Text>\r\n              </div>\r\n            )}\r\n\r\n            {/* Payment Info */}\r\n            <div>\r\n              <Text size=\"sm\" fw={500}>Consultation Fee</Text>\r\n              <Group>\r\n                <Text size=\"sm\" c=\"dimmed\">₹{selectedAppointment.consultationFee}</Text>\r\n                <Badge \r\n                  color={selectedAppointment.isPaid ? 'green' : 'red'} \r\n                  variant=\"light\" \r\n                  size=\"sm\"\r\n                >\r\n                  {selectedAppointment.isPaid ? 'Paid' : 'Pending'}\r\n                </Badge>\r\n              </Group>\r\n            </div>\r\n\r\n            <Group justify=\"flex-end\">\r\n              <Button variant=\"light\" onClick={closeAppointmentDetail}>\r\n                Close\r\n              </Button>\r\n              <Button onClick={openReschedule}>\r\n                Reschedule\r\n              </Button>\r\n            </Group>\r\n          </Stack>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Book Appointment Modal */}\r\n      <Modal\r\n        opened={bookAppointmentOpened}\r\n        onClose={closeBookAppointment}\r\n        title=\"Book New Appointment\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Patient\"\r\n              placeholder=\"Select patient\"\r\n              data={[]} // TODO: Fetch from patients API\r\n              searchable\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Doctor\"\r\n              placeholder=\"Select doctor\"\r\n              data={[]} // TODO: Fetch from staff API\r\n              searchable\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <DatePickerInput\r\n              label=\"Appointment Date\"\r\n              placeholder=\"Select date\"\r\n              required\r\n              value={selectedDate}\r\n              onChange={setSelectedDate as any}\r\n              clearable\r\n            />\r\n            <Select\r\n              label=\"Time Slot\"\r\n              placeholder=\"Select time\"\r\n              data={[\r\n                { value: '09:00', label: '09:00 AM' },\r\n                { value: '09:30', label: '09:30 AM' },\r\n                { value: '10:00', label: '10:00 AM' },\r\n                { value: '10:30', label: '10:30 AM' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Appointment Type\"\r\n              placeholder=\"Select type\"\r\n              data={[\r\n                { value: 'consultation', label: 'Consultation' },\r\n                { value: 'follow_up', label: 'Follow-up' },\r\n                { value: 'emergency', label: 'Emergency' },\r\n                { value: 'routine_checkup', label: 'Routine Checkup' }\r\n              ]}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Priority\"\r\n              placeholder=\"Select priority\"\r\n              data={[\r\n                { value: 'normal', label: 'Normal' },\r\n                { value: 'high', label: 'High' },\r\n                { value: 'urgent', label: 'Urgent' },\r\n                { value: 'emergency', label: 'Emergency' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Reason for Visit\"\r\n            placeholder=\"Describe the reason for the appointment\"\r\n            required\r\n          />\r\n          \r\n          <NumberInput\r\n            label=\"Consultation Fee\"\r\n            placeholder=\"Enter fee amount\"\r\n            min={0}\r\n            prefix=\"₹\"\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeBookAppointment}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              // notifications.show({\r\n              //   title: 'Success',\r\n              //   message: 'Appointment booked successfully',\r\n              //   color: 'green',\r\n              // });\r\n              console.log('Appointment booked successfully');\r\n              closeBookAppointment();\r\n            }}>\r\n              Book Appointment\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AppointmentManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\billing\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Checkbox' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Notification' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 32,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LoadingOverlay' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 33,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'rem' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 35,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleLineChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 41,
        "column": 62,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 48,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCurrency' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 49,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 49,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 54,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 55,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShare' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 63,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 63,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconExclamationMark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClockHour4' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 69,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUsers' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRefresh' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 78,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'InsuranceProvider' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 91,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 91,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PatientInsurance' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 92,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'dateRange' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 103,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 103,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedClaim' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 105,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'statsError' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 109,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 109,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'claimDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 122,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 122,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeClaimDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 122,
        "column": 61,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 122,
        "endColumn": 77
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadAllData'. Either include it or remove the dependency array.",
        "line": 127,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 127,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadAllData]",
            "fix": { "range": [3547, 3549], "text": "[loadAllData]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'loadInvoices' and 'loadPayments'. Either include them or remove the dependency array.",
        "line": 140,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 140,
        "endColumn": 86,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [activeTab, searchQuery, selectedPatient, selectedStatus, selectedPaymentMethod, loadInvoices, loadPayments]",
            "fix": {
              "range": [3895, 3975],
              "text": "[activeTab, searchQuery, selectedPatient, selectedStatus, selectedPaymentMethod, loadInvoices, loadPayments]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'revenueChartData' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 373,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 373,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 28,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Alert,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Checkbox,\r\n  List,\r\n  Notification,\r\n  LoadingOverlay,\r\n  Anchor,\r\n  rem\r\n} from '@mantine/core';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleBarChart, SimpleLineChart } from '../../../components/MantineChart';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconCalendar,\r\n  IconCurrency,\r\n  IconChartBar,\r\n  IconPhone,\r\n  IconMail,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconReceipt,\r\n  IconCreditCard,\r\n  IconBuildingBank,\r\n  IconFileText,\r\n  IconDownload,\r\n  IconPrinter,\r\n  IconShare,\r\n  IconCash,\r\n  IconShield,\r\n  IconExclamationMark,\r\n  IconClockHour4,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconUsers,\r\n  IconCalculator,\r\n  IconWallet,\r\n  IconBrandPaypal,\r\n  IconCurrencyDollar,\r\n  IconFileInvoice,\r\n  IconCopyright,\r\n  IconFilter,\r\n  IconRefresh\r\n} from '@tabler/icons-react';\r\n\r\n// Import types and services\r\nimport {\r\n  Invoice,\r\n  InvoiceStatus,\r\n  Payment,\r\n  PaymentMethod,\r\n  PaymentStatus,\r\n  PaymentTransactionStatus,\r\n  InsuranceClaim,\r\n  ClaimStatus,\r\n  InsuranceProvider,\r\n  PatientInsurance\r\n} from '../../../types/billing';\r\nimport { billingService, handleApiError } from '../../../services';\r\n\r\nconst BillingManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('invoices');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedPatient, setSelectedPatient] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('');\r\n  const [dateRange, setDateRange] = useState<[Date | null, Date | null]>([null, null]);\r\n  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\r\n  const [selectedClaim, setSelectedClaim] = useState<InsuranceClaim | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [statsLoading, setStatsLoading] = useState(true);\r\n  const [statsError, setStatsError] = useState<string | null>(null);\r\n\r\n  // Data state\r\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\r\n  const [payments, setPayments] = useState<Payment[]>([]);\r\n  const [insuranceClaims, setInsuranceClaims] = useState<InsuranceClaim[]>([]);\r\n  const [billingStats, setBillingStats] = useState<any>(null);\r\n  const [revenueData, setRevenueData] = useState<any[]>([]);\r\n\r\n  // Modal states\r\n  const [invoiceDetailOpened, { open: openInvoiceDetail, close: closeInvoiceDetail }] = useDisclosure(false);\r\n  const [addInvoiceOpened, { open: openAddInvoice, close: closeAddInvoice }] = useDisclosure(false);\r\n  const [addPaymentOpened, { open: openAddPayment, close: closeAddPayment }] = useDisclosure(false);\r\n  const [claimDetailOpened, { open: openClaimDetail, close: closeClaimDetail }] = useDisclosure(false);\r\n\r\n  // Load all data on mount\r\n  useEffect(() => {\r\n    loadAllData();\r\n  }, []);\r\n\r\n  // Load data based on active tab\r\n  useEffect(() => {\r\n    if (activeTab === 'invoices') {\r\n      loadInvoices();\r\n    } else if (activeTab === 'payments') {\r\n      loadPayments();\r\n    } else if (activeTab === 'insurance') {\r\n      loadInsuranceClaims();\r\n    } else if (activeTab === 'reports') {\r\n      loadReportsData();\r\n    }\r\n  }, [activeTab, searchQuery, selectedPatient, selectedStatus, selectedPaymentMethod]);\r\n\r\n  const loadAllData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Load stats and initial data in parallel\r\n      await Promise.all([\r\n        loadStats(),\r\n        loadInvoices(),\r\n        loadPayments(),\r\n        loadInsuranceClaims()\r\n      ]);\r\n    } catch (err) {\r\n      const errorMessage = handleApiError(err);\r\n      setError(errorMessage);\r\n      console.error('Error loading billing data:', err);\r\n      // Fallback to mock data\r\n      setInvoices([] /* TODO: Fetch from API */);\r\n      setPayments([] /* TODO: Fetch from API */);\r\n      setInsuranceClaims([] /* TODO: Fetch from API */);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadStats = async () => {\r\n    try {\r\n      setStatsLoading(true);\r\n      setStatsError(null);\r\n      const response = await billingService.getBillingStats();\r\n      setBillingStats(response.data);\r\n    } catch (err: any) {\r\n      console.warn('Error loading billing stats (using default values):', err.response?.data?.message || err.message);\r\n      setStatsError(null);\r\n      // Set default stats when backend is unavailable\r\n      setBillingStats({\r\n        totalRevenue: 0,\r\n        pendingPayments: 0,\r\n        paidInvoices: 0,\r\n        unpaidInvoices: 0,\r\n        totalInvoices: 0,\r\n        totalPayments: 0\r\n      });\r\n    } finally {\r\n      setStatsLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadInvoices = async () => {\r\n    try {\r\n      const filters = {\r\n        search: searchQuery || undefined,\r\n        patientId: selectedPatient || undefined,\r\n        status: selectedStatus || undefined\r\n      };\r\n\r\n      const response = await billingService.getInvoices(filters);\r\n      setInvoices(response.data || []);\r\n    } catch (err: any) {\r\n      console.warn('Error loading invoices (using empty data):', err.response?.data?.message || err.message);\r\n      setInvoices([]);\r\n    }\r\n  };\r\n\r\n  const loadPayments = async () => {\r\n    try {\r\n      const filters = {\r\n        search: searchQuery || undefined,\r\n        patientId: selectedPatient || undefined,\r\n        paymentMethod: selectedPaymentMethod || undefined\r\n      };\r\n\r\n      const response = await billingService.getPayments(filters);\r\n      setPayments(response.data || []);\r\n    } catch (err: any) {\r\n      console.warn('Error loading payments (using empty data):', err.response?.data?.message || err.message);\r\n      setPayments([]);\r\n    }\r\n  };\r\n\r\n  const loadInsuranceClaims = async () => {\r\n    try {\r\n      // For now, use mock data as insurance claims API might not be fully implemented\r\n      setInsuranceClaims([] /* TODO: Fetch from API */);\r\n    } catch (err) {\r\n      console.error('Error loading insurance claims:', err);\r\n      setInsuranceClaims([] /* TODO: Fetch from API */);\r\n    }\r\n  };\r\n\r\n  const loadReportsData = async () => {\r\n    try {\r\n      // Load revenue data for reports\r\n      const endDate = new Date();\r\n      const startDate = new Date();\r\n      startDate.setMonth(startDate.getMonth() - 12);\r\n      const response = await billingService.getRevenueReport(\r\n        startDate.toISOString(),\r\n        endDate.toISOString()\r\n      );\r\n      setRevenueData(response.data?.invoices || []);\r\n    } catch (err: any) {\r\n      console.warn('Error loading reports data (using empty data):', err.response?.data?.message || err.message);\r\n      setRevenueData([]);\r\n    }\r\n  };\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: InvoiceStatus | PaymentStatus | ClaimStatus | PaymentTransactionStatus) => {\r\n    switch (status) {\r\n      // InvoiceStatus\r\n      case 'DRAFT':\r\n        return 'orange';\r\n      case 'PENDING':\r\n        return 'blue';\r\n      case 'PAID':\r\n        return 'green';\r\n      case 'PARTIALLY_PAID':\r\n        return 'yellow';\r\n      case 'CANCELLED':\r\n      case 'REFUNDED':\r\n        return 'gray';\r\n\r\n      // PaymentTransactionStatus\r\n      case 'COMPLETED':\r\n        return 'green';\r\n      case 'FAILED':\r\n        return 'red';\r\n\r\n      // ClaimStatus\r\n      case 'submitted':\r\n      case 'acknowledged':\r\n        return 'blue';\r\n      case 'under_review':\r\n        return 'cyan';\r\n      case 'approved':\r\n        return 'green';\r\n      case 'partially_approved':\r\n        return 'yellow';\r\n      case 'denied':\r\n        return 'red';\r\n      case 'appealed':\r\n        return 'orange';\r\n      case 'closed':\r\n        return 'gray';\r\n\r\n      default:\r\n        return 'gray';\r\n    }\r\n  };\r\n\r\n  const getPaymentMethodIcon = (method: PaymentMethod) => {\r\n    switch (method) {\r\n      case 'CASH': return <IconCash size={16} />;\r\n      case 'CREDIT_CARD': return <IconCreditCard size={16} />;\r\n      case 'DEBIT_CARD': return <IconCreditCard size={16} />;\r\n      case 'BANK_TRANSFER': return <IconBuildingBank size={16} />;\r\n      case 'UPI': return <IconBrandPaypal size={16} />;\r\n      case 'NET_BANKING': return <IconBuildingBank size={16} />;\r\n      case 'CHEQUE': return <IconCopyright size={16} />;\r\n      case 'WALLET': return <IconWallet size={16} />;\r\n      default: return <IconWallet size={16} />;\r\n    }\r\n  };\r\n\r\n  const handleViewInvoice = (invoice: Invoice) => {\r\n    setSelectedInvoice(invoice);\r\n    openInvoiceDetail();\r\n  };\r\n\r\n  const handleViewClaim = (claim: InsuranceClaim) => {\r\n    setSelectedClaim(claim);\r\n    openClaimDetail();\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchQuery('');\r\n    setSelectedPatient('');\r\n    setSelectedStatus('');\r\n    setSelectedPaymentMethod('');\r\n    setDateRange([null, null]);\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-IN', {\r\n      style: 'currency',\r\n      currency: 'INR'\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatDate = (date: string | Date) => {\r\n    const d = new Date(date);\r\n    const year = d.getFullYear();\r\n    const month = String(d.getMonth() + 1).padStart(2, '0');\r\n    const day = String(d.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  // Statistics cards\r\n  const statsCards = billingStats ? [\r\n    {\r\n      title: 'Total Revenue',\r\n      value: formatCurrency(billingStats.totalRevenue || 0),\r\n      icon: IconCurrencyDollar,\r\n      color: 'green',\r\n      trend: '+15.3%'\r\n    },\r\n    {\r\n      title: 'Outstanding Amount',\r\n      value: formatCurrency(billingStats.totalOutstanding || 0),\r\n      icon: IconAlertCircle,\r\n      color: 'red',\r\n      trend: '-8.2%'\r\n    },\r\n    {\r\n      title: 'Insurance Claims',\r\n      value: billingStats.totalClaims || 0,\r\n      icon: IconShield,\r\n      color: 'blue',\r\n      trend: '+12%'\r\n    },\r\n    {\r\n      title: 'Collection Rate',\r\n      value: `${billingStats.collectionRate || 0}%`,\r\n      icon: IconTrendingUp,\r\n      color: 'purple',\r\n      trend: '+2.1%'\r\n    }\r\n  ] : [];\r\n\r\n  // Chart data\r\n  const revenueChartData = revenueData.length > 0 ? revenueData.map(item => ({\r\n    month: item.month,\r\n    revenue: item.totalRevenue,\r\n    collections: item.collections\r\n  })) : [];\r\n\r\n  const getPaymentMethodColor = (method: PaymentMethod) => {\r\n    switch (method) {\r\n      case 'CASH': return 'green.6';\r\n      case 'CREDIT_CARD': return 'blue.6';\r\n      case 'DEBIT_CARD': return 'cyan.6';\r\n      case 'BANK_TRANSFER': return 'indigo.6';\r\n      case 'UPI': return 'teal.6';\r\n      case 'NET_BANKING': return 'violet.6';\r\n      case 'CHEQUE': return 'orange.6';\r\n      case 'WALLET': return 'grape.6';\r\n      default: return 'gray.6';\r\n    }\r\n  };\r\n\r\n  const paymentMethodData = billingStats?.paymentMethodDistribution ?\r\n    Object.entries(billingStats.paymentMethodDistribution)\r\n      .map(([method, amount]) => ({\r\n        name: method.replace('_', ' ').toUpperCase(),\r\n        value: amount as number,\r\n        color: getPaymentMethodColor(method as PaymentMethod)\r\n      })) :\r\n    Object.entries(0 /* TODO: Fetch from API */)\r\n      .map(([method, amount]) => ({\r\n        name: method.replace('_', ' ').toUpperCase(),\r\n        value: amount as number,\r\n        color: getPaymentMethodColor(method as PaymentMethod)\r\n      }));\r\n\r\n  const claimStatusCounts: Record<string, number> = {};\r\n  insuranceClaims.forEach((c) => {\r\n    claimStatusCounts[c.status] = (claimStatusCounts[c.status] || 0) + 1;\r\n  });\r\n  const claimStatusData = Object.entries(claimStatusCounts).map(([status, count]) => ({\r\n    status: status.replace('_', ' '),\r\n    count\r\n  }));\r\n\r\n  // Filter functions now use API data\r\n  const filteredInvoices = useMemo(() => {\r\n    return invoices.filter((invoice) => {\r\n      const matchesSearch =\r\n        invoice.invoiceNumber?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        invoice.patient?.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        invoice.patient?.lastName?.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n      const matchesPatient = !selectedPatient || invoice.patientId === selectedPatient;\r\n      const matchesStatus = !selectedStatus || invoice.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesPatient && matchesStatus;\r\n    });\r\n  }, [invoices, searchQuery, selectedPatient, selectedStatus]);\r\n\r\n  // Filter payments\r\n  const filteredPayments = useMemo(() => {\r\n    return payments.filter((payment) => {\r\n      const matchesSearch =\r\n        payment.paymentId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        payment.invoice?.invoiceNumber?.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n      const matchesMethod = !selectedPaymentMethod || payment.paymentMethod === selectedPaymentMethod;\r\n      const matchesStatus = !selectedStatus || payment.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesMethod && matchesStatus;\r\n    });\r\n  }, [payments, searchQuery, selectedPaymentMethod, selectedStatus]);\r\n\r\n  // Filter claims\r\n  const filteredClaims = useMemo(() => {\r\n    return insuranceClaims.filter((claim) => {\r\n      const matchesSearch =\r\n        claim.claimNumber?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        claim.patient?.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        claim.patient?.lastName?.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n      const matchesStatus = !selectedStatus || claim.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [insuranceClaims, searchQuery, selectedStatus]);\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Billing & Insurance Management</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage invoices, payments, insurance claims, and financial reporting\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={openAddInvoice}\r\n          >\r\n            New Invoice\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconCreditCard size={16} />}\r\n            onClick={openAddPayment}\r\n          >\r\n            Record Payment\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Alert icon={<IconAlertCircle size=\"1rem\" />} title=\"Error\" color=\"red\" variant=\"light\" mb=\"lg\">\r\n          {error} - Using cached data\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Statistics Cards */}\r\n      {statsLoading ? (\r\n        <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n          {[1, 2, 3, 4].map((i) => (\r\n            <Card key={i} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <div style={{ height: '1rem', width: '100px', backgroundColor: '#e9ecef', borderRadius: '4px', marginBottom: '8px' }} />\r\n                  <div style={{ height: '2rem', width: '80px', backgroundColor: '#e9ecef', borderRadius: '4px' }} />\r\n                </div>\r\n                <div style={{ width: '40px', height: '40px', backgroundColor: '#e9ecef', borderRadius: '8px' }} />\r\n              </Group>\r\n              <Group justify=\"space-between\" mt=\"sm\">\r\n                <div style={{ height: '1rem', width: '50px', backgroundColor: '#e9ecef', borderRadius: '4px' }} />\r\n                <div style={{ height: '0.75rem', width: '80px', backgroundColor: '#e9ecef', borderRadius: '4px' }} />\r\n              </Group>\r\n            </Card>\r\n          ))}\r\n        </SimpleGrid>\r\n      ) : (\r\n        <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n          {statsCards.map((stat) => {\r\n            const Icon = stat.icon;\r\n            return (\r\n              <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                      {stat.title}\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stat.value}\r\n                    </Text>\r\n                  </div>\r\n                  <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                    <Icon size={24} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n                <Group justify=\"space-between\" mt=\"sm\">\r\n                  <Badge\r\n                    color={stat.trend.startsWith('+') ? 'green' : 'red'}\r\n                    variant=\"light\"\r\n                    size=\"sm\"\r\n                  >\r\n                    {stat.trend}\r\n                  </Badge>\r\n                  <Text size=\"xs\" c=\"dimmed\">vs last month</Text>\r\n                </Group>\r\n              </Card>\r\n            );\r\n          })}\r\n        </SimpleGrid>\r\n      )}\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={(v) => setActiveTab(v || 'invoices')}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"invoices\" leftSection={<IconFileInvoice size={16} />}>\r\n            Invoices\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"payments\" leftSection={<IconCreditCard size={16} />}>\r\n            Payments\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"insurance\" leftSection={<IconShield size={16} />}>\r\n            Insurance Claims\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"reports\" leftSection={<IconChartBar size={16} />}>\r\n            Financial Reports\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Invoices Tab */}\r\n        <Tabs.Panel value=\"invoices\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search invoices...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Patient\"\r\n                data={[].map /* TODO: Fetch from API */(patient => ({\r\n                  value: patient.id,\r\n                  label: `${patient.firstName} ${patient.lastName}`\r\n                }))}\r\n                value={selectedPatient}\r\n                onChange={(v) => setSelectedPatient(v || '')}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'draft', label: 'Draft' },\r\n                  { value: 'pending', label: 'Pending' },\r\n                  { value: 'paid', label: 'Paid' },\r\n                  { value: 'cancelled', label: 'Cancelled' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={(v) => setSelectedStatus(v || '')}\r\n                clearable\r\n              />\r\n              <Button variant=\"light\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Loading State for Invoices */}\r\n            {loading && invoices.length === 0 ? (\r\n              <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '200px' }}>\r\n                <div>\r\n                  <div style={{ width: '40px', height: '40px', border: '3px solid #e9ecef', borderTop: '3px solid #228be6', borderRadius: '50%', animation: 'spin 1s linear infinite', margin: '0 auto 16px' }} />\r\n                  <Text c=\"dimmed\" ta=\"center\">Loading invoices...</Text>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {/* Invoices Table */}\r\n                <ScrollArea>\r\n                  <Table striped highlightOnHover>\r\n                    <Table.Thead>\r\n                      <Table.Tr>\r\n                        <Table.Th>Invoice #</Table.Th>\r\n                        <Table.Th>Patient</Table.Th>\r\n                        <Table.Th>Date</Table.Th>\r\n                        <Table.Th>Due Date</Table.Th>\r\n                        <Table.Th>Amount</Table.Th>\r\n                        <Table.Th>Status</Table.Th>\r\n                        <Table.Th>Payment Status</Table.Th>\r\n                        <Table.Th>Actions</Table.Th>\r\n                      </Table.Tr>\r\n                    </Table.Thead>\r\n                    <Table.Tbody>\r\n                      {filteredInvoices.length === 0 ? (\r\n                        <Table.Tr>\r\n                          <Table.Td colSpan={9}>\r\n                            <EmptyState\r\n                              icon={<IconReceipt size={48} />}\r\n                              title=\"No bills generated\"\r\n                              description=\"Create your first bill to start billing management\"\r\n                              size=\"sm\"\r\n                            />\r\n                          </Table.Td>\r\n                        </Table.Tr>\r\n                      ) : (\r\n                        filteredInvoices.map((invoice) => (\r\n                        <Table.Tr key={invoice.id}>\r\n                          <Table.Td>\r\n                            <Text fw={500}>{invoice.invoiceNumber}</Text>\r\n                          </Table.Td>\r\n                          <Table.Td>\r\n                            <Group>\r\n                              <Avatar color=\"blue\" radius=\"xl\" size=\"sm\">\r\n                                {invoice.patient?.firstName?.[0]}{invoice.patient?.lastName?.[0]}\r\n                              </Avatar>\r\n                              <div>\r\n                                <Text size=\"sm\" fw={500}>\r\n                                  {invoice.patient?.firstName} {invoice.patient?.lastName}\r\n                                </Text>\r\n                                <Text size=\"xs\" c=\"dimmed\">\r\n                                  {invoice.patient?.patientId}\r\n                                </Text>\r\n                              </div>\r\n                            </Group>\r\n                          </Table.Td>\r\n                          <Table.Td>\r\n                            <Text size=\"sm\">\r\n                              {formatDate(invoice.invoiceDate)}\r\n                            </Text>\r\n                          </Table.Td>\r\n                          <Table.Td>\r\n                            <Text\r\n                              size=\"sm\"\r\n                              c={new Date(invoice.dueDate) < new Date() ? 'red' : 'dimmed'}\r\n                            >\r\n                              {formatDate(invoice.dueDate)}\r\n                            </Text>\r\n                          </Table.Td>\r\n                          <Table.Td>\r\n                            <Text fw={600}>{formatCurrency(invoice.totalAmount)}</Text>\r\n                          </Table.Td>\r\n                          <Table.Td>\r\n                            <Badge color={getStatusColor(invoice.status)} variant=\"light\">\r\n                              {invoice.status.replace('_', ' ')}\r\n                            </Badge>\r\n                          </Table.Td>\r\n                          <Table.Td>\r\n                            <Group gap=\"xs\">\r\n                              <Text size=\"sm\">\r\n                                {formatCurrency(invoice.paidAmount || 0)} / {formatCurrency(invoice.totalAmount)}\r\n                              </Text>\r\n                              <Progress\r\n                                value={invoice.totalAmount > 0 ? ((invoice.paidAmount || 0) / invoice.totalAmount) * 100 : 0}\r\n                                size=\"xs\"\r\n                                w={60}\r\n                                color={(invoice.paidAmount || 0) >= invoice.totalAmount ? 'green' : 'blue'}\r\n                              />\r\n                            </Group>\r\n                          </Table.Td>\r\n                          <Table.Td>\r\n                            <Group gap=\"xs\">\r\n                              <ActionIcon\r\n                                variant=\"subtle\"\r\n                                color=\"blue\"\r\n                                onClick={() => handleViewInvoice(invoice)}\r\n                              >\r\n                                <IconEye size={16} />\r\n                              </ActionIcon>\r\n                              <ActionIcon\r\n                                variant=\"subtle\"\r\n                                color=\"green\"\r\n                              >\r\n                                <IconEdit size={16} />\r\n                              </ActionIcon>\r\n                              <Menu>\r\n                                <Menu.Target>\r\n                                  <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                                    <IconDotsVertical size={16} />\r\n                                  </ActionIcon>\r\n                                </Menu.Target>\r\n                                <Menu.Dropdown>\r\n                                  <Menu.Item leftSection={<IconDownload size={14} />}>\r\n                                    Download PDF\r\n                                  </Menu.Item>\r\n                                  <Menu.Item leftSection={<IconPrinter size={14} />}>\r\n                                    Print\r\n                                  </Menu.Item>\r\n                                  <Menu.Item leftSection={<IconMail size={14} />}>\r\n                                    Send Email\r\n                                  </Menu.Item>\r\n                                  <Menu.Divider />\r\n                                  <Menu.Item\r\n                                    leftSection={<IconTrash size={14} />}\r\n                                    color=\"red\"\r\n                                  >\r\n                                    Delete\r\n                                  </Menu.Item>\r\n                                </Menu.Dropdown>\r\n                              </Menu>\r\n                            </Group>\r\n                          </Table.Td>\r\n                        </Table.Tr>\r\n                      )))}\r\n                    </Table.Tbody>\r\n                  </Table>\r\n                </ScrollArea>\r\n              </>\r\n            )}\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Payments Tab */}\r\n        <Tabs.Panel value=\"payments\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Payment Records</Title>\r\n              <Button leftSection={<IconPlus size={16} />} onClick={openAddPayment}>\r\n                Record Payment\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Payment Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search payments...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Payment Method\"\r\n                data={[\r\n                  { value: 'cash', label: 'Cash' },\r\n                  { value: 'credit_card', label: 'Credit Card' },\r\n                  { value: 'debit_card', label: 'Debit Card' },\r\n                  { value: 'bank_transfer', label: 'Bank Transfer' },\r\n                  { value: 'upi', label: 'UPI' },\r\n                  { value: 'net_banking', label: 'Net Banking' },\r\n                  { value: 'cheque', label: 'Cheque' },\r\n                  { value: 'wallet', label: 'Wallet' },\r\n                  { value: 'other', label: 'Other' }\r\n                ]}\r\n                value={selectedPaymentMethod}\r\n                onChange={(v) => setSelectedPaymentMethod(v || '')}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'pending', label: 'Pending' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'failed', label: 'Failed' },\r\n                  { value: 'refunded', label: 'Refunded' },\r\n                  { value: 'cancelled', label: 'Cancelled' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={(v) => setSelectedStatus(v || '')}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Payments Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {filteredPayments.map((payment) => (\r\n                <Card key={payment.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{payment.paymentId}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {formatDate(payment.paymentDate)}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(payment.status)} variant=\"light\">\r\n                      {payment.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Amount</Text>\r\n                      <Text fw={600} size=\"lg\">{formatCurrency(payment.amount)}</Text>\r\n                    </Group>\r\n                    \r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Payment Method</Text>\r\n                      <Group gap=\"xs\">\r\n                        {getPaymentMethodIcon(payment.paymentMethod)}\r\n                        <Text size=\"sm\" fw={500}>\r\n                          {payment.paymentMethod.replace('_', ' ').toUpperCase()}\r\n                        </Text>\r\n                      </Group>\r\n                    </Group>\r\n\r\n                    {payment.invoiceNumber && (\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\" c=\"dimmed\">Invoice</Text>\r\n                        <Anchor size=\"sm\" fw={500}>\r\n                          {payment.invoiceNumber}\r\n                        </Anchor>\r\n                      </Group>\r\n                    )}\r\n\r\n                    {payment.transactionId && (\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\" c=\"dimmed\">Transaction ID</Text>\r\n                        <Text size=\"sm\" fw={500}>{payment.transactionId}</Text>\r\n                      </Group>\r\n                    )}\r\n                  </Stack>\r\n\r\n                  {payment.notes && (\r\n                    <Text size=\"sm\" c=\"dimmed\" style={{ \r\n                      backgroundColor: '#f8f9fa', \r\n                      padding: '8px', \r\n                      borderRadius: '4px' \r\n                    }}>\r\n                      <strong>Notes:</strong> {payment.notes}\r\n                    </Text>\r\n                  )}\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Insurance Claims Tab */}\r\n        <Tabs.Panel value=\"insurance\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Insurance Claims</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Submit Claim\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Claims Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Claim #</Table.Th>\r\n                    <Table.Th>Patient</Table.Th>\r\n                    <Table.Th>Insurance Provider</Table.Th>\r\n                    <Table.Th>Claim Amount</Table.Th>\r\n                    <Table.Th>Approved Amount</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Date Submitted</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredClaims.map((claim) => (\r\n                    <Table.Tr key={claim.id}>\r\n                      <Table.Td>\r\n                        <Text fw={500}>{claim.claimNumber}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group>\r\n                          <Avatar color=\"blue\" radius=\"xl\" size=\"sm\">\r\n                            {claim.patient.firstName[0]}{claim.patient.lastName[0]}\r\n                          </Avatar>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>\r\n                              {claim.patient.firstName} {claim.patient.lastName}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              {claim.patient.patientId}\r\n                            </Text>\r\n                          </div>\r\n                        </Group>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>{claim.insuranceProvider?.providerName || claim.insurance.providerName}</Text>\r\n                          {claim.policyNumber && (\r\n                            <Text size=\"xs\" c=\"dimmed\">{claim.policyNumber}</Text>\r\n                          )}\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text fw={600}>{formatCurrency((claim.claimAmount ?? claim.claimedAmount) as number)}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text fw={600} c={claim.approvedAmount ? 'green' : 'dimmed'}>\r\n                          {claim.approvedAmount ? formatCurrency(claim.approvedAmount) : 'Pending'}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getStatusColor(claim.status)} variant=\"light\">\r\n                          {claim.status.replace('_', ' ')}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">\r\n                          {formatDate(claim.submissionDate)}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon\r\n                            variant=\"subtle\"\r\n                            color=\"blue\"\r\n                            onClick={() => handleViewClaim(claim)}\r\n                          >\r\n                            <IconEye size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"green\">\r\n                            <IconEdit size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                            <IconDownload size={16} />\r\n                          </ActionIcon>\r\n                        </Group>\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ))}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Financial Reports Tab */}\r\n        <Tabs.Panel value=\"reports\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Financial Reports & Analytics</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {/* Revenue Trends */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder style={{ gridColumn: '1 / -1' }}>\r\n                <Title order={4} mb=\"md\">Monthly Revenue & Collections</Title>\r\n                <SimpleAreaChart\r\n                  data={revenueData}\r\n                  dataKey=\"month\"\r\n                  series={[\r\n                    { name: 'revenue', color: 'blue.6' },\r\n                    { name: 'collections', color: 'green.6' }\r\n                  ]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Payment Methods Distribution */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Payment Methods</Title>\r\n                <MantineDonutChart\r\n                  data={paymentMethodData}\r\n                  size={160}\r\n                  thickness={30}\r\n                  withLabels\r\n                />\r\n              </Card>\r\n              \r\n              {/* Claim Status Distribution */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Insurance Claims Status</Title>\r\n                <SimpleBarChart\r\n                  data={claimStatusData}\r\n                  dataKey=\"status\"\r\n                  series={[{ name: 'count', color: 'orange.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Key Metrics */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Key Financial Metrics</Title>\r\n                <Stack gap=\"md\">\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Average Invoice Amount</Text>\r\n                    <Text size=\"sm\" fw={600}>\r\n                      {formatCurrency(0 /* TODO: Fetch from API */)}\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Days Sales Outstanding</Text>\r\n                    <Text size=\"sm\" fw={600}>\r\n                      {0 /* TODO: Fetch from API */} days\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Insurance Coverage Rate</Text>\r\n                    <Text size=\"sm\" fw={600}>\r\n                      {0 /* TODO: Fetch from API */}%\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Bad Debt Rate</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"red\">\r\n                      {formatCurrency(0 /* TODO: Fetch from API */)}\r\n                    </Text>\r\n                  </Group>\r\n                </Stack>\r\n              </Card>\r\n              \r\n              {/* Quick Actions */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Quick Actions</Title>\r\n                <Stack gap=\"sm\">\r\n                  <Button fullWidth leftSection={<IconDownload size={16} />} variant=\"light\">\r\n                    Export Revenue Report\r\n                  </Button>\r\n                  <Button fullWidth leftSection={<IconFileText size={16} />} variant=\"light\">\r\n                    Generate Aging Report\r\n                  </Button>\r\n                  <Button fullWidth leftSection={<IconCalculator size={16} />} variant=\"light\">\r\n                    Tax Summary Report\r\n                  </Button>\r\n                  <Button fullWidth leftSection={<IconChartBar size={16} />} variant=\"light\">\r\n                    Performance Analytics\r\n                  </Button>\r\n                </Stack>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Invoice Detail Modal */}\r\n      <Modal\r\n        opened={invoiceDetailOpened}\r\n        onClose={closeInvoiceDetail}\r\n        title=\"Invoice Details\"\r\n        size=\"xl\"\r\n      >\r\n        {selectedInvoice && (\r\n          <ScrollArea h={600}>\r\n            <Stack gap=\"md\">\r\n              {/* Invoice Header */}\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Title order={3}>{selectedInvoice.invoiceNumber}</Title>\r\n                  <Text c=\"dimmed\">\r\n                    {formatDate(selectedInvoice.invoiceDate)}\r\n                  </Text>\r\n                </div>\r\n                <Badge color={getStatusColor(selectedInvoice.status)} variant=\"light\" size=\"lg\">\r\n                  {selectedInvoice.status.replace('_', ' ')}\r\n                </Badge>\r\n              </Group>\r\n\r\n              <Divider />\r\n\r\n              {/* Patient & Billing Info */}\r\n              <SimpleGrid cols={2}>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500} mb=\"sm\">Bill To:</Text>\r\n                  <Stack gap={4}>\r\n                    <Text size=\"sm\">\r\n                      {selectedInvoice.patient.firstName} {selectedInvoice.patient.lastName}\r\n                    </Text>\r\n                    <Text size=\"sm\" c=\"dimmed\">{selectedInvoice.patient.patientId}</Text>\r\n                    {selectedInvoice.billingAddress && (\r\n                      <Text size=\"sm\" c=\"dimmed\">{selectedInvoice.billingAddress.street}</Text>\r\n                    )}\r\n                    {selectedInvoice.billingAddress && (\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {selectedInvoice.billingAddress.city}, {selectedInvoice.billingAddress.state}\r\n                      </Text>\r\n                    )}\r\n                  </Stack>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500} mb=\"sm\">Invoice Details:</Text>\r\n                  <Stack gap={4}>\r\n                    <Text size=\"sm\">Due Date: {formatDate(selectedInvoice.dueDate)}</Text>\r\n                    <Text size=\"sm\">Terms: {selectedInvoice.paymentTerms} days</Text>\r\n                    {selectedInvoice.insuranceClaim && (\r\n                      <Text size=\"sm\">Insurance Claim: {selectedInvoice.insuranceClaim.claimNumber}</Text>\r\n                    )}\r\n                  </Stack>\r\n                </div>\r\n              </SimpleGrid>\r\n\r\n              <Divider />\r\n\r\n              {/* Invoice Items */}\r\n              <div>\r\n                <Text size=\"sm\" fw={500} mb=\"sm\">Items & Services</Text>\r\n                <Table>\r\n                  <Table.Thead>\r\n                    <Table.Tr>\r\n                      <Table.Th>Description</Table.Th>\r\n                      <Table.Th>Quantity</Table.Th>\r\n                      <Table.Th>Unit Price</Table.Th>\r\n                      <Table.Th>Total</Table.Th>\r\n                    </Table.Tr>\r\n                  </Table.Thead>\r\n                  <Table.Tbody>\r\n                    {selectedInvoice.items.map((item) => (\r\n                      <Table.Tr key={item.id}>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>{item.description}</Text>\r\n                            {item.itemCode && (\r\n                              <Text size=\"xs\" c=\"dimmed\">Code: {item.itemCode}</Text>\r\n                            )}\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>{item.quantity}</Table.Td>\r\n                        <Table.Td>{formatCurrency(item.unitPrice)}</Table.Td>\r\n                        <Table.Td>{formatCurrency((item.totalAmount ?? item.totalPrice) as number)}</Table.Td>\r\n                      </Table.Tr>\r\n                    ))}\r\n                  </Table.Tbody>\r\n                </Table>\r\n              </div>\r\n\r\n              <Divider />\r\n\r\n              {/* Totals */}\r\n              <Group justify=\"flex-end\">\r\n                <Stack gap=\"xs\" align=\"flex-end\">\r\n                  <Group>\r\n                    <Text size=\"sm\">Subtotal:</Text>\r\n                    <Text size=\"sm\" fw={600}>{formatCurrency(selectedInvoice.subtotal)}</Text>\r\n                  </Group>\r\n                  <Group>\r\n                    <Text size=\"sm\">Tax ({selectedInvoice.taxRate ?? 0}%):</Text>\r\n                    <Text size=\"sm\" fw={600}>{formatCurrency(selectedInvoice.taxAmount ?? 0)}</Text>\r\n                  </Group>\r\n                  <Group>\r\n                    <Text fw={700}>Total Amount:</Text>\r\n                    <Text fw={700} size=\"lg\">{formatCurrency(selectedInvoice.totalAmount)}</Text>\r\n                  </Group>\r\n                  <Group>\r\n                    <Text size=\"sm\" c=\"green\">Paid Amount:</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"green\">{formatCurrency(selectedInvoice.paidAmount)}</Text>\r\n                  </Group>\r\n                  <Group>\r\n                    <Text size=\"sm\" c=\"red\">Outstanding:</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"red\">\r\n                      {formatCurrency(selectedInvoice.totalAmount - selectedInvoice.paidAmount)}\r\n                    </Text>\r\n                  </Group>\r\n                </Stack>\r\n              </Group>\r\n\r\n              <Group justify=\"flex-end\" mt=\"lg\">\r\n                <Button variant=\"light\" onClick={closeInvoiceDetail}>\r\n                  Close\r\n                </Button>\r\n                <Button leftSection={<IconDownload size={16} />}>\r\n                  Download PDF\r\n                </Button>\r\n                <Button leftSection={<IconMail size={16} />} variant=\"outline\">\r\n                  Send Email\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </ScrollArea>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Add Invoice Modal */}\r\n      <Modal\r\n        opened={addInvoiceOpened}\r\n        onClose={closeAddInvoice}\r\n        title=\"Create New Invoice\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Patient\"\r\n              placeholder=\"Select patient\"\r\n              data={[].map /* TODO: Fetch from API */(patient => ({ \r\n                value: patient.id, \r\n                label: `${patient.firstName} ${patient.lastName}` \r\n              }))}\r\n              required\r\n            />\r\n            <DatePickerInput\r\n              label=\"Due Date\"\r\n              placeholder=\"Select due date\"\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <NumberInput\r\n            label=\"Payment Terms (Days)\"\r\n            placeholder=\"30\"\r\n            defaultValue={30}\r\n            min={0}\r\n            max={365}\r\n          />\r\n          \r\n          <Divider label=\"Invoice Items\" labelPosition=\"center\" />\r\n          \r\n          <SimpleGrid cols={3}>\r\n            <TextInput\r\n              label=\"Service/Item\"\r\n              placeholder=\"Consultation fee\"\r\n              required\r\n            />\r\n            <NumberInput\r\n              label=\"Quantity\"\r\n              placeholder=\"1\"\r\n              min={1}\r\n              defaultValue={1}\r\n            />\r\n            <NumberInput\r\n              label=\"Unit Price\"\r\n              placeholder=\"500\"\r\n              min={0}\r\n              leftSection=\"₹\"\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Button variant=\"light\" leftSection={<IconPlus size={16} />}>\r\n            Add More Items\r\n          </Button>\r\n          \r\n          <Divider />\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <NumberInput\r\n              label=\"Tax Rate (%)\"\r\n              placeholder=\"18\"\r\n              min={0}\r\n              max={100}\r\n              defaultValue={18}\r\n            />\r\n            <NumberInput\r\n              label=\"Discount Amount\"\r\n              placeholder=\"0\"\r\n              min={0}\r\n              leftSection=\"₹\"\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Notes\"\r\n            placeholder=\"Additional notes or terms...\"\r\n            rows={3}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddInvoice}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Success',\r\n                message: 'Invoice created successfully',\r\n                color: 'green',\r\n              });\r\n              closeAddInvoice();\r\n            }}>\r\n              Create Invoice\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* Add Payment Modal */}\r\n      <Modal\r\n        opened={addPaymentOpened}\r\n        onClose={closeAddPayment}\r\n        title=\"Record Payment\"\r\n        size=\"md\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <Select\r\n            label=\"Invoice\"\r\n            placeholder=\"Select invoice\"\r\n            data={[].map /* TODO: Fetch from API */(invoice => ({ \r\n              value: invoice.id, \r\n              label: `${invoice.invoiceNumber} - ${formatCurrency(invoice.totalAmount - invoice.paidAmount)}` \r\n            }))}\r\n            required\r\n          />\r\n          \r\n          <NumberInput\r\n            label=\"Payment Amount\"\r\n            placeholder=\"Enter amount\"\r\n            leftSection=\"₹\"\r\n            min={0}\r\n            required\r\n          />\r\n          \r\n          <Select\r\n            label=\"Payment Method\"\r\n            placeholder=\"Select method\"\r\n            data={[\r\n              { value: 'cash', label: 'Cash' },\r\n              { value: 'credit_card', label: 'Credit Card' },\r\n              { value: 'debit_card', label: 'Debit Card' },\r\n              { value: 'bank_transfer', label: 'Bank Transfer' },\r\n              { value: 'online', label: 'Online Payment' }\r\n            ]}\r\n            required\r\n          />\r\n          \r\n          <TextInput\r\n            label=\"Transaction ID\"\r\n            placeholder=\"Enter transaction reference\"\r\n          />\r\n          \r\n          <DatePickerInput\r\n            label=\"Payment Date\"\r\n            placeholder=\"Select date\"\r\n            value={new Date()}\r\n          />\r\n          \r\n          <Textarea\r\n            label=\"Notes\"\r\n            placeholder=\"Payment notes...\"\r\n            rows={3}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddPayment}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Success',\r\n                message: 'Payment recorded successfully',\r\n                color: 'green',\r\n              });\r\n              closeAddPayment();\r\n            }}>\r\n              Record Payment\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default BillingManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\communications\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleBarChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMessageCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 37,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 40,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'NotificationSettings' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 116,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockTemplates' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 144,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 144,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockMessages' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 213,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 213,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockCampaigns' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 326,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 326,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedTemplate' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 407,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 407,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedCampaign' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 409,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 409,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'templateDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 414,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 414,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeTemplateDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 414,
        "column": 67,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 414,
        "endColumn": 86
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'newTemplateOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 415,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 415,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeNewTemplate' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 415,
        "column": 61,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 415,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'campaignDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 416,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 416,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeCampaignDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 416,
        "column": 67,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 416,
        "endColumn": 86
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'newCampaignOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 417,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 417,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeNewCampaign' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 417,
        "column": 61,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 417,
        "endColumn": 77
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconDeviceMobile' is not defined.",
        "line": 499,
        "column": 27,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 499,
        "endColumn": 43
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconBrandWhatsapp' is not defined.",
        "line": 500,
        "column": 32,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 500,
        "endColumn": 49
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconMail' is not defined.",
        "line": 501,
        "column": 29,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 501,
        "endColumn": 37
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconPhoneCall' is not defined.",
        "line": 503,
        "column": 29,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 503,
        "endColumn": 42
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconClockHour4' is not defined.",
        "line": 578,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 578,
        "endColumn": 30
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconX' is not defined.",
        "line": 590,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 590,
        "endColumn": 21
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconTemplate' is not defined.",
        "line": 602,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 602,
        "endColumn": 28
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconCheckbox' is not defined.",
        "line": 614,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 614,
        "endColumn": 28
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconActivity' is not defined.",
        "line": 638,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 638,
        "endColumn": 28
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconTemplate' is not defined.",
        "line": 654,
        "column": 53,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 654,
        "endColumn": 65
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconSettings' is not defined.",
        "line": 660,
        "column": 52,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 660,
        "endColumn": 64
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconChartBar' is not defined.",
        "line": 663,
        "column": 53,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 663,
        "endColumn": 65
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 711,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 711,
        "endColumn": 21
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 712,
        "column": 18,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 712,
        "endColumn": 23
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 713,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 713,
        "endColumn": 25
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 714,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 714,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 715,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 715,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 716,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 716,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 717,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 717,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 718,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 718,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 719,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 719,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 720,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 720,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 721,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 721,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 722,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 722,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 725,
        "column": 18,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 725,
        "endColumn": 23
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 727,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 727,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 728,
        "column": 24,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 728,
        "endColumn": 29
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 739,
        "column": 24,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 739,
        "endColumn": 29
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 740,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 740,
        "endColumn": 31
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 748,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 748,
        "endColumn": 31
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 756,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 756,
        "endColumn": 31
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 764,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 764,
        "endColumn": 31
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 769,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 769,
        "endColumn": 31
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Indicator' is not defined.",
        "line": 775,
        "column": 32,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 775,
        "endColumn": 41
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 779,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 779,
        "endColumn": 31
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 784,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 784,
        "endColumn": 31
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 790,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 790,
        "endColumn": 31
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Table' is not defined.",
        "line": 793,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 793,
        "endColumn": 31
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconTrash' is not defined.",
        "line": 806,
        "column": 32,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 806,
        "endColumn": 41
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconEdit' is not defined.",
        "line": 882,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 882,
        "endColumn": 34
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconEdit' is not defined.",
        "line": 983,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 983,
        "endColumn": 34
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconClockPause' is not defined.",
        "line": 987,
        "column": 28,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 987,
        "endColumn": 42
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconDeviceMobile' is not defined.",
        "line": 1007,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1007,
        "endColumn": 38
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Switch' is not defined.",
        "line": 1010,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1010,
        "endColumn": 26
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconBrandWhatsapp' is not defined.",
        "line": 1014,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1014,
        "endColumn": 39
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Switch' is not defined.",
        "line": 1017,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1017,
        "endColumn": 26
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconMail' is not defined.",
        "line": 1021,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1021,
        "endColumn": 30
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Switch' is not defined.",
        "line": 1024,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1024,
        "endColumn": 26
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Switch' is not defined.",
        "line": 1031,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1031,
        "endColumn": 26
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconPhoneCall' is not defined.",
        "line": 1035,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1035,
        "endColumn": 35
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Switch' is not defined.",
        "line": 1038,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1038,
        "endColumn": 26
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'NumberInput' is not defined.",
        "line": 1082,
        "column": 18,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1082,
        "endColumn": 29
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'NumberInput' is not defined.",
        "line": 1089,
        "column": 18,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1089,
        "endColumn": 29
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'NumberInput' is not defined.",
        "line": 1096,
        "column": 18,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1096,
        "endColumn": 29
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Alert' is not defined.",
        "line": 1103,
        "column": 18,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1103,
        "endColumn": 23
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconAlertCircle' is not defined.",
        "line": 1103,
        "column": 31,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1103,
        "endColumn": 46
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Switch' is not defined.",
        "line": 1115,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1115,
        "endColumn": 26
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Switch' is not defined.",
        "line": 1119,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1119,
        "endColumn": 26
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Switch' is not defined.",
        "line": 1123,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1123,
        "endColumn": 26
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Switch' is not defined.",
        "line": 1127,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1127,
        "endColumn": 26
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'NumberInput' is not defined.",
        "line": 1129,
        "column": 18,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1129,
        "endColumn": 29
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'SimpleLineChart' is not defined.",
        "line": 1178,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1178,
        "endColumn": 31
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'SimpleAreaChart' is not defined.",
        "line": 1201,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1201,
        "endColumn": 31
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Timeline' is not defined.",
        "line": 1268,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1268,
        "endColumn": 24
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Timeline' is not defined.",
        "line": 1270,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1270,
        "endColumn": 28
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconCalendar' is not defined.",
        "line": 1270,
        "column": 43,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1270,
        "endColumn": 55
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Timeline' is not defined.",
        "line": 1276,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1276,
        "endColumn": 28
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Timeline' is not defined.",
        "line": 1282,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1282,
        "endColumn": 28
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconCheck' is not defined.",
        "line": 1282,
        "column": 43,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1282,
        "endColumn": 52
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Timeline' is not defined.",
        "line": 1288,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1288,
        "endColumn": 28
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'MultiSelect' is not defined.",
        "line": 1360,
        "column": 12,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1360,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 71,
    "fatalErrorCount": 0,
    "warningCount": 17,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useMemo } from 'react';\nimport {\n  Container,\n  Paper,\n  Title,\n  Group,\n  Button,\n  TextInput,\n  Select,\n  Badge,\n  Modal,\n  Text,\n  Tabs,\n  Card,\n  ActionIcon,\n  Stack,\n  SimpleGrid,\n  ScrollArea,\n  ThemeIcon,\n  Progress,\n  Textarea\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport EmptyState from '../../../components/EmptyState';\nimport { notifications } from '@mantine/notifications';\nimport { DatePickerInput } from '@mantine/dates';\nimport { MantineDonutChart, SimpleBarChart } from '../../../components/MantineChart';\nimport {\n  IconPlus,\n  IconSearch,\n  IconEye,\n  IconMessage,\n  IconRefresh,\n  IconSend,\n  IconMessageCircle,\n  IconBell,\n  IconTarget,\n  IconStar\n} from '@tabler/icons-react';\n\n// Types\ninterface CommunicationTemplate {\n  id: string;\n  name: string;\n  type: 'sms' | 'whatsapp' | 'email' | 'push' | 'voice';\n  category: 'appointment' | 'reminder' | 'follow-up' | 'emergency' | 'marketing' | 'billing' | 'general';\n  subject?: string;\n  content: string;\n  variables: string[];\n  isActive: boolean;\n  createdDate: string;\n  lastUsed?: string;\n  usageCount: number;\n  language: string;\n}\n\ninterface CommunicationMessage {\n  id: string;\n  templateId?: string;\n  templateName?: string;\n  type: 'sms' | 'whatsapp' | 'email' | 'push' | 'voice';\n  recipient: {\n    id: string;\n    name: string;\n    phone?: string;\n    email?: string;\n    type: 'patient' | 'doctor' | 'staff' | 'group';\n  };\n  subject?: string;\n  content: string;\n  status: 'pending' | 'sent' | 'delivered' | 'read' | 'failed' | 'scheduled';\n  priority: 'high' | 'medium' | 'low';\n  scheduledTime?: string;\n  sentTime?: string;\n  deliveredTime?: string;\n  readTime?: string;\n  attempts: number;\n  cost: number;\n  errorMessage?: string;\n  metadata: {\n    patientId?: string;\n    appointmentId?: string;\n    billId?: string;\n    campaignId?: string;\n  };\n}\n\ninterface CommunicationCampaign {\n  id: string;\n  name: string;\n  description: string;\n  type: 'sms' | 'whatsapp' | 'email' | 'multi-channel';\n  templateId: string;\n  templateName: string;\n  targetAudience: {\n    type: 'all-patients' | 'specific-patients' | 'department' | 'age-group' | 'custom';\n    criteria: Record<string, any>;\n    count: number;\n  };\n  status: 'draft' | 'scheduled' | 'running' | 'completed' | 'paused' | 'failed';\n  scheduledTime?: string;\n  startTime?: string;\n  endTime?: string;\n  totalRecipients: number;\n  sentCount: number;\n  deliveredCount: number;\n  readCount: number;\n  failedCount: number;\n  totalCost: number;\n  createdBy: string;\n  createdDate: string;\n}\n\ninterface NotificationSettings {\n  id: string;\n  userId: string;\n  userType: 'patient' | 'doctor' | 'admin' | 'staff';\n  channels: {\n    sms: boolean;\n    whatsapp: boolean;\n    email: boolean;\n    push: boolean;\n    voice: boolean;\n  };\n  categories: {\n    appointments: boolean;\n    reminders: boolean;\n    emergencies: boolean;\n    billing: boolean;\n    marketing: boolean;\n    reports: boolean;\n  };\n  frequency: 'immediate' | 'hourly' | 'daily' | 'weekly';\n  quietHours: {\n    enabled: boolean;\n    startTime: string;\n    endTime: string;\n  };\n}\n\n// Mock data\nconst mockTemplates: CommunicationTemplate[] = [\n  {\n    id: '1',\n    name: 'Appointment Reminder',\n    type: 'sms',\n    category: 'reminder',\n    content: 'Dear {{patientName}}, your appointment with Dr. {{doctorName}} is scheduled for {{appointmentDate}} at {{appointmentTime}}. Please arrive 15 minutes early. For any changes, call {{hospitalPhone}}.',\n    variables: ['patientName', 'doctorName', 'appointmentDate', 'appointmentTime', 'hospitalPhone'],\n    isActive: true,\n    createdDate: '2024-01-01T00:00:00Z',\n    lastUsed: '2024-01-15T10:30:00Z',\n    usageCount: 245,\n    language: 'English'\n  },\n  {\n    id: '2',\n    name: 'WhatsApp Appointment Confirmation',\n    type: 'whatsapp',\n    category: 'appointment',\n    content: '🏥 *Appointment Confirmed* ✅\\n\\nHello {{patientName}},\\n\\nYour appointment has been confirmed:\\n📅 Date: {{appointmentDate}}\\n⏰ Time: {{appointmentTime}}\\n👨‍⚕️ Doctor: Dr. {{doctorName}}\\n🏢 Department: {{department}}\\n\\nPlease arrive 15 minutes before your appointment.\\n\\n📞 For any queries, call: {{hospitalPhone}}\\n\\nThank you for choosing our hospital! 🙏',\n    variables: ['patientName', 'appointmentDate', 'appointmentTime', 'doctorName', 'department', 'hospitalPhone'],\n    isActive: true,\n    createdDate: '2024-01-01T00:00:00Z',\n    lastUsed: '2024-01-15T14:20:00Z',\n    usageCount: 189,\n    language: 'English'\n  },\n  {\n    id: '3',\n    name: 'Bill Payment Reminder',\n    type: 'email',\n    category: 'billing',\n    subject: 'Payment Reminder - Bill #{{billNumber}}',\n    content: 'Dear {{patientName}},\\n\\nThis is a friendly reminder that your bill #{{billNumber}} of ₹{{amount}} is due for payment.\\n\\nDue Date: {{dueDate}}\\nAmount: ₹{{amount}}\\n\\nYou can pay online at {{paymentLink}} or visit our billing counter.\\n\\nThank you for your prompt attention.\\n\\nBest regards,\\nBilling Department\\n{{hospitalName}}',\n    variables: ['patientName', 'billNumber', 'amount', 'dueDate', 'paymentLink', 'hospitalName'],\n    isActive: true,\n    createdDate: '2024-01-02T00:00:00Z',\n    lastUsed: '2024-01-14T16:45:00Z',\n    usageCount: 78,\n    language: 'English'\n  },\n  {\n    id: '4',\n    name: 'Emergency Alert',\n    type: 'sms',\n    category: 'emergency',\n    content: '🚨 EMERGENCY ALERT: {{emergencyType}} reported at {{location}}. All available {{department}} staff please report immediately. Time: {{timestamp}}',\n    variables: ['emergencyType', 'location', 'department', 'timestamp'],\n    isActive: true,\n    createdDate: '2024-01-03T00:00:00Z',\n    lastUsed: '2024-01-10T22:15:00Z',\n    usageCount: 12,\n    language: 'English'\n  },\n  {\n    id: '5',\n    name: 'Lab Report Ready',\n    type: 'whatsapp',\n    category: 'follow-up',\n    content: '🔬 *Lab Report Ready* 📋\\n\\nDear {{patientName}},\\n\\nYour lab report for tests conducted on {{testDate}} is now ready.\\n\\n📊 Report ID: {{reportId}}\\n🏥 Collected at: {{hospitalName}}\\n\\nYou can:\\n• Collect from reception\\n• Download from patient portal: {{portalLink}}\\n• Request home delivery\\n\\n📞 Contact: {{hospitalPhone}}\\n\\nThank you! 🙏',\n    variables: ['patientName', 'testDate', 'reportId', 'hospitalName', 'portalLink', 'hospitalPhone'],\n    isActive: true,\n    createdDate: '2024-01-04T00:00:00Z',\n    lastUsed: '2024-01-15T11:30:00Z',\n    usageCount: 156,\n    language: 'English'\n  }\n];\n\nconst mockMessages: CommunicationMessage[] = [\n  {\n    id: '1',\n    templateId: '1',\n    templateName: 'Appointment Reminder',\n    type: 'sms',\n    recipient: {\n      id: 'P001',\n      name: 'Rajesh Kumar',\n      phone: '+91 98765 43210',\n      type: 'patient'\n    },\n    content: 'Dear Rajesh Kumar, your appointment with Dr. Sharma is scheduled for 2024-01-16 at 10:30 AM. Please arrive 15 minutes early. For any changes, call +91 98765 00000.',\n    status: 'delivered',\n    priority: 'high',\n    sentTime: '2024-01-15T10:30:00Z',\n    deliveredTime: '2024-01-15T10:30:15Z',\n    attempts: 1,\n    cost: 0.25,\n    metadata: {\n      patientId: 'P001',\n      appointmentId: 'APT001'\n    }\n  },\n  {\n    id: '2',\n    templateId: '2',\n    templateName: 'WhatsApp Appointment Confirmation',\n    type: 'whatsapp',\r\n    recipient: {\r\n      id: 'P002',\r\n      name: 'Sunita Patel',\r\n      phone: '+91 87654 32109',\r\n      type: 'patient'\r\n    },\r\n    content: '🏥 *Appointment Confirmed* ✅\\n\\nHello Sunita Patel,\\n\\nYour appointment has been confirmed:\\n📅 Date: 2024-01-17\\n⏰ Time: 02:30 PM\\n👨‍⚕️ Doctor: Dr. Mehta\\n🏢 Department: Gynecology\\n\\nPlease arrive 15 minutes before your appointment.\\n\\n📞 For any queries, call: +91 98765 00000\\n\\nThank you for choosing our hospital! 🙏',\r\n    status: 'read',\r\n    priority: 'medium',\r\n    sentTime: '2024-01-15T14:20:00Z',\r\n    deliveredTime: '2024-01-15T14:20:05Z',\r\n    readTime: '2024-01-15T14:25:30Z',\r\n    attempts: 1,\r\n    cost: 0.15,\r\n    metadata: {\r\n      patientId: 'P002',\r\n      appointmentId: 'APT002'\r\n    }\r\n  },\r\n  {\r\n    id: '3',\r\n    templateId: '3',\r\n    templateName: 'Bill Payment Reminder',\r\n    type: 'email',\r\n    recipient: {\r\n      id: 'P003',\r\n      name: 'Mohammed Ali',\r\n      email: 'mohammed@example.com',\r\n      type: 'patient'\r\n    },\r\n    subject: 'Payment Reminder - Bill #INV-2024-001',\r\n    content: 'Dear Mohammed Ali,\\n\\nThis is a friendly reminder that your bill #INV-2024-001 of ₹15,500 is due for payment.\\n\\nDue Date: 2024-01-20\\nAmount: ₹15,500\\n\\nYou can pay online at https://hospital.com/pay or visit our billing counter.\\n\\nThank you for your prompt attention.\\n\\nBest regards,\\nBilling Department\\nCity Hospital',\r\n    status: 'sent',\r\n    priority: 'medium',\r\n    sentTime: '2024-01-14T16:45:00Z',\r\n    attempts: 1,\r\n    cost: 0.05,\r\n    metadata: {\r\n      patientId: 'P003',\r\n      billId: 'INV-2024-001'\r\n    }\r\n  },\r\n  {\r\n    id: '4',\r\n    templateId: '4',\r\n    templateName: 'Emergency Alert',\r\n    type: 'sms',\r\n    recipient: {\r\n      id: 'D001',\r\n      name: 'All ICU Staff',\r\n      type: 'group'\r\n    },\r\n    content: '🚨 EMERGENCY ALERT: Code Blue reported at ICU Room 5. All available ICU staff please report immediately. Time: 2024-01-10 22:15',\r\n    status: 'delivered',\r\n    priority: 'high',\r\n    sentTime: '2024-01-10T22:15:00Z',\r\n    deliveredTime: '2024-01-10T22:15:05Z',\r\n    attempts: 1,\r\n    cost: 2.50,\r\n    metadata: {}\r\n  },\r\n  {\r\n    id: '5',\r\n    templateId: '5',\r\n    templateName: 'Lab Report Ready',\r\n    type: 'whatsapp',\r\n    recipient: {\r\n      id: 'P004',\r\n      name: 'Priya Sharma',\r\n      phone: '+91 76543 21098',\r\n      type: 'patient'\r\n    },\r\n    content: '🔬 *Lab Report Ready* 📋\\n\\nDear Priya Sharma,\\n\\nYour lab report for tests conducted on 2024-01-12 is now ready.\\n\\n📊 Report ID: LAB-2024-045\\n🏥 Collected at: City Hospital\\n\\nYou can:\\n• Collect from reception\\n• Download from patient portal: https://portal.hospital.com\\n• Request home delivery\\n\\n📞 Contact: +91 98765 00000\\n\\nThank you! 🙏',\r\n    status: 'pending',\r\n    priority: 'medium',\r\n    scheduledTime: '2024-01-16T09:00:00Z',\r\n    attempts: 0,\r\n    cost: 0.15,\r\n    metadata: {\r\n      patientId: 'P004'\r\n    }\r\n  }\r\n];\r\n\r\nconst mockCampaigns: CommunicationCampaign[] = [\r\n  {\r\n    id: '1',\r\n    name: 'Health Checkup Reminder Campaign',\r\n    description: 'Annual health checkup reminders for patients above 40',\r\n    type: 'multi-channel',\r\n    templateId: '6',\r\n    templateName: 'Annual Checkup Reminder',\r\n    targetAudience: {\r\n      type: 'age-group',\r\n      criteria: { ageMin: 40, ageMax: 80 },\r\n      count: 450\r\n    },\r\n    status: 'completed',\r\n    scheduledTime: '2024-01-10T09:00:00Z',\r\n    startTime: '2024-01-10T09:00:00Z',\r\n    endTime: '2024-01-10T12:30:00Z',\r\n    totalRecipients: 450,\r\n    sentCount: 445,\r\n    deliveredCount: 420,\r\n    readCount: 320,\r\n    failedCount: 5,\r\n    totalCost: 67.50,\r\n    createdBy: 'Marketing Team',\r\n    createdDate: '2024-01-08T00:00:00Z'\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Vaccination Drive Notification',\r\n    description: 'COVID-19 booster vaccination drive announcement',\r\n    type: 'whatsapp',\r\n    templateId: '7',\r\n    templateName: 'Vaccination Drive',\r\n    targetAudience: {\r\n      type: 'all-patients',\r\n      criteria: {},\r\n      count: 1200\r\n    },\r\n    status: 'running',\r\n    scheduledTime: '2024-01-15T08:00:00Z',\r\n    startTime: '2024-01-15T08:00:00Z',\r\n    totalRecipients: 1200,\r\n    sentCount: 856,\r\n    deliveredCount: 834,\r\n    readCount: 523,\r\n    failedCount: 22,\r\n    totalCost: 128.40,\r\n    createdBy: 'Admin',\r\n    createdDate: '2024-01-14T00:00:00Z'\r\n  },\r\n  {\r\n    id: '3',\r\n    name: 'Cardiology Department Promotion',\r\n    description: 'New cardiology services and specialist announcement',\r\n    type: 'email',\r\n    templateId: '8',\r\n    templateName: 'Cardiology Services',\r\n    targetAudience: {\r\n      type: 'department',\r\n      criteria: { department: 'Cardiology', isExistingPatient: true },\r\n      count: 180\r\n    },\r\n    status: 'scheduled',\r\n    scheduledTime: '2024-01-18T10:00:00Z',\r\n    totalRecipients: 180,\r\n    sentCount: 0,\r\n    deliveredCount: 0,\r\n    readCount: 0,\r\n    failedCount: 0,\r\n    totalCost: 9.00,\r\n    createdBy: 'Marketing Team',\r\n    createdDate: '2024-01-15T00:00:00Z'\r\n  }\r\n];\r\n\r\nconst CommunicationsManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('messages');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedType, setSelectedType] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedTemplate, setSelectedTemplate] = useState<CommunicationTemplate | null>(null);\r\n  const [selectedMessage, setSelectedMessage] = useState<CommunicationMessage | null>(null);\r\n  const [selectedCampaign, setSelectedCampaign] = useState<CommunicationCampaign | null>(null);\r\n\r\n  // Modal states\r\n  const [messageDetailOpened, { open: openMessageDetail, close: closeMessageDetail }] = useDisclosure(false);\r\n  const [newMessageOpened, { open: openNewMessage, close: closeNewMessage }] = useDisclosure(false);\r\n  const [templateDetailOpened, { open: openTemplateDetail, close: closeTemplateDetail }] = useDisclosure(false);\r\n  const [newTemplateOpened, { open: openNewTemplate, close: closeNewTemplate }] = useDisclosure(false);\r\n  const [campaignDetailOpened, { open: openCampaignDetail, close: closeCampaignDetail }] = useDisclosure(false);\r\n  const [newCampaignOpened, { open: openNewCampaign, close: closeNewCampaign }] = useDisclosure(false);\r\n\r\n  // Filter messages\r\n  const filteredMessages = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((message) => {\r\n      const matchesSearch = \r\n        message.recipient.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        message.content.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        (message.templateName && message.templateName.toLowerCase().includes(searchQuery.toLowerCase()));\r\n      \r\n      const matchesType = !selectedType || message.type === selectedType;\r\n      const matchesStatus = !selectedStatus || message.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesType && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedType, selectedStatus]);\r\n\r\n  // Filter templates\r\n  const filteredTemplates = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((template) => {\r\n      const matchesSearch = \r\n        template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        template.content.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        template.category.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesType = !selectedType || template.type === selectedType;\r\n\r\n      return matchesSearch && matchesType;\r\n    });\r\n  }, [searchQuery, selectedType]);\r\n\r\n  const handleViewMessage = (message: CommunicationMessage) => {\r\n    setSelectedMessage(message);\r\n    openMessageDetail();\r\n  };\r\n\r\n  const handleViewTemplate = (template: CommunicationTemplate) => {\r\n    setSelectedTemplate(template);\r\n    openTemplateDetail();\r\n  };\r\n\r\n  const handleViewCampaign = (campaign: CommunicationCampaign) => {\r\n    setSelectedCampaign(campaign);\r\n    openCampaignDetail();\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('en-IN', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  const formatDateTime = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('en-IN', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'sent': return 'blue';\r\n      case 'delivered': return 'green';\r\n      case 'read': return 'teal';\r\n      case 'pending': return 'yellow';\r\n      case 'scheduled': return 'purple';\r\n      case 'failed': return 'red';\r\n      case 'running': return 'blue';\r\n      case 'completed': return 'green';\r\n      case 'paused': return 'orange';\r\n      case 'draft': return 'gray';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getTypeIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'sms': return <IconDeviceMobile size={16} />;\r\n      case 'whatsapp': return <IconBrandWhatsapp size={16} />;\r\n      case 'email': return <IconMail size={16} />;\r\n      case 'push': return <IconBell size={16} />;\r\n      case 'voice': return <IconPhoneCall size={16} />;\r\n      default: return <IconMessage size={16} />;\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'high': return 'red';\r\n      case 'medium': return 'yellow';\r\n      case 'low': return 'green';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  // Communication stats\r\n  const communicationStats = {\r\n    totalMessages: 0 /* TODO: Fetch from API */,\r\n    sentMessages: [].filter /* TODO: Fetch from API */(m => m.status === 'sent' || m.status === 'delivered' || m.status === 'read').length,\r\n    pendingMessages: [].filter /* TODO: Fetch from API */(m => m.status === 'pending' || m.status === 'scheduled').length,\r\n    failedMessages: [].filter /* TODO: Fetch from API */(m => m.status === 'failed').length,\r\n    totalTemplates: 0 /* TODO: Fetch from API */,\r\n    activeTemplates: [].filter /* TODO: Fetch from API */(t => t.isActive).length,\r\n    totalCampaigns: 0 /* TODO: Fetch from API */,\r\n    activeCampaigns: [].filter /* TODO: Fetch from API */(c => c.status === 'running' || c.status === 'scheduled').length\r\n  };\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Communications Center</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage SMS, WhatsApp, email, and push notifications\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button variant=\"light\" leftSection={<IconRefresh size={16} />}>\r\n            Refresh Status\r\n          </Button>\r\n          <Button leftSection={<IconPlus size={16} />} onClick={openNewMessage}>\r\n            Send Message\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Quick Stats */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4, lg: 8 }} mb=\"lg\" spacing=\"sm\">\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"blue\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconMessage size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{communicationStats.totalMessages}</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Total Messages</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"green\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconSend size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{communicationStats.sentMessages}</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Sent</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"yellow\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconClockHour4 size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{communicationStats.pendingMessages}</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Pending</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"red\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconX size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{communicationStats.failedMessages}</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Failed</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"purple\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconTemplate size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{communicationStats.totalTemplates}</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Templates</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"teal\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconCheckbox size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{communicationStats.activeTemplates}</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Active</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"cyan\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconTarget size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{communicationStats.totalCampaigns}</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Campaigns</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"orange\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconActivity size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{communicationStats.activeCampaigns}</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Running</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"messages\" leftSection={<IconMessage size={16} />}>\r\n            Messages\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"templates\" leftSection={<IconTemplate size={16} />}>\r\n            Templates\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"campaigns\" leftSection={<IconTarget size={16} />}>\r\n            Campaigns\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"settings\" leftSection={<IconSettings size={16} />}>\r\n            Settings\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconChartBar size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Messages Tab */}\r\n        <Tabs.Panel value=\"messages\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search messages...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Type\"\r\n                data={[\r\n                  { value: 'sms', label: 'SMS' },\r\n                  { value: 'whatsapp', label: 'WhatsApp' },\r\n                  { value: 'email', label: 'Email' },\r\n                  { value: 'push', label: 'Push Notification' },\r\n                  { value: 'voice', label: 'Voice Call' }\r\n                ]}\r\n                value={selectedType}\r\n                onChange={(value) => setSelectedType(value || '')}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'pending', label: 'Pending' },\r\n                  { value: 'sent', label: 'Sent' },\r\n                  { value: 'delivered', label: 'Delivered' },\r\n                  { value: 'read', label: 'Read' },\r\n                  { value: 'failed', label: 'Failed' },\r\n                  { value: 'scheduled', label: 'Scheduled' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={(value) => setSelectedStatus(value || '')}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Messages Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Type</Table.Th>\r\n                    <Table.Th>Recipient</Table.Th>\r\n                    <Table.Th>Template</Table.Th>\r\n                    <Table.Th>Content</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Priority</Table.Th>\r\n                    <Table.Th>Sent Time</Table.Th>\r\n                    <Table.Th>Cost</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredMessages.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={9}>\r\n                        <EmptyState\r\n                          icon={<IconMessage size={48} />}\r\n                          title=\"No messages\"\r\n                          description=\"Communication history will appear here\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredMessages.map((message) => (\r\n                      <Table.Tr key={message.id}>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ThemeIcon size=\"sm\" variant=\"light\">\r\n                              {getTypeIcon(message.type)}\r\n                            </ThemeIcon>\r\n                            <Text size=\"sm\" tt=\"uppercase\">{message.type}</Text>\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>{message.recipient.name}</Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              {message.recipient.phone || message.recipient.email}\r\n                            </Text>\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>{message.templateName || 'Custom'}</Text>\r\n                            {message.subject && (\r\n                              <Text size=\"xs\" c=\"dimmed\">{message.subject}</Text>\r\n                            )}\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\" lineClamp={2} style={{ maxWidth: 200 }}>\r\n                            {message.content}\r\n                          </Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <Badge color={getStatusColor(message.status)} variant=\"light\" size=\"sm\">\r\n                              {message.status.toUpperCase()}\r\n                            </Badge>\r\n                            {message.status === 'pending' && (\r\n                              <Indicator color=\"orange\" size={6} />\r\n                            )}\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getPriorityColor(message.priority)} variant=\"outline\" size=\"sm\">\r\n                            {message.priority.toUpperCase()}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">\r\n                            {message.sentTime ? formatDateTime(message.sentTime) : \r\n                             message.scheduledTime ? `Scheduled: ${formatDateTime(message.scheduledTime)}` : '-'}\r\n                          </Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\" fw={500}>₹{message.cost.toFixed(2)}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon\r\n                              variant=\"subtle\"\r\n                              color=\"blue\"\r\n                              onClick={() => handleViewMessage(message)}\r\n                            >\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"green\">\r\n                              <IconSend size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"red\">\r\n                              <IconTrash size={16} />\r\n                            </ActionIcon>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))\r\n                  )}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Templates Tab */}\r\n        <Tabs.Panel value=\"templates\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Message Templates</Title>\r\n              <Button leftSection={<IconPlus size={16} />} onClick={openNewTemplate}>\r\n                New Template\r\n              </Button>\r\n            </Group>\r\n            \r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {filteredTemplates.map((template) => (\r\n                <Card key={template.id} padding=\"lg\" radius=\"md\" withBorder onClick={() => handleViewTemplate(template)} style={{ cursor: 'pointer' }}>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Group mb=\"xs\">\r\n                        <ThemeIcon size=\"sm\" variant=\"light\">\r\n                          {getTypeIcon(template.type)}\r\n                        </ThemeIcon>\r\n                        <Text fw={600} size=\"lg\">{template.name}</Text>\r\n                      </Group>\r\n                      <Text size=\"sm\" c=\"dimmed\" tt=\"capitalize\">{template.category}</Text>\r\n                    </div>\r\n                    <Group>\r\n                      <Badge color={template.isActive ? 'green' : 'red'} variant=\"light\">\r\n                        {template.isActive ? 'ACTIVE' : 'INACTIVE'}\r\n                      </Badge>\r\n                      <Badge variant=\"outline\" size=\"sm\" tt=\"uppercase\">\r\n                        {template.type}\r\n                      </Badge>\r\n                    </Group>\r\n                  </Group>\r\n\r\n                  <Text size=\"sm\" lineClamp={3} mb=\"md\">\r\n                    {template.content}\r\n                  </Text>\r\n\r\n                  <Stack gap=\"xs\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Usage Count</Text>\r\n                      <Text size=\"sm\" fw={500}>{template.usageCount}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Variables</Text>\r\n                      <Text size=\"sm\" fw={500}>{template.variables.length}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Last Used</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {template.lastUsed ? formatDate(template.lastUsed) : 'Never'}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Created: {formatDate(template.createdDate)}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconSend size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Campaigns Tab */}\r\n        <Tabs.Panel value=\"campaigns\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Communication Campaigns</Title>\r\n              <Button leftSection={<IconPlus size={16} />} onClick={openNewCampaign}>\r\n                New Campaign\r\n              </Button>\r\n            </Group>\r\n            \r\n            <Stack gap=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((campaign) => (\r\n                <Card key={campaign.id} padding=\"lg\" radius=\"md\" withBorder onClick={() => handleViewCampaign(campaign)} style={{ cursor: 'pointer' }}>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Title order={4}>{campaign.name}</Title>\r\n                      <Text c=\"dimmed\" size=\"sm\">{campaign.description}</Text>\r\n                    </div>\r\n                    <Group>\r\n                      <Badge color={getStatusColor(campaign.status)} variant=\"light\" size=\"lg\">\r\n                        {campaign.status.toUpperCase()}\r\n                      </Badge>\r\n                      <Badge variant=\"outline\" tt=\"uppercase\">\r\n                        {campaign.type}\r\n                      </Badge>\r\n                    </Group>\r\n                  </Group>\r\n\r\n                  <SimpleGrid cols={6} spacing=\"md\" mb=\"md\">\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <Text size=\"xl\" fw={700} c=\"blue\">{campaign.totalRecipients}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">Total Recipients</Text>\r\n                    </div>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <Text size=\"xl\" fw={700} c=\"green\">{campaign.sentCount}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">Sent</Text>\r\n                    </div>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <Text size=\"xl\" fw={700} c=\"teal\">{campaign.deliveredCount}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">Delivered</Text>\r\n                    </div>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <Text size=\"xl\" fw={700} c=\"cyan\">{campaign.readCount}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">Read</Text>\r\n                    </div>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <Text size=\"xl\" fw={700} c=\"red\">{campaign.failedCount}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">Failed</Text>\r\n                    </div>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <Text size=\"xl\" fw={700} c=\"orange\">₹{campaign.totalCost.toFixed(2)}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">Total Cost</Text>\r\n                    </div>\r\n                  </SimpleGrid>\r\n\r\n                  {campaign.status === 'running' && campaign.sentCount > 0 && (\r\n                    <div className=\"mb-md\">\r\n                      <Text size=\"sm\" c=\"dimmed\" mb=\"xs\">Campaign Progress</Text>\r\n                      <Progress \r\n                        value={(campaign.sentCount / campaign.totalRecipients) * 100} \r\n                        size=\"lg\" \r\n                        color=\"blue\"\r\n                      />\r\n                      <Group justify=\"space-between\" mt=\"xs\">\r\n                        <Text size=\"xs\" c=\"dimmed\">\r\n                          {Math.round((campaign.sentCount / campaign.totalRecipients) * 100)}% completed\r\n                        </Text>\r\n                        <Text size=\"xs\" c=\"dimmed\">\r\n                          {campaign.totalRecipients - campaign.sentCount} remaining\r\n                        </Text>\r\n                      </Group>\r\n                    </div>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <div>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        Template: {campaign.templateName}\r\n                      </Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        Target: {campaign.targetAudience.type.replace('-', ' ')} ({campaign.targetAudience.count} recipients)\r\n                      </Text>\r\n                    </div>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      {campaign.status === 'running' && (\r\n                        <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                          <IconClockPause size={16} />\r\n                        </ActionIcon>\r\n                      )}\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </Stack>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Settings Tab */}\r\n        <Tabs.Panel value=\"settings\">\r\n          <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\" mt=\"md\">\r\n            {/* Channel Settings */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Channel Configuration</Title>\r\n              <Stack gap=\"md\">\r\n                <Group justify=\"space-between\">\r\n                  <Group>\r\n                    <IconDeviceMobile size={20} />\r\n                    <Text>SMS Service</Text>\r\n                  </Group>\r\n                  <Switch defaultChecked />\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Group>\r\n                    <IconBrandWhatsapp size={20} />\r\n                    <Text>WhatsApp Business</Text>\r\n                  </Group>\r\n                  <Switch defaultChecked />\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Group>\r\n                    <IconMail size={20} />\r\n                    <Text>Email Service</Text>\r\n                  </Group>\r\n                  <Switch defaultChecked />\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Group>\r\n                    <IconBell size={20} />\r\n                    <Text>Push Notifications</Text>\r\n                  </Group>\r\n                  <Switch />\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Group>\r\n                    <IconPhoneCall size={20} />\r\n                    <Text>Voice Calls</Text>\r\n                  </Group>\r\n                  <Switch />\r\n                </Group>\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* API Settings */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">API Configuration</Title>\r\n              <Stack gap=\"md\">\r\n                <TextInput\r\n                  label=\"SMS Gateway API Key\"\r\n                  placeholder=\"Enter API key\"\r\n                  type=\"password\"\r\n                />\r\n                <TextInput\r\n                  label=\"WhatsApp Business API Token\"\r\n                  placeholder=\"Enter API token\"\r\n                  type=\"password\"\r\n                />\r\n                <TextInput\r\n                  label=\"Email SMTP Server\"\r\n                  placeholder=\"smtp.gmail.com\"\r\n                />\r\n                <Group grow>\r\n                  <TextInput\r\n                    label=\"SMTP Username\"\r\n                    placeholder=\"username@domain.com\"\r\n                  />\r\n                  <TextInput\r\n                    label=\"SMTP Password\"\r\n                    placeholder=\"Enter password\"\r\n                    type=\"password\"\r\n                  />\r\n                </Group>\r\n                <Button variant=\"light\" fullWidth>\r\n                  Test Configuration\r\n                </Button>\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* Rate Limiting */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Rate Limiting</Title>\r\n              <Stack gap=\"md\">\r\n                <NumberInput\r\n                  label=\"SMS per minute\"\r\n                  placeholder=\"100\"\r\n                  defaultValue={100}\r\n                  min={1}\r\n                  max={1000}\r\n                />\r\n                <NumberInput\r\n                  label=\"WhatsApp per minute\"\r\n                  placeholder=\"50\"\r\n                  defaultValue={50}\r\n                  min={1}\r\n                  max={500}\r\n                />\r\n                <NumberInput\r\n                  label=\"Emails per minute\"\r\n                  placeholder=\"20\"\r\n                  defaultValue={20}\r\n                  min={1}\r\n                  max={100}\r\n                />\r\n                <Alert icon={<IconAlertCircle size=\"1rem\" />} title=\"Rate Limiting Info\">\r\n                  Rate limits help prevent service provider restrictions and ensure reliable message delivery.\r\n                </Alert>\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* Notification Preferences */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">System Notifications</Title>\r\n              <Stack gap=\"md\">\r\n                <Group justify=\"space-between\">\r\n                  <Text size=\"sm\">Failed message alerts</Text>\r\n                  <Switch defaultChecked />\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Text size=\"sm\">Campaign completion</Text>\r\n                  <Switch defaultChecked />\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Text size=\"sm\">Template usage reports</Text>\r\n                  <Switch />\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Text size=\"sm\">Cost threshold alerts</Text>\r\n                  <Switch defaultChecked />\r\n                </Group>\r\n                <NumberInput\r\n                  label=\"Daily cost limit (₹)\"\r\n                  placeholder=\"1000\"\r\n                  defaultValue={1000}\r\n                  min={0}\r\n                />\r\n              </Stack>\r\n            </Card>\r\n          </SimpleGrid>\r\n        </Tabs.Panel>\r\n\r\n        {/* Analytics Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\" mt=\"md\">\r\n            {/* Message Type Distribution */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Message Type Distribution</Title>\r\n              <MantineDonutChart\r\n                data={[\r\n                  { name: 'SMS', value: 2, color: 'blue' },\r\n                  { name: 'WhatsApp', value: 2, color: 'green' },\r\n                  { name: 'Email', value: 1, color: 'orange' },\r\n                  { name: 'Push', value: 1, color: 'purple' }\r\n                ]}\r\n                size={160}\r\n                thickness={30}\r\n                withLabels\r\n              />\r\n            </Card>\r\n\r\n            {/* Delivery Status */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Delivery Status Overview</Title>\r\n              <MantineDonutChart\r\n                data={[\r\n                  { name: 'Delivered', value: 2, color: 'green' },\r\n                  { name: 'Read', value: 1, color: 'teal' },\r\n                  { name: 'Pending', value: 1, color: 'yellow' },\r\n                  { name: 'Failed', value: 1, color: 'red' }\r\n                ]}\r\n                size={160}\r\n                thickness={30}\r\n                withLabels\r\n              />\r\n            </Card>\r\n\r\n            {/* Daily Message Trends */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Daily Message Volume</Title>\r\n              <SimpleLineChart\r\n                h={200}\r\n                data={[\r\n                  { date: 'Mon', sms: 45, whatsapp: 32, email: 18 },\r\n                  { date: 'Tue', sms: 52, whatsapp: 38, email: 22 },\r\n                  { date: 'Wed', sms: 48, whatsapp: 35, email: 20 },\r\n                  { date: 'Thu', sms: 61, whatsapp: 42, email: 25 },\r\n                  { date: 'Fri', sms: 55, whatsapp: 40, email: 23 },\r\n                  { date: 'Sat', sms: 38, whatsapp: 28, email: 15 },\r\n                  { date: 'Sun', sms: 32, whatsapp: 25, email: 12 }\r\n                ]}\r\n                dataKey=\"date\"\r\n                series={[\r\n                  { name: 'sms', color: 'blue.6', label: 'SMS' },\r\n                  { name: 'whatsapp', color: 'green.6', label: 'WhatsApp' },\r\n                  { name: 'email', color: 'orange.6', label: 'Email' }\r\n                ]}\r\n              />\r\n            </Card>\r\n\r\n            {/* Cost Analysis */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Monthly Communication Costs</Title>\r\n              <SimpleAreaChart\r\n                h={200}\r\n                data={[\r\n                  { month: 'Jan', sms: 156.50, whatsapp: 89.30, email: 12.80 },\r\n                  { month: 'Feb', sms: 178.20, whatsapp: 95.60, email: 15.40 },\r\n                  { month: 'Mar', sms: 165.80, whatsapp: 102.40, email: 18.20 },\r\n                  { month: 'Apr', sms: 192.30, whatsapp: 110.80, email: 20.60 },\r\n                  { month: 'May', sms: 185.70, whatsapp: 98.50, email: 17.90 },\r\n                  { month: 'Jun', sms: 201.40, whatsapp: 115.20, email: 22.30 }\r\n                ]}\r\n                dataKey=\"month\"\r\n                series={[\r\n                  { name: 'sms', color: 'blue.6' },\r\n                  { name: 'whatsapp', color: 'green.6' },\r\n                  { name: 'email', color: 'orange.6' }\r\n                ]}\r\n              />\r\n            </Card>\r\n          </SimpleGrid>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Message Detail Modal */}\r\n      <Modal\r\n        opened={messageDetailOpened}\r\n        onClose={closeMessageDetail}\r\n        title=\"Message Details\"\r\n        size=\"lg\"\r\n      >\r\n        {selectedMessage && (\r\n          <Stack gap=\"md\">\r\n            {/* Message Header */}\r\n            <Group justify=\"space-between\" mb=\"md\">\r\n              <div>\r\n                <Group mb=\"xs\">\r\n                  <ThemeIcon variant=\"light\">\r\n                    {getTypeIcon(selectedMessage.type)}\r\n                  </ThemeIcon>\r\n                  <Title order={4}>{selectedMessage.type.toUpperCase()} Message</Title>\r\n                </Group>\r\n                <Text c=\"dimmed\">To: {selectedMessage.recipient.name}</Text>\r\n              </div>\r\n              <Group>\r\n                <Badge color={getStatusColor(selectedMessage.status)} variant=\"light\" size=\"lg\">\r\n                  {selectedMessage.status.toUpperCase()}\r\n                </Badge>\r\n                <Badge color={getPriorityColor(selectedMessage.priority)} variant=\"outline\">\r\n                  {selectedMessage.priority.toUpperCase()}\r\n                </Badge>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Message Content */}\r\n            <Paper p=\"md\" radius=\"md\" withBorder>\r\n              {selectedMessage.subject && (\r\n                <div>\r\n                  <Text size=\"sm\" c=\"dimmed\" fw={500}>Subject</Text>\r\n                  <Text fw={600} mb=\"md\">{selectedMessage.subject}</Text>\r\n                </div>\r\n              )}\r\n              <Text size=\"sm\" c=\"dimmed\" fw={500}>Content</Text>\r\n              <Text mt=\"xs\">{selectedMessage.content}</Text>\r\n            </Paper>\r\n\r\n            {/* Message Timeline */}\r\n            <Paper p=\"md\" radius=\"md\" withBorder>\r\n              <Title order={5} mb=\"md\">Message Timeline</Title>\r\n              <Timeline bulletSize={20} lineWidth={2}>\r\n                {selectedMessage.scheduledTime && (\r\n                  <Timeline.Item bullet={<IconCalendar size={12} />} title=\"Scheduled\">\r\n                    <Text c=\"dimmed\" size=\"sm\">Message scheduled for delivery</Text>\r\n                    <Text size=\"xs\" mt={4}>{formatDateTime(selectedMessage.scheduledTime)}</Text>\r\n                  </Timeline.Item>\r\n                )}\r\n                {selectedMessage.sentTime && (\r\n                  <Timeline.Item bullet={<IconSend size={12} />} title=\"Sent\" color=\"blue\">\r\n                    <Text c=\"dimmed\" size=\"sm\">Message sent to recipient</Text>\r\n                    <Text size=\"xs\" mt={4}>{formatDateTime(selectedMessage.sentTime)}</Text>\r\n                  </Timeline.Item>\r\n                )}\r\n                {selectedMessage.deliveredTime && (\r\n                  <Timeline.Item bullet={<IconCheck size={12} />} title=\"Delivered\" color=\"green\">\r\n                    <Text c=\"dimmed\" size=\"sm\">Message delivered successfully</Text>\r\n                    <Text size=\"xs\" mt={4}>{formatDateTime(selectedMessage.deliveredTime)}</Text>\r\n                  </Timeline.Item>\r\n                )}\r\n                {selectedMessage.readTime && (\r\n                  <Timeline.Item bullet={<IconEye size={12} />} title=\"Read\" color=\"teal\">\r\n                    <Text c=\"dimmed\" size=\"sm\">Message read by recipient</Text>\r\n                    <Text size=\"xs\" mt={4}>{formatDateTime(selectedMessage.readTime)}</Text>\r\n                  </Timeline.Item>\r\n                )}\r\n              </Timeline>\r\n            </Paper>\r\n\r\n            {/* Message Stats */}\r\n            <SimpleGrid cols={4} spacing=\"md\">\r\n              <div style={{ textAlign: 'center' }}>\r\n                <Text size=\"lg\" fw={700}>{selectedMessage.attempts}</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">Attempts</Text>\r\n              </div>\r\n              <div style={{ textAlign: 'center' }}>\r\n                <Text size=\"lg\" fw={700}>₹{selectedMessage.cost.toFixed(2)}</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">Cost</Text>\r\n              </div>\r\n              <div style={{ textAlign: 'center' }}>\r\n                <Text size=\"lg\" fw={700}>{selectedMessage.recipient.phone || selectedMessage.recipient.email}</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">Contact</Text>\r\n              </div>\r\n              <div style={{ textAlign: 'center' }}>\r\n                <Text size=\"lg\" fw={700} tt=\"capitalize\">{selectedMessage.recipient.type}</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">Recipient Type</Text>\r\n              </div>\r\n            </SimpleGrid>\r\n\r\n            {/* Action Buttons */}\r\n            <Group justify=\"flex-end\">\r\n              <Button variant=\"light\" onClick={closeMessageDetail}>\r\n                Close\r\n              </Button>\r\n              {selectedMessage.status === 'failed' && (\r\n                <Button leftSection={<IconRefresh size={16} />}>\r\n                  Retry Send\r\n                </Button>\r\n              )}\r\n            </Group>\r\n          </Stack>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* New Message Modal */}\r\n      <Modal\r\n        opened={newMessageOpened}\r\n        onClose={closeNewMessage}\r\n        title=\"Send New Message\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2} spacing=\"md\">\r\n            <Select\r\n              label=\"Message Type\"\r\n              placeholder=\"Select type\"\r\n              data={[\r\n                { value: 'sms', label: 'SMS' },\r\n                { value: 'whatsapp', label: 'WhatsApp' },\r\n                { value: 'email', label: 'Email' },\r\n                { value: 'push', label: 'Push Notification' }\r\n              ]}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Template\"\r\n              placeholder=\"Select template (optional)\"\r\n              data={[].map /* TODO: Fetch from API */(t => ({ value: t.id, label: t.name }))}\r\n              searchable\r\n              clearable\r\n            />\r\n          </SimpleGrid>\r\n\r\n          <MultiSelect\r\n            label=\"Recipients\"\r\n            placeholder=\"Select recipients\"\r\n            data={[\r\n              { value: 'P001', label: 'Rajesh Kumar - Patient' },\r\n              { value: 'P002', label: 'Sunita Patel - Patient' },\r\n              { value: 'D001', label: 'Dr. Sharma - Doctor' },\r\n              { value: 'ALL_PATIENTS', label: 'All Patients' },\r\n              { value: 'ICU_STAFF', label: 'ICU Staff' }\r\n            ]}\r\n            searchable\r\n            required\r\n          />\r\n\r\n          <TextInput\r\n            label=\"Subject (Email only)\"\r\n            placeholder=\"Enter subject\"\r\n          />\r\n\r\n          <Textarea\r\n            label=\"Message Content\"\r\n            placeholder=\"Enter your message...\"\r\n            minRows={4}\r\n            required\r\n          />\r\n\r\n          <SimpleGrid cols={2} spacing=\"md\">\r\n            <Select\r\n              label=\"Priority\"\r\n              placeholder=\"Select priority\"\r\n              data={[\r\n                { value: 'high', label: 'High' },\r\n                { value: 'medium', label: 'Medium' },\r\n                { value: 'low', label: 'Low' }\r\n              ]}\r\n              defaultValue=\"medium\"\r\n              required\r\n            />\r\n            <DatePickerInput\r\n              label=\"Schedule Send Time (Optional)\"\r\n              placeholder=\"Select date and time\"\r\n              clearable\r\n            />\r\n          </SimpleGrid>\r\n\r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeNewMessage}>\r\n              Cancel\r\n            </Button>\r\n            <Button leftSection={<IconSend size={16} />} onClick={() => {\r\n              notifications.show({\r\n                title: 'Message Sent',\r\n                message: 'Your message has been sent successfully',\r\n                color: 'green',\r\n              });\r\n              closeNewMessage();\r\n            }}>\r\n              Send Message\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CommunicationsManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\components\\DashboardHeader.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\emergency\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Progress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RingProgress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MultiSelect' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Center' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 32,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 45,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 46,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 49,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 49,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlertCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDotsVertical' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 54,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHeartbeat' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 56,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 56,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileText' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 58,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 58,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPrinter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 60,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShare' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 61,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconExclamationMark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 63,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 63,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUsers' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalculator' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRefresh' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 71,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBarcode' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTemperature' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 73,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShieldCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 74,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 74,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCircleCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 75,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReportMedical' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 81,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 81,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStethoscope' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 82,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedicalCross' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPackage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 84,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTruck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 86,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 86,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReceipt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 87,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNotes' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 88,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 88,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 89,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTag' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 90,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 90,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlarm' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 91,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 91,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconInfoCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 92,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFlask' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 96,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 96,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDroplet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 97,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNurse' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 98,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 98,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBandage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 99,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 99,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPill' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 100,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 100,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'EmergencyCase' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 105,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Triage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 106,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 106,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'VitalSigns' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 111,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 111,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CriticalCareEquipment' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 112,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 112,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'EmergencyProtocol' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 114,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 114,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'EmergencyStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 115,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'EmergencyFilters' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 116,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedBed' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 129,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 129,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'bedDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 134,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 134,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeBedDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 134,
        "column": 57,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 134,
        "endColumn": 71
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'triageOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 135,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 135,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeTriage' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 135,
        "column": 51,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 135,
        "endColumn": 62
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'protocolOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 136,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 136,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeProtocol' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 136,
        "column": 55,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 136,
        "endColumn": 68
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'filteredCases' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 139,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 139,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'filteredBeds' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 155,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 155,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getVitalStatus' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 235,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 235,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getVitalColor' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 241,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 241,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 64,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Stack,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Alert,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Timeline,\r\n  RingProgress,\r\n  List,\r\n  MultiSelect,\r\n  Center,\r\n  Divider,\r\n  Stepper\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleLineChart } from '../../../components/MantineChart';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconCalendar,\r\n  IconUrgent,\r\n  IconChartBar,\r\n  IconPhone,\r\n  IconMail,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconAlertTriangle,\r\n  IconHeartbeat,\r\n  IconClipboardList,\r\n  IconFileText,\r\n  IconDownload,\r\n  IconPrinter,\r\n  IconShare,\r\n  IconActivity,\r\n  IconExclamationMark,\r\n  IconClockHour4,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconUsers,\r\n  IconCalculator,\r\n  IconSettings,\r\n  IconRefresh,\r\n  IconFilter,\r\n  IconBarcode,\r\n  IconTemperature,\r\n  IconShieldCheck,\r\n  IconCircleCheck,\r\n  IconClipboard,\r\n  IconReportMedical,\r\n  IconLungs,\r\n  IconHeart,\r\n  IconBrain,\r\n  IconBone,\r\n  IconStethoscope,\r\n  IconMedicalCross,\r\n  IconPackage,\r\n  IconTruck,\r\n  IconCash,\r\n  IconReceipt,\r\n  IconNotes,\r\n  IconClock,\r\n  IconTag,\r\n  IconAlarm,\r\n  IconInfoCircle,\r\n  IconBed,\r\n  IconAmbulance,\r\n  IconBell,\r\n  IconFlask,\r\n  IconDroplet,\r\n  IconNurse,\r\n  IconBandage,\r\n  IconPill,\r\n} from '@tabler/icons-react';\r\n\r\n// Import types and mock data\r\nimport {\r\n  EmergencyCase,\r\n  Triage,\r\n  TriageLevel,\r\n  CaseStatus,\r\n  ICUBed,\r\n  BedStatus,\r\n  VitalSigns,\r\n  CriticalCareEquipment,\r\n  EquipmentStatus,\r\n  EmergencyProtocol,\r\n  EmergencyStats,\r\n  EmergencyFilters\r\n} from '../../../types/emergency';\r\n\r\n// Mock data imports removed - using API data only\r\n\r\nconst EmergencyManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('dashboard');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedTriage, setSelectedTriage] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedBedStatus, setSelectedBedStatus] = useState<string>('');\r\n  const [selectedCase, setSelectedCase] = useState<any | null>(null);\r\n  const [selectedBed, setSelectedBed] = useState<ICUBed | null>(null);\r\n\r\n  // Modal states\r\n  const [caseDetailOpened, { open: openCaseDetail, close: closeCaseDetail }] = useDisclosure(false);\r\n  const [addCaseOpened, { open: openAddCase, close: closeAddCase }] = useDisclosure(false);\r\n  const [bedDetailOpened, { open: openBedDetail, close: closeBedDetail }] = useDisclosure(false);\r\n  const [triageOpened, { open: openTriage, close: closeTriage }] = useDisclosure(false);\r\n  const [protocolOpened, { open: openProtocol, close: closeProtocol }] = useDisclosure(false);\r\n\r\n  // Filter emergency cases\r\n  const filteredCases = useMemo(() => {\r\n    const cases: any[] = []; // TODO: Fetch from API\r\n    return cases.filter((emergencyCase) => {\r\n      const matchesSearch = \r\n        emergencyCase.patient.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        emergencyCase.patient.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        emergencyCase.caseNumber.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesTriage = !selectedTriage || emergencyCase.triageLevel === selectedTriage;\r\n      const matchesStatus = !selectedStatus || emergencyCase.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesTriage && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedTriage, selectedStatus]);\r\n\r\n  // Filter ICU beds\r\n  const filteredBeds = useMemo(() => {\r\n    const beds: any[] = []; // TODO: Fetch from API\r\n    return beds.filter((bed) => {\r\n      const matchesSearch = \r\n        bed.bedNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        (bed.patientName && \r\n         bed.patientName.toLowerCase().includes(searchQuery.toLowerCase()));\r\n      \r\n      const matchesStatus = !selectedBedStatus || bed.status === selectedBedStatus;\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedBedStatus]);\r\n\r\n  // Helper functions\r\n  const getTriageColor = (level: number | TriageLevel) => {\r\n    switch (level) {\r\n      case 1:\r\n      case 'immediate': return 'red';    // Resuscitation/Immediate\r\n      case 2:\r\n      case 'urgent': return 'orange'; // Emergency/Urgent\r\n      case 3:\r\n      case 'less_urgent': return 'yellow'; // Urgent/Less Urgent\r\n      case 4:\r\n      case 'non_urgent': return 'green';  // Less Urgent/Non-urgent\r\n      case 5: return 'blue';   // Non-urgent\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: CaseStatus | BedStatus | EquipmentStatus) => {\r\n    switch (status) {\r\n      case 'waiting':\r\n      case 'available':\r\n      case 'operational':\r\n      case 'available': return 'green';\r\n      case 'in_progress':\r\n      case 'occupied':\r\n      case 'maintenance': return 'orange';\r\n      case 'completed':\r\n      case 'discharged': return 'blue';\r\n      case 'cancelled':\r\n      case 'out_of_service': return 'red';\r\n      case 'transferred': return 'purple';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getTriageLabel = (level: number | TriageLevel) => {\r\n    switch (level) {\r\n      case 1: return 'Resuscitation';\r\n      case 2: return 'Emergency';\r\n      case 3: return 'Urgent';\r\n      case 4: return 'Less Urgent';\r\n      case 5: return 'Non-urgent';\r\n      case 'immediate': return 'Immediate';\r\n      case 'urgent': return 'Urgent';\r\n      case 'less_urgent': return 'Less Urgent';\r\n      case 'non_urgent': return 'Non-urgent';\r\n      default: return 'Unknown';\r\n    }\r\n  };\r\n\r\n  const handleViewCase = (emergencyCase: any) => {\r\n    setSelectedCase(emergencyCase);\r\n    openCaseDetail();\r\n  };\r\n\r\n  const handleViewBed = (bed: ICUBed) => {\r\n    setSelectedBed(bed);\r\n    openBedDetail();\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchQuery('');\r\n    setSelectedTriage('');\r\n    setSelectedStatus('');\r\n    setSelectedBedStatus('');\r\n  };\r\n\r\n  const getVitalStatus = (value: number, normal: { min: number; max: number }) => {\r\n    if (value < normal.min || value > normal.max) return 'critical';\r\n    if (value < normal.min * 1.1 || value > normal.max * 0.9) return 'warning';\r\n    return 'normal';\r\n  };\r\n\r\n  const getVitalColor = (status: string) => {\r\n    switch (status) {\r\n      case 'critical': return 'red';\r\n      case 'warning': return 'orange';\r\n      case 'normal': return 'green';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  // Statistics cards\r\n  const statsCards = [\r\n    {\r\n      title: 'Active Cases',\r\n      value: 0,\r\n      icon: IconUrgent,\r\n      color: 'red',\r\n      trend: '+0'\r\n    },\r\n    {\r\n      title: 'ICU Beds',\r\n      value: `0/0`,\r\n      icon: IconBed,\r\n      color: 'blue',\r\n      trend: '0% occupied'\r\n    },\r\n    {\r\n      title: 'Average Wait Time',\r\n      value: `0min`,\r\n      icon: IconClockHour4,\r\n      color: 'orange',\r\n      trend: '0min'\r\n    },\r\n    {\r\n      title: 'Code Blue Today',\r\n      value: 0,\r\n      icon: IconAlertTriangle,\r\n      color: 'purple',\r\n      trend: '+0'\r\n    }\r\n  ];\r\n\r\n  // Chart data\r\n  const triageDistribution = [];\r\n\r\n  const hourlyAdmissions = [];\r\n  const bedOccupancy = [];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Emergency Management & Disaster Response</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage emergency incidents, resources, evacuation procedures, and disaster recovery\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={openAddCase}\r\n            color=\"red\"\r\n          >\r\n            Emergency Case\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconBell size={16} />}\r\n            color=\"red\"\r\n            onClick={openProtocol}\r\n          >\r\n            Code Blue\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Critical Alerts */}\r\n      <Alert \r\n        variant=\"light\" \r\n        color=\"red\" \r\n        title=\"Critical Alerts\" \r\n        icon={<IconAlertTriangle size={16} />}\r\n        mb=\"lg\"\r\n      >\r\n        <Stack gap=\"xs\">\r\n          <Text size=\"sm\">• 3 patients waiting in resuscitation bay</Text>\r\n          <Text size=\"sm\">• ICU Bed #7 - Equipment malfunction</Text>\r\n          <Text size=\"sm\">• Code Blue - Room 204 (5 minutes ago)</Text>\r\n        </Stack>\r\n      </Alert>\r\n\r\n      {/* Statistics Cards */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {statsCards.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n              <Group justify=\"space-between\" mt=\"sm\">\r\n                <Badge \r\n                  color={stat.trend.includes('+') || stat.trend.includes('-') ? \r\n                    (stat.trend.startsWith('+') ? 'red' : 'green') : 'blue'} \r\n                  variant=\"light\"\r\n                  size=\"sm\"\r\n                >\r\n                  {stat.trend}\r\n                </Badge>\r\n                <Text size=\"xs\" c=\"dimmed\">real-time</Text>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"dashboard\" leftSection={<IconChartBar size={16} />}>\r\n            Dashboard\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"triage\" leftSection={<IconUrgent size={16} />}>\r\n            Triage Queue\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"cases\" leftSection={<IconAlertTriangle size={16} />}>\r\n            Emergency Cases\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"icu\" leftSection={<IconBed size={16} />}>\r\n            ICU Management\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"equipment\" leftSection={<IconSettings size={16} />}>\r\n            Equipment\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"protocols\" leftSection={<IconClipboardList size={16} />}>\r\n            Protocols\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Dashboard Tab */}\r\n        <Tabs.Panel value=\"dashboard\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Emergency Department Overview</Title>\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {/* Triage Distribution */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Triage Distribution</Title>\r\n                <MantineDonutChart\r\n                  data={triageDistribution}\r\n                  size={160}\r\n                  thickness={30}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Hourly Admissions */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Hourly Admissions</Title>\r\n                <SimpleAreaChart\r\n                  data={hourlyAdmissions}\r\n                  dataKey=\"hour\"\r\n                  series={[{ name: 'admissions', color: 'red.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* ICU Bed Occupancy */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder style={{ gridColumn: '1 / -1' }}>\r\n                <Title order={4} mb=\"md\">ICU Bed Occupancy Trend</Title>\r\n                <SimpleLineChart\r\n                  data={bedOccupancy}\r\n                  dataKey=\"date\"\r\n                  series={[\r\n                    { name: 'occupied', color: 'blue.6', label: 'Occupied' },\r\n                    { name: 'available', color: 'green.6', label: 'Available' }\r\n                  ]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Quick Stats */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Quick Statistics</Title>\r\n                <Stack gap=\"md\">\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Mortality Rate</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"red\">\r\n                      2.1%\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Left Without Being Seen</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"orange\">\r\n                      3.5%\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Door-to-Doc Time</Text>\r\n                    <Text size=\"sm\" fw={600}>\r\n                      15min\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Return Rate (72h)</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"yellow\">\r\n                      4.2%\r\n                    </Text>\r\n                  </Group>\r\n                </Stack>\r\n              </Card>\r\n              \r\n              {/* Emergency Protocols */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Active Protocols</Title>\r\n                <Stack gap=\"sm\">\r\n                  <Button \r\n                    fullWidth \r\n                    leftSection={<IconAlertTriangle size={16} />}\r\n                    variant=\"light\" \r\n                    color=\"red\"\r\n                  >\r\n                    Code Blue Protocol\r\n                  </Button>\r\n                  <Button \r\n                    fullWidth \r\n                    leftSection={<IconHeart size={16} />} \r\n                    variant=\"light\" \r\n                    color=\"purple\"\r\n                  >\r\n                    Cardiac Arrest\r\n                  </Button>\r\n                  <Button \r\n                    fullWidth \r\n                    leftSection={<IconBrain size={16} />} \r\n                    variant=\"light\" \r\n                    color=\"orange\"\r\n                  >\r\n                    Stroke Protocol\r\n                  </Button>\r\n                  <Button \r\n                    fullWidth \r\n                    leftSection={<IconLungs size={16} />} \r\n                    variant=\"light\" \r\n                    color=\"blue\"\r\n                  >\r\n                    Respiratory Distress\r\n                  </Button>\r\n                </Stack>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Triage Queue Tab */}\r\n        <Tabs.Panel value=\"triage\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Triage Queue</Title>\r\n              <Button leftSection={<IconPlus size={16} />} onClick={openTriage}>\r\n                Add to Triage\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Triage Queue Display */}\r\n            <Stack gap=\"md\">\r\n              {[].map((patient, index) => (\r\n                <Card key={patient.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\">\r\n                    <Group>\r\n                      <ThemeIcon \r\n                        color={getTriageColor(patient.triageLevel)} \r\n                        size=\"xl\" \r\n                        radius=\"md\"\r\n                      >\r\n                        <Text fw={700} c=\"white\">\r\n                          {patient.triageLevel}\r\n                        </Text>\r\n                      </ThemeIcon>\r\n                      <div>\r\n                        <Text fw={600} size=\"lg\">\r\n                          {patient.patientName}\r\n                        </Text>\r\n                        <Text size=\"sm\" c=\"dimmed\">\r\n                          {patient.complaint}\r\n                        </Text>\r\n                      </div>\r\n                    </Group>\r\n                    \r\n                    <Group>\r\n                      <div style={{ textAlign: 'right' }}>\r\n                        <Text size=\"sm\" fw={500}>\r\n                          Wait Time: {patient.waitTime}min\r\n                        </Text>\r\n                        <Text size=\"xs\" c=\"dimmed\">\r\n                          Priority: {getTriageLabel(parseInt(patient.triageLevel))}\r\n                        </Text>\r\n                      </div>\r\n                      <Badge \r\n                        color={getTriageColor(patient.triageLevel)} \r\n                        variant=\"light\" \r\n                        size=\"lg\"\r\n                      >\r\n                        #{index + 1}\r\n                      </Badge>\r\n                    </Group>\r\n                  </Group>\r\n                  \r\n                  <Group justify=\"space-between\" mt=\"md\">\r\n                    <Text size=\"sm\" c=\"dimmed\">\r\n                      Assigned: {patient.assignedNurse}\r\n                    </Text>\r\n                    <Group>\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconCheck size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </Stack>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Emergency Cases Tab */}\r\n        <Tabs.Panel value=\"cases\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Emergency Cases</Title>\r\n              <Button leftSection={<IconPlus size={16} />} onClick={openAddCase} color=\"red\">\r\n                New Emergency Case\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Case Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search cases...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Triage Level\"\r\n                data={[\r\n                  { value: '1', label: 'Level 1 - Resuscitation' },\r\n                  { value: '2', label: 'Level 2 - Emergency' },\r\n                  { value: '3', label: 'Level 3 - Urgent' },\r\n                  { value: '4', label: 'Level 4 - Less Urgent' },\r\n                  { value: '5', label: 'Level 5 - Non-urgent' }\r\n                ]}\r\n                value={selectedTriage}\r\n                onChange={setSelectedTriage}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'waiting', label: 'Waiting' },\r\n                  { value: 'in_progress', label: 'In Progress' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'transferred', label: 'Transferred' },\r\n                  { value: 'discharged', label: 'Discharged' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Button variant=\"light\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Cases Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Case #</Table.Th>\r\n                    <Table.Th>Patient</Table.Th>\r\n                    <Table.Th>Triage</Table.Th>\r\n                    <Table.Th>Chief Complaint</Table.Th>\r\n                    <Table.Th>Arrival Time</Table.Th>\r\n                    <Table.Th>Assigned Staff</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {[].length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={9}>\r\n                        <EmptyState\r\n                          icon={<IconAmbulance size={48} />}\r\n                          title=\"No emergency cases\"\r\n                          description=\"Register emergency cases as they arrive\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    [].map((emergencyCase) => (\r\n                    <Table.Tr key={emergencyCase.id}>\r\n                      <Table.Td>\r\n                        <Text fw={500}>{emergencyCase.caseNumber}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group>\r\n                          <Avatar color=\"red\" radius=\"xl\" size=\"sm\">\r\n                            {emergencyCase.patient.firstName[0]}{emergencyCase.patient.lastName[0]}\r\n                          </Avatar>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>\r\n                              {emergencyCase.patient.firstName} {emergencyCase.patient.lastName}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              DOB: {emergencyCase.patient.dateOfBirth}\r\n                            </Text>\r\n                          </div>\r\n                        </Group>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group>\r\n                          <ThemeIcon \r\n                            color={getTriageColor(emergencyCase.triageLevel)} \r\n                            size=\"md\" \r\n                            radius=\"md\"\r\n                          >\r\n                            <Text fw={700} c=\"white\" size=\"xs\">\r\n                              {emergencyCase.triageLevel}\r\n                            </Text>\r\n                          </ThemeIcon>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>\r\n                              {getTriageLabel(emergencyCase.triageLevel)}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              {emergencyCase.assignedTo}\r\n                            </Text>\r\n                          </div>\r\n                        </Group>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\" lineClamp={2} style={{ maxWidth: 200 }}>\r\n                          {emergencyCase.chiefComplaint}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">\r\n                          {new Date(emergencyCase.arrivalTime).toLocaleTimeString()}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>\r\n                            {emergencyCase.assignedTo || 'Not Assigned'}\r\n                          </Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">\r\n                            Priority: {emergencyCase.priority}\r\n                          </Text>\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getStatusColor(emergencyCase.status)} variant=\"light\">\r\n                          {emergencyCase.status.replace('_', ' ')}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon\r\n                            variant=\"subtle\"\r\n                            color=\"blue\"\r\n                            onClick={() => handleViewCase(emergencyCase)}\r\n                          >\r\n                            <IconEye size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"green\">\r\n                            <IconEdit size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                            <IconActivity size={16} />\r\n                          </ActionIcon>\r\n                        </Group>\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  )))}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* ICU Management Tab */}\r\n        <Tabs.Panel value=\"icu\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>ICU Bed Management</Title>\r\n              <Group>\r\n                <Button leftSection={<IconBed size={16} />} variant=\"light\">\r\n                  Bed Assignment\r\n                </Button>\r\n                <Button leftSection={<IconActivity size={16} />}>\r\n                  Monitor Vitals\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Bed Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search beds...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Bed Status\"\r\n                data={[\r\n                  { value: 'available', label: 'Available' },\r\n                  { value: 'occupied', label: 'Occupied' },\r\n                  { value: 'cleaned', label: 'Cleaned' },\r\n                  { value: 'maintenance', label: 'Maintenance' }\r\n                ]}\r\n                value={selectedBedStatus}\r\n                onChange={setSelectedBedStatus}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* ICU Beds Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map((bed) => (\r\n                <Card key={bed.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">Bed {bed.bedNumber}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{bed.ward} - {bed.roomNumber}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(bed.status)} variant=\"light\">\r\n                      {bed.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  {bed.patient && (\r\n                    <>\r\n                      <Group mb=\"md\">\r\n                        <Avatar color=\"blue\" radius=\"xl\">\r\n                          {bed.patient.firstName[0]}{bed.patient.lastName[0]}\r\n                        </Avatar>\r\n                        <div>\r\n                          <Text fw={500}>\r\n                            {bed.patient.firstName} {bed.patient.lastName}\r\n                          </Text>\r\n                          <Text size=\"sm\" c=\"dimmed\">\r\n                            Age: {bed.patient.age} | ID: {bed.patient.patientId}\r\n                          </Text>\r\n                        </div>\r\n                      </Group>\r\n\r\n                      <Text size=\"sm\" fw={500} mb=\"sm\">Current Vitals</Text>\r\n                      <Stack gap=\"xs\" mb=\"md\">\r\n                        <Group justify=\"space-between\" p=\"xs\" \r\n                               style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                          <Group gap=\"xs\">\r\n                            <IconHeart size={16} color=\"red\" />\r\n                            <Text size=\"sm\">Heart Rate</Text>\r\n                          </Group>\r\n                          <Text size=\"sm\" fw={600}>{bed.currentVitals?.heartRate} bpm</Text>\r\n                        </Group>\r\n                        <Group justify=\"space-between\" p=\"xs\" \r\n                               style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                          <Group gap=\"xs\">\r\n                            <IconActivity size={16} color=\"blue\" />\r\n                            <Text size=\"sm\">Blood Pressure</Text>\r\n                          </Group>\r\n                          <Text size=\"sm\" fw={600}>\r\n                            {bed.currentVitals?.bloodPressure.systolic}/{bed.currentVitals?.bloodPressure.diastolic}\r\n                          </Text>\r\n                        </Group>\r\n                        <Group justify=\"space-between\" p=\"xs\" \r\n                               style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                          <Group gap=\"xs\">\r\n                            <IconLungs size={16} color=\"green\" />\r\n                            <Text size=\"sm\">Oxygen</Text>\r\n                          </Group>\r\n                          <Text size=\"sm\" fw={600}>{bed.currentVitals?.oxygenSaturation}%</Text>\r\n                        </Group>\r\n                      </Stack>\r\n                    </>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Last Updated: {bed.lastUpdated ? new Date(bed.lastUpdated).toLocaleTimeString() : 'N/A'}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewBed(bed)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconActivity size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconSettings size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Equipment Tab */}\r\n        <Tabs.Panel value=\"equipment\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Critical Care Equipment</Title>\r\n              <Button leftSection={<IconSettings size={16} />}>\r\n                Equipment Check\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Equipment Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map((equipment) => (\r\n                <Card key={equipment.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{equipment.equipmentName}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{equipment.location}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(equipment.status)} variant=\"light\">\r\n                      {equipment.status.replace('_', ' ')}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Model</Text>\r\n                      <Text size=\"sm\" fw={500}>{equipment.model}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Serial</Text>\r\n                      <Text size=\"sm\" fw={500}>{equipment.serialNumber}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Last Maintenance</Text>\r\n                      <Text size=\"sm\">\r\n                        {equipment.lastMaintenanceDate}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Next Due</Text>\r\n                      <Text \r\n                        size=\"sm\" \r\n                        c=\"dimmed\"\r\n                      >\r\n                        {equipment.nextMaintenanceDate}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {equipment.currentReadings && (\r\n                    <Alert variant=\"light\" color=\"blue\" mb=\"md\">\r\n                      <Text size=\"sm\">\r\n                        <strong>Current Reading:</strong> {equipment.currentReadings}\r\n                      </Text>\r\n                    </Alert>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Technician: {equipment.assignedTechnician}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconSettings size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconClipboard size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Protocols Tab */}\r\n        <Tabs.Panel value=\"protocols\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Emergency Protocols</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Add Protocol\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Emergency Protocols */}\r\n            <Stack gap=\"lg\">\r\n              {[].map((protocol) => (\r\n                <Card key={protocol.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{protocol.name}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{protocol.category}</Text>\r\n                    </div>\r\n                    <Group>\r\n                      <Badge color=\"blue\" variant=\"light\">\r\n                        Version {protocol.version}\r\n                      </Badge>\r\n                      <Badge color=\"green\" variant=\"light\">\r\n                        Active\r\n                      </Badge>\r\n                    </Group>\r\n                  </Group>\r\n\r\n                  <Text size=\"sm\" mb=\"md\">{protocol.description}</Text>\r\n\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500} mb=\"sm\">Protocol Steps</Text>\r\n                    <Stepper active={-1} breakpoint=\"sm\">\r\n                      {protocol.steps.map((step, index) => (\r\n                        <Stepper.Step \r\n                          key={index} \r\n                          label={`Step ${index + 1}`} \r\n                          description={step}\r\n                        />\r\n                      ))}\r\n                    </Stepper>\r\n                  </div>\r\n\r\n                  <Group justify=\"space-between\" mt=\"md\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Last Updated: {protocol.lastUpdated}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </Stack>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Case Detail Modal */}\r\n      <Modal\r\n        opened={caseDetailOpened}\r\n        onClose={closeCaseDetail}\r\n        title=\"Emergency Case Details\"\r\n        size=\"xl\"\r\n      >\r\n        {selectedCase && (\r\n          <ScrollArea h={600}>\r\n            <Stack gap=\"md\">\r\n              <Group>\r\n                <Avatar color=\"red\" size=\"xl\" radius=\"xl\">\r\n                  {selectedCase.patient.firstName[0]}{selectedCase.patient.lastName[0]}\r\n                </Avatar>\r\n                <div>\r\n                  <Title order={3}>\r\n                    {selectedCase.patient.firstName} {selectedCase.patient.lastName}\r\n                  </Title>\r\n                  <Text c=\"dimmed\">Case: {selectedCase.caseNumber}</Text>\r\n                  <Badge color={getStatusColor(selectedCase.status)} variant=\"light\" mt=\"xs\">\r\n                    {selectedCase.status.replace('_', ' ')}\r\n                  </Badge>\r\n                </div>\r\n              </Group>\r\n\r\n              <Divider />\r\n\r\n              <SimpleGrid cols={2}>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Triage Level</Text>\r\n                  <Group>\r\n                      <ThemeIcon \r\n                        color={getTriageColor(selectedCase.triageLevel)} \r\n                        size=\"sm\" \r\n                        radius=\"md\"\r\n                      >\r\n                        <Text fw={700} c=\"white\" size=\"xs\">\r\n                          {selectedCase.triageLevel}\r\n                        </Text>\r\n                      </ThemeIcon>\r\n                      <Text size=\"sm\">{getTriageLabel(selectedCase.triageLevel)}</Text>\r\n                  </Group>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Arrival Time</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {new Date(selectedCase.arrivalTime).toLocaleString()}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Chief Complaint</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedCase.chiefComplaint}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Assigned To</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedCase.assignedTo || 'Not Assigned'}</Text>\r\n                </div>\r\n              </SimpleGrid>\r\n\r\n              {/* Vitals not available in simplified mock; display basic info instead */}\r\n              <Divider />\r\n              <div>\r\n                <Text size=\"sm\" fw={500} mb=\"sm\">Summary</Text>\r\n                <SimpleGrid cols={2}>\r\n                  <Group justify=\"space-between\" p=\"sm\" style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\">Bed</Text>\r\n                    <Text size=\"sm\" fw={600}>{selectedCase.bedNumber || '—'}</Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\">Priority</Text>\r\n                    <Text size=\"sm\" fw={600}>{selectedCase.priority ?? '—'}</Text>\r\n                  </Group>\r\n                </SimpleGrid>\r\n              </div>\r\n\r\n              <Group justify=\"flex-end\">\r\n                <Button variant=\"light\" onClick={closeCaseDetail}>\r\n                  Close\r\n                </Button>\r\n                <Button>\r\n                  Update Case\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </ScrollArea>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Add Case Modal */}\r\n      <Modal\r\n        opened={addCaseOpened}\r\n        onClose={closeAddCase}\r\n        title=\"New Emergency Case\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Patient\"\r\n              placeholder=\"Select patient\"\r\n              data={[]} // TODO: Fetch from patients API\r\n              searchable\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Triage Level\"\r\n              placeholder=\"Select triage level\"\r\n              data={[\r\n                { value: '1', label: 'Level 1 - Resuscitation' },\r\n                { value: '2', label: 'Level 2 - Emergency' },\r\n                { value: '3', label: 'Level 3 - Urgent' },\r\n                { value: '4', label: 'Level 4 - Less Urgent' },\r\n                { value: '5', label: 'Level 5 - Non-urgent' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Chief Complaint\"\r\n            placeholder=\"Enter chief complaint\"\r\n            rows={3}\r\n            required\r\n          />\r\n          \r\n          <Select\r\n            label=\"Mode of Arrival\"\r\n            placeholder=\"Select mode of arrival\"\r\n            data={[\r\n              { value: 'ambulance', label: 'Ambulance' },\r\n              { value: 'walk_in', label: 'Walk-in' },\r\n              { value: 'police', label: 'Police' },\r\n              { value: 'helicopter', label: 'Helicopter' }\r\n            ]}\r\n            required\r\n          />\r\n          \r\n          <Text size=\"sm\" fw={500} mt=\"md\">Initial Vital Signs</Text>\r\n          <SimpleGrid cols={3}>\r\n            <NumberInput\r\n              label=\"Heart Rate (bpm)\"\r\n              placeholder=\"72\"\r\n            />\r\n            <TextInput\r\n              label=\"Blood Pressure\"\r\n              placeholder=\"120/80\"\r\n            />\r\n            <NumberInput\r\n              label=\"Temperature (°F)\"\r\n              placeholder=\"98.6\"\r\n            />\r\n            <NumberInput\r\n              label=\"Oxygen Saturation (%)\"\r\n              placeholder=\"98\"\r\n            />\r\n            <NumberInput\r\n              label=\"Respiratory Rate\"\r\n              placeholder=\"16\"\r\n            />\r\n            <NumberInput\r\n              label=\"Pain Scale (0-10)\"\r\n              placeholder=\"0\"\r\n              min={0}\r\n              max={10}\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddCase}>\r\n              Cancel\r\n            </Button>\r\n            <Button color=\"red\" onClick={() => {\r\n              notifications.show({\r\n                title: 'Emergency Case Created',\r\n                message: 'New emergency case has been added to the system',\r\n                color: 'green',\r\n              });\r\n              closeAddCase();\r\n            }}>\r\n              Create Case\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EmergencyManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\emr\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Alert' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Progress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Flex' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Anchor' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 33,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DatePickerInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 35,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleLineChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 40,
        "column": 62,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUsers' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 48,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 54,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStethoscope' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 56,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 56,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrain' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShield' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 64,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedicalCross' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 69,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVaccine' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReportMedical' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 71,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHistory' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUserCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 73,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LabResult' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 84,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MedicalDocument' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MedicalHistory' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 86,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 86,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Prescription' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 87,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Allergy' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 88,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 88,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'stats' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 104,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 106,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 106,
        "endColumn": 15
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.",
        "line": 110,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 110,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAllData]",
            "fix": { "range": [2564, 2566], "text": "[fetchAllData]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'fetchRecords' and 'loading'. Either include them or remove the dependency array.",
        "line": 167,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 167,
        "endColumn": 88,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [searchQuery, selectedPatient, selectedDoctor, selectedRecordType, selectedStatus, loading, fetchRecords]",
            "fix": {
              "range": [4349, 4431],
              "text": "[searchQuery, selectedPatient, selectedDoctor, selectedRecordType, selectedStatus, loading, fetchRecords]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'editRecordOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 172,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 172,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeEditRecord' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 172,
        "column": 59,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 172,
        "endColumn": 74
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useMemo has a missing dependency: 'records'. Either include it or remove the dependency array.",
        "line": 190,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 190,
        "endColumn": 88,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [records, searchQuery, selectedPatient, selectedDoctor, selectedRecordType, selectedStatus]",
            "fix": {
              "range": [5709, 5791],
              "text": "[records, searchQuery, selectedPatient, selectedDoctor, selectedRecordType, selectedStatus]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 807,
        "column": 51,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 807,
        "endColumn": 56
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 36,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Timeline,\r\n  Alert,\r\n  Progress,\r\n  Flex,\r\n  Anchor,\r\n  NumberInput,\r\n  Textarea,\r\n  List\r\n} from '@mantine/core';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport emrService from '../../../services/emr.service';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleBarChart, SimpleLineChart } from '../../../components/MantineChart';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconCalendar,\r\n  IconUsers,\r\n  IconChartBar,\r\n  IconPhone,\r\n  IconMail,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconStethoscope,\r\n  IconActivity,\r\n  IconPill,\r\n  IconTestPipe,\r\n  IconFileText,\r\n  IconHeart,\r\n  IconBrain,\r\n  IconLungs,\r\n  IconShield,\r\n  IconAlertTriangle,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconClipboardList,\r\n  IconMedicalCross,\r\n  IconVaccine,\r\n  IconReportMedical,\r\n  IconHistory,\r\n  IconUserCheck,\r\n  IconDownload,\r\n  IconPrinter,\r\n  IconShare\r\n} from '@tabler/icons-react';\r\n\r\n// Import types and mock data\r\nimport { \r\n  MedicalRecord,\r\n  MedicalRecordType,\r\n  MedicalRecordStatus,\r\n  LabResult,\r\n  MedicalDocument,\r\n  MedicalHistory,\r\n  Prescription,\r\n  Allergy,\r\n  AllergySeverity\r\n} from '../../../types/medical';\r\n// Mock data imports removed\r\nconst EMRManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('records');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedPatient, setSelectedPatient] = useState<string>('');\r\n  const [selectedDoctor, setSelectedDoctor] = useState<string>('');\r\n  const [selectedRecordType, setSelectedRecordType] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedRecord, setSelectedRecord] = useState<MedicalRecord | null>(null);\r\n\r\n  // API data state\r\n  const [records, setRecords] = useState<MedicalRecord[]>([]);\r\n  const [stats, setStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  const fetchAllData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      await Promise.all([fetchRecords(), fetchStats()]);\r\n    } catch (err: any) {\r\n      console.error('Error loading EMR data:', err);\r\n      setError(err.response?.data?.message || 'Failed to load EMR data');\r\n      setRecords([] /* TODO: Fetch from API */);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchRecords = async () => {\r\n    try {\r\n      const filters = {\r\n        patientId: selectedPatient || undefined,\r\n        recordType: selectedRecordType || undefined\r\n      };\r\n      const response = await emrService.getRecords(filters);\r\n      // Handle different response structures\r\n      const recordsData = Array.isArray(response.data) \r\n        ? response.data \r\n        : (response.data?.records || []);\r\n      setRecords(recordsData as MedicalRecord[]);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching EMR records (using empty data):', err.response?.data?.message || err.message);\r\n      // Don't show error to user if backend is not ready, just use empty data\r\n      setRecords([]);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await emrService.getStats();\r\n      setStats(response.data);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching EMR stats (using default values):', err.response?.data?.message || err.message);\r\n      // Set default stats when backend is unavailable\r\n      setStats({\r\n        totalRecords: 0,\r\n        recordsByType: {},\r\n        recordsByStatus: {},\r\n        commonDiagnoses: [],\r\n        prescriptionTrends: [],\r\n        recentActivity: []\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      fetchRecords();\r\n    }\r\n  }, [searchQuery, selectedPatient, selectedDoctor, selectedRecordType, selectedStatus]);\r\n\r\n  // Modal states\r\n  const [recordDetailOpened, { open: openRecordDetail, close: closeRecordDetail }] = useDisclosure(false);\r\n  const [addRecordOpened, { open: openAddRecord, close: closeAddRecord }] = useDisclosure(false);\r\n  const [editRecordOpened, { open: openEditRecord, close: closeEditRecord }] = useDisclosure(false);\r\n\r\n  // Filter medical records\r\n  const filteredRecords = useMemo(() => {\r\n    return records.filter((record) => {\r\n      const matchesSearch = \r\n        record.patient.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        record.patient.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        record.recordId.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        record.chiefComplaint.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesPatient = !selectedPatient || record.patientId === selectedPatient;\r\n      const matchesDoctor = !selectedDoctor || record.doctorId === selectedDoctor;\r\n      const matchesType = !selectedRecordType || record.recordType === selectedRecordType;\r\n      const matchesStatus = !selectedStatus || record.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesPatient && matchesDoctor && matchesType && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedPatient, selectedDoctor, selectedRecordType, selectedStatus]);\r\n\r\n  // Helper functions\r\n  const formatDate = (date: string | Date) => {\r\n    const d = new Date(date);\r\n    const year = d.getFullYear();\r\n    const month = String(d.getMonth() + 1).padStart(2, '0');\r\n    const day = String(d.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  const getStatusColor = (status: MedicalRecordStatus) => {\r\n    switch (status) {\r\n      case 'draft': return 'gray';\r\n      case 'pending_review': return 'yellow';\r\n      case 'reviewed': return 'blue';\r\n      case 'approved': return 'green';\r\n      case 'amended': return 'orange';\r\n      case 'archived': return 'dark';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getTypeColor = (type: MedicalRecordType) => {\r\n    switch (type) {\r\n      case 'consultation': return 'blue';\r\n      case 'emergency': return 'red';\r\n      case 'surgery': return 'purple';\r\n      case 'follow_up': return 'green';\r\n      case 'lab_result': return 'orange';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getSeverityColor = (severity: AllergySeverity) => {\r\n    switch (severity) {\r\n      case 'mild': return 'green';\r\n      case 'moderate': return 'yellow';\r\n      case 'severe': return 'red';\r\n      case 'life_threatening': return 'dark';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const handleViewRecord = (record: MedicalRecord) => {\r\n    setSelectedRecord(record);\r\n    openRecordDetail();\r\n  };\r\n\r\n  const handleEditRecord = (record: MedicalRecord) => {\r\n    setSelectedRecord(record);\r\n    openEditRecord();\r\n  };\r\n\r\n  const handleDeleteRecord = (record: MedicalRecord) => {\r\n    notifications.show({\r\n      title: 'Record Deleted',\r\n      message: `Medical record ${record.recordId} has been deleted`,\r\n      color: 'red',\r\n    });\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchQuery('');\r\n    setSelectedPatient('');\r\n    setSelectedDoctor('');\r\n    setSelectedRecordType('');\r\n    setSelectedStatus('');\r\n  };\r\n\r\n  // Statistics cards\r\n  const statsCards = [\r\n    {\r\n      title: 'Total Records',\r\n      value: 0,\r\n      icon: IconFileText,\r\n      color: 'blue',\r\n      trend: '+0%'\r\n    },\r\n    {\r\n      title: 'Today\\'s Records',\r\n      value: 0,\r\n      icon: IconCalendar,\r\n      color: 'green',\r\n      trend: '+0%'\r\n    },\r\n    {\r\n      title: 'Pending Review',\r\n      value: 0,\r\n      icon: IconAlertCircle,\r\n      color: 'orange',\r\n      trend: '0%'\r\n    },\r\n    {\r\n      title: 'Lab Results',\r\n      value: 0,\r\n      icon: IconTestPipe,\r\n      color: 'purple',\r\n      trend: '+0%'\r\n    }\r\n  ];\r\n\r\n  // Chart data\r\n  const recordsByTypeData = 0\r\n    ? Object.entries(0 /* TODO: Fetch from API */)\r\n        .filter(([_, count]) => (typeof count === 'number' && count > 0))\r\n        .map(([type, count]) => ({\r\n          name: type.replace('_', ' ').toUpperCase(),\r\n          value: typeof count === 'number' ? count : 0,\r\n          color: getTypeColor(type as MedicalRecordType)\r\n        }))\r\n    : [];\r\n\r\n  const recordsByStatusData = 0\r\n    ? Object.entries(0 /* TODO: Fetch from API */).map(\r\n        ([status, count]) => ({ status: status.replace('_', ' '), count })\r\n      )\r\n    : [];\r\n\r\n  const commonDiagnosesData = [];\r\n  const prescriptionTrendsData = [];\r\n  const recentActivityData = [];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Electronic Medical Records</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage patient medical records, lab results, and clinical documentation\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={openAddRecord}\r\n          >\r\n            New Record\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Statistics Cards */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {statsCards.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n              <Group justify=\"space-between\" mt=\"sm\">\r\n                <Badge \r\n                  color={stat.trend.startsWith('+') ? 'green' : 'red'} \r\n                  variant=\"light\"\r\n                  size=\"sm\"\r\n                >\r\n                  {stat.trend}\r\n                </Badge>\r\n                <Text size=\"xs\" c=\"dimmed\">vs last month</Text>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"records\" leftSection={<IconFileText size={16} />}>\r\n            Medical Records\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"lab_results\" leftSection={<IconTestPipe size={16} />}>\r\n            Lab Results\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"prescriptions\" leftSection={<IconPill size={16} />}>\r\n            Prescriptions\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"documents\" leftSection={<IconClipboardList size={16} />}>\r\n            Documents\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconChartBar size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Medical Records Tab */}\r\n        <Tabs.Panel value=\"records\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search records...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Patient\"\r\n                data={[].map /* TODO: Fetch from API */(patient => ({ \r\n                  value: patient.id, \r\n                  label: `${patient.firstName} ${patient.lastName}` \r\n                }))}\r\n                value={selectedPatient}\r\n                onChange={setSelectedPatient}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Doctor\"\r\n                data={[].map /* TODO: Fetch from API */(doctor => ({ \r\n                  value: doctor.staffId, \r\n                  label: `${doctor.firstName} ${doctor.lastName}` \r\n                }))}\r\n                value={selectedDoctor}\r\n                onChange={setSelectedDoctor}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Record Type\"\r\n                data={[\r\n                  { value: 'consultation', label: 'Consultation' },\r\n                  { value: 'emergency', label: 'Emergency' },\r\n                  { value: 'follow_up', label: 'Follow-up' },\r\n                  { value: 'surgery', label: 'Surgery' },\r\n                  { value: 'lab_result', label: 'Lab Result' }\r\n                ]}\r\n                value={selectedRecordType}\r\n                onChange={setSelectedRecordType}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'draft', label: 'Draft' },\r\n                  { value: 'pending_review', label: 'Pending Review' },\r\n                  { value: 'approved', label: 'Approved' },\r\n                  { value: 'archived', label: 'Archived' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Button variant=\"light\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Records Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Patient</Table.Th>\r\n                    <Table.Th>Record ID</Table.Th>\r\n                    <Table.Th>Type</Table.Th>\r\n                    <Table.Th>Doctor</Table.Th>\r\n                    <Table.Th>Date</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Chief Complaint</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredRecords.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={7}>\r\n                        <EmptyState\r\n                          icon={<IconFileText size={48} />}\r\n                          title=\"No medical records\"\r\n                          description=\"Create electronic medical records\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredRecords.map((record) => (\r\n                    <Table.Tr key={record.id}>\r\n                      <Table.Td>\r\n                        <Group>\r\n                          <Avatar color=\"blue\" radius=\"xl\">\r\n                            {record.patient.firstName[0]}{record.patient.lastName[0]}\r\n                          </Avatar>\r\n                          <div>\r\n                            <Text fw={500}>\r\n                              {record.patient.firstName} {record.patient.lastName}\r\n                            </Text>\r\n                            <Text size=\"sm\" c=\"dimmed\">\r\n                              ID: {record.patient.patientId}\r\n                            </Text>\r\n                          </div>\r\n                        </Group>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text fw={500}>{record.recordId}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getTypeColor(record.recordType)} variant=\"light\">\r\n                          {record.recordType.replace('_', ' ')}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>\r\n                            {record.doctor.firstName} {record.doctor.lastName}\r\n                          </Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">\r\n                            {record.doctor.department?.name}\r\n                          </Text>\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">\r\n                          {formatDate(record.recordDate)}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getStatusColor(record.status)} variant=\"light\">\r\n                          {record.status.replace('_', ' ')}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\" truncate=\"end\" style={{ maxWidth: 200 }}>\r\n                          {record.chiefComplaint}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon\r\n                            variant=\"subtle\"\r\n                            color=\"blue\"\r\n                            onClick={() => handleViewRecord(record)}\r\n                          >\r\n                            <IconEye size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon\r\n                            variant=\"subtle\"\r\n                            color=\"green\"\r\n                            onClick={() => handleEditRecord(record)}\r\n                          >\r\n                            <IconEdit size={16} />\r\n                          </ActionIcon>\r\n                          <Menu>\r\n                            <Menu.Target>\r\n                              <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                                <IconDotsVertical size={16} />\r\n                              </ActionIcon>\r\n                            </Menu.Target>\r\n                            <Menu.Dropdown>\r\n                              <Menu.Item leftSection={<IconDownload size={14} />}>\r\n                                Download\r\n                              </Menu.Item>\r\n                              <Menu.Item leftSection={<IconPrinter size={14} />}>\r\n                                Print\r\n                              </Menu.Item>\r\n                              <Menu.Item leftSection={<IconShare size={14} />}>\r\n                                Share\r\n                              </Menu.Item>\r\n                              <Menu.Divider />\r\n                              <Menu.Item \r\n                                leftSection={<IconTrash size={14} />}\r\n                                color=\"red\"\r\n                                onClick={() => handleDeleteRecord(record)}\r\n                              >\r\n                                Delete\r\n                              </Menu.Item>\r\n                            </Menu.Dropdown>\r\n                          </Menu>\r\n                        </Group>\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  )))\r\n                  }\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Lab Results Tab */}\r\n        <Tabs.Panel value=\"lab_results\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Laboratory Results</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Order Lab Test\r\n              </Button>\r\n            </Group>\r\n\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((result) => (\r\n                <Card key={result.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{result.testName}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {result.patient.firstName} {result.patient.lastName}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge \r\n                      color={result.status === 'verified' ? 'green' : 'orange'} \r\n                      variant=\"light\"\r\n                    >\r\n                      {result.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"xs\" mb=\"md\">\r\n                    {result.results.map((param) => (\r\n                      <Group key={param.id} justify=\"space-between\" p=\"xs\" \r\n                             style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                        <Text size=\"sm\" fw={500}>{param.parameterName}</Text>\r\n                        <Group gap=\"xs\">\r\n                          <Text size=\"sm\">{param.value} {param.unit}</Text>\r\n                          {param.abnormalFlag && (\r\n                            <Badge \r\n                              color={param.abnormalFlag === 'high' ? 'red' : 'blue'} \r\n                              variant=\"light\" \r\n                              size=\"xs\"\r\n                            >\r\n                              {param.abnormalFlag}\r\n                            </Badge>\r\n                          )}\r\n                        </Group>\r\n                      </Group>\r\n                    ))}\r\n                  </Stack>\r\n\r\n                  <Text size=\"sm\" c=\"dimmed\" mb=\"md\">\r\n                    <strong>Interpretation:</strong> {result.interpretation}\r\n                  </Text>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Reported: {formatDate(result.reportDate)}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\" size=\"sm\">\r\n                        <IconEye size={14} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\" size=\"sm\">\r\n                        <IconDownload size={14} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Prescriptions Tab */}\r\n        <Tabs.Panel value=\"prescriptions\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Prescriptions</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                New Prescription\r\n              </Button>\r\n            </Group>\r\n\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((prescription) => (\r\n                <Card key={prescription.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{prescription.prescriptionNumber}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {formatDate(prescription.prescriptionDate)}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge \r\n                      color={prescription.status === 'pending' ? 'orange' : 'green'} \r\n                      variant=\"light\"\r\n                    >\r\n                      {prescription.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"xs\" mb=\"md\">\r\n                    {prescription.medications.map((med) => (\r\n                      <Group key={med.medicationId} justify=\"space-between\" p=\"xs\" \r\n                             style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>{med.medicationName}</Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">\r\n                            {med.dosage} - {med.frequency} for {med.duration}\r\n                          </Text>\r\n                        </div>\r\n                        <Text size=\"sm\" fw={500}>₹{med.cost}</Text>\r\n                      </Group>\r\n                    ))}\r\n                  </Stack>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\" fw={500}>Total: ₹{prescription.medications.reduce((sum, med) => sum + (med.cost || 0), 0)}</Text>\r\n                    <Group gap=\"xs\">\r\n                      <Text size=\"xs\" c=\"dimmed\">\r\n                        Refills: {prescription.refillsRemaining}/{prescription.refills}\r\n                      </Text>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Documents Tab */}\r\n        <Tabs.Panel value=\"documents\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Medical Documents</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Upload Document\r\n              </Button>\r\n            </Group>\r\n\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((doc) => (\r\n                <Card key={doc.id} padding=\"md\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"xs\">\r\n                    <ThemeIcon color=\"blue\" variant=\"light\">\r\n                      <IconFileText size={20} />\r\n                    </ThemeIcon>\r\n                    <Badge \r\n                      color={doc.approvalStatus === 'approved' ? 'green' : 'orange'} \r\n                      variant=\"light\" \r\n                      size=\"xs\"\r\n                    >\r\n                      {doc.approvalStatus}\r\n                    </Badge>\r\n                  </Group>\r\n                  \r\n                  <Text fw={600} size=\"sm\" mb=\"xs\">{doc.title}</Text>\r\n                  <Text size=\"xs\" c=\"dimmed\" mb=\"sm\" lineClamp={2}>\r\n                    {doc.description}\r\n                  </Text>\r\n                  \r\n                  <Stack gap={4} mb=\"sm\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      <strong>Type:</strong> {doc.documentType.replace('_', ' ')}\r\n                    </Text>\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      <strong>Date:</strong> {formatDate(doc.documentDate)}\r\n                    </Text>\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      <strong>Size:</strong> {(doc.fileSize / 1024 / 1024).toFixed(2)} MB\r\n                    </Text>\r\n                  </Stack>\r\n                  \r\n                  <Group justify=\"space-between\">\r\n                    <div>\r\n                      {doc.tags.map((tag) => (\r\n                        <Badge key={tag} size=\"xs\" variant=\"light\" mr=\"xs\">\r\n                          {tag}\r\n                        </Badge>\r\n                      ))}\r\n                    </div>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\" size=\"sm\">\r\n                        <IconEye size={14} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\" size=\"sm\">\r\n                        <IconDownload size={14} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Analytics Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Medical Records Analytics</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {/* Records by Type */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Records by Type</Title>\r\n                <MantineDonutChart\r\n                  data={recordsByTypeData}\r\n                  size={160}\r\n                  thickness={30}\r\n                  withLabels\r\n                />\r\n              </Card>\r\n              \r\n              {/* Records by Status */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Records by Status</Title>\r\n                <SimpleBarChart\r\n                  h={200}\r\n                  data={recordsByStatusData}\r\n                  dataKey=\"status\"\r\n                  series={[{ name: 'count', color: 'blue.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Common Diagnoses */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Common Diagnoses</Title>\r\n                <Stack gap=\"sm\">\r\n                  {commonDiagnosesData.map((diag, index) => (\r\n                    <Group key={diag.diagnosis} justify=\"space-between\" p=\"sm\" \r\n                           style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                      <div>\r\n                        <Text size=\"sm\" fw={500}>{diag.diagnosis}</Text>\r\n                        <Text size=\"xs\" c=\"dimmed\">{diag.icdCode}</Text>\r\n                      </div>\r\n                      <Badge color=\"blue\" variant=\"light\">\r\n                        {diag.count}\r\n                      </Badge>\r\n                    </Group>\r\n                  ))}\r\n                </Stack>\r\n              </Card>\r\n              \r\n              {/* Prescription Trends */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Top Prescribed Medications</Title>\r\n                <Stack gap=\"sm\">\r\n                  {prescriptionTrendsData.map((med) => (\r\n                    <Group key={med.medication} justify=\"space-between\" p=\"sm\" \r\n                           style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                      <Text size=\"sm\" fw={500}>{med.medication}</Text>\r\n                      <Group gap=\"xs\">\r\n                        <Badge color=\"green\" variant=\"light\">\r\n                          {med.prescriptionCount}\r\n                        </Badge>\r\n                        <Badge \r\n                          color={med.trend > 0 ? 'green' : 'red'} \r\n                          variant=\"light\" \r\n                          size=\"xs\"\r\n                        >\r\n                          {med.trend > 0 ? '+' : ''}{med.trend}%\r\n                        </Badge>\r\n                      </Group>\r\n                    </Group>\r\n                  ))}\r\n                </Stack>\r\n              </Card>\r\n              \r\n              {/* Recent Activity */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder style={{ gridColumn: '1 / -1' }}>\r\n                <Title order={4} mb=\"md\">Recent Activity</Title>\r\n                <SimpleAreaChart\r\n                  h={300}\r\n                  data={recentActivityData}\r\n                  dataKey=\"date\"\r\n                  series={[\r\n                    { name: 'recordsCreated', color: 'blue.6' },\r\n                    { name: 'recordsUpdated', color: 'green.6' }\r\n                  ]}\r\n                  curveType=\"linear\"\r\n                />\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Record Detail Modal */}\r\n      <Modal\r\n        opened={recordDetailOpened}\r\n        onClose={closeRecordDetail}\r\n        title=\"Medical Record Details\"\r\n        size=\"xl\"\r\n      >\r\n        {selectedRecord && (\r\n          <ScrollArea h={600}>\r\n            <Stack gap=\"md\">\r\n              {/* Patient Info */}\r\n              <Group>\r\n                <Avatar size=\"xl\" color=\"blue\" radius=\"xl\">\r\n                  {selectedRecord.patient.firstName[0]}{selectedRecord.patient.lastName[0]}\r\n                </Avatar>\r\n                <div>\r\n                  <Title order={3}>\r\n                    {selectedRecord.patient.firstName} {selectedRecord.patient.lastName}\r\n                  </Title>\r\n                  <Text c=\"dimmed\">{selectedRecord.recordId}</Text>\r\n                  <Badge color={getStatusColor(selectedRecord.status)} variant=\"light\" mt=\"xs\">\r\n                    {selectedRecord.status.replace('_', ' ')}\r\n                  </Badge>\r\n                </div>\r\n              </Group>\r\n\r\n              <Divider />\r\n\r\n              {/* Basic Information */}\r\n              <SimpleGrid cols={2}>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Record Type</Text>\r\n                  <Badge color={getTypeColor(selectedRecord.recordType)} variant=\"light\">\r\n                    {selectedRecord.recordType.replace('_', ' ')}\r\n                  </Badge>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Record Date</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {formatDate(selectedRecord.recordDate)}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Doctor</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {selectedRecord.doctor.firstName} {selectedRecord.doctor.lastName}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Department</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedRecord.doctor.department?.name}</Text>\r\n                </div>\r\n              </SimpleGrid>\r\n\r\n              <Divider />\r\n\r\n              {/* Clinical Information */}\r\n              <div>\r\n                <Text size=\"sm\" fw={500} mb=\"sm\">Chief Complaint</Text>\r\n                <Text size=\"sm\">{selectedRecord.chiefComplaint}</Text>\r\n              </div>\r\n\r\n              <div>\r\n                <Text size=\"sm\" fw={500} mb=\"sm\">History of Present Illness</Text>\r\n                <Text size=\"sm\">{selectedRecord.historyOfPresentIllness}</Text>\r\n              </div>\r\n\r\n              <div>\r\n                <Text size=\"sm\" fw={500} mb=\"sm\">Assessment</Text>\r\n                <Text size=\"sm\">{selectedRecord.assessment}</Text>\r\n              </div>\r\n\r\n              <div>\r\n                <Text size=\"sm\" fw={500} mb=\"sm\">Treatment Plan</Text>\r\n                <Text size=\"sm\">{selectedRecord.treatmentPlan}</Text>\r\n              </div>\r\n\r\n              {/* Vital Signs */}\r\n              <div>\r\n                <Text size=\"sm\" fw={500} mb=\"sm\">Vital Signs</Text>\r\n                <SimpleGrid cols={3}>\r\n                  <Group>\r\n                    <IconHeart size={16} color=\"red\" />\r\n                    <Text size=\"sm\">\r\n                      BP: {selectedRecord.vitalSigns.bloodPressure.systolic}/{selectedRecord.vitalSigns.bloodPressure.diastolic}\r\n                    </Text>\r\n                  </Group>\r\n                  <Group>\r\n                    <IconActivity size={16} color=\"blue\" />\r\n                    <Text size=\"sm\">HR: {selectedRecord.vitalSigns.heartRate} bpm</Text>\r\n                  </Group>\r\n                  <Group>\r\n                    <IconLungs size={16} color=\"green\" />\r\n                    <Text size=\"sm\">Temp: {selectedRecord.vitalSigns.temperature}°{selectedRecord.vitalSigns.temperatureUnit}</Text>\r\n                  </Group>\r\n                </SimpleGrid>\r\n              </div>\r\n\r\n              {/* Allergies */}\r\n              {selectedRecord.allergies && selectedRecord.allergies.length > 0 && (\r\n                <div>\r\n                  <Text size=\"sm\" fw={500} mb=\"sm\">Allergies</Text>\r\n                  <Stack gap=\"xs\">\r\n                    {selectedRecord.allergies.map((allergy) => (\r\n                      <Group key={allergy.id} p=\"sm\" style={{ backgroundColor: '#fff5f5', borderRadius: '6px' }}>\r\n                        <IconAlertTriangle size={16} color=\"red\" />\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>{allergy.allergen}</Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">\r\n                            {allergy.reaction} - \r\n                            <Badge color={getSeverityColor(allergy.severity)} variant=\"light\" size=\"xs\" ml=\"xs\">\r\n                              {allergy.severity}\r\n                            </Badge>\r\n                          </Text>\r\n                        </div>\r\n                      </Group>\r\n                    ))}\r\n                  </Stack>\r\n                </div>\r\n              )}\r\n\r\n              {/* Diagnoses */}\r\n              {selectedRecord.diagnosis && selectedRecord.diagnosis.length > 0 && (\r\n                <div>\r\n                  <Text size=\"sm\" fw={500} mb=\"sm\">Diagnoses</Text>\r\n                  <Stack gap=\"xs\">\r\n                    {selectedRecord.diagnosis.map((diagnosis) => (\r\n                      <Group key={diagnosis.id} justify=\"space-between\" p=\"sm\" \r\n                             style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>{diagnosis.diagnosisName}</Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">{diagnosis.diagnosisCode}</Text>\r\n                        </div>\r\n                        <Badge color=\"blue\" variant=\"light\" size=\"sm\">\r\n                          {diagnosis.diagnosisType}\r\n                        </Badge>\r\n                      </Group>\r\n                    ))}\r\n                  </Stack>\r\n                </div>\r\n              )}\r\n\r\n              {/* Clinical Notes */}\r\n              <div>\r\n                <Text size=\"sm\" fw={500} mb=\"sm\">Clinical Notes</Text>\r\n                <Text size=\"sm\" style={{ whiteSpace: 'pre-wrap' }}>\r\n                  {selectedRecord.clinicalNotes}\r\n                </Text>\r\n              </div>\r\n\r\n              <Group justify=\"flex-end\">\r\n                <Button variant=\"light\" onClick={closeRecordDetail}>\r\n                  Close\r\n                </Button>\r\n                <Button>\r\n                  Edit Record\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </ScrollArea>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Add Record Modal */}\r\n      <Modal\r\n        opened={addRecordOpened}\r\n        onClose={closeAddRecord}\r\n        title=\"Create New Medical Record\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Patient\"\r\n              placeholder=\"Select patient\"\r\n              data={[].map /* TODO: Fetch from API */(patient => ({ \r\n                value: patient.id, \r\n                label: `${patient.firstName} ${patient.lastName}` \r\n              }))}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Record Type\"\r\n              placeholder=\"Select type\"\r\n              data={[\r\n                { value: 'consultation', label: 'Consultation' },\r\n                { value: 'follow_up', label: 'Follow-up' },\r\n                { value: 'emergency', label: 'Emergency' },\r\n                { value: 'admission', label: 'Admission' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Chief Complaint\"\r\n            placeholder=\"Enter chief complaint\"\r\n            required\r\n          />\r\n          \r\n          <Textarea\r\n            label=\"History of Present Illness\"\r\n            placeholder=\"Enter history of present illness\"\r\n            rows={4}\r\n          />\r\n          \r\n          <SimpleGrid cols={3}>\r\n            <TextInput\r\n              label=\"Blood Pressure\"\r\n              placeholder=\"120/80\"\r\n            />\r\n            <NumberInput\r\n              label=\"Heart Rate (BPM)\"\r\n              placeholder=\"72\"\r\n            />\r\n            <NumberInput\r\n              label=\"Temperature (°C)\"\r\n              placeholder=\"98.6\"\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Assessment\"\r\n            placeholder=\"Enter assessment\"\r\n            rows={3}\r\n          />\r\n          \r\n          <Textarea\r\n            label=\"Treatment Plan\"\r\n            placeholder=\"Enter treatment plan\"\r\n            rows={3}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddRecord}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Success',\r\n                message: 'Medical record created successfully',\r\n                color: 'green',\r\n              });\r\n              closeAddRecord();\r\n            }}>\r\n              Create Record\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EMRManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\enhanced-page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DashboardModule' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 88,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 103
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleLogout' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport Link from \"next/link\";\r\nimport { useState, useEffect, useMemo } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { getModulesForRole, getRoleDisplayName, getRoleBadgeColor, type UserRole, type DashboardModule } from '@/lib/rbac';\r\n\r\nexport default function EnhancedDashboard() {\r\n  const router = useRouter();\r\n  const [user, setUser] = useState<any>(null);\r\n  const [stats, setStats] = useState({\r\n    totalPatients: 0,\r\n    todaysAppointments: 0,\r\n    pendingBills: 0,\r\n    activeDoctors: 0\r\n  });\r\n\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('accessToken');\r\n    const storedUser = localStorage.getItem('user');\r\n\r\n    if (!storedToken || !storedUser) {\r\n      router.push('/login');\r\n      return;\r\n    }\r\n\r\n    const userData = JSON.parse(storedUser);\r\n    setUser(userData);\r\n    \r\n    // Stats will be fetched from API - showing zeros until implemented\r\n    setStats({\r\n      totalPatients: 0,\r\n      todaysAppointments: 0,\r\n      pendingBills: 0,\r\n      activeDoctors: 0\r\n    });\r\n    \r\n    // TODO: Fetch real stats from API\r\n    // fetchDashboardStats().then(data => setStats(data));\r\n  }, [router]);\r\n\r\n  // Get modules accessible to this user's role (RBAC filtering)\r\n  const accessibleModules = useMemo(() => {\r\n    if (!user?.role) return [];\r\n    const filtered = getModulesForRole(user.role as UserRole);\r\n    console.log(`[Dashboard] Modules for ${user.role}:`, filtered.length, 'modules');\r\n    return filtered;\r\n  }, [user]);\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('user');\r\n    router.push('/login');\r\n  };\r\n\r\n  if (!user) {\r\n    return (\r\n      <div style={{ minHeight: \"100vh\", background: \"linear-gradient(135deg, #667eea 0%, #764ba2 100%)\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\r\n        <div style={{\r\n          background: \"rgba(255, 255, 255, 0.95)\",\r\n          padding: \"3rem\",\r\n          borderRadius: \"15px\",\r\n          boxShadow: \"0 20px 25px -5px rgba(0, 0, 0, 0.1)\",\r\n          backdropFilter: \"blur(10px)\",\r\n          textAlign: \"center\"\r\n        }}>\r\n          <div>Loading dashboard...</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const modules = accessibleModules;\r\n\r\n  return (\r\n    <div style={{\r\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%)',\r\n      minHeight: '100%',\r\n      borderRadius: '16px',\r\n      padding: '0',\r\n      backgroundAttachment: 'fixed'\r\n    }}>\r\n      {/* Welcome Section */}\r\n      <div style={{\r\n        background: 'linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%)',\r\n        color: 'white',\r\n        padding: '3rem 2rem',\r\n        borderRadius: '16px 16px 0 0',\r\n        marginBottom: '2rem',\r\n        position: 'relative',\r\n        overflow: 'hidden'\r\n      }}>\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: '-50%',\r\n          right: '-20%',\r\n          width: '200px',\r\n          height: '200px',\r\n          background: 'rgba(255,255,255,0.1)',\r\n          borderRadius: '50%',\r\n          filter: 'blur(50px)'\r\n        }} />\r\n        <div style={{\r\n          position: 'absolute',\r\n          bottom: '-30%',\r\n          left: '-10%',\r\n          width: '150px',\r\n          height: '150px',\r\n          background: 'rgba(255,255,255,0.05)',\r\n          borderRadius: '50%',\r\n          filter: 'blur(30px)'\r\n        }} />\r\n\r\n        <div style={{ position: 'relative', zIndex: 2 }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '0.5rem', flexWrap: 'wrap' }}>\r\n            <h1 style={{\r\n              fontSize: '2rem',\r\n              fontWeight: '800',\r\n              margin: 0,\r\n              background: 'linear-gradient(135deg, #ffffff 0%, #f0f9ff 100%)',\r\n              backgroundClip: 'text',\r\n              WebkitBackgroundClip: 'text',\r\n              WebkitTextFillColor: 'transparent'\r\n            }}>\r\n              Welcome back, {user.firstName}! 👋\r\n            </h1>\r\n            <span style={{\r\n              background: getRoleBadgeColor(user.role as UserRole),\r\n              color: 'white',\r\n              padding: '0.4rem 1rem',\r\n              borderRadius: '20px',\r\n              fontSize: '0.85rem',\r\n              fontWeight: '600',\r\n              boxShadow: '0 4px 15px rgba(0,0,0,0.2)'\r\n            }}>\r\n              {getRoleDisplayName(user.role as UserRole)}\r\n            </span>\r\n          </div>\r\n          <p style={{\r\n            fontSize: '1rem',\r\n            opacity: 0.9,\r\n            margin: 0\r\n          }}>\r\n            Here&apos;s what&apos;s happening at {user.tenant?.name} today • {modules.length} modules available\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Quick Stats - Role-based */}\r\n      <div style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"repeat(auto-fit, minmax(280px, 1fr))\",\r\n        gap: \"1.5rem\",\r\n        marginBottom: \"3rem\",\r\n        padding: '0 2rem'\r\n      }}>\r\n        {(user.role === 'PATIENT' ? [\r\n          { label: \"My Appointments\", value: stats.todaysAppointments, color: \"#4ecdc4\", icon: \"📅\", bg: \"rgba(78, 205, 196, 0.1)\" },\r\n          { label: \"Pending Bills\", value: stats.pendingBills, color: \"#45b7d1\", icon: \"💰\", bg: \"rgba(69, 183, 209, 0.1)\" },\r\n          { label: \"Medical Records\", value: 0, color: \"#ff6b6b\", icon: \"📋\", bg: \"rgba(255, 107, 107, 0.1)\" },\r\n          { label: \"Prescriptions\", value: 0, color: \"#96ceb4\", icon: \"💊\", bg: \"rgba(150, 206, 180, 0.1)\" }\r\n        ] : [\r\n          { label: \"Total Patients\", value: stats.totalPatients, color: \"#ff6b6b\", icon: \"👥\", bg: \"rgba(255, 107, 107, 0.1)\" },\r\n          { label: \"Today's Appointments\", value: stats.todaysAppointments, color: \"#4ecdc4\", icon: \"📅\", bg: \"rgba(78, 205, 196, 0.1)\" },\r\n          { label: \"Pending Bills\", value: stats.pendingBills, color: \"#45b7d1\", icon: \"💰\", bg: \"rgba(69, 183, 209, 0.1)\" },\r\n          { label: \"Active Doctors\", value: stats.activeDoctors, color: \"#96ceb4\", icon: \"👨‍⚕️\", bg: \"rgba(150, 206, 180, 0.1)\" }\r\n        ]).map((stat, index) => (\r\n          <div key={index} style={{\r\n            background: 'rgba(255,255,255,0.95)',\r\n            padding: \"1.5rem\",\r\n            borderRadius: \"16px\",\r\n            boxShadow: \"0 8px 32px rgba(0,0,0,0.1)\",\r\n            border: \"1px solid rgba(255,255,255,0.2)\",\r\n            transition: 'all 0.3s ease',\r\n            cursor: 'pointer',\r\n            backdropFilter: 'blur(10px)'\r\n          }}\r\n          onMouseEnter={(e) => {\r\n            e.currentTarget.style.transform = 'translateY(-4px)';\r\n            e.currentTarget.style.boxShadow = '0 12px 40px rgba(0,0,0,0.15)';\r\n          }}\r\n          onMouseLeave={(e) => {\r\n            e.currentTarget.style.transform = 'translateY(0)';\r\n            e.currentTarget.style.boxShadow = '0 8px 32px rgba(0,0,0,0.1)';\r\n          }}\r\n          >\r\n            <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}>\r\n              <div>\r\n                <p style={{\r\n                  color: \"#64748b\",\r\n                  fontSize: \"0.85rem\",\r\n                  margin: \"0 0 0.5rem 0\",\r\n                  fontWeight: \"500\"\r\n                }}>{stat.label}</p>\r\n                <p style={{\r\n                  color: stat.color,\r\n                  fontSize: \"2rem\",\r\n                  fontWeight: \"800\",\r\n                  margin: 0,\r\n                  background: `linear-gradient(135deg, ${stat.color} 0%, ${stat.color}dd 100%)`,\r\n                  backgroundClip: 'text',\r\n                  WebkitBackgroundClip: 'text',\r\n                  WebkitTextFillColor: 'transparent'\r\n                }}>{stat.value}</p>\r\n              </div>\r\n              <div style={{\r\n                fontSize: \"2.5rem\",\r\n                background: stat.bg,\r\n                padding: \"0.75rem\",\r\n                borderRadius: \"12px\",\r\n                boxShadow: `0 4px 20px ${stat.color}33`\r\n              }}>\r\n                {stat.icon}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* HMS Modules - Only for Staff/Admin, not Patients */}\r\n      {user.role !== 'PATIENT' && (\r\n      <div style={{\r\n        marginBottom: \"3rem\",\r\n        padding: '0 2rem'\r\n      }}>\r\n        <div style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n          marginBottom: \"2rem\"\r\n        }}>\r\n          <h2 style={{\r\n            color: \"#1e293b\",\r\n            fontSize: \"1.5rem\",\r\n            fontWeight: \"700\",\r\n            margin: 0,\r\n            background: 'linear-gradient(135deg, #ff6b6b 0%, #4ecdc4 50%, #45b7d1 100%)',\r\n            backgroundClip: 'text',\r\n            WebkitBackgroundClip: 'text',\r\n            WebkitTextFillColor: 'transparent'\r\n          }}>\r\n            HMS Modules ({modules.filter(m => m.active).length}/{modules.length} Active)\r\n          </h2>\r\n          <div style={{ display: \"flex\", gap: \"1rem\", alignItems: \"center\" }}>\r\n            <div style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              gap: \"0.5rem\",\r\n              background: 'rgba(78, 205, 196, 0.1)',\r\n              padding: '0.5rem 1rem',\r\n              borderRadius: '20px',\r\n              border: '1px solid rgba(78, 205, 196, 0.2)'\r\n            }}>\r\n              <div style={{\r\n                width: \"8px\",\r\n                height: \"8px\",\r\n                borderRadius: \"50%\",\r\n                background: \"#4ecdc4\"\r\n              }} />\r\n              <span style={{ fontSize: \"0.9rem\", color: \"#059669\", fontWeight: \"500\" }}>Active</span>\r\n            </div>\r\n            <div style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              gap: \"0.5rem\",\r\n              background: 'rgba(156, 163, 175, 0.1)',\r\n              padding: '0.5rem 1rem',\r\n              borderRadius: '20px',\r\n              border: '1px solid rgba(156, 163, 175, 0.2)'\r\n            }}>\r\n              <div style={{\r\n                width: \"8px\",\r\n                height: \"8px\",\r\n                borderRadius: \"50%\",\r\n                background: \"#9ca3af\"\r\n              }} />\r\n              <span style={{ fontSize: \"0.9rem\", color: \"#6b7280\", fontWeight: \"500\" }}>Coming Soon</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(auto-fit, minmax(320px, 1fr))\",\r\n          gap: \"2rem\"\r\n        }}>\r\n          {modules.map((module, index) => (\r\n            <Link\r\n              key={index}\r\n              href={module.active ? module.href : \"#\"}\r\n              style={{ textDecoration: \"none\", pointerEvents: module.active ? \"auto\" : \"none\" }}\r\n            >\r\n              <div style={{\r\n                background: module.active ? 'rgba(255,255,255,0.95)' : 'rgba(249, 250, 251, 0.9)',\r\n                padding: \"1.5rem\",\r\n                borderRadius: \"16px\",\r\n                boxShadow: module.active ? \"0 8px 32px rgba(0,0,0,0.1)\" : \"0 4px 16px rgba(0,0,0,0.05)\",\r\n                border: module.active ? \"1px solid rgba(255,255,255,0.2)\" : \"1px solid rgba(229, 231, 235, 0.8)\",\r\n                transition: \"all 0.3s ease\",\r\n                cursor: module.active ? \"pointer\" : \"not-allowed\",\r\n                opacity: module.active ? 1 : 0.6,\r\n                position: \"relative\",\r\n                backdropFilter: 'blur(10px)',\r\n                overflow: 'hidden'\r\n              }}\r\n              onMouseEnter={(e) => {\r\n                if (module.active) {\r\n                  e.currentTarget.style.transform = \"translateY(-8px)\";\r\n                  e.currentTarget.style.boxShadow = \"0 16px 48px rgba(0,0,0,0.15)\";\r\n                }\r\n              }}\r\n              onMouseLeave={(e) => {\r\n                if (module.active) {\r\n                  e.currentTarget.style.transform = \"translateY(0)\";\r\n                  e.currentTarget.style.boxShadow = \"0 8px 32px rgba(0,0,0,0.1)\";\r\n                }\r\n              }}\r\n              >\r\n                {/* Active Indicator Badge */}\r\n                <div style={{\r\n                  position: \"absolute\",\r\n                  top: \"1.5rem\",\r\n                  right: \"1.5rem\",\r\n                  width: \"12px\",\r\n                  height: \"12px\",\r\n                  borderRadius: \"50%\",\r\n                  background: module.active ? \"#4ecdc4\" : \"#9ca3af\",\r\n                  border: '2px solid white',\r\n                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)'\r\n                }} />\r\n\r\n                <div style={{\r\n                  position: 'absolute',\r\n                  top: '1rem',\r\n                  left: '1rem',\r\n                  width: '4px',\r\n                  height: '100%',\r\n                  background: module.active ? `linear-gradient(135deg, ${module.color} 0%, ${module.color}dd 100%)` : '#e5e7eb',\r\n                  borderRadius: '2px'\r\n                }} />\r\n\r\n                <div style={{ display: \"flex\", alignItems: \"flex-start\", gap: \"1.5rem\", marginLeft: '1rem' }}>\r\n                  <div style={{\r\n                    fontSize: \"2.5rem\",\r\n                    background: module.active ? `${module.color}15` : '#f3f4f6',\r\n                    padding: \"0.75rem\",\r\n                    borderRadius: \"12px\",\r\n                    transition: 'all 0.3s ease',\r\n                    boxShadow: module.active ? `0 4px 20px ${module.color}25` : '0 2px 8px rgba(0,0,0,0.05)'\r\n                  }}>\r\n                    {module.icon}\r\n                  </div>\r\n                  <div style={{ flex: 1 }}>\r\n                    <h3 style={{\r\n                      color: module.active ? \"#1f2937\" : \"#6b7280\",\r\n                      fontSize: \"1.1rem\",\r\n                      fontWeight: \"600\",\r\n                      margin: \"0 0 0.75rem 0\",\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      gap: \"0.5rem\"\r\n                    }}>\r\n                      {module.title}\r\n                    </h3>\r\n                    <p style={{\r\n                      color: \"#6b7280\",\r\n                      fontSize: \"0.9rem\",\r\n                      margin: \"0 0 1.5rem 0\",\r\n                      lineHeight: \"1.5\"\r\n                    }}>\r\n                      {module.description}\r\n                    </p>\r\n                    <div style={{\r\n                      color: module.active ? module.color : \"#9ca3af\",\r\n                      fontSize: \"0.85rem\",\r\n                      fontWeight: \"600\",\r\n                      background: module.active ? `${module.color}15` : \"#f3f4f6\",\r\n                      padding: \"0.5rem 1rem\",\r\n                      borderRadius: \"8px\",\r\n                      display: \"inline-block\",\r\n                      border: module.active ? `1px solid ${module.color}25` : '1px solid #e5e7eb'\r\n                    }}>\r\n                      {module.stats}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      )}\r\n\r\n      {/* Patient Quick Actions - Only for Patients */}\r\n      {user.role === 'PATIENT' && (\r\n        <div style={{\r\n          marginBottom: \"3rem\",\r\n          padding: '0 2rem'\r\n        }}>\r\n          <h2 style={{\r\n            color: \"#1e293b\",\r\n            fontSize: \"1.5rem\",\r\n            fontWeight: \"700\",\r\n            marginBottom: \"2rem\",\r\n            background: 'linear-gradient(135deg, #ff6b6b 0%, #4ecdc4 50%, #45b7d1 100%)',\r\n            backgroundClip: 'text',\r\n            WebkitBackgroundClip: 'text',\r\n            WebkitTextFillColor: 'transparent'\r\n          }}>\r\n            Quick Actions\r\n          </h2>\r\n          <div style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: \"repeat(auto-fit, minmax(280px, 1fr))\",\r\n            gap: \"1.5rem\"\r\n          }}>\r\n            {[\r\n              { title: \"My Health Records\", desc: \"View your complete medical history\", href: \"/dashboard/my-records\", icon: \"📋\", color: \"#ff6b6b\" },\r\n              { title: \"My Appointments\", desc: \"Manage your upcoming appointments\", href: \"/dashboard/my-appointments\", icon: \"📅\", color: \"#4ecdc4\" },\r\n              { title: \"My Bills\", desc: \"View and pay your medical bills\", href: \"/dashboard/my-bills\", icon: \"💰\", color: \"#45b7d1\" },\r\n              { title: \"Book Appointment\", desc: \"Schedule a new appointment\", href: \"/dashboard/appointments\", icon: \"🗓️\", color: \"#96ceb4\" },\r\n            ].map((action, index) => (\r\n              <Link key={index} href={action.href} style={{ textDecoration: \"none\" }}>\r\n                <div style={{\r\n                  background: 'rgba(255,255,255,0.95)',\r\n                  padding: \"1.5rem\",\r\n                  borderRadius: \"16px\",\r\n                  boxShadow: \"0 8px 32px rgba(0,0,0,0.1)\",\r\n                  border: \"1px solid rgba(255,255,255,0.2)\",\r\n                  transition: \"all 0.3s ease\",\r\n                  cursor: \"pointer\",\r\n                  backdropFilter: 'blur(10px)',\r\n                  minHeight: '140px',\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  justifyContent: 'space-between'\r\n                }}\r\n                onMouseEnter={(e) => {\r\n                  e.currentTarget.style.transform = \"translateY(-4px)\";\r\n                  e.currentTarget.style.boxShadow = \"0 12px 40px rgba(0,0,0,0.15)\";\r\n                }}\r\n                onMouseLeave={(e) => {\r\n                  e.currentTarget.style.transform = \"translateY(0)\";\r\n                  e.currentTarget.style.boxShadow = \"0 8px 32px rgba(0,0,0,0.1)\";\r\n                }}\r\n                >\r\n                  <div style={{ display: \"flex\", alignItems: \"center\", gap: \"1rem\", marginBottom: \"1rem\" }}>\r\n                    <div style={{\r\n                      fontSize: \"2rem\",\r\n                      background: `${action.color}15`,\r\n                      padding: \"0.75rem\",\r\n                      borderRadius: \"12px\",\r\n                      boxShadow: `0 4px 20px ${action.color}25`\r\n                    }}>\r\n                      {action.icon}\r\n                    </div>\r\n                    <h3 style={{\r\n                      color: \"#1f2937\",\r\n                      fontSize: \"1.1rem\",\r\n                      fontWeight: \"600\",\r\n                      margin: 0\r\n                    }}>\r\n                      {action.title}\r\n                    </h3>\r\n                  </div>\r\n                  <p style={{\r\n                    color: \"#6b7280\",\r\n                    fontSize: \"0.9rem\",\r\n                    margin: 0,\r\n                    lineHeight: \"1.5\"\r\n                  }}>\r\n                    {action.desc}\r\n                  </p>\r\n                </div>\r\n              </Link>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Footer */}\r\n      <div style={{\r\n        textAlign: \"center\",\r\n        padding: \"2rem 2rem\",\r\n        color: \"#64748b\",\r\n        fontSize: \"0.9rem\",\r\n        background: 'rgba(255,255,255,0.9)',\r\n        backdropFilter: 'blur(10px)',\r\n        borderRadius: '16px',\r\n        margin: '0 2rem',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        boxShadow: '0 4px 20px rgba(0,0,0,0.05)'\r\n      }}>\r\n        <p style={{ margin: 0, fontWeight: '500' }}>🏥 HMS SAAS - Complete Hospital Management System</p>\r\n        <p style={{ margin: '0.5rem 0 0 0', opacity: 0.8 }}>Built with ❤️ for modern healthcare facilities</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\example-protected-page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LoadingSpinner' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setFilters' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\n/**\r\n * EXAMPLE PROTECTED PAGE\r\n * This demonstrates how to implement RBAC, API calls, and loading states\r\n * \r\n * To use this pattern in your existing pages:\r\n * 1. Import the necessary components and hooks\r\n * 2. Wrap your page component with withRBAC HOC\r\n * 3. Use the custom API hooks for data fetching\r\n * 4. Add loading/error/empty states\r\n */\r\n\r\nimport { withRBAC, Permission } from '@/lib/rbac/RBACProvider';\r\nimport { usePatients } from '@/lib/api/hooks';\r\nimport { \r\n  TableSkeleton, \r\n  EmptyState, \r\n  ErrorState,\r\n  LoadingSpinner \r\n} from '@/components/shared/LoadingStates';\r\nimport { Button, Table, Paper, Group, Title } from '@mantine/core';\r\nimport { useState } from 'react';\r\n\r\nfunction ExampleProtectedPage() {\r\n  const [filters, setFilters] = useState({});\r\n  \r\n  // Use custom hook for data fetching with automatic caching\r\n  const { data: patients, isLoading, error, refetch } = usePatients(filters);\r\n\r\n  // Loading state\r\n  if (isLoading) {\r\n    return (\r\n      <div style={{ padding: '2rem' }}>\r\n        <Title order={2} mb=\"xl\">Patients</Title>\r\n        <TableSkeleton rows={10} columns={5} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <div style={{ padding: '2rem' }}>\r\n        <ErrorState\r\n          title=\"Failed to load patients\"\r\n          message={error.message || 'An error occurred while fetching data'}\r\n          actionLabel=\"Retry\"\r\n          onAction={refetch}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Empty state\r\n  if (!patients || patients.length === 0) {\r\n    return (\r\n      <div style={{ padding: '2rem' }}>\r\n        <EmptyState\r\n          title=\"No patients found\"\r\n          message=\"Start by adding your first patient to the system\"\r\n          actionLabel=\"Add Patient\"\r\n          onAction={() => console.log('Open add patient modal')}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Success state with data\r\n  return (\r\n    <div style={{ padding: '2rem' }}>\r\n      <Group justify=\"space-between\" mb=\"xl\">\r\n        <Title order={2}>Patients ({patients.length})</Title>\r\n        <Button onClick={() => console.log('Open add patient modal')}>\r\n          Add Patient\r\n        </Button>\r\n      </Group>\r\n\r\n      <Paper shadow=\"sm\" p=\"md\" withBorder>\r\n        <Table striped highlightOnHover>\r\n          <Table.Thead>\r\n            <Table.Tr>\r\n              <Table.Th>ID</Table.Th>\r\n              <Table.Th>Name</Table.Th>\r\n              <Table.Th>Email</Table.Th>\r\n              <Table.Th>Phone</Table.Th>\r\n              <Table.Th>Actions</Table.Th>\r\n            </Table.Tr>\r\n          </Table.Thead>\r\n          <Table.Tbody>\r\n            {patients.map((patient: any) => (\r\n              <Table.Tr key={patient.id}>\r\n                <Table.Td>{patient.id}</Table.Td>\r\n                <Table.Td>{patient.name}</Table.Td>\r\n                <Table.Td>{patient.email}</Table.Td>\r\n                <Table.Td>{patient.phone}</Table.Td>\r\n                <Table.Td>\r\n                  <Button size=\"xs\" variant=\"light\">View</Button>\r\n                </Table.Td>\r\n              </Table.Tr>\r\n            ))}\r\n          </Table.Tbody>\r\n        </Table>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Protect the page with RBAC - only users with VIEW_PATIENTS permission can access\r\nexport default withRBAC(ExampleProtectedPage, [Permission.VIEW_PATIENTS]);\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\finance\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Avatar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Menu' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Alert' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Stepper' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 33,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 34,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 35,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Loader' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 36,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Highlight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 37,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Accordion' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 38,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'FileButton' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 39,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ColorSwatch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 40,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Code' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 41,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Spoiler' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 42,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Mark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 43,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 43,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Rating' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 44,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Switch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 45,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Checkbox' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 46,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Radio' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 47,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PasswordInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 48,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleLineChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 54,
        "column": 62,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 69,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCashBanknote' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 71,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPercentage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 73,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChartLine' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 74,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 74,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChartPie' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 75,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Account' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 84,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PaymentMethod' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 90,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 90,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ReportType' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 93,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'FinancialStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 94,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 94,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'FinancialFilters' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 95,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedBudget' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 107,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 107,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedInvoice' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 108,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 108,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedReport' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 109,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 109,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'budgetDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 114,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 114,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeBudgetDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 114,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 114,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'invoiceDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 115,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeInvoiceDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 115,
        "column": 65,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 83
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'reportDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 116,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeReportDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 116,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'addBudgetOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 117,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeAddBudget' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 117,
        "column": 57,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 71
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 44,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Alert,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Timeline,\r\n  Stepper,\r\n  RingProgress,\r\n  Tooltip,\r\n  List,\r\n  Image,\r\n  Loader,\r\n  Highlight,\r\n  Accordion,\r\n  FileButton,\r\n  ColorSwatch,\r\n  Code,\r\n  Spoiler,\r\n  Mark,\r\n  Rating,\r\n  Switch,\r\n  Checkbox,\r\n  Radio,\r\n  PasswordInput,\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleBarChart, SimpleLineChart } from '../../../components/MantineChart';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconDownload,\r\n  IconChartBar,\r\n  IconReceipt,\r\n  IconBuildingBank,\r\n  IconFileInvoice,\r\n  IconReportAnalytics,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconArrowUp,\r\n  IconArrowDown,\r\n  IconCash,\r\n  IconCashBanknote,\r\n  IconFileSpreadsheet,\r\n  IconPercentage,\r\n  IconChartLine,\r\n  IconChartPie,\r\n  IconShare,\r\n  IconWallet,\r\n  IconBriefcase\r\n} from '@tabler/icons-react';\r\nimport {\r\n  Transaction,\r\n  TransactionType,\r\n  TransactionStatus,\r\n  Account,\r\n  AccountType,\r\n  Budget,\r\n  BudgetStatus,\r\n  Invoice,\r\n  InvoiceStatus,\r\n  PaymentMethod,\r\n  ExpenseCategory,\r\n  FinancialReport,\r\n  ReportType,\r\n  FinancialStats,\r\n  FinancialFilters\r\n} from '../../../types/finance';\r\n// Mock data imports removed\r\nconst FinanceManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('overview');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedType, setSelectedType] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\r\n  const [selectedAccount, setSelectedAccount] = useState<string>('');\r\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);\r\n  const [selectedBudget, setSelectedBudget] = useState<Budget | null>(null);\r\n  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\r\n  const [selectedReport, setSelectedReport] = useState<FinancialReport | null>(null);\r\n\r\n  // Modal states\r\n  const [transactionDetailOpened, { open: openTransactionDetail, close: closeTransactionDetail }] = useDisclosure(false);\r\n  const [addTransactionOpened, { open: openAddTransaction, close: closeAddTransaction }] = useDisclosure(false);\r\n  const [budgetDetailOpened, { open: openBudgetDetail, close: closeBudgetDetail }] = useDisclosure(false);\r\n  const [invoiceDetailOpened, { open: openInvoiceDetail, close: closeInvoiceDetail }] = useDisclosure(false);\r\n  const [reportDetailOpened, { open: openReportDetail, close: closeReportDetail }] = useDisclosure(false);\r\n  const [addBudgetOpened, { open: openAddBudget, close: closeAddBudget }] = useDisclosure(false);\r\n  const [createInvoiceOpened, { open: openCreateInvoice, close: closeCreateInvoice }] = useDisclosure(false);\r\n\r\n  // Filter transactions\r\n  const filteredTransactions = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((transaction) => {\r\n      const matchesSearch = \r\n        transaction.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        transaction.transactionId.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        transaction.reference?.toLowerCase().includes(searchQuery.toLowerCase() || '');\r\n      \r\n      const matchesType = !selectedType || transaction.type === selectedType;\r\n      const matchesStatus = !selectedStatus || transaction.status === selectedStatus;\r\n      const matchesCategory = !selectedCategory || transaction.category === selectedCategory;\r\n      const matchesAccount = !selectedAccount || transaction.account.name === selectedAccount;\r\n\r\n      return matchesSearch && matchesType && matchesStatus && matchesCategory && matchesAccount;\r\n    });\r\n  }, [searchQuery, selectedType, selectedStatus, selectedCategory, selectedAccount]);\r\n\r\n  // Helper functions\r\n  const getTransactionTypeColor = (type: TransactionType) => {\r\n    switch (type) {\r\n      case 'income': return 'green';\r\n      case 'expense': return 'red';\r\n      case 'transfer': return 'blue';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: TransactionStatus | BudgetStatus | InvoiceStatus) => {\r\n    switch (status) {\r\n      case 'completed':\r\n      case 'paid':\r\n      case 'active': return 'green';\r\n      case 'pending':\r\n      case 'draft': return 'orange';\r\n      case 'failed':\r\n      case 'overdue':\r\n      case 'cancelled':\r\n      case 'expired': return 'red';\r\n      case 'processing': return 'blue';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getAccountTypeColor = (type: AccountType) => {\r\n    switch (type) {\r\n      case 'checking': return 'blue';\r\n      case 'savings': return 'green';\r\n      case 'revenue': return 'teal';\r\n      case 'expense': return 'red';\r\n      case 'asset': return 'purple';\r\n      case 'liability': return 'orange';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getCategoryColor = (category: ExpenseCategory) => {\r\n    switch (category) {\r\n      case 'medical_supplies': return 'blue';\r\n      case 'equipment': return 'purple';\r\n      case 'salaries': return 'green';\r\n      case 'utilities': return 'orange';\r\n      case 'maintenance': return 'yellow';\r\n      case 'marketing': return 'pink';\r\n      case 'insurance': return 'cyan';\r\n      case 'other': return 'gray';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const handleViewTransaction = (transaction: Transaction) => {\r\n    setSelectedTransaction(transaction);\r\n    openTransactionDetail();\r\n  };\r\n\r\n  const handleViewBudget = (budget: Budget) => {\r\n    setSelectedBudget(budget);\r\n    openBudgetDetail();\r\n  };\r\n\r\n  const handleViewInvoice = (invoice: Invoice) => {\r\n    setSelectedInvoice(invoice);\r\n    openInvoiceDetail();\r\n  };\r\n\r\n  const handleViewReport = (report: FinancialReport) => {\r\n    setSelectedReport(report);\r\n    openReportDetail();\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchQuery('');\r\n    setSelectedType('');\r\n    setSelectedStatus('');\r\n    setSelectedCategory('');\r\n    setSelectedAccount('');\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-IN', {\r\n      style: 'currency',\r\n      currency: 'INR'\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatPercentage = (value: number | undefined) => {\r\n    return `${(value || 0).toFixed(1)}%`;\r\n  };\r\n\r\n  const formatDate = (date: string | Date) => {\r\n    const d = new Date(date);\r\n    const year = d.getFullYear();\r\n    const month = String(d.getMonth() + 1).padStart(2, '0');\r\n    const day = String(d.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  // Statistics cards\r\n  const statsCards = [\r\n    {\r\n      title: 'Total Revenue',\r\n      value: formatCurrency(0 /* TODO: Fetch from API */ || 0),\r\n      icon: IconTrendingUp,\r\n      color: 'green',\r\n      trend: '+12.5%'\r\n    },\r\n    {\r\n      title: 'Total Expenses',\r\n      value: formatCurrency(0 /* TODO: Fetch from API */ || 0),\r\n      icon: IconTrendingDown,\r\n      color: 'red',\r\n      trend: '+8.3%'\r\n    },\r\n    {\r\n      title: 'Net Profit',\r\n      value: formatCurrency(0 /* TODO: Fetch from API */ || 0),\r\n      icon: IconWallet,\r\n      color: 'blue',\r\n      trend: '+18.7%'\r\n    },\r\n    {\r\n      title: 'Cash Flow',\r\n      value: formatCurrency(typeof 0 /* TODO: Fetch from API */ === 'number' ? 0 /* TODO: Fetch from API */ : 0),\r\n      icon: IconCash,\r\n      color: 'purple',\r\n      trend: '+5.2%'\r\n    }\r\n  ];\r\n\r\n  // Chart data\r\n  const revenueExpenseData = [\r\n    { name: 'Revenue', value: 0 /* TODO: Fetch from API */ || 0, color: 'green' },\r\n    { name: 'Expenses', value: 0 /* TODO: Fetch from API */ || 0, color: 'red' }\r\n  ];\r\n\r\n  const monthlyRevenueData = 0 /* TODO: Fetch from API */ || [];\r\n  const expenseCategoryData = (0 /* TODO: Fetch from API */ || []).map(item => ({\r\n    ...item,\r\n    color: getCategoryColor(item.category as ExpenseCategory)\r\n  }));\r\n  const cashFlowData = Array.isArray(0 /* TODO: Fetch from API */) ? 0 /* TODO: Fetch from API */ : [];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Financial Management & Accounting</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage finances, accounting, budgets, and financial reporting\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={openAddTransaction}\r\n            color=\"blue\"\r\n          >\r\n            New Transaction\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconFileInvoice size={16} />}\r\n            color=\"green\"\r\n            onClick={openCreateInvoice}\r\n          >\r\n            Create Invoice\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Statistics Cards */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {statsCards.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n              <Group justify=\"space-between\" mt=\"sm\">\r\n                <Badge \r\n                  color={stat.trend.includes('+') ? 'green' : stat.trend.includes('-') ? 'red' : 'blue'} \r\n                  variant=\"light\"\r\n                  size=\"sm\"\r\n                >\r\n                  {stat.trend}\r\n                </Badge>\r\n                <Text size=\"xs\" c=\"dimmed\">vs last month</Text>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"overview\" leftSection={<IconChartBar size={16} />}>\r\n            Overview\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"transactions\" leftSection={<IconReceipt size={16} />}>\r\n            Transactions\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"accounts\" leftSection={<IconBuildingBank size={16} />}>\r\n            Accounts\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"budgets\" leftSection={<IconBriefcase size={16} />}>\r\n            Budgets\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"invoices\" leftSection={<IconFileInvoice size={16} />}>\r\n            Invoices\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"reports\" leftSection={<IconReportAnalytics size={16} />}>\r\n            Reports\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Overview Tab */}\r\n        <Tabs.Panel value=\"overview\">\r\n          <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\" mt=\"md\">\r\n            {/* Revenue vs Expenses */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Revenue vs Expenses</Title>\r\n              <MantineDonutChart\r\n                data={revenueExpenseData}\r\n                size={200}\r\n                thickness={40}\r\n                withLabels\r\n              />\r\n            </Card>\r\n            \r\n            {/* Monthly Revenue Trend */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Monthly Revenue Trend</Title>\r\n              <SimpleAreaChart\r\n                data={monthlyRevenueData}\r\n                dataKey=\"month\"\r\n                series={[\r\n                  { name: 'revenue', color: 'green.6' },\r\n                  { name: 'expenses', color: 'red.6' }\r\n                ]}\r\n              />\r\n            </Card>\r\n            \r\n            {/* Expense Categories */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Expenses by Category</Title>\r\n              <MantineDonutChart\r\n                data={expenseCategoryData}\r\n                size={200}\r\n                thickness={30}\r\n                withLabels\r\n              />\r\n            </Card>\r\n            \r\n            {/* Cash Flow */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Cash Flow Analysis</Title>\r\n              <SimpleBarChart\r\n                data={cashFlowData}\r\n                dataKey=\"month\"\r\n                series={[\r\n                  { name: 'inflow', color: 'green.6' },\r\n                  { name: 'outflow', color: 'red.6' }\r\n                ]}\r\n              />\r\n            </Card>\r\n          </SimpleGrid>\r\n\r\n          {/* Quick Financial Summary */}\r\n          <Card padding=\"lg\" radius=\"md\" withBorder mt=\"lg\">\r\n            <Title order={4} mb=\"md\">Financial Summary</Title>\r\n            <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }}>\r\n              <div style={{ textAlign: 'center' }}>\r\n                <RingProgress\r\n                  size={100}\r\n                  thickness={8}\r\n                  sections={[{ \r\n                    value: ((0 /* TODO: Fetch from API */ || 0) / 100) * 100, \r\n                    color: (0 /* TODO: Fetch from API */ || 0) > 0 ? 'green' : 'red' \r\n                  }]}\r\n                  label={\r\n                    <Text size=\"sm\" fw={700} ta=\"center\">\r\n                      {formatPercentage(0 /* TODO: Fetch from API */)}\r\n                    </Text>\r\n                  }\r\n                />\r\n                <Text size=\"xs\" c=\"dimmed\" mt=\"xs\">Profit Margin</Text>\r\n              </div>\r\n              \r\n              <div style={{ textAlign: 'center' }}>\r\n                <Text size=\"xl\" fw={700} c=\"green\">\r\n                  {formatCurrency(0 /* TODO: Fetch from API */ || 0)}\r\n                </Text>\r\n                <Text size=\"xs\" c=\"dimmed\">Accounts Receivable</Text>\r\n              </div>\r\n              \r\n              <div style={{ textAlign: 'center' }}>\r\n                <Text size=\"xl\" fw={700} c=\"red\">\r\n                  {formatCurrency(0 /* TODO: Fetch from API */ || 0)}\r\n                </Text>\r\n                <Text size=\"xs\" c=\"dimmed\">Accounts Payable</Text>\r\n              </div>\r\n              \r\n              <div style={{ textAlign: 'center' }}>\r\n                <Text size=\"xl\" fw={700} c=\"blue\">\r\n                  {formatCurrency(0 /* TODO: Fetch from API */ || 0)}\r\n                </Text>\r\n                <Text size=\"xs\" c=\"dimmed\">Total Assets</Text>\r\n              </div>\r\n            </SimpleGrid>\r\n          </Card>\r\n        </Tabs.Panel>\r\n\r\n        {/* Transactions Tab */}\r\n        <Tabs.Panel value=\"transactions\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search transactions...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Type\"\r\n                data={[\r\n                  { value: 'income', label: 'Income' },\r\n                  { value: 'expense', label: 'Expense' },\r\n                  { value: 'transfer', label: 'Transfer' }\r\n                ]}\r\n                value={selectedType}\r\n                onChange={setSelectedType}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'pending', label: 'Pending' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'failed', label: 'Failed' },\r\n                  { value: 'cancelled', label: 'Cancelled' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Category\"\r\n                data={[\r\n                  { value: 'medical_supplies', label: 'Medical Supplies' },\r\n                  { value: 'equipment', label: 'Equipment' },\r\n                  { value: 'salaries', label: 'Salaries' },\r\n                  { value: 'utilities', label: 'Utilities' },\r\n                  { value: 'maintenance', label: 'Maintenance' },\r\n                  { value: 'marketing', label: 'Marketing' },\r\n                  { value: 'insurance', label: 'Insurance' },\r\n                  { value: 'other', label: 'Other' }\r\n                ]}\r\n                value={selectedCategory}\r\n                onChange={setSelectedCategory}\r\n                clearable\r\n              />\r\n              <Button variant=\"light\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Transactions Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Transaction ID</Table.Th>\r\n                    <Table.Th>Date</Table.Th>\r\n                    <Table.Th>Description</Table.Th>\r\n                    <Table.Th>Type</Table.Th>\r\n                    <Table.Th>Category</Table.Th>\r\n                    <Table.Th>Amount</Table.Th>\r\n                    <Table.Th>Account</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredTransactions.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={8}>\r\n                        <EmptyState\r\n                          icon={<IconCash size={48} />}\r\n                          title=\"No financial records\"\r\n                          description=\"Add financial transactions\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredTransactions.map((transaction) => (\r\n                      <Table.Tr key={transaction.id}>\r\n                        <Table.Td>\r\n                          <Text fw={500}>{transaction.transactionId}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500} component=\"span\">\r\n                              {formatDate(transaction.date)}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\" component=\"span\">\r\n                              {new Date(transaction.date).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}\r\n                            </Text>\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500} lineClamp={1}>\r\n                              {transaction.description}\r\n                            </Text>\r\n                            {transaction.reference && (\r\n                              <Text size=\"xs\" c=\"dimmed\">\r\n                                Ref: {transaction.reference}\r\n                              </Text>\r\n                            )}\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getTransactionTypeColor(transaction.type)} variant=\"light\">\r\n                            {transaction.type.toUpperCase()}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getCategoryColor(transaction.category)} variant=\"light\" size=\"sm\">\r\n                            {transaction.category.replace('_', ' ')}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text \r\n                            size=\"sm\" \r\n                            fw={600} \r\n                            c={transaction.type === 'income' ? 'green' : transaction.type === 'expense' ? 'red' : 'blue'}\r\n                          >\r\n                            {transaction.type === 'income' ? '+' : transaction.type === 'expense' ? '-' : ''}\r\n                            {formatCurrency(transaction.amount)}\r\n                          </Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>{transaction.account.name}</Text>\r\n                            <Badge color={getAccountTypeColor(transaction.account.type)} variant=\"light\" size=\"xs\">\r\n                              {transaction.account.type}\r\n                            </Badge>\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getStatusColor(transaction.status)} variant=\"light\">\r\n                            {transaction.status}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon\r\n                              variant=\"subtle\"\r\n                              color=\"blue\"\r\n                              onClick={() => handleViewTransaction(transaction)}\r\n                            >\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"green\">\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                              <IconDownload size={16} />\r\n                            </ActionIcon>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))\r\n                  )}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Accounts Tab */}\r\n        <Tabs.Panel value=\"accounts\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Chart of Accounts</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Add Account\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Accounts Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((account) => (\r\n                <Card key={account.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{account.name}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{account.code}</Text>\r\n                    </div>\r\n                    <Badge color={getAccountTypeColor(account.type)} variant=\"light\">\r\n                      {account.type.replace('_', ' ').toUpperCase()}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Current Balance</Text>\r\n                      <Text size=\"lg\" fw={700} c={account.balance >= 0 ? 'green' : 'red'}>\r\n                        {formatCurrency(account.balance)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Account Number</Text>\r\n                      <Text size=\"sm\" fw={500}>{account.accountNumber}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Bank/Institution</Text>\r\n                      <Text size=\"sm\">{account.bankName || 'N/A'}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Status</Text>\r\n                      <Badge color={account.isActive ? 'green' : 'red'} variant=\"light\">\r\n                        {account.isActive ? 'Active' : 'Inactive'}\r\n                      </Badge>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {account.description && (\r\n                    <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"md\">\r\n                      {account.description}\r\n                    </Text>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Opened: {formatDate(account.createdDate)}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconFileSpreadsheet size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Budgets Tab */}\r\n        <Tabs.Panel value=\"budgets\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Budget Management</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />} onClick={openAddBudget}>\r\n                  Create Budget\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconReportAnalytics size={16} />}>\r\n                  Budget Report\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Budgets Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((budget) => (\r\n                <Card key={budget.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{budget.name}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{budget.description || 'No description'}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(budget.status)} variant=\"light\">\r\n                      {budget.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Budget Period</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {formatDate(budget.startDate)} - {formatDate(budget.endDate)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Allocated Amount</Text>\r\n                      <Text size=\"sm\" fw={600} c=\"blue\">\r\n                        {formatCurrency(budget.allocatedAmount)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Spent Amount</Text>\r\n                      <Text size=\"sm\" fw={600} c={budget.spentAmount > budget.allocatedAmount ? 'red' : 'green'}>\r\n                        {formatCurrency(budget.spentAmount)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Remaining</Text>\r\n                      <Text size=\"sm\" fw={600} c={budget.remainingAmount < 0 ? 'red' : 'green'}>\r\n                        {formatCurrency(budget.remainingAmount)}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <div style={{ marginBottom: '1rem' }}>\r\n                    <Group justify=\"space-between\" mb=\"xs\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Budget Utilization</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {formatPercentage(budget.utilizationPercentage)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Progress \r\n                      value={budget.utilizationPercentage} \r\n                      size=\"md\" \r\n                      color={\r\n                        budget.utilizationPercentage > 100 ? 'red' : \r\n                        budget.utilizationPercentage > 80 ? 'orange' : \r\n                        'green'\r\n                      }\r\n                    />\r\n                  </div>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Category: {budget.category.replace('_', ' ')}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewBudget(budget)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Invoices Tab */}\r\n        <Tabs.Panel value=\"invoices\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Invoice Management</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />} onClick={openCreateInvoice}>\r\n                  Create Invoice\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconDownload size={16} />}>\r\n                  Export Invoices\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Invoices Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((invoice) => (\r\n                <Card key={invoice.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{invoice.invoiceNumber}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {(invoice as any).patient ? `${(invoice as any).patient.firstName} ${(invoice as any).patient.lastName}` : 'Corporate Client'}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(invoice.status)} variant=\"light\">\r\n                      {invoice.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Invoice Date</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {(invoice as any).invoiceDate ? formatDate((invoice as any).invoiceDate) : 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Due Date</Text>\r\n                      <Text size=\"sm\" fw={500} c={new Date(invoice.dueDate) < new Date() && invoice.status !== 'paid' ? 'red' : undefined}>\r\n                        {formatDate(invoice.dueDate)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Subtotal</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {formatCurrency((invoice as any).subtotal || 0)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Tax ({formatPercentage((invoice as any).taxRate)})</Text>\r\n                      <Text size=\"sm\">\r\n                        {formatCurrency(invoice.taxAmount)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Discount</Text>\r\n                      <Text size=\"sm\" c=\"green\">\r\n                        -{formatCurrency(invoice.discountAmount)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Divider />\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" fw={600}>Total Amount</Text>\r\n                      <Text size=\"lg\" fw={700} c=\"blue\">\r\n                        {formatCurrency(invoice.totalAmount)}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Payment Method: {invoice.paymentMethod}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewInvoice(invoice)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Reports Tab */}\r\n        <Tabs.Panel value=\"reports\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Financial Reports</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />}>\r\n                  Generate Report\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconDownload size={16} />}>\r\n                  Export All\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Reports Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((report) => (\r\n                <Card key={report.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{report.title}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{report.reportType.replace('_', ' ').toUpperCase()}</Text>\r\n                    </div>\r\n                    <ThemeIcon color=\"blue\" variant=\"light\">\r\n                      <IconReportAnalytics size={20} />\r\n                    </ThemeIcon>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Period</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {formatDate(report.startDate)} - {formatDate(report.endDate)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Generated</Text>\r\n                      <Text size=\"sm\">\r\n                        {formatDate(report.generatedDate)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Generated By</Text>\r\n                      <Text size=\"sm\">{report.generatedBy}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {(report as any).summary && (\r\n                    <Text size=\"sm\" c=\"dimmed\" lineClamp={3} mb=\"md\">\r\n                      {(report as any).summary}\r\n                    </Text>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      File Size: {((report as any).fileSize ? ((report as any).fileSize / 1024).toFixed(0) : 'N/A')} KB\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewReport(report)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconShare size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Transaction Detail Modal */}\r\n      <Modal\r\n        opened={transactionDetailOpened}\r\n        onClose={closeTransactionDetail}\r\n        title=\"Transaction Details\"\r\n        size=\"lg\"\r\n      >\r\n        {selectedTransaction && (\r\n          <Stack gap=\"md\">\r\n            <Group>\r\n              <ThemeIcon color={getTransactionTypeColor(selectedTransaction.type)} size=\"xl\" variant=\"light\">\r\n                <IconReceipt size={24} />\r\n              </ThemeIcon>\r\n              <div>\r\n                <Title order={3}>{selectedTransaction.description}</Title>\r\n                <Text c=\"dimmed\">Transaction ID: {selectedTransaction.transactionId}</Text>\r\n                <Badge color={getStatusColor(selectedTransaction.status)} variant=\"light\" mt=\"xs\">\r\n                  {selectedTransaction.status}\r\n                </Badge>\r\n              </div>\r\n            </Group>\r\n\r\n            <Divider />\r\n\r\n            <SimpleGrid cols={2}>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Amount</Text>\r\n                <Text size=\"lg\" fw={700} c={getTransactionTypeColor(selectedTransaction.type)}>\r\n                  {selectedTransaction.type === 'income' ? '+' : selectedTransaction.type === 'expense' ? '-' : ''}\r\n                  {formatCurrency(selectedTransaction.amount)}\r\n                </Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Type</Text>\r\n                <Badge color={getTransactionTypeColor(selectedTransaction.type)} variant=\"light\">\r\n                  {selectedTransaction.type.toUpperCase()}\r\n                </Badge>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Date</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">\r\n                  {formatDate(selectedTransaction.date)}\r\n                </Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Category</Text>\r\n                <Badge color={getCategoryColor(selectedTransaction.category)} variant=\"light\">\r\n                  {selectedTransaction.category.replace('_', ' ')}\r\n                </Badge>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Account</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">{selectedTransaction.account.name}</Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Payment Method</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">{selectedTransaction.paymentMethod}</Text>\r\n              </div>\r\n            </SimpleGrid>\r\n\r\n            {selectedTransaction.reference && (\r\n              <>\r\n                <Divider />\r\n                <div>\r\n                  <Text size=\"sm\" fw={500} mb=\"sm\">Reference</Text>\r\n                  <Text size=\"sm\">{selectedTransaction.reference}</Text>\r\n                </div>\r\n              </>\r\n            )}\r\n\r\n            {selectedTransaction.notes && (\r\n              <>\r\n                <Divider />\r\n                <div>\r\n                  <Text size=\"sm\" fw={500} mb=\"sm\">Notes</Text>\r\n                  <Text size=\"sm\">{selectedTransaction.notes}</Text>\r\n                </div>\r\n              </>\r\n            )}\r\n\r\n            <Group justify=\"flex-end\">\r\n              <Button variant=\"light\" onClick={closeTransactionDetail}>\r\n                Close\r\n              </Button>\r\n              <Button leftSection={<IconDownload size={16} />}>\r\n                Download Receipt\r\n              </Button>\r\n              <Button leftSection={<IconEdit size={16} />}>\r\n                Edit Transaction\r\n              </Button>\r\n            </Group>\r\n          </Stack>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Add Transaction Modal */}\r\n      <Modal\r\n        opened={addTransactionOpened}\r\n        onClose={closeAddTransaction}\r\n        title=\"Add New Transaction\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Transaction Type\"\r\n              placeholder=\"Select type\"\r\n              data={[\r\n                { value: 'income', label: 'Income' },\r\n                { value: 'expense', label: 'Expense' },\r\n                { value: 'transfer', label: 'Transfer' }\r\n              ]}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Category\"\r\n              placeholder=\"Select category\"\r\n              data={[\r\n                { value: 'medical_supplies', label: 'Medical Supplies' },\r\n                { value: 'equipment', label: 'Equipment' },\r\n                { value: 'salaries', label: 'Salaries' },\r\n                { value: 'utilities', label: 'Utilities' },\r\n                { value: 'maintenance', label: 'Maintenance' },\r\n                { value: 'marketing', label: 'Marketing' },\r\n                { value: 'insurance', label: 'Insurance' },\r\n                { value: 'other', label: 'Other' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <TextInput\r\n            label=\"Description\"\r\n            placeholder=\"Enter transaction description\"\r\n            required\r\n          />\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <NumberInput\r\n              label=\"Amount\"\r\n              placeholder=\"Enter amount\"\r\n              min={0}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Account\"\r\n              placeholder=\"Select account\"\r\n              data={[].map /* TODO: Fetch from API */(account => ({\r\n                value: account.id,\r\n                label: account.name\r\n              }))}\r\n              onChange={(value) => value || ''}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <DatePickerInput\r\n              label=\"Transaction Date\"\r\n              placeholder=\"Select date\"\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Payment Method\"\r\n              placeholder=\"Select payment method\"\r\n              data={[\r\n                { value: 'cash', label: 'Cash' },\r\n                { value: 'bank_transfer', label: 'Bank Transfer' },\r\n                { value: 'card', label: 'Card' },\r\n                { value: 'check', label: 'Check' },\r\n                { value: 'upi', label: 'UPI' }\r\n              ]}\r\n              onChange={(value) => value || ''}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <TextInput\r\n            label=\"Reference\"\r\n            placeholder=\"Enter reference number (optional)\"\r\n          />\r\n          \r\n          <Textarea\r\n            label=\"Notes\"\r\n            placeholder=\"Enter additional notes (optional)\"\r\n            rows={3}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddTransaction}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Transaction Added',\r\n                message: 'Financial transaction has been successfully recorded',\r\n                color: 'green',\r\n              });\r\n              closeAddTransaction();\r\n            }}>\r\n              Add Transaction\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* Create Invoice Modal */}\r\n      <Modal\r\n        opened={createInvoiceOpened}\r\n        onClose={closeCreateInvoice}\r\n        title=\"Create New Invoice\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Patient/Client\"\r\n              placeholder=\"Select patient or client\"\r\n              data={[].map /* TODO: Fetch from API */(patient => ({\r\n                value: patient.id,\r\n                label: `${patient.firstName} ${patient.lastName}`\r\n              }))}\r\n              required\r\n            />\r\n            <TextInput\r\n              label=\"Invoice Number\"\r\n              placeholder=\"Auto-generated\"\r\n              disabled\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <DatePickerInput\r\n              label=\"Invoice Date\"\r\n              placeholder=\"Select invoice date\"\r\n              required\r\n            />\r\n            <DatePickerInput\r\n              label=\"Due Date\"\r\n              placeholder=\"Select due date\"\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Divider label=\"Invoice Items\" labelPosition=\"left\" />\r\n          \r\n          <Card withBorder p=\"md\">\r\n            <Stack gap=\"sm\">\r\n              <SimpleGrid cols={4}>\r\n                <TextInput placeholder=\"Service/Item\" />\r\n                <NumberInput placeholder=\"Quantity\" min={1} />\r\n                <NumberInput placeholder=\"Rate\" min={0} />\r\n                <NumberInput placeholder=\"Amount\" disabled />\r\n              </SimpleGrid>\r\n              <Button variant=\"light\" size=\"sm\" leftSection={<IconPlus size={14} />}>\r\n                Add Item\r\n              </Button>\r\n            </Stack>\r\n          </Card>\r\n          \r\n          <SimpleGrid cols={3}>\r\n            <NumberInput\r\n              label=\"Subtotal\"\r\n              placeholder=\"Calculated automatically\"\r\n              disabled\r\n            />\r\n            <NumberInput\r\n              label=\"Tax Rate (%)\"\r\n              placeholder=\"Enter tax rate\"\r\n              min={0}\r\n              max={100}\r\n            />\r\n            <NumberInput\r\n              label=\"Discount\"\r\n              placeholder=\"Enter discount amount\"\r\n              min={0}\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Group justify=\"space-between\">\r\n            <Text fw={600}>Total Amount:</Text>\r\n            <Text size=\"xl\" fw={700} c=\"blue\">₹0.00</Text>\r\n          </Group>\r\n          \r\n          <Select\r\n            label=\"Payment Method\"\r\n            placeholder=\"Select payment method\"\r\n            data={[\r\n              { value: 'cash', label: 'Cash' },\r\n              { value: 'card', label: 'Card' },\r\n              { value: 'upi', label: 'UPI' },\r\n              { value: 'bank_transfer', label: 'Bank Transfer' },\r\n              { value: 'insurance', label: 'Insurance' }\r\n            ]}\r\n            required\r\n          />\r\n          \r\n          <Textarea\r\n            label=\"Notes\"\r\n            placeholder=\"Additional notes or terms\"\r\n            rows={3}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeCreateInvoice}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Invoice Created',\r\n                message: 'Invoice has been successfully created',\r\n                color: 'green',\r\n              });\r\n              closeCreateInvoice();\r\n            }}>\r\n              Create Invoice\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FinanceManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\hr\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Alert' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'NumberInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Stepper' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 32,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 34,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Loader' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 35,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Highlight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 36,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'FileButton' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 38,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ColorSwatch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 39,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Code' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 40,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Spoiler' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 41,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Mark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 42,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Switch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 44,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Checkbox' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 45,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Radio' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 46,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PasswordInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 47,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Calendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 55,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DatePickerInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 55,
        "column": 20,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlertCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileText' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 71,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 74,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 74,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUser' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 75,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAward' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 80,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconWallet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCreditCard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 86,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 86,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBuildingBank' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 87,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 89,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboardCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 90,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 90,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUserCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 91,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 91,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBuilding' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 92,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Department' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 102,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 102,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Role' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 103,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 103,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Payroll' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 106,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 106,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LeaveType' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 112,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 112,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Training' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 113,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 113,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Attendance' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 115,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'HRStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 117,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'HRFilters' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 118,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 118,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedShift' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 132,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 132,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedReview' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 133,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 133,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedLeave' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 134,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 134,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'shiftDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 139,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 139,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeShiftDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 139,
        "column": 61,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 139,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'reviewDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 140,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 140,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeReviewDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 140,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 140,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'leaveDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 141,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 141,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeLeaveDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 141,
        "column": 61,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 141,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'payrollDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 142,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 142,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'openPayrollDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 142,
        "column": 39,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 142,
        "endColumn": 56
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closePayrollDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 142,
        "column": 65,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 142,
        "endColumn": 83
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'addShiftOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 143,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 143,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeAddShift' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 143,
        "column": 55,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 143,
        "endColumn": 68
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'createReviewOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 144,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 144,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeCreateReview' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 144,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 144,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleDeleteEmployee' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 245,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 245,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 58,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Alert,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Timeline,\r\n  Stepper,\r\n  RingProgress,\r\n  Tooltip,\r\n  List,\r\n  Image,\r\n  Loader,\r\n  Highlight,\r\n  Accordion,\r\n  FileButton,\r\n  ColorSwatch,\r\n  Code,\r\n  Spoiler,\r\n  Mark,\r\n  Rating,\r\n  Switch,\r\n  Checkbox,\r\n  Radio,\r\n  PasswordInput,\r\n  MultiSelect,\r\n  SimpleGrid\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleBarChart, SimpleLineChart } from '../../../components/MantineChart';\r\nimport { Calendar, DatePickerInput } from '@mantine/dates';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconCalendar,\r\n  IconUsers,\r\n  IconChartBar,\r\n  IconPhone,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconClock,\r\n  IconFileText,\r\n  IconDownload,\r\n  IconCalculator,\r\n  IconFilter,\r\n  IconUser,\r\n  IconUserPlus,\r\n  IconUserCheck,\r\n  IconUserX,\r\n  IconSchool,\r\n  IconAward,\r\n  IconStar,\r\n  IconCalendarEvent,\r\n  IconCalendarTime,\r\n  IconCurrencyDollar,\r\n  IconWallet,\r\n  IconCreditCard,\r\n  IconBuildingBank,\r\n  IconTrophy,\r\n  IconLock,\r\n  IconClipboardCheck,\r\n  IconUserCircle,\r\n  IconBuilding,\r\n  IconCertificate,\r\n  IconSend,\r\n  IconBriefcase\r\n} from '@tabler/icons-react';\r\n\r\n// Import types and mock data\r\nimport {\r\n  Employee,\r\n  EmployeeStatus,\r\n  Department,\r\n  Role,\r\n  Shift,\r\n  ShiftStatus,\r\n  Payroll,\r\n  PayrollStatus,\r\n  PerformanceReview,\r\n  ReviewStatus,\r\n  LeaveRequest,\r\n  LeaveStatus,\r\n  LeaveType,\r\n  Training,\r\n  TrainingStatus,\r\n  Attendance,\r\n  AttendanceStatus,\r\n  HRStats,\r\n  HRFilters\r\n} from '../../../types/hr';\r\n// Mock data imports removed\r\n\r\nconst HRManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('employees');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedDepartment, setSelectedDepartment] = useState<string>('');\r\n  const [selectedRole, setSelectedRole] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedShiftStatus, setSelectedShiftStatus] = useState<string>('');\r\n  const [selectedLeaveStatus, setSelectedLeaveStatus] = useState<string>('');\r\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\r\n  const [selectedShift, setSelectedShift] = useState<Shift | null>(null);\r\n  const [selectedReview, setSelectedReview] = useState<PerformanceReview | null>(null);\r\n  const [selectedLeave, setSelectedLeave] = useState<LeaveRequest | null>(null);\r\n\r\n  // Modal states\r\n  const [employeeDetailOpened, { open: openEmployeeDetail, close: closeEmployeeDetail }] = useDisclosure(false);\r\n  const [addEmployeeOpened, { open: openAddEmployee, close: closeAddEmployee }] = useDisclosure(false);\r\n  const [shiftDetailOpened, { open: openShiftDetail, close: closeShiftDetail }] = useDisclosure(false);\r\n  const [reviewDetailOpened, { open: openReviewDetail, close: closeReviewDetail }] = useDisclosure(false);\r\n  const [leaveDetailOpened, { open: openLeaveDetail, close: closeLeaveDetail }] = useDisclosure(false);\r\n  const [payrollDetailOpened, { open: openPayrollDetail, close: closePayrollDetail }] = useDisclosure(false);\r\n  const [addShiftOpened, { open: openAddShift, close: closeAddShift }] = useDisclosure(false);\r\n  const [createReviewOpened, { open: openCreateReview, close: closeCreateReview }] = useDisclosure(false);\r\n\r\n  // Filter employees\r\n  const filteredEmployees = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((employee) => {\r\n      const matchesSearch = \r\n        employee.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        employee.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        employee.employeeId.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        employee.email.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesDepartment = !selectedDepartment || (employee.department as any)?.name === selectedDepartment;\r\n      const matchesRole = !selectedRole || (employee as any).role === selectedRole;\r\n      const matchesStatus = !selectedStatus || employee.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesDepartment && matchesRole && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedDepartment, selectedRole, selectedStatus]);\r\n\r\n  // Filter shifts\r\n  const filteredShifts = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((shift) => {\r\n      const matchesSearch = \r\n        shift.employee.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        shift.employee.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        shift.shiftId.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesStatus = !selectedShiftStatus || shift.status === selectedShiftStatus;\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedShiftStatus]);\r\n\r\n  // Filter leave requests\r\n  const filteredLeaveRequests = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((leave) => {\r\n      const matchesSearch = \r\n        (leave as any).employee?.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        (leave as any).employee?.lastName?.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesStatus = !selectedLeaveStatus || leave.status === selectedLeaveStatus;\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedLeaveStatus]);\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: EmployeeStatus | ShiftStatus | PayrollStatus | ReviewStatus | LeaveStatus | TrainingStatus | AttendanceStatus) => {\r\n    switch (status) {\r\n      case 'active':\r\n      case 'scheduled':\r\n      case 'processed':\r\n      case 'completed':\r\n      case 'approved':\r\n      case 'present': return 'green';\r\n      case 'inactive':\r\n      case 'cancelled':\r\n      case 'rejected':\r\n      case 'absent': return 'red';\r\n      case 'on_leave':\r\n      case 'pending':\r\n      case 'draft':\r\n      case 'in_progress':\r\n      case 'late': return 'orange';\r\n      case 'terminated': return 'gray';\r\n      default: return 'blue';\r\n    }\r\n  };\r\n\r\n  const getRoleColor = (role: string) => {\r\n    switch (role) {\r\n      case 'Doctor': return 'blue';\r\n      case 'Nurse': return 'green';\r\n      case 'Technician': return 'orange';\r\n      case 'Administrator': return 'purple';\r\n      case 'Receptionist': return 'cyan';\r\n      case 'Pharmacist': return 'pink';\r\n      case 'Therapist': return 'indigo';\r\n      case 'Support Staff': return 'gray';\r\n      default: return 'blue';\r\n    }\r\n  };\r\n\r\n  const getLeaveTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'sick': return 'red';\r\n      case 'vacation': return 'blue';\r\n      case 'personal': return 'green';\r\n      case 'emergency': return 'orange';\r\n      case 'maternity': return 'pink';\r\n      case 'paternity': return 'cyan';\r\n      case 'study': return 'purple';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const handleViewEmployee = (employee: Employee) => {\r\n    setSelectedEmployee(employee);\r\n    openEmployeeDetail();\r\n  };\r\n\r\n  const handleDeleteEmployee = (employee: any) => {\r\n    setSelectedEmployee(employee);\r\n    openEmployeeDetail();\r\n  };\r\n\r\n  const handleViewShift = (shift: Shift) => {\r\n    setSelectedShift(shift);\r\n    openShiftDetail();\r\n  };\r\n\r\n  const handleViewReview = (review: PerformanceReview) => {\r\n    setSelectedReview(review);\r\n    openReviewDetail();\r\n  };\r\n\r\n  const handleViewLeave = (leave: LeaveRequest) => {\r\n    setSelectedLeave(leave);\r\n    openLeaveDetail();\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchQuery('');\r\n    setSelectedDepartment('');\r\n    setSelectedRole('');\r\n    setSelectedStatus('');\r\n    setSelectedShiftStatus('');\r\n    setSelectedLeaveStatus('');\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-IN', {\r\n      style: 'currency',\r\n      currency: 'INR'\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatDate = (date: string | Date) => {\r\n    const d = new Date(date);\r\n    const year = d.getFullYear();\r\n    const month = String(d.getMonth() + 1).padStart(2, '0');\r\n    const day = String(d.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  // Statistics cards\r\n  const statsCards = [\r\n    {\r\n      title: 'Total Employees',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconUsers,\r\n      color: 'blue',\r\n      trend: '+5.2%'\r\n    },\r\n    {\r\n      title: 'Active Staff',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconUserCheck,\r\n      color: 'green',\r\n      trend: `${((0 /* TODO: Fetch from API */ / 0 /* TODO: Fetch from API */) * 100).toFixed(1)}%`\r\n    },\r\n    {\r\n      title: 'Open Positions',\r\n      value: 0,\r\n      icon: IconUserPlus,\r\n      color: 'orange',\r\n      trend: '+3'\r\n    },\r\n    {\r\n      title: 'Avg Satisfaction',\r\n      value: `0/10`,\r\n      icon: IconStar,\r\n      color: 'purple',\r\n      trend: '+0.3'\r\n    }\r\n  ];\r\n\r\n  // Chart data\r\n  const departmentData = [].map /* TODO: Fetch from API */((dept) => ({\r\n    name: dept.name,\r\n    value: (dept as any).employeeCount || 0,\r\n    color: getRoleColor(dept.name)\r\n  }));\r\n\r\n  const monthlyHiring = [];\r\n  const attendanceData = [];\r\n  const payrollData = [];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Human Resources & Staff Management</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage employees, schedules, payroll, and HR operations\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconUserPlus size={16} />}\r\n            onClick={openAddEmployee}\r\n            color=\"blue\"\r\n          >\r\n            Add Employee\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconCalendarTime size={16} />}\r\n            color=\"green\"\r\n          >\r\n            Schedule Shift\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Statistics Cards */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {statsCards.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n              <Group justify=\"space-between\" mt=\"sm\">\r\n                <Badge \r\n                  color={stat.trend.includes('+') ? 'green' : stat.trend.includes('-') ? 'red' : 'blue'} \r\n                  variant=\"light\"\r\n                  size=\"sm\"\r\n                >\r\n                  {stat.trend}\r\n                </Badge>\r\n                <Text size=\"xs\" c=\"dimmed\">vs last month</Text>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"employees\" leftSection={<IconUsers size={16} />}>\r\n            Employees\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"scheduling\" leftSection={<IconCalendarTime size={16} />}>\r\n            Scheduling\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"payroll\" leftSection={<IconCurrencyDollar size={16} />}>\r\n            Payroll\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"performance\" leftSection={<IconTrophy size={16} />}>\r\n            Performance\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"leave\" leftSection={<IconCalendarEvent size={16} />}>\r\n            Leave Management\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"training\" leftSection={<IconSchool size={16} />}>\r\n            Training\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconChartBar size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Employees Tab */}\r\n        <Tabs.Panel value=\"employees\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search employees...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Department\"\r\n                data={[].map /* TODO: Fetch from API */(dept => ({\r\n                  value: dept.name,\r\n                  label: dept.name\r\n                }))}\r\n                value={selectedDepartment}\r\n                onChange={setSelectedDepartment}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Role\"\r\n                data={[\r\n                  { value: 'Doctor', label: 'Doctor' },\r\n                  { value: 'Nurse', label: 'Nurse' },\r\n                  { value: 'Technician', label: 'Technician' },\r\n                  { value: 'Administrator', label: 'Administrator' },\r\n                  { value: 'Receptionist', label: 'Receptionist' },\r\n                  { value: 'Pharmacist', label: 'Pharmacist' }\r\n                ]}\r\n                value={selectedRole}\r\n                onChange={setSelectedRole}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'active', label: 'Active' },\r\n                  { value: 'inactive', label: 'Inactive' },\r\n                  { value: 'on_leave', label: 'On Leave' },\r\n                  { value: 'terminated', label: 'Terminated' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Button variant=\"light\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Employees Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Employee</Table.Th>\r\n                    <Table.Th>ID</Table.Th>\r\n                    <Table.Th>Role</Table.Th>\r\n                    <Table.Th>Department</Table.Th>\r\n                    <Table.Th>Join Date</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Salary</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredEmployees.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={8}>\r\n                        <EmptyState\r\n                          icon={<IconBriefcase size={48} />}\r\n                          title=\"No HR records\"\r\n                          description=\"Add employee records to get started\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredEmployees.map((employee) => (\r\n                      <Table.Tr key={employee.id}>\r\n                        <Table.Td>\r\n                          <Group>\r\n                            <Avatar color=\"blue\" radius=\"xl\">\r\n                              {employee.firstName[0]}{employee.lastName[0]}\r\n                            </Avatar>\r\n                            <div>\r\n                              <Text size=\"sm\" fw={500}>\r\n                                {employee.firstName} {employee.lastName}\r\n                              </Text>\r\n                              <Text size=\"xs\" c=\"dimmed\">\r\n                                {employee.email}\r\n                              </Text>\r\n                            </div>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      <Table.Td>\r\n                        <Text fw={500}>{employee.employeeId}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getRoleColor((employee as any).role)} variant=\"light\">\r\n                          {(employee as any).role}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>{(employee.department as any).name}</Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">\r\n                            Head: Dr. {(employee.department as any).head}\r\n                          </Text>\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">\r\n                          {formatDate((employee as any).joinDate)}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getStatusColor(employee.status)} variant=\"light\">\r\n                          {employee.status.replace('_', ' ')}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\" fw={500}>\r\n                          {formatCurrency((employee as any).salary)}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon\r\n                            variant=\"subtle\"\r\n                            color=\"blue\"\r\n                            onClick={() => handleViewEmployee(employee)}\r\n                          >\r\n                            <IconEye size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"green\">\r\n                            <IconEdit size={16} />\r\n                          </ActionIcon>\r\n                          <Menu>\r\n                            <Menu.Target>\r\n                              <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                                <IconDotsVertical size={16} />\r\n                              </ActionIcon>\r\n                            </Menu.Target>\r\n                            <Menu.Dropdown>\r\n                              <Menu.Item leftSection={<IconTrophy size={14} />}>\r\n                                Performance Review\r\n                              </Menu.Item>\r\n                              <Menu.Item leftSection={<IconCalendarEvent size={14} />}>\r\n                                Leave Request\r\n                              </Menu.Item>\r\n                              <Menu.Item leftSection={<IconCurrencyDollar size={14} />}>\r\n                                Payroll Details\r\n                              </Menu.Item>\r\n                              <Menu.Divider />\r\n                              <Menu.Item \r\n                                leftSection={<IconUserX size={14} />}\r\n                                color=\"red\"\r\n                              >\r\n                                Terminate\r\n                              </Menu.Item>\r\n                              <Menu.Item \r\n                                leftSection={<IconTrash size={14} />}\r\n                                color=\"red\"\r\n                              >\r\n                                Delete\r\n                              </Menu.Item>\r\n                            </Menu.Dropdown>\r\n                          </Menu>\r\n                        </Group>\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  )))\r\n                  }\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Scheduling Tab */}\r\n        <Tabs.Panel value=\"scheduling\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Staff Scheduling</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />} onClick={openAddShift}>\r\n                  Add Shift\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconCalendar size={16} />}>\r\n                  View Calendar\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Shift Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search shifts...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'scheduled', label: 'Scheduled' },\r\n                  { value: 'in_progress', label: 'In Progress' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'cancelled', label: 'Cancelled' }\r\n                ]}\r\n                value={selectedShiftStatus}\r\n                onChange={setSelectedShiftStatus}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Shifts Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Shift ID</Table.Th>\r\n                    <Table.Th>Employee</Table.Th>\r\n                    <Table.Th>Date</Table.Th>\r\n                    <Table.Th>Time</Table.Th>\r\n                    <Table.Th>Duration</Table.Th>\r\n                    <Table.Th>Department</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredShifts.map((shift) => (\r\n                    <Table.Tr key={shift.id}>\r\n                      <Table.Td>\r\n                        <Text fw={500}>{shift.shiftId}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group>\r\n                          <Avatar color=\"blue\" radius=\"xl\" size=\"sm\">\r\n                            {shift.employee.firstName[0]}{shift.employee.lastName[0]}\r\n                          </Avatar>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>\r\n                              {shift.employee.firstName} {shift.employee.lastName}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              {(shift.employee as any).role}\r\n                            </Text>\r\n                          </div>\r\n                        </Group>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">\r\n                          {formatDate(shift.date)}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>\r\n                            {shift.startTime} - {shift.endTime}\r\n                          </Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">\r\n                            {shift.shiftType}\r\n                          </Text>\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">{shift.duration}h</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">{shift.department}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getStatusColor(shift.status)} variant=\"light\">\r\n                          {shift.status.replace('_', ' ')}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon\r\n                            variant=\"subtle\"\r\n                            color=\"blue\"\r\n                            onClick={() => handleViewShift(shift)}\r\n                          >\r\n                            <IconEye size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"green\">\r\n                            <IconEdit size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"red\">\r\n                            <IconX size={16} />\r\n                          </ActionIcon>\r\n                        </Group>\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ))}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Payroll Tab */}\r\n        <Tabs.Panel value=\"payroll\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Payroll Management</Title>\r\n              <Group>\r\n                <Button leftSection={<IconCalculator size={16} />}>\r\n                  Calculate Payroll\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconDownload size={16} />}>\r\n                  Export Payroll\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Payroll Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((payroll) => (\r\n                <Card key={payroll.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">\r\n                        {(payroll as any).employee.firstName} {(payroll as any).employee.lastName}\r\n                      </Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {(payroll as any).employee.employeeId} - {(payroll as any).employee.role}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(payroll.status)} variant=\"light\">\r\n                      {payroll.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Pay Period</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {formatDate((payroll as any).payPeriodStart)} - {formatDate((payroll as any).payPeriodEnd)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Base Salary</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {formatCurrency((payroll as any).baseSalary)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Overtime</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {formatCurrency((payroll as any).overtimePay)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Bonuses</Text>\r\n                      <Text size=\"sm\" fw={500} c=\"green\">\r\n                        +{formatCurrency((payroll as any).bonuses)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Deductions</Text>\r\n                      <Text size=\"sm\" fw={500} c=\"red\">\r\n                        -{formatCurrency(payroll.deductions)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Divider />\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" fw={600}>Net Pay</Text>\r\n                      <Text size=\"lg\" fw={700} c=\"blue\">\r\n                        {formatCurrency((payroll as any).netPay)}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Hours: {(payroll as any).hoursWorked}h\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconSend size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Performance Tab */}\r\n        <Tabs.Panel value=\"performance\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Performance Reviews</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />} onClick={openCreateReview}>\r\n                  Create Review\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconTrophy size={16} />}>\r\n                  Performance Report\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Performance Reviews Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((review) => (\r\n                <Card key={review.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">\r\n                        {review.employee.firstName} {review.employee.lastName}\r\n                      </Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {review.reviewType} Review - {review.reviewPeriod}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(review.status)} variant=\"light\">\r\n                      {review.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Overall Rating</Text>\r\n                      <div>\r\n                        <Rating value={review.overallRating} readOnly size=\"sm\" />\r\n                        <Text size=\"sm\" fw={500} ta=\"center\">\r\n                          {review.overallRating}/5\r\n                        </Text>\r\n                      </div>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Reviewer</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {review.reviewer}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Review Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {formatDate(review.reviewDate)}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Accordion variant=\"contained\" mb=\"md\">\r\n                    <Accordion.Item value=\"details\">\r\n                      <Accordion.Control>Performance Areas</Accordion.Control>\r\n                      <Accordion.Panel>\r\n                        <Stack gap=\"xs\">\r\n                          <Group justify=\"space-between\">\r\n                            <Text size=\"sm\">Communication</Text>\r\n                            <Rating value={review.ratings.communication} readOnly size=\"xs\" />\r\n                          </Group>\r\n                          <Group justify=\"space-between\">\r\n                            <Text size=\"sm\">Teamwork</Text>\r\n                            <Rating value={review.ratings.teamwork} readOnly size=\"xs\" />\r\n                          </Group>\r\n                          <Group justify=\"space-between\">\r\n                            <Text size=\"sm\">Technical Skills</Text>\r\n                            <Rating value={review.ratings.technicalSkills} readOnly size=\"xs\" />\r\n                          </Group>\r\n                          <Group justify=\"space-between\">\r\n                            <Text size=\"sm\">Leadership</Text>\r\n                            <Rating value={review.ratings.leadership} readOnly size=\"xs\" />\r\n                          </Group>\r\n                        </Stack>\r\n                      </Accordion.Panel>\r\n                    </Accordion.Item>\r\n                  </Accordion>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Next Review: {formatDate(review.nextReviewDate)}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewReview(review)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Leave Management Tab */}\r\n        <Tabs.Panel value=\"leave\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Leave Management</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />}>\r\n                  Submit Leave Request\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconCalendarEvent size={16} />}>\r\n                  Leave Calendar\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Leave Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search leave requests...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'pending', label: 'Pending' },\r\n                  { value: 'approved', label: 'Approved' },\r\n                  { value: 'rejected', label: 'Rejected' },\r\n                  { value: 'cancelled', label: 'Cancelled' }\r\n                ]}\r\n                value={selectedLeaveStatus}\r\n                onChange={setSelectedLeaveStatus}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Leave Requests Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {filteredLeaveRequests.map((leave) => (\r\n                <Card key={leave.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">\r\n                        {(leave as any).employee.firstName} {(leave as any).employee.lastName}\r\n                      </Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {(leave as any).employee.role} - {(leave as any).employee.department.name}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(leave.status)} variant=\"light\">\r\n                      {leave.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Leave Type</Text>\r\n                      <Badge color={getLeaveTypeColor(leave.leaveType)} variant=\"light\">\r\n                        {leave.leaveType.toUpperCase()}\r\n                      </Badge>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Duration</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {(leave as any).duration} days\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Start Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {formatDate(leave.startDate)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">End Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {formatDate(leave.endDate)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Applied On</Text>\r\n                      <Text size=\"sm\">\r\n                        {formatDate((leave as any).appliedDate)}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {leave.reason && (\r\n                    <div style={{ marginBottom: '1rem' }}>\r\n                      <Text size=\"sm\" fw={500} mb=\"xs\">Reason</Text>\r\n                      <Text size=\"sm\" lineClamp={2} c=\"dimmed\">\r\n                        {leave.reason}\r\n                      </Text>\r\n                    </div>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      {(leave as any).approvedBy && `Approved by: ${(leave as any).approvedBy}`}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewLeave(leave)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      {leave.status === 'pending' && (\r\n                        <>\r\n                          <ActionIcon variant=\"subtle\" color=\"green\">\r\n                            <IconCheck size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"red\">\r\n                            <IconX size={16} />\r\n                          </ActionIcon>\r\n                        </>\r\n                      )}\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Training Tab */}\r\n        <Tabs.Panel value=\"training\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Training & Development</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />}>\r\n                  Schedule Training\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconCertificate size={16} />}>\r\n                  Certifications\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Training Programs Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((training) => (\r\n                <Card key={training.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{(training as any).trainingName}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{(training as any).trainingType}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(training.status)} variant=\"light\">\r\n                      {training.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Instructor</Text>\r\n                      <Text size=\"sm\" fw={500}>{(training as any).instructor}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Duration</Text>\r\n                      <Text size=\"sm\">{(training as any).duration}h</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Start Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {formatDate(training.startDate)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Participants</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {(training as any).participants?.length || 0}/{(training as any).maxParticipants}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Progress\r\n                    value={(((training as any).participants?.length || 0) / ((training as any).maxParticipants || 1)) * 100}\r\n                    size=\"sm\"\r\n                    mb=\"md\"\r\n                    color={((training as any).participants?.length || 0) === (training as any).maxParticipants ? 'red' : 'blue'}\r\n                  />\r\n\r\n                  {training.description && (\r\n                    <Text size=\"sm\" lineClamp={2} mb=\"md\" c=\"dimmed\">\r\n                      {training.description}\r\n                    </Text>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      {(training as any).certificateAwarded ? 'Certificate Awarded' : 'No Certificate'}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconUserPlus size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconCertificate size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Analytics Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">HR Analytics</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {/* Department Distribution */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Employees by Department</Title>\r\n                <MantineDonutChart\r\n                  data={departmentData}\r\n                  size={160}\r\n                  thickness={30}\r\n                  withLabels\r\n                />\r\n              </Card>\r\n              \r\n              {/* Monthly Hiring */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Monthly Hiring Trends</Title>\r\n                <SimpleAreaChart\r\n                  data={monthlyHiring}\r\n                  dataKey=\"month\"\r\n                  series={[{ name: 'hired', color: 'blue.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Attendance Rates */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Department Attendance Rates</Title>\r\n                <SimpleBarChart\r\n                  data={attendanceData}\r\n                  dataKey=\"department\"\r\n                  series={[{ name: 'rate', color: 'green.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Payroll Summary */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Monthly Payroll Costs</Title>\r\n                <SimpleLineChart\r\n                  data={payrollData}\r\n                  dataKey=\"month\"\r\n                  series={[\r\n                    { name: 'amount', color: 'orange.6', label: 'Amount' }\r\n                  ]}\r\n                />\r\n              </Card>\r\n              \r\n              <Card padding=\"lg\" radius=\"md\" withBorder style={{ gridColumn: '1 / -1' }}>\r\n                <Title order={4} mb=\"md\">Key Performance Indicators</Title>\r\n                <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }}>\r\n                  <div style={{ textAlign: 'center' }}>\r\n                    <RingProgress\r\n                      size={120}\r\n                      thickness={12}\r\n                      sections={[{ value: 0, color: 'green' }]}\r\n                      label={\r\n                        <Text size=\"lg\" fw={700} ta=\"center\">\r\n                          0%\r\n                        </Text>\r\n                      }\r\n                    />\r\n                    <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">Employee Retention</Text>\r\n                  </div>\r\n                  \r\n                  <div style={{ textAlign: 'center' }}>\r\n                    <RingProgress\r\n                      size={120}\r\n                      thickness={12}\r\n                      sections={[{ value: 0, color: 'blue' }]}\r\n                      label={\r\n                        <Text size=\"lg\" fw={700} ta=\"center\">\r\n                          0%\r\n                        </Text>\r\n                      }\r\n                    />\r\n                    <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">Average Attendance</Text>\r\n                  </div>\r\n                  \r\n                  <div style={{ textAlign: 'center' }}>\r\n                    <RingProgress\r\n                      size={120}\r\n                      thickness={12}\r\n                      sections={[{ value: 0, color: 'purple' }]}\r\n                      label={\r\n                        <Text size=\"lg\" fw={700} ta=\"center\">\r\n                          0%\r\n                        </Text>\r\n                      }\r\n                    />\r\n                    <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">Training Completion</Text>\r\n                  </div>\r\n                  \r\n                  <div style={{ textAlign: 'center' }}>\r\n                    <RingProgress\r\n                      size={120}\r\n                      thickness={12}\r\n                      sections={[{ value: 0, color: 'orange' }]}\r\n                      label={\r\n                        <Text size=\"lg\" fw={700} ta=\"center\">\r\n                          0/10\r\n                        </Text>\r\n                      }\r\n                    />\r\n                    <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">Employee Satisfaction</Text>\r\n                  </div>\r\n                </SimpleGrid>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Employee Detail Modal */}\r\n      <Modal\r\n        opened={employeeDetailOpened}\r\n        onClose={closeEmployeeDetail}\r\n        title=\"Employee Details\"\r\n        size=\"xl\"\r\n      >\r\n        {selectedEmployee && (\r\n          <ScrollArea h={600}>\r\n            <Stack gap=\"md\">\r\n              <Group>\r\n                <Avatar size=\"xl\" color=\"blue\" radius=\"xl\">\r\n                  {selectedEmployee.firstName[0]}{selectedEmployee.lastName[0]}\r\n                </Avatar>\r\n                <div>\r\n                  <Title order={3}>\r\n                    {selectedEmployee.firstName} {selectedEmployee.lastName}\r\n                  </Title>\r\n                  <Text c=\"dimmed\">{selectedEmployee.employeeId}</Text>\r\n                  <Badge color={getStatusColor(selectedEmployee.status)} variant=\"light\" mt=\"xs\">\r\n                    {selectedEmployee.status.replace('_', ' ')}\r\n                  </Badge>\r\n                </div>\r\n              </Group>\r\n\r\n              <Divider />\r\n\r\n              <SimpleGrid cols={2}>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Email</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedEmployee.email}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Phone</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedEmployee.phone}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Role</Text>\r\n                  <Badge color={getRoleColor((selectedEmployee as any).role)} variant=\"light\">\r\n                    {(selectedEmployee as any).role}\r\n                  </Badge>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Department</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{(selectedEmployee.department as any).name}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Join Date</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {formatDate((selectedEmployee as any).joinDate)}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Salary</Text>\r\n                  <Text size=\"sm\" fw={600}>\r\n                    {formatCurrency((selectedEmployee as any).salary)}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Address</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{(selectedEmployee as any).address}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Emergency Contact</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{(selectedEmployee as any).emergencyContact}</Text>\r\n                </div>\r\n              </SimpleGrid>\r\n\r\n              {(selectedEmployee as any).qualifications && (selectedEmployee as any).qualifications.length > 0 && (\r\n                <>\r\n                  <Divider />\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500} mb=\"sm\">Qualifications</Text>\r\n                    <List spacing=\"xs\">\r\n                      {(selectedEmployee as any).qualifications.map((qualification: any, index: number) => (\r\n                        <List.Item key={index}>\r\n                          <Text size=\"sm\">{qualification}</Text>\r\n                        </List.Item>\r\n                      ))}\r\n                    </List>\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              {(selectedEmployee as any).certifications && (selectedEmployee as any).certifications.length > 0 && (\r\n                <>\r\n                  <Divider />\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500} mb=\"sm\">Certifications</Text>\r\n                    <Group gap=\"xs\">\r\n                      {(selectedEmployee as any).certifications.map((certification: any, index: number) => (\r\n                        <Badge key={index} variant=\"light\" color=\"green\">\r\n                          {certification}\r\n                        </Badge>\r\n                      ))}\r\n                    </Group>\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              <Group justify=\"flex-end\">\r\n                <Button variant=\"light\" onClick={closeEmployeeDetail}>\r\n                  Close\r\n                </Button>\r\n                <Button leftSection={<IconTrophy size={16} />}>\r\n                  Performance Review\r\n                </Button>\r\n                <Button leftSection={<IconEdit size={16} />}>\r\n                  Edit Employee\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </ScrollArea>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Add Employee Modal */}\r\n      <Modal\r\n        opened={addEmployeeOpened}\r\n        onClose={closeAddEmployee}\r\n        title=\"Add New Employee\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"First Name\"\r\n              placeholder=\"Enter first name\"\r\n              required\r\n            />\r\n            <TextInput\r\n              label=\"Last Name\"\r\n              placeholder=\"Enter last name\"\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"Email\"\r\n              placeholder=\"Enter email address\"\r\n              type=\"email\"\r\n              required\r\n            />\r\n            <TextInput\r\n              label=\"Phone\"\r\n              placeholder=\"Enter phone number\"\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Role\"\r\n              placeholder=\"Select role\"\r\n              data={[\r\n                { value: 'Doctor', label: 'Doctor' },\r\n                { value: 'Nurse', label: 'Nurse' },\r\n                { value: 'Technician', label: 'Technician' },\r\n                { value: 'Administrator', label: 'Administrator' },\r\n                { value: 'Receptionist', label: 'Receptionist' },\r\n                { value: 'Pharmacist', label: 'Pharmacist' }\r\n              ]}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Department\"\r\n              placeholder=\"Select department\"\r\n              data={[].map /* TODO: Fetch from API */(dept => ({\r\n                value: dept.name,\r\n                label: dept.name\r\n              }))}\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Address\"\r\n            placeholder=\"Enter address\"\r\n            rows={2}\r\n            required\r\n          />\r\n          \r\n          <MultiSelect\r\n            label=\"Qualifications\"\r\n            placeholder=\"Select qualifications\"\r\n            data={[\r\n              { value: 'MBBS', label: 'MBBS' },\r\n              { value: 'MD', label: 'MD' },\r\n              { value: 'MS', label: 'MS' },\r\n              { value: 'BSc Nursing', label: 'BSc Nursing' },\r\n              { value: 'MSc Nursing', label: 'MSc Nursing' },\r\n              { value: 'Diploma', label: 'Diploma' }\r\n            ]}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddEmployee}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Employee Added',\r\n                message: 'New employee has been successfully added to the system',\r\n                color: 'green',\r\n              });\r\n              closeAddEmployee();\r\n            }}>\r\n              Add Employee\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default HRManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\insurance\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Switch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Alert' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RingProgress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 33,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Stepper' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 34,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DatePickerInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 39,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 47,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUser' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 49,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 49,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUsers' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 52,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStethoscope' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHeart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 54,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconActivity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 55,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 57,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 58,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 58,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedicalCross' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 59,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNurse' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 60,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPill' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 61,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDroplet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconThermometer' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 63,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 63,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLungs' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 64,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileText' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDownload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUserCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 69,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBedFilled' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReport' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendarEvent' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 73,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 74,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 74,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 75,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMapPin' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 76,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReceipt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 79,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlertCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 82,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 84,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHome' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTransfer' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 86,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 86,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconEmergencyBed' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 87,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCheckbox' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 91,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 91,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlertTriangle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 92,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhotoCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 93,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNotes' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 94,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 94,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 95,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSortDescending' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 96,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 96,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendarStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 98,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 98,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCurrency' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 99,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 99,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShieldCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 101,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 101,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShieldX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 102,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 102,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClockPause' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 103,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 103,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 104,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 105,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockInsuranceProviders' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 203,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 203,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockInsuranceClaims' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 290,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 290,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockPolicyDetails' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 391,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 391,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedPolicy' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 426,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 426,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'claims' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 429,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 429,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'stats' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 430,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 430,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 432,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 432,
        "endColumn": 15
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.",
        "line": 436,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 436,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAllData]",
            "fix": { "range": [11923, 11925], "text": "[fetchAllData]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'fetchClaims' and 'loading'. Either include them or remove the dependency array.",
        "line": 491,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 491,
        "endColumn": 53,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchClaims, loading, searchQuery, selectedProvider, selectedStatus]",
            "fix": {
              "range": [13580, 13627],
              "text": "[fetchClaims, loading, searchQuery, selectedProvider, selectedStatus]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'policyDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 496,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 496,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closePolicyDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 496,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 496,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'providerDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 497,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 497,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'openProviderDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 497,
        "column": 40,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 497,
        "endColumn": 58
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeProviderDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 497,
        "column": 67,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 497,
        "endColumn": 86
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 65,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Stack,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Switch,\r\n  Divider,\r\n  Alert,\r\n  Timeline,\r\n  List,\r\n  Indicator,\r\n  RingProgress,\r\n  Stepper\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport insuranceService from '../../../services/insurance.service';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleBarChart, SimpleLineChart } from '../../../components/MantineChart';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconShield,\r\n  IconUser,\r\n  IconUsers,\r\n  IconCalendar,\r\n  IconClock,\r\n  IconStethoscope,\r\n  IconHeart,\r\n  IconActivity,\r\n  IconChartBar,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconMedicalCross,\r\n  IconNurse,\r\n  IconPill,\r\n  IconDroplet,\r\n  IconThermometer,\r\n  IconLungs,\r\n  IconFileText,\r\n  IconPrinter,\r\n  IconDownload,\r\n  IconRefresh,\r\n  IconUserCheck,\r\n  IconBedFilled,\r\n  IconClipboard,\r\n  IconReport,\r\n  IconCalendarEvent,\r\n  IconPhone,\r\n  IconMail,\r\n  IconMapPin,\r\n  IconCash,\r\n  IconCreditCard,\r\n  IconReceipt,\r\n  IconCheck,\r\n  IconX,\r\n  IconAlertCircle,\r\n  IconArrowUp,\r\n  IconArrowDown,\r\n  IconHome,\r\n  IconTransfer,\r\n  IconEmergencyBed,\r\n  IconBuildingBank,\r\n  IconFileUpload,\r\n  IconClockHour4,\r\n  IconCheckbox,\r\n  IconAlertTriangle,\r\n  IconPhotoCheck,\r\n  IconNotes,\r\n  IconFilter,\r\n  IconSortDescending,\r\n  IconExternalLink,\r\n  IconCalendarStats,\r\n  IconCurrency,\r\n  IconPercentage,\r\n  IconShieldCheck,\r\n  IconShieldX,\r\n  IconClockPause,\r\n  IconFileCheck,\r\n  IconFileX,\r\n  IconAlarm\r\n} from '@tabler/icons-react';\r\n\r\n// Types\r\ninterface InsuranceProvider {\r\n  id: string;\r\n  name: string;\r\n  code: string;\r\n  type: 'mediclaim' | 'corporate' | 'government' | 'tpa';\r\n  contactPerson: string;\r\n  phone: string;\r\n  email: string;\r\n  address: string;\r\n  cashlessLimit: number;\r\n  reimbursementTurnover: number; // days\r\n  activeStatus: boolean;\r\n  contractStartDate: string;\r\n  contractEndDate: string;\r\n  totalPolicies: number;\r\n  totalClaims: number;\r\n  totalApproved: number;\r\n  totalRejected: number;\r\n  averageApprovalTime: number; // hours\r\n  approvalRate: number; // percentage\r\n}\r\n\r\ninterface InsuranceClaim {\r\n  id: string;\r\n  claimNumber: string;\r\n  patientId: string;\r\n  patientName: string;\r\n  patientAge: number;\r\n  patientGender: string;\r\n  policyNumber: string;\r\n  providerId: string;\r\n  providerName: string;\r\n  claimType: 'cashless' | 'reimbursement';\r\n  status: 'pending' | 'approved' | 'rejected' | 'investigating' | 'partial' | 'settled';\r\n  priority: 'high' | 'medium' | 'low';\r\n  submissionDate: string;\r\n  approvalDate?: string;\r\n  settlementDate?: string;\r\n  admissionDate: string;\r\n  dischargeDate?: string;\r\n  diagnosis: string;\r\n  procedure?: string;\r\n  totalBillAmount: number;\r\n  claimedAmount: number;\r\n  approvedAmount: number;\r\n  rejectedAmount: number;\r\n  deductible: number;\r\n  copayment: number;\r\n  rejectionReason?: string;\r\n  documents: Array<{\r\n    type: string;\r\n    name: string;\r\n    uploadDate: string;\r\n    status: 'pending' | 'verified' | 'rejected';\r\n  }>;\r\n  timeline: Array<{\r\n    date: string;\r\n    status: string;\r\n    description: string;\r\n    updatedBy: string;\r\n  }>;\r\n}\r\n\r\ninterface PolicyDetails {\r\n  id: string;\r\n  policyNumber: string;\r\n  patientId: string;\r\n  patientName: string;\r\n  providerId: string;\r\n  providerName: string;\r\n  policyType: 'individual' | 'family' | 'corporate';\r\n  planName: string;\r\n  coverageAmount: number;\r\n  premiumAmount: number;\r\n  startDate: string;\r\n  endDate: string;\r\n  status: 'active' | 'expired' | 'cancelled' | 'suspended';\r\n  dependents: Array<{\r\n    name: string;\r\n    relation: string;\r\n    age: number;\r\n  }>;\r\n  benefits: Array<{\r\n    category: string;\r\n    coverageLimit: number;\r\n    utilisedAmount: number;\r\n  }>;\r\n  exclusions: string[];\r\n  claimsHistory: number;\r\n  totalUtilised: number;\r\n}\r\n\r\n// Mock data\r\nconst mockInsuranceProviders: InsuranceProvider[] = [\r\n  {\r\n    id: '1',\r\n    name: 'Star Health Insurance',\r\n    code: 'STAR',\r\n    type: 'mediclaim',\r\n    contactPerson: 'Rajesh Kumar',\r\n    phone: '+91 98765 43210',\r\n    email: 'rajesh@starhealth.com',\r\n    address: 'Chennai, Tamil Nadu',\r\n    cashlessLimit: 500000,\r\n    reimbursementTurnover: 15,\r\n    activeStatus: true,\r\n    contractStartDate: '2024-01-01',\r\n    contractEndDate: '2024-12-31',\r\n    totalPolicies: 1250,\r\n    totalClaims: 892,\r\n    totalApproved: 756,\r\n    totalRejected: 136,\r\n    averageApprovalTime: 48,\r\n    approvalRate: 84.8\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'ICICI Lombard',\r\n    code: 'ICICI',\r\n    type: 'mediclaim',\r\n    contactPerson: 'Priya Sharma',\r\n    phone: '+91 87654 32109',\r\n    email: 'priya@icicilombard.com',\r\n    address: 'Mumbai, Maharashtra',\r\n    cashlessLimit: 750000,\r\n    reimbursementTurnover: 12,\r\n    activeStatus: true,\r\n    contractStartDate: '2024-01-01',\r\n    contractEndDate: '2024-12-31',\r\n    totalPolicies: 980,\r\n    totalClaims: 672,\r\n    totalApproved: 612,\r\n    totalRejected: 60,\r\n    averageApprovalTime: 36,\r\n    approvalRate: 91.1\r\n  },\r\n  {\r\n    id: '3',\r\n    name: 'Max Bupa Health',\r\n    code: 'MAXBUPA',\r\n    type: 'mediclaim',\r\n    contactPerson: 'Amit Singh',\r\n    phone: '+91 76543 21098',\r\n    email: 'amit@maxbupa.com',\r\n    address: 'Delhi, NCR',\r\n    cashlessLimit: 1000000,\r\n    reimbursementTurnover: 10,\r\n    activeStatus: true,\r\n    contractStartDate: '2024-01-01',\r\n    contractEndDate: '2024-12-31',\r\n    totalPolicies: 1456,\r\n    totalClaims: 1124,\r\n    totalApproved: 1034,\r\n    totalRejected: 90,\r\n    averageApprovalTime: 42,\r\n    approvalRate: 92.0\r\n  },\r\n  {\r\n    id: '4',\r\n    name: 'Medi Assist TPA',\r\n    code: 'MEDIASSIST',\r\n    type: 'tpa',\r\n    contactPerson: 'Sunita Patel',\r\n    phone: '+91 65432 10987',\r\n    email: 'sunita@mediassist.com',\r\n    address: 'Hyderabad, Telangana',\r\n    cashlessLimit: 300000,\r\n    reimbursementTurnover: 18,\r\n    activeStatus: true,\r\n    contractStartDate: '2024-01-01',\r\n    contractEndDate: '2024-12-31',\r\n    totalPolicies: 567,\r\n    totalClaims: 423,\r\n    totalApproved: 356,\r\n    totalRejected: 67,\r\n    averageApprovalTime: 54,\r\n    approvalRate: 84.2\r\n  }\r\n];\r\n\r\nconst mockInsuranceClaims: InsuranceClaim[] = [\r\n  {\r\n    id: '1',\r\n    claimNumber: 'CLM2024001',\r\n    patientId: 'P2024001',\r\n    patientName: 'Rajesh Kumar',\r\n    patientAge: 45,\r\n    patientGender: 'Male',\r\n    policyNumber: 'STAR123456789',\r\n    providerId: '1',\r\n    providerName: 'Star Health Insurance',\r\n    claimType: 'cashless',\r\n    status: 'approved',\r\n    priority: 'high',\r\n    submissionDate: '2024-01-10T08:30:00Z',\r\n    approvalDate: '2024-01-12T14:20:00Z',\r\n    admissionDate: '2024-01-10T08:30:00Z',\r\n    dischargeDate: '2024-01-15T10:00:00Z',\r\n    diagnosis: 'Acute Myocardial Infarction',\r\n    procedure: 'Angioplasty',\r\n    totalBillAmount: 450000,\r\n    claimedAmount: 450000,\r\n    approvedAmount: 425000,\r\n    rejectedAmount: 25000,\r\n    deductible: 10000,\r\n    copayment: 15000,\r\n    documents: [\r\n      { type: 'Discharge Summary', name: 'discharge_summary.pdf', uploadDate: '2024-01-15', status: 'verified' },\r\n      { type: 'Medical Bills', name: 'medical_bills.pdf', uploadDate: '2024-01-15', status: 'verified' }\r\n    ],\r\n    timeline: [\r\n      { date: '2024-01-10T08:30:00Z', status: 'submitted', description: 'Claim submitted', updatedBy: 'Hospital Staff' },\r\n      { date: '2024-01-12T14:20:00Z', status: 'approved', description: 'Claim approved', updatedBy: 'Insurance Officer' }\r\n    ]\r\n  },\r\n  {\r\n    id: '2',\r\n    claimNumber: 'CLM2024002',\r\n    patientId: 'P2024002',\r\n    patientName: 'Sunita Patel',\r\n    patientAge: 38,\r\n    patientGender: 'Female',\r\n    policyNumber: 'ICICI987654321',\r\n    providerId: '2',\r\n    providerName: 'ICICI Lombard',\r\n    claimType: 'reimbursement',\r\n    status: 'pending',\r\n    priority: 'medium',\r\n    submissionDate: '2024-01-14T16:45:00Z',\r\n    admissionDate: '2024-01-12T14:15:00Z',\r\n    dischargeDate: '2024-01-18T11:00:00Z',\r\n    diagnosis: 'Elective Cholecystectomy',\r\n    procedure: 'Laparoscopic Cholecystectomy',\r\n    totalBillAmount: 125000,\r\n    claimedAmount: 125000,\r\n    approvedAmount: 0,\r\n    rejectedAmount: 0,\r\n    deductible: 5000,\r\n    copayment: 12500,\r\n    documents: [\r\n      { type: 'Discharge Summary', name: 'discharge_summary.pdf', uploadDate: '2024-01-18', status: 'verified' },\r\n      { type: 'Medical Bills', name: 'medical_bills.pdf', uploadDate: '2024-01-18', status: 'pending' }\r\n    ],\r\n    timeline: [\r\n      { date: '2024-01-14T16:45:00Z', status: 'submitted', description: 'Claim submitted', updatedBy: 'Hospital Staff' }\r\n    ]\r\n  },\r\n  {\r\n    id: '3',\r\n    claimNumber: 'CLM2024003',\r\n    patientId: 'P2024003',\r\n    patientName: 'Mohammed Ali',\r\n    patientAge: 62,\r\n    patientGender: 'Male',\r\n    policyNumber: 'MAX456789123',\r\n    providerId: '3',\r\n    providerName: 'Max Bupa Health',\r\n    claimType: 'cashless',\r\n    status: 'investigating',\r\n    priority: 'high',\r\n    submissionDate: '2024-01-13T11:30:00Z',\r\n    admissionDate: '2024-01-13T10:45:00Z',\r\n    diagnosis: 'Total Knee Replacement',\r\n    procedure: 'Total Knee Arthroplasty',\r\n    totalBillAmount: 280000,\r\n    claimedAmount: 280000,\r\n    approvedAmount: 0,\r\n    rejectedAmount: 0,\r\n    deductible: 8000,\r\n    copayment: 20000,\r\n    documents: [\r\n      { type: 'Pre-authorization', name: 'preauth.pdf', uploadDate: '2024-01-13', status: 'verified' },\r\n      { type: 'Medical Reports', name: 'reports.pdf', uploadDate: '2024-01-13', status: 'pending' }\r\n    ],\r\n    timeline: [\r\n      { date: '2024-01-13T11:30:00Z', status: 'submitted', description: 'Pre-authorization submitted', updatedBy: 'Hospital Staff' },\r\n      { date: '2024-01-14T09:15:00Z', status: 'investigating', description: 'Under medical review', updatedBy: 'Medical Officer' }\r\n    ]\r\n  }\r\n];\r\n\r\nconst mockPolicyDetails: PolicyDetails[] = [\r\n  {\r\n    id: '1',\r\n    policyNumber: 'STAR123456789',\r\n    patientId: 'P2024001',\r\n    patientName: 'Rajesh Kumar',\r\n    providerId: '1',\r\n    providerName: 'Star Health Insurance',\r\n    policyType: 'individual',\r\n    planName: 'Star Comprehensive',\r\n    coverageAmount: 500000,\r\n    premiumAmount: 24000,\r\n    startDate: '2023-04-01',\r\n    endDate: '2024-03-31',\r\n    status: 'active',\r\n    dependents: [],\r\n    benefits: [\r\n      { category: 'Hospitalization', coverageLimit: 500000, utilisedAmount: 125000 },\r\n      { category: 'Day Care Procedures', coverageLimit: 50000, utilisedAmount: 0 },\r\n      { category: 'Maternity', coverageLimit: 75000, utilisedAmount: 0 }\r\n    ],\r\n    exclusions: ['Cosmetic Surgery', 'Dental Treatment', 'Pre-existing conditions (first year)'],\r\n    claimsHistory: 2,\r\n    totalUtilised: 125000\r\n  }\r\n];\r\n\r\nconst InsuranceManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('claims');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedProvider, setSelectedProvider] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedClaimType, setSelectedClaimType] = useState<string>('');\r\n  const [selectedClaim, setSelectedClaim] = useState<InsuranceClaim | null>(null);\r\n  const [selectedPolicy, setSelectedPolicy] = useState<PolicyDetails | null>(null);\r\n\r\n  // API data state\r\n  const [claims, setClaims] = useState<InsuranceClaim[]>([]);\r\n  const [stats, setStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  const fetchAllData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      await Promise.all([fetchClaims(), fetchStats()]);\r\n    } catch (err: any) {\r\n      console.error('Error loading insurance data:', err);\r\n      setError(err.response?.data?.message || err.message || 'Failed to load insurance data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchClaims = async () => {\r\n    try {\r\n      const filters = {\r\n        status: selectedStatus || undefined,\r\n        providerId: selectedProvider || undefined,\r\n        search: searchQuery || undefined\r\n      };\r\n      const response = await insuranceService.getClaims(filters);\r\n      // Handle different response structures\r\n      const claimsData = Array.isArray(response.data) \r\n        ? response.data \r\n        : (response.data?.items || []);\r\n      setClaims(claimsData as InsuranceClaim[]);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching claims (using empty data):', err.response?.data?.message || err.message);\r\n      setClaims([]);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await insuranceService.getStats();\r\n      setStats(response.data);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching insurance stats (using default values):', err.response?.data?.message || err.message);\r\n      setStats({\r\n        totalClaims: 0,\r\n        pendingClaims: 0,\r\n        approvedClaims: 0,\r\n        rejectedClaims: 0,\r\n        totalClaimAmount: 0,\r\n        approvedAmount: 0\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      fetchClaims();\r\n    }\r\n  }, [searchQuery, selectedProvider, selectedStatus]);\r\n\r\n  // Modal states\r\n  const [claimDetailOpened, { open: openClaimDetail, close: closeClaimDetail }] = useDisclosure(false);\r\n  const [newClaimOpened, { open: openNewClaim, close: closeNewClaim }] = useDisclosure(false);\r\n  const [policyDetailOpened, { open: openPolicyDetail, close: closePolicyDetail }] = useDisclosure(false);\r\n  const [providerDetailOpened, { open: openProviderDetail, close: closeProviderDetail }] = useDisclosure(false);\r\n\r\n  // Filter claims\r\n  const filteredClaims = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((claim) => {\r\n      const matchesSearch = \r\n        claim.patientName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        claim.claimNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        claim.policyNumber.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesProvider = !selectedProvider || claim.providerId === selectedProvider;\r\n      const matchesStatus = !selectedStatus || claim.status === selectedStatus;\r\n      const matchesType = !selectedClaimType || claim.claimType === selectedClaimType;\r\n\r\n      return matchesSearch && matchesProvider && matchesStatus && matchesType;\r\n    });\r\n  }, [searchQuery, selectedProvider, selectedStatus, selectedClaimType]);\r\n\r\n  const handleViewClaim = (claim: InsuranceClaim) => {\r\n    setSelectedClaim(claim);\r\n    openClaimDetail();\r\n  };\r\n\r\n  const handleViewPolicy = (policy: PolicyDetails) => {\r\n    setSelectedPolicy(policy);\r\n    openPolicyDetail();\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('en-IN', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  const formatDateTime = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('en-IN', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'approved': return 'green';\r\n      case 'rejected': return 'red';\r\n      case 'pending': return 'yellow';\r\n      case 'investigating': return 'orange';\r\n      case 'partial': return 'blue';\r\n      case 'settled': return 'teal';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'high': return 'red';\r\n      case 'medium': return 'yellow';\r\n      case 'low': return 'green';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  // Insurance stats\r\n  const insuranceStats = {\r\n    totalClaims: 0 /* TODO: Fetch from API */,\r\n    pendingClaims: [].filter /* TODO: Fetch from API */(c => c.status === 'pending').length,\r\n    approvedClaims: [].filter /* TODO: Fetch from API */(c => c.status === 'approved').length,\r\n    rejectedClaims: [].filter /* TODO: Fetch from API */(c => c.status === 'rejected').length,\r\n    totalClaimedAmount: [].reduce /* TODO: Fetch from API */((acc, c) => acc + c.claimedAmount, 0),\r\n    totalApprovedAmount: [].reduce /* TODO: Fetch from API */((acc, c) => acc + c.approvedAmount, 0),\r\n    averageProcessingTime: Math.round([].reduce /* TODO: Fetch from API */((acc, c) => acc + (c.approvalDate ? 48 : 24), 0) / 0 /* TODO: Fetch from API */),\r\n    approvalRate: Math.round(([].filter /* TODO: Fetch from API */(c => c.status === 'approved').length / 0 /* TODO: Fetch from API */) * 100)\r\n  };\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Insurance & TPA Management</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage insurance claims, policies, and third-party administrators\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button variant=\"light\" leftSection={<IconRefresh size={16} />}>\r\n            Refresh Data\r\n          </Button>\r\n          <Button leftSection={<IconPlus size={16} />} onClick={openNewClaim}>\r\n            New Claim\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Quick Stats */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4, lg: 8 }} mb=\"lg\" spacing=\"sm\">\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"blue\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconClipboard size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{insuranceStats.totalClaims}</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Total Claims</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"yellow\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconClockHour4 size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{insuranceStats.pendingClaims}</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Pending</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"green\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconCheck size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{insuranceStats.approvedClaims}</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Approved</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"red\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconX size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{insuranceStats.rejectedClaims}</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Rejected</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"teal\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconCash size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>₹{(insuranceStats.totalClaimedAmount / 100000).toFixed(1)}L</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Claimed</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"lime\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconCreditCard size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>₹{(insuranceStats.totalApprovedAmount / 100000).toFixed(1)}L</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Approved</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"purple\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconAlarm size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{insuranceStats.averageProcessingTime}h</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Avg Process</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"center\">\r\n            <ThemeIcon color=\"cyan\" size=\"lg\" radius=\"md\" variant=\"light\">\r\n              <IconPercentage size={20} />\r\n            </ThemeIcon>\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{insuranceStats.approvalRate}%</Text>\r\n              <Text size=\"xs\" c=\"dimmed\">Approval Rate</Text>\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"claims\" leftSection={<IconClipboard size={16} />}>\r\n            Insurance Claims\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"policies\" leftSection={<IconShield size={16} />}>\r\n            Policy Management\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"providers\" leftSection={<IconBuildingBank size={16} />}>\r\n            Providers & TPA\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconChartBar size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Insurance Claims Tab */}\r\n        <Tabs.Panel value=\"claims\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search claims...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Provider\"\r\n                data={[].map /* TODO: Fetch from API */(p => ({ value: p.id, label: p.name }))}\r\n                value={selectedProvider}\r\n                onChange={setSelectedProvider}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'pending', label: 'Pending' },\r\n                  { value: 'approved', label: 'Approved' },\r\n                  { value: 'rejected', label: 'Rejected' },\r\n                  { value: 'investigating', label: 'Investigating' },\r\n                  { value: 'settled', label: 'Settled' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Type\"\r\n                data={[\r\n                  { value: 'cashless', label: 'Cashless' },\r\n                  { value: 'reimbursement', label: 'Reimbursement' }\r\n                ]}\r\n                value={selectedClaimType}\r\n                onChange={setSelectedClaimType}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Claims Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Claim #</Table.Th>\r\n                    <Table.Th>Patient</Table.Th>\r\n                    <Table.Th>Provider</Table.Th>\r\n                    <Table.Th>Type</Table.Th>\r\n                    <Table.Th>Diagnosis</Table.Th>\r\n                    <Table.Th>Claimed Amount</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Priority</Table.Th>\r\n                    <Table.Th>Submission Date</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredClaims.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={10}>\r\n                        <EmptyState\r\n                          icon={<IconShield size={48} />}\r\n                          title=\"No insurance records\"\r\n                          description=\"Add insurance information\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredClaims.map((claim) => (\r\n                      <Table.Tr key={claim.id}>\r\n                        <Table.Td>\r\n                          <Text fw={500} size=\"sm\">{claim.claimNumber}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group>\r\n                            <Avatar color=\"blue\" radius=\"xl\" size=\"sm\">\r\n                              {claim.patientName.split(' ').map(n => n[0]).join('')}\r\n                            </Avatar>\r\n                            <div>\r\n                              <Text size=\"sm\" fw={500}>{claim.patientName}</Text>\r\n                              <Text size=\"xs\" c=\"dimmed\">{claim.patientAge}Y, {claim.patientGender}</Text>\r\n                            </div>\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>{claim.providerName}</Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">{claim.policyNumber}</Text>\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge variant=\"light\" size=\"sm\" tt=\"uppercase\">\r\n                            {claim.claimType}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>{claim.diagnosis}</Text>\r\n                            {claim.procedure && (\r\n                              <Text size=\"xs\" c=\"dimmed\">{claim.procedure}</Text>\r\n                            )}\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>₹{claim.claimedAmount.toLocaleString()}</Text>\r\n                            {claim.approvedAmount > 0 && (\r\n                              <Text size=\"xs\" c=\"green\">Approved: ₹{claim.approvedAmount.toLocaleString()}</Text>\r\n                            )}\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <Badge color={getStatusColor(claim.status)} variant=\"light\" size=\"sm\">\r\n                              {claim.status.toUpperCase()}\r\n                            </Badge>\r\n                            {claim.status === 'pending' && (\r\n                              <Indicator color=\"orange\" size={8} />\r\n                            )}\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getPriorityColor(claim.priority)} variant=\"outline\" size=\"sm\">\r\n                            {claim.priority.toUpperCase()}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{formatDate(claim.submissionDate)}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon\r\n                              variant=\"subtle\"\r\n                              color=\"blue\"\r\n                              onClick={() => handleViewClaim(claim)}\r\n                            >\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"green\">\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"purple\">\r\n                              <IconFileUpload size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                              <IconPrinter size={16} />\r\n                            </ActionIcon>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))\r\n                  )}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Policy Management Tab */}\r\n        <Tabs.Panel value=\"policies\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Active Policies</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((policy) => (\r\n                <Card key={policy.id} padding=\"lg\" radius=\"md\" withBorder onClick={() => handleViewPolicy(policy)} style={{ cursor: 'pointer' }}>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{policy.planName}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{policy.policyNumber}</Text>\r\n                    </div>\r\n                    <Badge color={policy.status === 'active' ? 'green' : 'red'} variant=\"light\">\r\n                      {policy.status.toUpperCase()}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Group mb=\"md\">\r\n                    <Avatar color=\"blue\" size=\"md\" radius=\"xl\">\r\n                      {policy.patientName.split(' ').map(n => n[0]).join('')}\r\n                    </Avatar>\r\n                    <div>\r\n                      <Text size=\"sm\" fw={500}>{policy.patientName}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">{policy.providerName}</Text>\r\n                    </div>\r\n                  </Group>\r\n\r\n                  <div className=\"mb-md\">\r\n                    <Text size=\"sm\" c=\"dimmed\" mb=\"xs\">Coverage Utilization</Text>\r\n                    <Progress \r\n                      value={(policy.totalUtilised / policy.coverageAmount) * 100} \r\n                      size=\"lg\" \r\n                      color={policy.totalUtilised > policy.coverageAmount * 0.8 ? 'red' : 'blue'}\r\n                    />\r\n                    <Group justify=\"space-between\" mt=\"xs\">\r\n                      <Text size=\"xs\" c=\"dimmed\">\r\n                        ₹{policy.totalUtilised.toLocaleString()} used\r\n                      </Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">\r\n                        ₹{policy.coverageAmount.toLocaleString()} total\r\n                      </Text>\r\n                    </Group>\r\n                  </div>\r\n\r\n                  <SimpleGrid cols={2} spacing=\"sm\" mb=\"md\">\r\n                    <div>\r\n                      <Text size=\"xs\" c=\"dimmed\">Policy Type</Text>\r\n                      <Text size=\"sm\" fw={500} tt=\"capitalize\">{policy.policyType}</Text>\r\n                    </div>\r\n                    <div>\r\n                      <Text size=\"xs\" c=\"dimmed\">Claims</Text>\r\n                      <Text size=\"sm\" fw={500}>{policy.claimsHistory}</Text>\r\n                    </div>\r\n                    <div>\r\n                      <Text size=\"xs\" c=\"dimmed\">Start Date</Text>\r\n                      <Text size=\"sm\" fw={500}>{formatDate(policy.startDate)}</Text>\r\n                    </div>\r\n                    <div>\r\n                      <Text size=\"xs\" c=\"dimmed\">End Date</Text>\r\n                      <Text size=\"sm\" fw={500}>{formatDate(policy.endDate)}</Text>\r\n                    </div>\r\n                  </SimpleGrid>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\" fw={600} c=\"green\">\r\n                      ₹{policy.coverageAmount.toLocaleString()}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Providers & TPA Tab */}\r\n        <Tabs.Panel value=\"providers\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Insurance Providers & TPA</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, md: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((provider) => (\r\n                <Card key={provider.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Group mb=\"xs\">\r\n                        <ThemeIcon color=\"blue\" variant=\"light\">\r\n                          <IconBuildingBank size={20} />\r\n                        </ThemeIcon>\r\n                        <div>\r\n                          <Text fw={600} size=\"lg\">{provider.name}</Text>\r\n                          <Text size=\"sm\" c=\"dimmed\">{provider.code} • {provider.type.toUpperCase()}</Text>\r\n                        </div>\r\n                      </Group>\r\n                    </div>\r\n                    <Badge color={provider.activeStatus ? 'green' : 'red'} variant=\"light\">\r\n                      {provider.activeStatus ? 'ACTIVE' : 'INACTIVE'}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Contact Person</Text>\r\n                      <Text size=\"sm\" fw={500}>{provider.contactPerson}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Phone</Text>\r\n                      <Text size=\"sm\" fw={500}>{provider.phone}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Cashless Limit</Text>\r\n                      <Text size=\"sm\" fw={500} c=\"green\">₹{provider.cashlessLimit.toLocaleString()}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Approval Rate</Text>\r\n                      <Text size=\"sm\" fw={500} c={provider.approvalRate > 85 ? 'green' : 'orange'}>\r\n                        {provider.approvalRate}%\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Divider mb=\"md\" />\r\n\r\n                  <SimpleGrid cols={3} spacing=\"sm\" mb=\"md\">\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <Text size=\"lg\" fw={700} c=\"blue\">{provider.totalPolicies}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">Policies</Text>\r\n                    </div>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <Text size=\"lg\" fw={700} c=\"orange\">{provider.totalClaims}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">Claims</Text>\r\n                    </div>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <Text size=\"lg\" fw={700} c=\"green\">{provider.totalApproved}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">Approved</Text>\r\n                    </div>\r\n                  </SimpleGrid>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Avg Processing: {provider.averageApprovalTime}h\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"purple\">\r\n                        <IconExternalLink size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Analytics Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\" mt=\"md\">\r\n            {/* Claims Status Distribution */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Claims Status Distribution</Title>\r\n              <MantineDonutChart\r\n                data={[\r\n                  { name: 'Approved', value: 1, color: 'green' },\r\n                  { name: 'Pending', value: 1, color: 'yellow' },\r\n                  { name: 'Rejected', value: 1, color: 'red' },\r\n                  { name: 'Under Review', value: 1, color: 'blue' }\r\n                ]}\r\n                size={200}\r\n                thickness={30}\r\n                withLabels\r\n              />\r\n            </Card>\r\n\r\n            {/* Provider Performance */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Provider Approval Rates</Title>\r\n              <SimpleBarChart\r\n                data={[\r\n                  { provider: 'Max Bupa', rate: 92.0 },\r\n                  { provider: 'Star Health', rate: 88.5 },\r\n                  { provider: 'ICICI Lombard', rate: 85.0 },\r\n                  { provider: 'HDFC Ergo', rate: 90.0 }\r\n                ]}\r\n                dataKey=\"provider\"\r\n                series={[{ name: 'rate', color: 'blue.6' }]}\r\n              />\r\n            </Card>\r\n\r\n            {/* Monthly Claims Trend */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Monthly Claims Trend</Title>\r\n              <SimpleLineChart\r\n                data={[\r\n                  { month: 'Jan', claims: 125, approved: 112 },\r\n                  { month: 'Feb', claims: 138, approved: 125 },\r\n                  { month: 'Mar', claims: 145, approved: 132 },\r\n                  { month: 'Apr', claims: 152, approved: 140 },\r\n                  { month: 'May', claims: 160, approved: 148 },\r\n                  { month: 'Jun', claims: 155, approved: 142 }\r\n                ]}\r\n                dataKey=\"month\"\r\n                series={[\r\n                  { name: 'claims', color: 'blue.6', label: 'Claims' },\r\n                  { name: 'approved', color: 'green.6', label: 'Approved' }\r\n                ]}\r\n              />\r\n            </Card>\r\n\r\n            {/* Claim Amount Analysis */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Claim Amount Analysis</Title>\r\n              <SimpleAreaChart\r\n                data={[\r\n                  { month: 'Jan', claimed: 2500000, approved: 2200000 },\r\n                  { month: 'Feb', claimed: 2800000, approved: 2450000 },\r\n                  { month: 'Mar', claimed: 3100000, approved: 2750000 },\r\n                  { month: 'Apr', claimed: 2900000, approved: 2600000 },\r\n                  { month: 'May', claimed: 3300000, approved: 2950000 },\r\n                  { month: 'Jun', claimed: 3500000, approved: 3100000 }\r\n                ]}\r\n                dataKey=\"month\"\r\n                series={[\r\n                  { name: 'claimed', color: 'orange.6' },\r\n                  { name: 'approved', color: 'green.6' }\r\n                ]}\r\n              />\r\n            </Card>\r\n          </SimpleGrid>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Claim Detail Modal */}\r\n      <Modal\r\n        opened={claimDetailOpened}\r\n        onClose={closeClaimDetail}\r\n        title=\"Claim Details\"\r\n        size=\"xl\"\r\n      >\r\n        {selectedClaim && (\r\n          <ScrollArea h={600}>\r\n            <Stack gap=\"md\">\r\n              {/* Claim Header */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Group justify=\"space-between\" mb=\"md\">\r\n                  <div>\r\n                    <Title order={3}>{selectedClaim.claimNumber}</Title>\r\n                    <Text c=\"dimmed\">{selectedClaim.patientName} • {selectedClaim.providerName}</Text>\r\n                    <Group gap=\"xs\" mt=\"xs\">\r\n                      <Badge color={getStatusColor(selectedClaim.status)} variant=\"light\">\r\n                        {selectedClaim.status.toUpperCase()}\r\n                      </Badge>\r\n                      <Badge color={getPriorityColor(selectedClaim.priority)} variant=\"outline\">\r\n                        {selectedClaim.priority.toUpperCase()}\r\n                      </Badge>\r\n                    </Group>\r\n                  </div>\r\n                  <Group>\r\n                    <Button variant=\"light\" leftSection={<IconEdit size={16} />}>\r\n                      Update Status\r\n                    </Button>\r\n                    <Button variant=\"light\" leftSection={<IconPrinter size={16} />}>\r\n                      Print\r\n                    </Button>\r\n                  </Group>\r\n                </Group>\r\n\r\n                <SimpleGrid cols={4} spacing=\"md\">\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Policy Number</Text>\r\n                    <Text fw={500}>{selectedClaim.policyNumber}</Text>\r\n                  </div>\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Claim Type</Text>\r\n                    <Text fw={500} tt=\"capitalize\">{selectedClaim.claimType}</Text>\r\n                  </div>\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Admission Date</Text>\r\n                    <Text fw={500}>{formatDate(selectedClaim.admissionDate)}</Text>\r\n                  </div>\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Submission Date</Text>\r\n                    <Text fw={500}>{formatDate(selectedClaim.submissionDate)}</Text>\r\n                  </div>\r\n                </SimpleGrid>\r\n              </Card>\r\n\r\n              {/* Medical Information */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={5} mb=\"md\">Medical Information</Title>\r\n                <SimpleGrid cols={2} spacing=\"md\">\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\" fw={500} mb=\"xs\">Diagnosis</Text>\r\n                    <Text>{selectedClaim.diagnosis}</Text>\r\n                  </div>\r\n                  {selectedClaim.procedure && (\r\n                    <div>\r\n                      <Text size=\"sm\" c=\"dimmed\" fw={500} mb=\"xs\">Procedure</Text>\r\n                      <Text>{selectedClaim.procedure}</Text>\r\n                    </div>\r\n                  )}\r\n                </SimpleGrid>\r\n              </Card>\r\n\r\n              {/* Financial Information */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={5} mb=\"md\">Financial Breakdown</Title>\r\n                <SimpleGrid cols={2} spacing=\"md\">\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Total Bill Amount</Text>\r\n                    <Text size=\"xl\" fw={700} c=\"blue\">₹{selectedClaim.totalBillAmount.toLocaleString()}</Text>\r\n                  </div>\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Claimed Amount</Text>\r\n                    <Text size=\"xl\" fw={700} c=\"orange\">₹{selectedClaim.claimedAmount.toLocaleString()}</Text>\r\n                  </div>\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Approved Amount</Text>\r\n                    <Text size=\"xl\" fw={700} c=\"green\">₹{selectedClaim.approvedAmount.toLocaleString()}</Text>\r\n                  </div>\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Rejected Amount</Text>\r\n                    <Text size=\"xl\" fw={700} c=\"red\">₹{selectedClaim.rejectedAmount.toLocaleString()}</Text>\r\n                  </div>\r\n                </SimpleGrid>\r\n\r\n                <Divider my=\"md\" />\r\n\r\n                <SimpleGrid cols={2} spacing=\"md\">\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Deductible</Text>\r\n                    <Text fw={500}>₹{selectedClaim.deductible.toLocaleString()}</Text>\r\n                  </div>\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Co-payment</Text>\r\n                    <Text fw={500}>₹{selectedClaim.copayment.toLocaleString()}</Text>\r\n                  </div>\r\n                </SimpleGrid>\r\n              </Card>\r\n\r\n              {/* Documents */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={5} mb=\"md\">Submitted Documents</Title>\r\n                <Stack gap=\"sm\">\r\n                  {selectedClaim.documents.map((doc, index) => (\r\n                    <Group key={index} justify=\"space-between\" p=\"sm\" style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                      <div>\r\n                        <Text size=\"sm\" fw={500}>{doc.name}</Text>\r\n                        <Text size=\"xs\" c=\"dimmed\">{doc.type} • {formatDate(doc.uploadDate)}</Text>\r\n                      </div>\r\n                      <Badge color={doc.status === 'verified' ? 'green' : doc.status === 'rejected' ? 'red' : 'yellow'} variant=\"light\" size=\"sm\">\r\n                        {doc.status.toUpperCase()}\r\n                      </Badge>\r\n                    </Group>\r\n                  ))}\r\n                </Stack>\r\n              </Card>\r\n\r\n              {/* Timeline */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={5} mb=\"md\">Claim Timeline</Title>\r\n                <Timeline active={selectedClaim.timeline.length - 1} bulletSize={24} lineWidth={2}>\r\n                  {selectedClaim.timeline.map((item, index) => (\r\n                    <Timeline.Item key={index} bullet={<IconCheck size={12} />} title={item.status.toUpperCase()}>\r\n                      <Text c=\"dimmed\" size=\"sm\">{item.description}</Text>\r\n                      <Text size=\"xs\" mt={4}>\r\n                        {formatDateTime(item.date)} • {item.updatedBy}\r\n                      </Text>\r\n                    </Timeline.Item>\r\n                  ))}\r\n                </Timeline>\r\n              </Card>\r\n\r\n              {/* Action Buttons */}\r\n              <Group justify=\"flex-end\">\r\n                <Button variant=\"light\" onClick={closeClaimDetail}>\r\n                  Close\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconFileUpload size={16} />}>\r\n                  Upload Documents\r\n                </Button>\r\n                <Button leftSection={<IconEdit size={16} />}>\r\n                  Update Claim\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </ScrollArea>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* New Claim Modal */}\r\n      <Modal\r\n        opened={newClaimOpened}\r\n        onClose={closeNewClaim}\r\n        title=\"Submit New Insurance Claim\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2} spacing=\"md\">\r\n            <Select\r\n              label=\"Patient\"\r\n              placeholder=\"Select patient\"\r\n              data={[\r\n                { value: 'P001', label: 'Rajesh Kumar' },\r\n                { value: 'P002', label: 'Sunita Patel' },\r\n                { value: 'P003', label: 'Mohammed Ali' }\r\n              ]}\r\n              searchable\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Insurance Provider\"\r\n              placeholder=\"Select provider\"\r\n              data={[].map /* TODO: Fetch from API */(p => ({ value: p.id, label: p.name }))}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n\r\n          <SimpleGrid cols={2} spacing=\"md\">\r\n            <TextInput\r\n              label=\"Policy Number\"\r\n              placeholder=\"Enter policy number\"\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Claim Type\"\r\n              placeholder=\"Select type\"\r\n              data={[\r\n                { value: 'cashless', label: 'Cashless' },\r\n                { value: 'reimbursement', label: 'Reimbursement' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n\r\n          <Textarea\r\n            label=\"Diagnosis\"\r\n            placeholder=\"Enter primary diagnosis\"\r\n            required\r\n          />\r\n\r\n          <SimpleGrid cols={2} spacing=\"md\">\r\n            <NumberInput\r\n              label=\"Total Bill Amount\"\r\n              placeholder=\"Enter amount\"\r\n              leftSection=\"₹\"\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Priority\"\r\n              placeholder=\"Select priority\"\r\n              data={[\r\n                { value: 'high', label: 'High' },\r\n                { value: 'medium', label: 'Medium' },\r\n                { value: 'low', label: 'Low' }\r\n              ]}\r\n              defaultValue=\"medium\"\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n\r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeNewClaim}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Claim Submitted',\r\n                message: 'Insurance claim has been successfully submitted',\r\n                color: 'green',\r\n              });\r\n              closeNewClaim();\r\n            }}>\r\n              Submit Claim\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InsuranceManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\integration\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Avatar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'NumberInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CopyButton' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'JsonInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 33,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 36,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RingProgress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 37,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Center' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 38,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Accordion' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 39,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconServerCog' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 59,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudComputing' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 60,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDeviceAnalytics' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 61,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChartPie' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTimeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReportAnalytics' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowsShuffle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 71,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSettings' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 73,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTool' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 76,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUsers' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBandage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 78,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrandAws' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 79,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChartDots' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 81,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 81,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChartInfographic' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 82,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowsLeftRight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboardCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 84,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHexagonLetterA' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHexagonLetterI' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 86,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 86,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHexagon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 88,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 88,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMessage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 89,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconActivity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 92,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChartLine' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 93,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRobot' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 94,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 94,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrandJavascript' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 96,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 96,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBuilding' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 97,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileCode' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 98,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 98,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCpu' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 100,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 100,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCircleCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 102,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 102,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNotebook' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 103,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 103,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTerminal2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 104,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPuzzle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 105,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPoint' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 106,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 106,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLink' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 109,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 109,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IntegrationStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 120,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 120,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DataWarehouse' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 121,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 121,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Report' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 123,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 123,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MLModel' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 125,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 125,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DataPipeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 126,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 126,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AlertType' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 127,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 127,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'APIKey' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 128,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 128,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SystemConnector' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 129,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 129,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IntegrationStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 130,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 130,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedIntegration' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 140,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 140,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedEndpoint' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 141,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 141,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedDataSource' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 142,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 142,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setSelectedDataSource' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 142,
        "column": 30,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 142,
        "endColumn": 51
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedDashboard' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 143,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 143,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedModel' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 144,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 144,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'integrationDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 147,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 147,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeIntegrationDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 147,
        "column": 73,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 147,
        "endColumn": 95
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'endpointDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 149,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 149,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeEndpointDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 149,
        "column": 67,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 149,
        "endColumn": 86
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'dashboardDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 150,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 150,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeDashboardDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 150,
        "column": 69,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 150,
        "endColumn": 89
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'modelDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 151,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 151,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeModelDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 151,
        "column": 61,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 151,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'simulatedKey' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 1144,
        "column": 21,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1144,
        "endColumn": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 70,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Stack,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Alert,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  PasswordInput,\r\n  Switch,\r\n  Code,\r\n  CopyButton,\r\n  Tooltip,\r\n  JsonInput,\r\n  Divider,\r\n  Timeline,\r\n  List,\r\n  RingProgress,\r\n  Center,\r\n  Accordion\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\n// Charts removed due to MantineProvider compatibility issues\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconChartBar,\r\n  IconRefresh,\r\n  IconUpload,\r\n  IconDownload,\r\n  IconCheck,\r\n  IconX,\r\n  IconDatabase,\r\n  IconApi,\r\n  IconServerCog,\r\n  IconCloudComputing,\r\n  IconDeviceAnalytics,\r\n  IconChartPie,\r\n  IconWand,\r\n  IconArrowsRightLeft,\r\n  IconTimeline,\r\n  IconReportAnalytics,\r\n  IconArrowsShuffle,\r\n  IconFilter,\r\n  IconLock,\r\n  IconAlertCircle,\r\n  IconArrowDown,\r\n  IconArrowUp,\r\n  IconSettings,\r\n  IconClipboardData,\r\n  IconTable,\r\n  IconTool,\r\n  IconUsers,\r\n  IconBandage,\r\n  IconBrandAws,\r\n  IconCloudUpload,\r\n  IconChartDots,\r\n  IconChartInfographic,\r\n  IconArrowsLeftRight,\r\n  IconClipboardCheck,\r\n  IconHexagonLetterA,\r\n  IconHexagonLetterI,\r\n  IconBrain,\r\n  IconHexagon,\r\n  IconMessage,\r\n  IconBuildingWarehouse,\r\n  IconDashboard,\r\n  IconActivity,\r\n  IconChartLine,\r\n  IconRobot,\r\n  IconBrandPython,\r\n  IconBrandJavascript,\r\n  IconBuilding,\r\n  IconFileCode,\r\n  IconExternalLink,\r\n  IconCpu,\r\n  IconSchema,\r\n  IconCircleCheck,\r\n  IconNotebook,\r\n  IconTerminal2,\r\n  IconPuzzle,\r\n  IconPoint,\r\n  IconFileText,\r\n  IconDeviceDesktopAnalytics,\r\n  IconLink,\r\n  IconUserCircle,\r\n  IconClock,\r\n  IconPlug\r\n} from '@tabler/icons-react';\r\n\r\n// Import types and mock data\r\nimport {\r\n  APIEndpoint,\r\n  DataSource,\r\n  Integration,\r\n  IntegrationStatus,\r\n  DataWarehouse,\r\n  Dashboard,\r\n  Report,\r\n  PredictiveModel,\r\n  MLModel,\r\n  DataPipeline,\r\n  Alert as AlertType,\r\n  APIKey,\r\n  SystemConnector,\r\n  IntegrationStats\r\n} from '../../../types/integration';\r\n// Mock data imports removed\r\n\r\nconst IntegrationHub = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('overview');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedType, setSelectedType] = useState<string>('');\r\n  const [selectedIntegration, setSelectedIntegration] = useState<Integration | null>(null);\r\n  const [selectedEndpoint, setSelectedEndpoint] = useState<APIEndpoint | null>(null);\r\n  const [selectedDataSource, setSelectedDataSource] = useState<DataSource | null>(null);\r\n  const [selectedDashboard, setSelectedDashboard] = useState<Dashboard | null>(null);\r\n  const [selectedModel, setSelectedModel] = useState<PredictiveModel | null>(null);\r\n\r\n  // Modal states\r\n  const [integrationDetailOpened, { open: openIntegrationDetail, close: closeIntegrationDetail }] = useDisclosure(false);\r\n  const [createIntegrationOpened, { open: openCreateIntegration, close: closeCreateIntegration }] = useDisclosure(false);\r\n  const [endpointDetailOpened, { open: openEndpointDetail, close: closeEndpointDetail }] = useDisclosure(false);\r\n  const [dashboardDetailOpened, { open: openDashboardDetail, close: closeDashboardDetail }] = useDisclosure(false);\r\n  const [modelDetailOpened, { open: openModelDetail, close: closeModelDetail }] = useDisclosure(false);\r\n  const [apiKeyOpened, { open: openApiKey, close: closeApiKey }] = useDisclosure(false);\r\n\r\n  // Filter integrations\r\n  const filteredIntegrations = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((integration) => {\r\n      const matchesSearch = \r\n        integration.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        integration.description.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesStatus = !selectedStatus || integration.status === selectedStatus;\r\n      const matchesType = !selectedType || integration.type === selectedType;\r\n\r\n      return matchesSearch && matchesStatus && matchesType;\r\n    });\r\n  }, [searchQuery, selectedStatus, selectedType]);\r\n\r\n  // Filter API endpoints\r\n  const filteredEndpoints = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((endpoint) => \r\n      endpoint.path.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      endpoint.description.toLowerCase().includes(searchQuery.toLowerCase())\r\n    );\r\n  }, [searchQuery]);\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return 'green';\r\n      case 'inactive': return 'gray';\r\n      case 'error': return 'red';\r\n      case 'warning': return 'yellow';\r\n      case 'pending': return 'orange';\r\n      case 'updating': return 'blue';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const handleViewIntegration = (integration: Integration) => {\r\n    setSelectedIntegration(integration);\r\n    openIntegrationDetail();\r\n  };\r\n\r\n  const handleViewEndpoint = (endpoint: APIEndpoint) => {\r\n    setSelectedEndpoint(endpoint);\r\n    openEndpointDetail();\r\n  };\r\n  \r\n  const handleViewDashboard = (dashboard: Dashboard) => {\r\n    setSelectedDashboard(dashboard);\r\n    openDashboardDetail();\r\n  };\r\n  \r\n  const handleViewModel = (model: PredictiveModel) => {\r\n    setSelectedModel(model);\r\n    openModelDetail();\r\n  };\r\n\r\n  const formatDate = (date: string) => {\r\n    return new Date(date).toLocaleDateString('en-IN', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  // Quick stats\r\n  const quickStats = [\r\n    {\r\n      title: 'Active Integrations',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconArrowsRightLeft,\r\n      color: 'blue'\r\n    },\r\n    {\r\n      title: 'Data Sources',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconDatabase,\r\n      color: 'green'\r\n    },\r\n    {\r\n      title: 'API Endpoints',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconApi,\r\n      color: 'violet'\r\n    },\r\n    {\r\n      title: 'ML Models',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconBrain,\r\n      color: 'orange'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Integration & Data Analytics Hub</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage API integrations, data warehousing, analytics, and interoperability\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconApi size={16} />}\r\n            onClick={openApiKey}\r\n          >\r\n            API Keys\r\n          </Button>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={openCreateIntegration}\r\n          >\r\n            New Integration\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Quick Stats */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {quickStats.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"overview\" leftSection={<IconChartBar size={16} />}>\r\n            Overview\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"api\" leftSection={<IconApi size={16} />}>\r\n            API Management\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"integrations\" leftSection={<IconArrowsRightLeft size={16} />}>\r\n            Integrations\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"datawarehouse\" leftSection={<IconBuildingWarehouse size={16} />}>\r\n            Data Warehouse\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"dashboards\" leftSection={<IconDashboard size={16} />}>\r\n            Dashboards\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconDeviceDesktopAnalytics size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Overview Tab */}\r\n        <Tabs.Panel value=\"overview\">\r\n          <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\" mt=\"md\">\r\n            {/* Integration Status */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Integration Status</Title>\r\n              <Stack gap=\"md\">\r\n                <Group justify=\"space-between\">\r\n                  <Group gap=\"xs\">\r\n                    <ThemeIcon color=\"green\" variant=\"light\" size=\"sm\">\r\n                      <IconCheck size={12} />\r\n                    </ThemeIcon>\r\n                    <Text size=\"sm\">Active</Text>\r\n                  </Group>\r\n                  <Text size=\"sm\" fw={600}>24</Text>\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Group gap=\"xs\">\r\n                    <ThemeIcon color=\"red\" variant=\"light\" size=\"sm\">\r\n                      <IconX size={12} />\r\n                    </ThemeIcon>\r\n                    <Text size=\"sm\">Error</Text>\r\n                  </Group>\r\n                  <Text size=\"sm\" fw={600}>3</Text>\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Group gap=\"xs\">\r\n                    <ThemeIcon color=\"yellow\" variant=\"light\" size=\"sm\">\r\n                      <IconAlertCircle size={12} />\r\n                    </ThemeIcon>\r\n                    <Text size=\"sm\">Warning</Text>\r\n                  </Group>\r\n                  <Text size=\"sm\" fw={600}>5</Text>\r\n                </Group>\r\n                <Group justify=\"space-between\">\r\n                  <Group gap=\"xs\">\r\n                    <ThemeIcon color=\"blue\" variant=\"light\" size=\"sm\">\r\n                      <IconClock size={12} />\r\n                    </ThemeIcon>\r\n                    <Text size=\"sm\">Pending</Text>\r\n                  </Group>\r\n                  <Text size=\"sm\" fw={600}>8</Text>\r\n                </Group>\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* API Usage */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">API Usage (Last 7 days)</Title>\r\n              <Stack gap=\"xs\">\r\n                {[\r\n                  { date: 'Mon', calls: 1200 },\r\n                  { date: 'Tue', calls: 1800 },\r\n                  { date: 'Wed', calls: 1600 },\r\n                  { date: 'Thu', calls: 2200 },\r\n                  { date: 'Fri', calls: 2400 },\r\n                  { date: 'Sat', calls: 1500 },\r\n                  { date: 'Sun', calls: 1300 }\r\n                ].map((item) => (\r\n                  <Group key={item.date} justify=\"space-between\">\r\n                    <Text size=\"sm\" c=\"dimmed\">{item.date}</Text>\r\n                    <Group gap=\"xs\">\r\n                      <Progress value={(item.calls / 2400) * 100} style={{ width: 100 }} size=\"sm\" />\r\n                      <Text size=\"sm\" fw={500}>{item.calls.toLocaleString()}</Text>\r\n                    </Group>\r\n                  </Group>\r\n                ))}\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* Recent Integrations */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Recent Integrations</Title>\r\n              <Timeline active={3} bulletSize={24} lineWidth={2}>\r\n                {0 /* TODO: Fetch from API */(0, 4).map((integration) => (\r\n                  <Timeline.Item\r\n                    key={integration.id}\r\n                    bullet={\r\n                      <ThemeIcon color={getStatusColor(integration.status)} size={24} radius=\"xl\">\r\n                        <IconArrowsRightLeft size={12} />\r\n                      </ThemeIcon>\r\n                    }\r\n                    title={integration.name}\r\n                  >\r\n                    <Text size=\"sm\" c=\"dimmed\">{integration.type}</Text>\r\n                    <Text size=\"xs\" c=\"dimmed\">{formatDate(integration.lastSync)}</Text>\r\n                  </Timeline.Item>\r\n                ))}\r\n              </Timeline>\r\n            </Card>\r\n\r\n            {/* Data Processing Metrics */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Data Processing</Title>\r\n              <Stack gap=\"md\">\r\n                {['ETL Jobs', 'Warehouse Queries', 'API Response Time', 'ML Predictions'].map((metric, index) => {\r\n                  const values = [92, 85, 98, 78];\r\n                  return (\r\n                    <div key={metric}>\r\n                      <Group justify=\"space-between\" mb=\"xs\">\r\n                        <Text size=\"sm\" fw={500}>{metric}</Text>\r\n                        <Text size=\"sm\">{values[index]}%</Text>\r\n                      </Group>\r\n                      <Progress value={values[index]} size=\"md\" color={values[index] > 90 ? 'green' : 'blue'} />\r\n                    </div>\r\n                  );\r\n                })}\r\n              </Stack>\r\n            </Card>\r\n          </SimpleGrid>\r\n        </Tabs.Panel>\r\n\r\n        {/* API Management Tab */}\r\n        <Tabs.Panel value=\"api\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>API Endpoints</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />}>\r\n                  Add Endpoint\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconDownload size={16} />}>\r\n                  Export Swagger\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Search */}\r\n            <TextInput\r\n              placeholder=\"Search endpoints...\"\r\n              leftSection={<IconSearch size={16} />}\r\n              value={searchQuery}\r\n              onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n              mb=\"md\"\r\n            />\r\n\r\n            {/* API Endpoints Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Path</Table.Th>\r\n                    <Table.Th>Method</Table.Th>\r\n                    <Table.Th>Version</Table.Th>\r\n                    <Table.Th>Description</Table.Th>\r\n                    <Table.Th>Auth</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredEndpoints.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={7}>\r\n                        <EmptyState\r\n                          icon={<IconPlug size={48} />}\r\n                          title=\"No integrations\"\r\n                          description=\"Connect external systems\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredEndpoints.map((endpoint) => (\r\n                      <Table.Tr key={endpoint.id}>\r\n                        <Table.Td>\r\n                          <Code>{endpoint.path}</Code>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge \r\n                            color={\r\n                              endpoint.method === 'GET' ? 'blue' :\r\n                              endpoint.method === 'POST' ? 'green' :\r\n                              endpoint.method === 'PUT' ? 'orange' :\r\n                              endpoint.method === 'DELETE' ? 'red' : 'gray'\r\n                            }\r\n                          >\r\n                            {endpoint.method}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>{endpoint.version}</Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\" lineClamp={2}>{endpoint.description}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group>\r\n                            {endpoint.requiresAuth && <IconLock size={16} />}\r\n                            <Text size=\"sm\">{endpoint.authType}</Text>\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getStatusColor(endpoint.status)} variant=\"light\">\r\n                            {endpoint.status.toUpperCase()}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon\r\n                              variant=\"subtle\"\r\n                              color=\"blue\"\r\n                              onClick={() => handleViewEndpoint(endpoint)}\r\n                            >\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"green\">\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                              <IconExternalLink size={16} />\r\n                            </ActionIcon>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))\r\n                  )}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Integrations Tab */}\r\n        <Tabs.Panel value=\"integrations\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"md\">\r\n              <Title order={3}>System Integrations</Title>\r\n              <Button leftSection={<IconPlus size={16} />} onClick={openCreateIntegration}>\r\n                New Integration\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search integrations...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'active', label: 'Active' },\r\n                  { value: 'inactive', label: 'Inactive' },\r\n                  { value: 'error', label: 'Error' },\r\n                  { value: 'warning', label: 'Warning' },\r\n                  { value: 'pending', label: 'Pending' },\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Type\"\r\n                data={[\r\n                  { value: 'ehr', label: 'EHR System' },\r\n                  { value: 'payment', label: 'Payment Gateway' },\r\n                  { value: 'analytics', label: 'Analytics' },\r\n                  { value: 'lab', label: 'Laboratory' },\r\n                  { value: 'pharmacy', label: 'Pharmacy' },\r\n                  { value: 'imaging', label: 'Imaging' },\r\n                ]}\r\n                value={selectedType}\r\n                onChange={setSelectedType}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Integrations Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {filteredIntegrations.map((integration) => (\r\n                <Card key={integration.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{integration.name}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{integration.type}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(integration.status)} variant=\"light\">\r\n                      {integration.status.toUpperCase()}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"md\">\r\n                    {integration.description}\r\n                  </Text>\r\n\r\n                  <Stack gap=\"xs\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Last Sync</Text>\r\n                      <Text size=\"sm\">{formatDate(integration.lastSync)}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Data Flow</Text>\r\n                      <Text size=\"sm\">{integration.dataDirection}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Authentication</Text>\r\n                      <Text size=\"sm\">{integration.authMethod}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Button \r\n                      variant=\"light\" \r\n                      size=\"xs\"\r\n                      leftSection={<IconRefresh size={14} />}\r\n                    >\r\n                      Sync Now\r\n                    </Button>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewIntegration(integration)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Data Warehouse Tab */}\r\n        <Tabs.Panel value=\"datawarehouse\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Data Warehouse</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />}>\r\n                  Add Data Source\r\n                </Button>\r\n                <Button \r\n                  variant=\"light\" \r\n                  leftSection={<IconCloudUpload size={16} />}\r\n                >\r\n                  ETL Jobs\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Data Sources and Warehouses */}\r\n            <SimpleGrid cols={{ base: 1, md: 2 }} spacing=\"lg\" mb=\"lg\">\r\n              {/* Data Sources */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Data Sources</Title>\r\n                <Stack gap=\"md\">\r\n                  {[].map /* TODO: Fetch from API */((source) => (\r\n                    <Group key={source.id} justify=\"space-between\" p=\"sm\" style={{ backgroundColor: '#f8f9fa', borderRadius: '8px' }}>\r\n                      <Group>\r\n                        <ThemeIcon color={getStatusColor(source.status)} size=\"md\" radius=\"xl\">\r\n                          <IconDatabase size={16} />\r\n                        </ThemeIcon>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>{source.name}</Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">{source.type}</Text>\r\n                        </div>\r\n                      </Group>\r\n                      <Badge color={getStatusColor(source.status)}>\r\n                        {source.status}\r\n                      </Badge>\r\n                    </Group>\r\n                  ))}\r\n                </Stack>\r\n              </Card>\r\n              \r\n              {/* Warehouses */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Data Warehouses</Title>\r\n                <Stack gap=\"md\">\r\n                  {[].map /* TODO: Fetch from API */((warehouse) => (\r\n                    <Group key={warehouse.id} justify=\"space-between\" p=\"sm\" style={{ backgroundColor: '#f8f9fa', borderRadius: '8px' }}>\r\n                      <Group>\r\n                        <ThemeIcon color=\"blue\" size=\"md\" radius=\"xl\">\r\n                          <IconBuildingWarehouse size={16} />\r\n                        </ThemeIcon>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>{warehouse.name}</Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">{warehouse.provider}</Text>\r\n                        </div>\r\n                      </Group>\r\n                      <Group>\r\n                        <Text size=\"xs\" c=\"dimmed\">Size: {warehouse.size}</Text>\r\n                        <Badge color={getStatusColor(warehouse.status)}>\r\n                          {warehouse.status}\r\n                        </Badge>\r\n                      </Group>\r\n                    </Group>\r\n                  ))}\r\n                </Stack>\r\n              </Card>\r\n            </SimpleGrid>\r\n\r\n            {/* Data Pipelines */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder mb=\"lg\">\r\n              <Title order={4} mb=\"md\">Data Pipelines</Title>\r\n              <ScrollArea>\r\n                <Table striped highlightOnHover>\r\n                  <Table.Thead>\r\n                    <Table.Tr>\r\n                      <Table.Th>Pipeline Name</Table.Th>\r\n                      <Table.Th>Source</Table.Th>\r\n                      <Table.Th>Destination</Table.Th>\r\n                      <Table.Th>Frequency</Table.Th>\r\n                      <Table.Th>Last Run</Table.Th>\r\n                      <Table.Th>Status</Table.Th>\r\n                      <Table.Th>Actions</Table.Th>\r\n                    </Table.Tr>\r\n                  </Table.Thead>\r\n                  <Table.Tbody>\r\n                    {[].map /* TODO: Fetch from API */((pipeline) => (\r\n                      <Table.Tr key={pipeline.id}>\r\n                        <Table.Td>\r\n                          <Text fw={500}>{pipeline.name}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>{pipeline.source}</Table.Td>\r\n                        <Table.Td>{pipeline.destination}</Table.Td>\r\n                        <Table.Td>{pipeline.frequency}</Table.Td>\r\n                        <Table.Td>\r\n                          <Group>\r\n                            <Text size=\"sm\">{formatDate(pipeline.lastRun)}</Text>\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getStatusColor(pipeline.status)} variant=\"light\">\r\n                            {pipeline.status.toUpperCase()}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"green\">\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                              <IconRefresh size={16} />\r\n                            </ActionIcon>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))}\r\n                  </Table.Tbody>\r\n                </Table>\r\n              </ScrollArea>\r\n            </Card>\r\n\r\n            {/* Schema Browser Teaser */}\r\n            <Group justify=\"center\">\r\n              <Button variant=\"outline\" leftSection={<IconSchema size={16} />}>\r\n                Open Schema Browser\r\n              </Button>\r\n            </Group>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Dashboards Tab */}\r\n        <Tabs.Panel value=\"dashboards\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Analytics Dashboards</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Create Dashboard\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Dashboards Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((dashboard) => (\r\n                <Card key={dashboard.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{dashboard.title}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{dashboard.category}</Text>\r\n                    </div>\r\n                    <ThemeIcon color=\"blue\" radius=\"xl\" variant=\"light\">\r\n                      <IconDashboard size={18} />\r\n                    </ThemeIcon>\r\n                  </Group>\r\n\r\n                  {dashboard.thumbnail && (\r\n                    <div style={{ \r\n                      height: 120, \r\n                      background: `url(${dashboard.thumbnail})`, \r\n                      backgroundSize: 'cover', \r\n                      backgroundPosition: 'center', \r\n                      borderRadius: '8px',\r\n                      marginBottom: '16px'\r\n                    }} />\r\n                  )}\r\n\r\n                  <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"md\">\r\n                    {dashboard.description}\r\n                  </Text>\r\n\r\n                  <Group justify=\"space-between\" mb=\"xs\">\r\n                    <Text size=\"sm\" c=\"dimmed\">Last Updated</Text>\r\n                    <Text size=\"sm\">{formatDate(dashboard.lastUpdated)}</Text>\r\n                  </Group>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Group gap=\"xs\">\r\n                      <IconUserCircle size={16} />\r\n                      <Text size=\"sm\">{dashboard.owner}</Text>\r\n                    </Group>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewDashboard(dashboard)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconExternalLink size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n\r\n            {/* Reports Section */}\r\n            <Title order={3} mt=\"xl\" mb=\"lg\">Reports</Title>\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Report Name</Table.Th>\r\n                    <Table.Th>Category</Table.Th>\r\n                    <Table.Th>Schedule</Table.Th>\r\n                    <Table.Th>Last Generated</Table.Th>\r\n                    <Table.Th>Format</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {[].map /* TODO: Fetch from API */((report) => (\r\n                    <Table.Tr key={report.id}>\r\n                      <Table.Td>\r\n                        <Text fw={500}>{report.name}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>{report.category}</Table.Td>\r\n                      <Table.Td>{report.schedule}</Table.Td>\r\n                      <Table.Td>{formatDate(report.lastGenerated)}</Table.Td>\r\n                      <Table.Td>\r\n                        <Group>\r\n                          {report.format === 'PDF' && <IconFileText size={16} />}\r\n                          {report.format === 'CSV' && <IconTable size={16} />}\r\n                          {report.format === 'EXCEL' && <IconClipboardData size={16} />}\r\n                          <Text size=\"sm\">{report.format}</Text>\r\n                        </Group>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon variant=\"subtle\" color=\"green\">\r\n                            <IconDownload size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                            <IconEdit size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                            <IconRefresh size={16} />\r\n                          </ActionIcon>\r\n                        </Group>\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ))}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Analytics & ML Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Predictive Analytics</Title>\r\n              <Button leftSection={<IconBrain size={16} />}>\r\n                Deploy New Model\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Predictive Models */}\r\n            <SimpleGrid cols={{ base: 1, md: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((model) => (\r\n                <Card key={model.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{model.name}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{model.modelType}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(model.status)} variant=\"light\">\r\n                      {model.status.toUpperCase()}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"md\">\r\n                    {model.description}\r\n                  </Text>\r\n\r\n                  <Group justify=\"space-between\" mb=\"xs\">\r\n                    <Text size=\"sm\" c=\"dimmed\">Accuracy</Text>\r\n                    <Group>\r\n                      <Progress \r\n                        value={model.accuracy * 100} \r\n                        size=\"sm\" \r\n                        style={{ width: 100 }}\r\n                        color={model.accuracy > 0.9 ? 'green' : model.accuracy > 0.75 ? 'blue' : 'orange'}\r\n                      />\r\n                      <Text size=\"sm\">{(model.accuracy * 100).toFixed(1)}%</Text>\r\n                    </Group>\r\n                  </Group>\r\n\r\n                  <Group justify=\"space-between\" mb=\"xs\">\r\n                    <Text size=\"sm\" c=\"dimmed\">Last Trained</Text>\r\n                    <Text size=\"sm\">{formatDate(model.lastTrained)}</Text>\r\n                  </Group>\r\n\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <Text size=\"sm\" c=\"dimmed\">Framework</Text>\r\n                    <Group>\r\n                      {model.framework === 'TensorFlow' && <IconBrandPython size={16} />}\r\n                      {model.framework === 'PyTorch' && <IconBrandPython size={16} />}\r\n                      {model.framework === 'scikit-learn' && <IconBrandPython size={16} />}\r\n                      <Text size=\"sm\">{model.framework}</Text>\r\n                    </Group>\r\n                  </Group>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Button \r\n                      variant=\"light\" \r\n                      size=\"xs\"\r\n                      leftSection={<IconWand size={14} />}\r\n                    >\r\n                      Test Predict\r\n                    </Button>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewModel(model)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconRefresh size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n\r\n            {/* ML Model Metrics Chart */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder mt=\"xl\">\r\n              <Title order={4} mb=\"md\">Model Performance Metrics</Title>\r\n              <SimpleGrid cols={2}>\r\n                <Stack gap=\"md\">\r\n                  {[\r\n                    { model: 'Readmission', accuracy: 0.92, precision: 0.89, recall: 0.87 },\r\n                    { model: 'LOS Prediction', accuracy: 0.85, precision: 0.83, recall: 0.81 },\r\n                    { model: 'Disease Risk', accuracy: 0.88, precision: 0.86, recall: 0.84 },\r\n                    { model: 'Cost Prediction', accuracy: 0.79, precision: 0.76, recall: 0.75 }\r\n                  ].map((item) => (\r\n                    <div key={item.model}>\r\n                      <Text size=\"sm\" fw={500} mb=\"xs\">{item.model}</Text>\r\n                      <Stack gap={4}>\r\n                        <Group justify=\"space-between\">\r\n                          <Text size=\"xs\" c=\"dimmed\">Accuracy</Text>\r\n                          <Group gap=\"xs\">\r\n                            <Progress value={item.accuracy * 100} color=\"green\" style={{ width: 80 }} size=\"xs\" />\r\n                            <Text size=\"xs\">{(item.accuracy * 100).toFixed(0)}%</Text>\r\n                          </Group>\r\n                        </Group>\r\n                        <Group justify=\"space-between\">\r\n                          <Text size=\"xs\" c=\"dimmed\">Precision</Text>\r\n                          <Group gap=\"xs\">\r\n                            <Progress value={item.precision * 100} color=\"blue\" style={{ width: 80 }} size=\"xs\" />\r\n                            <Text size=\"xs\">{(item.precision * 100).toFixed(0)}%</Text>\r\n                          </Group>\r\n                        </Group>\r\n                        <Group justify=\"space-between\">\r\n                          <Text size=\"xs\" c=\"dimmed\">Recall</Text>\r\n                          <Group gap=\"xs\">\r\n                            <Progress value={item.recall * 100} color=\"violet\" style={{ width: 80 }} size=\"xs\" />\r\n                            <Text size=\"xs\">{(item.recall * 100).toFixed(0)}%</Text>\r\n                          </Group>\r\n                        </Group>\r\n                      </Stack>\r\n                    </div>\r\n                  ))}\r\n                </Stack>\r\n                <Stack gap=\"md\" justify=\"center\">\r\n                  <Alert color=\"blue\" variant=\"light\" title=\"AI-Driven Insights\">\r\n                    <Text size=\"sm\">\r\n                      The readmission prediction model has shown a 15% improvement in accuracy after the latest training with expanded patient history features.\r\n                    </Text>\r\n                  </Alert>\r\n                  <Alert color=\"green\" variant=\"light\" title=\"Action Recommended\">\r\n                    <Text size=\"sm\">\r\n                      Consider deploying the Cost Prediction model to production as it has reached stable performance metrics in the last 3 evaluation cycles.\r\n                    </Text>\r\n                  </Alert>\r\n                </Stack>\r\n              </SimpleGrid>\r\n            </Card>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* API Key Modal */}\r\n      <Modal\r\n        opened={apiKeyOpened}\r\n        onClose={closeApiKey}\r\n        title=\"API Key Management\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <Alert color=\"blue\" variant=\"light\">\r\n            <Text size=\"sm\">\r\n              API keys are used to authenticate requests to the API. Keep your API keys secure and never share them publicly.\r\n            </Text>\r\n          </Alert>\r\n\r\n          <Title order={4}>Your API Keys</Title>\r\n          <ScrollArea>\r\n            <Table>\r\n              <Table.Thead>\r\n                <Table.Tr>\r\n                  <Table.Th>Name</Table.Th>\r\n                  <Table.Th>Type</Table.Th>\r\n                  <Table.Th>Created</Table.Th>\r\n                  <Table.Th>Last Used</Table.Th>\r\n                  <Table.Th>Actions</Table.Th>\r\n                </Table.Tr>\r\n              </Table.Thead>\r\n              <Table.Tbody>\r\n                {[].map /* TODO: Fetch from API */((key) => (\r\n                  <Table.Tr key={key.id}>\r\n                    <Table.Td>{key.name}</Table.Td>\r\n                    <Table.Td>\r\n                      <Badge color={key.keyType === 'production' ? 'red' : 'blue'}>\r\n                        {key.keyType}\r\n                      </Badge>\r\n                    </Table.Td>\r\n                    <Table.Td>{formatDate(key.created)}</Table.Td>\r\n                    <Table.Td>{formatDate(key.lastUsed)}</Table.Td>\r\n                    <Table.Td>\r\n                      <Group gap=\"xs\">\r\n                        <Tooltip label=\"Revoke Key\">\r\n                          <ActionIcon color=\"red\" variant=\"light\">\r\n                            <IconX size={16} />\r\n                          </ActionIcon>\r\n                        </Tooltip>\r\n                        <Tooltip label=\"View Usage\">\r\n                          <ActionIcon color=\"blue\" variant=\"light\">\r\n                            <IconChartBar size={16} />\r\n                          </ActionIcon>\r\n                        </Tooltip>\r\n                      </Group>\r\n                    </Table.Td>\r\n                  </Table.Tr>\r\n                ))}\r\n              </Table.Tbody>\r\n            </Table>\r\n          </ScrollArea>\r\n\r\n          <Divider />\r\n\r\n          <Title order={4}>Generate New API Key</Title>\r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"Key Name\"\r\n              placeholder=\"My Application Key\"\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Key Type\"\r\n              placeholder=\"Select type\"\r\n              data={[\r\n                { value: 'development', label: 'Development' },\r\n                { value: 'production', label: 'Production' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n\r\n          <Select\r\n            label=\"Permissions\"\r\n            placeholder=\"Select permissions\"\r\n            data={[\r\n              { value: 'read', label: 'Read Only' },\r\n              { value: 'write', label: 'Read & Write' },\r\n              { value: 'admin', label: 'Admin (Full Access)' }\r\n            ]}\r\n            required\r\n          />\r\n\r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeApiKey}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'API Key Generated',\r\n                message: 'Your new API key has been created. Make sure to copy it now as it won\\'t be shown again',\r\n                color: 'green',\r\n              });\r\n              // Simulate API key generation (in real app, would come from server)\r\n              const simulatedKey = 'hcm_' + Math.random().toString(36).substring(2, 15);\r\n              // Would show this key in a separate modal or in UI\r\n            }}>\r\n              Generate Key\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* Create Integration Modal */}\r\n      <Modal\r\n        opened={createIntegrationOpened}\r\n        onClose={closeCreateIntegration}\r\n        title=\"Create New Integration\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <TextInput\r\n            label=\"Integration Name\"\r\n            placeholder=\"Enter integration name\"\r\n            required\r\n          />\r\n          \r\n          <Select\r\n            label=\"Integration Type\"\r\n            placeholder=\"Select type\"\r\n            data={[\r\n              { value: 'ehr', label: 'EHR System' },\r\n              { value: 'payment', label: 'Payment Gateway' },\r\n              { value: 'analytics', label: 'Analytics' },\r\n              { value: 'lab', label: 'Laboratory' },\r\n              { value: 'pharmacy', label: 'Pharmacy' },\r\n              { value: 'imaging', label: 'Imaging' },\r\n            ]}\r\n            required\r\n          />\r\n          \r\n          <Textarea\r\n            label=\"Description\"\r\n            placeholder=\"Describe this integration\"\r\n            rows={3}\r\n          />\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Data Direction\"\r\n              placeholder=\"Select direction\"\r\n              data={[\r\n                { value: 'inbound', label: 'Inbound' },\r\n                { value: 'outbound', label: 'Outbound' },\r\n                { value: 'bidirectional', label: 'Bidirectional' }\r\n              ]}\r\n            />\r\n            \r\n            <Select\r\n              label=\"Authentication Method\"\r\n              placeholder=\"Select method\"\r\n              data={[\r\n                { value: 'api_key', label: 'API Key' },\r\n                { value: 'oauth2', label: 'OAuth 2.0' },\r\n                { value: 'jwt', label: 'JWT' },\r\n                { value: 'basic', label: 'Basic Auth' }\r\n              ]}\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <TextInput\r\n            label=\"API Endpoint URL\"\r\n            placeholder=\"https://api.example.com/v1/\"\r\n          />\r\n          \r\n          <PasswordInput\r\n            label=\"API Secret/Key\"\r\n            placeholder=\"Enter API key or leave blank to configure later\"\r\n          />\r\n          \r\n          <Switch\r\n            label=\"Enable Webhook Notifications\"\r\n            description=\"Receive real-time notifications when data changes\"\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeCreateIntegration}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Integration Created',\r\n                message: 'Your new integration has been successfully created',\r\n                color: 'green',\r\n              });\r\n              closeCreateIntegration();\r\n            }}>\r\n              Create Integration\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default IntegrationHub;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\inventory\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Avatar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Alert' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Checkbox' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Indicator' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 32,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RingProgress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 33,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Box' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 34,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleAreaChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 40,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 47,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 54,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTruck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 56,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 56,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboardList' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 57,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileText' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 58,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 58,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPrinter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 60,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShare' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 61,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFlask' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconExclamationMark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 64,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClockHour4' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUsers' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconWallet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBuildingWarehouse' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRefresh' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 74,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 74,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 75,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBarcode' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 76,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTemperature' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShieldCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 78,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlertTriangle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 79,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCircleCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 80,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ItemCategory' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 87,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'StockTransaction' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 88,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 88,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TransactionType' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 89,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 91,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 91,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Supplier' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 92,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Requisition' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 93,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'EquipmentStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 95,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MaintenanceRecord' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 96,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 96,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MaintenanceType' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 97,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'InventoryAlert' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 98,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 98,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AlertType' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 99,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 99,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'InventoryStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 100,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 100,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedItem' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 112,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 112,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedOrder' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 113,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 113,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedEquipment' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 114,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 114,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'inventoryStats' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 118,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 118,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 120,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 120,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'itemDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 123,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 123,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeItemDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 123,
        "column": 59,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 123,
        "endColumn": 74
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'orderDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 125,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 125,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeOrderDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 125,
        "column": 61,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 125,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'equipmentDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 127,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 127,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeEquipmentDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 127,
        "column": 69,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 127,
        "endColumn": 89
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.",
        "line": 131,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 131,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAllData]",
            "fix": { "range": [3488, 3490], "text": "[fetchAllData]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'fetchInventoryItems' and 'loading'. Either include them or remove the dependency array.",
        "line": 190,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 190,
        "endColumn": 55,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchInventoryItems, loading, searchQuery, selectedCategory, selectedSupplier]",
            "fix": {
              "range": [5361, 5410],
              "text": "[fetchInventoryItems, loading, searchQuery, selectedCategory, selectedSupplier]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useMemo has a missing dependency: 'inventoryItems'. Either include it or remove the dependency array.",
        "line": 205,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 205,
        "endColumn": 71,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [inventoryItems, searchQuery, selectedCategory, selectedStatus]",
            "fix": {
              "range": [6121, 6186],
              "text": "[inventoryItems, searchQuery, selectedCategory, selectedStatus]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getAlertColor' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 271,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 271,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 60,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Alert,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Checkbox,\r\n  Image,\r\n  Indicator,\r\n  RingProgress,\r\n  Box\r\n} from '@mantine/core';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleBarChart, SimpleLineChart } from '../../../components/MantineChart';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconCalendar,\r\n  IconPackage,\r\n  IconChartBar,\r\n  IconPhone,\r\n  IconMail,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconTruck,\r\n  IconClipboardList,\r\n  IconFileText,\r\n  IconDownload,\r\n  IconPrinter,\r\n  IconShare,\r\n  IconFlask,\r\n  IconStethoscope,\r\n  IconExclamationMark,\r\n  IconClockHour4,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconUsers,\r\n  IconCalculator,\r\n  IconWallet,\r\n  IconSettings,\r\n  IconBuildingWarehouse,\r\n  IconShoppingCart,\r\n  IconRefresh,\r\n  IconFilter,\r\n  IconBarcode,\r\n  IconTemperature,\r\n  IconShieldCheck,\r\n  IconAlertTriangle,\r\n  IconCircleCheck,\r\n  IconClipboard\r\n} from '@tabler/icons-react';\r\n\r\n// Import types, services and mock data\r\nimport {\r\n  InventoryItem,\r\n  ItemCategory,\r\n  StockTransaction,\r\n  TransactionType,\r\n  PurchaseOrder,\r\n  OrderStatus,\r\n  Supplier,\r\n  Requisition,\r\n  Equipment,\r\n  EquipmentStatus,\r\n  MaintenanceRecord,\r\n  MaintenanceType,\r\n  InventoryAlert,\r\n  AlertType,\r\n  InventoryStats\r\n} from '../../../types/inventory';\r\nimport inventoryService from '../../../services/inventory.service';\r\n// Mock data imports removed\r\n\r\nconst InventoryManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('items');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedSupplier, setSelectedSupplier] = useState<string>('');\r\n  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);\r\n  const [selectedOrder, setSelectedOrder] = useState<PurchaseOrder | null>(null);\r\n  const [selectedEquipment, setSelectedEquipment] = useState<Equipment | null>(null);\r\n\r\n  // API data state\r\n  const [inventoryItems, setInventoryItems] = useState<InventoryItem[]>([]);\r\n  const [inventoryStats, setInventoryStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Modal states\r\n  const [itemDetailOpened, { open: openItemDetail, close: closeItemDetail }] = useDisclosure(false);\r\n  const [addItemOpened, { open: openAddItem, close: closeAddItem }] = useDisclosure(false);\r\n  const [orderDetailOpened, { open: openOrderDetail, close: closeOrderDetail }] = useDisclosure(false);\r\n  const [addOrderOpened, { open: openAddOrder, close: closeAddOrder }] = useDisclosure(false);\r\n  const [equipmentDetailOpened, { open: openEquipmentDetail, close: closeEquipmentDetail }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  const fetchAllData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      await Promise.all([\r\n        fetchInventoryItems(),\r\n        fetchInventoryStats()\r\n      ]);\r\n    } catch (err: any) {\r\n      console.error('Error loading inventory data:', err);\r\n      setError(err.response?.data?.message || err.message || 'Failed to load inventory data');\r\n      // Fallback to mock data\r\n      setInventoryItems([] /* TODO: Fetch from API */);\r\n      setInventoryStats([] /* TODO: Fetch from API */);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchInventoryItems = async () => {\r\n    try {\r\n      const filters = {\r\n        category: selectedCategory || undefined,\r\n        supplier: selectedSupplier || undefined,\r\n        search: searchQuery || undefined\r\n      };\r\n      const response = await inventoryService.getItems(filters);\r\n      const itemsData = Array.isArray(response.data) ? response.data : (response.data?.items || []);\r\n      setInventoryItems(itemsData as InventoryItem[]);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching inventory items (using empty data):', err.response?.data?.message || err.message);\r\n      setInventoryItems([]);\r\n    }\r\n  };\r\n\r\n  const fetchInventoryStats = async () => {\r\n    try {\r\n      const response = await inventoryService.getStats();\r\n      setInventoryStats(response.data);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching inventory stats (using default values):', err.response?.data?.message || err.message);\r\n      setInventoryStats({\r\n        totalItems: 0,\r\n        lowStockItems: 0,\r\n        outOfStockItems: 0,\r\n        expiringSoon: 0,\r\n        totalValue: 0,\r\n        categoriesCount: 0\r\n      });\r\n    }\r\n  };\r\n\r\n  // Refetch when filters change\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      fetchInventoryItems();\r\n    }\r\n  }, [searchQuery, selectedCategory, selectedSupplier]);\r\n\r\n  // Filter inventory items\r\n  const filteredItems = useMemo(() => {\r\n    return inventoryItems.filter((item) => {\r\n      const matchesSearch = \r\n        ((item as any).itemName || (item as any).name || '').toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        (item.itemCode || '').toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        (item.description || '').toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesCategory = !selectedCategory || (item as any).category === selectedCategory;\r\n      const matchesStatus = !selectedStatus || (item as any).status === selectedStatus;\r\n\r\n      return matchesSearch && matchesCategory && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedCategory, selectedStatus, selectedSupplier]);\r\n\r\n  // Filter purchase orders\r\n  const filteredOrders = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((order) => {\r\n      const matchesSearch = \r\n        ((order as any).orderNumber || order.id || '').toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        ((order.supplier as any)?.companyName || (order.supplier as any)?.name || '').toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesStatus = !selectedStatus || order.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedStatus]);\r\n\r\n  // Filter equipment\r\n  const filteredEquipment = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((equipment) => {\r\n      const matchesSearch = \r\n        ((equipment as any).equipmentName || equipment.name || '').toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        ((equipment as any).model || '').toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        ((equipment as any).serialNumber || '').toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesStatus = !selectedStatus || equipment.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedStatus]);\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'in_stock':\r\n      case 'delivered':\r\n      case 'operational':\r\n      case 'available': return 'green';\r\n      case 'low_stock':\r\n      case 'pending':\r\n      case 'maintenance':\r\n      case 'in_use': return 'orange';\r\n      case 'out_of_stock':\r\n      case 'cancelled':\r\n      case 'out_of_service':\r\n      case 'retired': return 'red';\r\n      case 'expired':\r\n      case 'ordered': return 'yellow';\r\n      case 'damaged': return 'dark';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getCategoryColor = (category: string) => {\r\n    switch (category) {\r\n      case 'medication': return 'blue';\r\n      case 'medical_supplies': return 'green';\r\n      case 'surgical_instruments': return 'purple';\r\n      case 'laboratory': return 'orange';\r\n      case 'radiology': return 'cyan';\r\n      case 'consumables': return 'yellow';\r\n      case 'equipment': return 'red';\r\n      case 'medicines': return 'blue';\r\n      case 'supplies': return 'green';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getAlertColor = (type: string) => {\r\n    switch (type) {\r\n      case 'low_stock': return 'orange';\r\n      case 'expired': return 'red';\r\n      case 'expiring_soon': return 'yellow';\r\n      case 'out_of_stock': return 'red';\r\n      case 'maintenance_due': return 'blue';\r\n      case 'overdue_order': return 'red';\r\n      case 'reorder': return 'orange';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const handleViewItem = (item: InventoryItem) => {\r\n    setSelectedItem(item);\r\n    openItemDetail();\r\n  };\r\n\r\n  const handleViewOrder = (order: PurchaseOrder) => {\r\n    setSelectedOrder(order);\r\n    openOrderDetail();\r\n  };\r\n\r\n  const handleViewEquipment = (equipment: Equipment) => {\r\n    setSelectedEquipment(equipment);\r\n    openEquipmentDetail();\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchQuery('');\r\n    setSelectedCategory('');\r\n    setSelectedStatus('');\r\n    setSelectedSupplier('');\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-IN', {\r\n      style: 'currency',\r\n      currency: 'INR'\r\n    }).format(amount);\r\n  };\r\n\r\n  const getStockLevel = (current: number, minimum: number, maximum: number) => {\r\n    if (current === 0) return { level: 'Out of Stock', color: 'red', percentage: 0 };\r\n    if (current <= minimum) return { level: 'Low Stock', color: 'orange', percentage: (current / maximum) * 100 };\r\n    if (current >= maximum * 0.8) return { level: 'Well Stocked', color: 'green', percentage: (current / maximum) * 100 };\r\n    return { level: 'Normal', color: 'blue', percentage: (current / maximum) * 100 };\r\n  };\r\n\r\n  // Statistics cards\r\n  const statsCards = [\r\n    {\r\n      title: 'Total Items',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconPackage,\r\n      color: 'blue',\r\n      trend: '+5.2%'\r\n    },\r\n    {\r\n      title: 'Low Stock Alerts',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconAlertCircle,\r\n      color: 'orange',\r\n      trend: '-12%'\r\n    },\r\n    {\r\n      title: 'Total Value',\r\n      value: formatCurrency(0 /* TODO: Fetch from API */),\r\n      icon: IconCalculator,\r\n      color: 'green',\r\n      trend: '+8.7%'\r\n    },\r\n    {\r\n      title: 'Equipment',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconStethoscope,\r\n      color: 'purple',\r\n      trend: '+3.1%'\r\n    }\r\n  ];\r\n\r\n  // Chart data\r\n  const categoryDistribution = [];\r\n\r\n  const stockLevelsData = [];\r\n  const monthlyConsumption = [];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Inventory Management</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage medical supplies, equipment, and procurement\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={openAddItem}\r\n          >\r\n            Add Item\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconShoppingCart size={16} />}\r\n            onClick={openAddOrder}\r\n          >\r\n            New Order\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Statistics Cards */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {statsCards.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n              <Group justify=\"space-between\" mt=\"sm\">\r\n                <Badge \r\n                  color={stat.trend.startsWith('+') ? 'green' : 'red'} \r\n                  variant=\"light\"\r\n                  size=\"sm\"\r\n                >\r\n                  {stat.trend}\r\n                </Badge>\r\n                <Text size=\"xs\" c=\"dimmed\">vs last month</Text>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Alerts Section - Hidden until API data available */}\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"items\" leftSection={<IconPackage size={16} />}>\r\n            Inventory Items\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"orders\" leftSection={<IconShoppingCart size={16} />}>\r\n            Purchase Orders\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"equipment\" leftSection={<IconStethoscope size={16} />}>\r\n            Equipment\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"reports\" leftSection={<IconChartBar size={16} />}>\r\n            Reports & Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Inventory Items Tab */}\r\n        <Tabs.Panel value=\"items\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search items...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Category\"\r\n                data={[\r\n                  { value: 'medication', label: 'Medication' },\r\n                  { value: 'medical_supplies', label: 'Medical Supplies' },\r\n                  { value: 'surgical_instruments', label: 'Surgical Instruments' },\r\n                  { value: 'laboratory', label: 'Laboratory' },\r\n                  { value: 'radiology', label: 'Radiology' },\r\n                  { value: 'consumables', label: 'Consumables' },\r\n                  { value: 'equipment', label: 'Equipment' }\r\n                ]}\r\n                value={selectedCategory}\r\n                onChange={setSelectedCategory}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'in_stock', label: 'In Stock' },\r\n                  { value: 'low_stock', label: 'Low Stock' },\r\n                  { value: 'out_of_stock', label: 'Out of Stock' },\r\n                  { value: 'expired', label: 'Expired' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Supplier\"\r\n                data={[].map /* TODO: Fetch from API */(supplier => ({ \r\n                  value: supplier.id, \r\n                  label: (supplier as any).companyName || (supplier as any).name || 'Unknown' \r\n                }))}\r\n                value={selectedSupplier}\r\n                onChange={setSelectedSupplier}\r\n                clearable\r\n              />\r\n              <Button variant=\"light\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Items Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {filteredItems.map((item) => {\r\n                const stockInfo = getStockLevel(\r\n                  item.currentStock, \r\n                  item.minimumStock, \r\n                  item.maximumStock\r\n                );\r\n                \r\n                return (\r\n                  <Card key={item.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                    <Group justify=\"space-between\" mb=\"md\">\r\n                      <div style={{ flex: 1 }}>\r\n                        <Group>\r\n                          <ThemeIcon \r\n                            color={getCategoryColor((item as any).category || item.category)} \r\n                            variant=\"light\"\r\n                            size=\"lg\"\r\n                          >\r\n                            <IconPackage size={20} />\r\n                          </ThemeIcon>\r\n                          <div>\r\n                            <Text fw={600} size=\"sm\" lineClamp={1}>\r\n                              {(item as any).itemName || (item as any).name}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              {(item as any).itemCode || 'N/A'}\r\n                            </Text>\r\n                          </div>\r\n                        </Group>\r\n                      </div>\r\n                  <Badge color={getStatusColor((item as any).status)} variant=\"light\" size=\"sm\">\r\n                    {(item as any).status?.replace('_', ' ') || 'N/A'}\r\n                  </Badge>\r\n                </Group>\r\n\r\n                <Stack gap=\"sm\" mb=\"md\">\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\" c=\"dimmed\">Current Stock</Text>\r\n                    <Text size=\"sm\" fw={600}>\r\n                      {(item as any).currentStock || 0} {(item as any).unit || 'units'}\r\n                    </Text>\r\n                  </Group>\r\n                  \r\n                  <div>\r\n                    <Group justify=\"space-between\" mb=\"xs\">\r\n                      <Text size=\"xs\" c=\"dimmed\">Stock Level</Text>\r\n                      <Text size=\"xs\" c={stockInfo.color} fw={500}>\r\n                        {stockInfo.level}\r\n                      </Text>\r\n                    </Group>\r\n                    <Progress \r\n                      value={stockInfo.percentage} \r\n                      color={stockInfo.color} \r\n                      size=\"sm\" \r\n                    />\r\n                  </div>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\" c=\"dimmed\">Unit Price</Text>\r\n                    <Text size=\"sm\" fw={600}>\r\n                      {formatCurrency((item as any).unitPrice || item.unitCost || 0)}\r\n                    </Text>\r\n                  </Group>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\" c=\"dimmed\">Total Value</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"green\">\r\n                      {formatCurrency((item as any).currentStock * ((item as any).unitPrice || item.unitCost || 0))}\r\n                    </Text>\r\n                  </Group>\r\n\r\n                  {(item as any).expiryDate && (\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Expiry Date</Text>\r\n                      <Text \r\n                        size=\"sm\" \r\n                        c={new Date((item as any).expiryDate) < new Date() ? 'red' : 'dimmed'}\r\n                      >\r\n                        {new Date((item as any).expiryDate).toLocaleDateString()}\r\n                      </Text>\r\n                    </Group>\r\n                  )}\r\n                </Stack>\r\n\r\n                <Group justify=\"space-between\">\r\n                  <Badge color={getCategoryColor((item as any).category || item.category)} variant=\"light\" size=\"xs\">\r\n                    {(item as any).category?.replace('_', ' ') || 'N/A'}\r\n                  </Badge>\r\n                  <Group gap=\"xs\">\r\n                    <ActionIcon\r\n                      variant=\"subtle\"\r\n                      color=\"blue\"\r\n                      onClick={() => handleViewItem(item as any)}\r\n                    >\r\n                      <IconEye size={16} />\r\n                    </ActionIcon>\r\n                    <ActionIcon variant=\"subtle\" color=\"green\">\r\n                      <IconEdit size={16} />\r\n                    </ActionIcon>\r\n                    <Menu>\r\n                      <Menu.Target>\r\n                        <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                          <IconDotsVertical size={16} />\r\n                        </ActionIcon>\r\n                      </Menu.Target>\r\n                      <Menu.Dropdown>\r\n                        <Menu.Item leftSection={<IconClipboard size={14} />}>\r\n                          Stock Adjustment\r\n                        </Menu.Item>\r\n                        <Menu.Item leftSection={<IconShoppingCart size={14} />}>\r\n                          Reorder\r\n                        </Menu.Item>\r\n                        <Menu.Item leftSection={<IconDownload size={14} />}>\r\n                          Export Data\r\n                        </Menu.Item>\r\n                        <Menu.Divider />\r\n                        <Menu.Item \r\n                          leftSection={<IconTrash size={14} />}\r\n                          color=\"red\"\r\n                        >\r\n                          Delete\r\n                        </Menu.Item>\r\n                      </Menu.Dropdown>\r\n                    </Menu>\r\n                  </Group>\r\n                    </Group>\r\n                  </Card>\r\n                );\r\n              })}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Purchase Orders Tab */}\r\n        <Tabs.Panel value=\"orders\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Purchase Orders</Title>\r\n              <Button leftSection={<IconPlus size={16} />} onClick={openAddOrder}>\r\n                Create Order\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Order Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search orders...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'pending', label: 'Pending' },\r\n                  { value: 'approved', label: 'Approved' },\r\n                  { value: 'ordered', label: 'Ordered' },\r\n                  { value: 'delivered', label: 'Delivered' },\r\n                  { value: 'cancelled', label: 'Cancelled' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Orders Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Order #</Table.Th>\r\n                    <Table.Th>Supplier</Table.Th>\r\n                    <Table.Th>Order Date</Table.Th>\r\n                    <Table.Th>Expected Delivery</Table.Th>\r\n                    <Table.Th>Items</Table.Th>\r\n                    <Table.Th>Total Amount</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredOrders.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={9}>\r\n                        <EmptyState\r\n                          icon={<IconPackage size={48} />}\r\n                          title=\"No inventory items\"\r\n                          description=\"Add items to your inventory\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredOrders.map((order) => (\r\n                    <Table.Tr key={order.id}>\r\n                      <Table.Td>\r\n                        <Text fw={500}>{(order as any).orderNumber || order.id}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>\r\n                            {(order.supplier as any).companyName || (order.supplier as any).name || 'Unknown'}\r\n                          </Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">\r\n                            {(order.supplier as any).contactPerson || 'N/A'}\r\n                          </Text>\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">\r\n                          {new Date(order.orderDate).toLocaleDateString()}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">\r\n                          {new Date(order.expectedDeliveryDate).toLocaleDateString()}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">{order.items.length} items</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text fw={600}>{formatCurrency(order.totalAmount)}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getStatusColor(order.status)} variant=\"light\">\r\n                          {order.status}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon\r\n                            variant=\"subtle\"\r\n                            color=\"blue\"\r\n                            onClick={() => handleViewOrder(order)}\r\n                          >\r\n                            <IconEye size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"green\">\r\n                            <IconEdit size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                            <IconDownload size={16} />\r\n                          </ActionIcon>\r\n                        </Group>\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  )))}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Equipment Tab */}\r\n        <Tabs.Panel value=\"equipment\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Medical Equipment</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Add Equipment\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Equipment Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {filteredEquipment.map((equipment) => (\r\n                <Card key={equipment.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div style={{ flex: 1 }}>\r\n                      <Text fw={600} size=\"lg\" lineClamp={1}>\r\n                        {(equipment as any).equipmentName || equipment.name}\r\n                      </Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {(equipment as any).manufacturer || 'Unknown'} - {(equipment as any).model || 'N/A'}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(equipment.status)} variant=\"light\">\r\n                      {equipment.status.replace('_', ' ')}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Serial Number</Text>\r\n                      <Text size=\"sm\" fw={500}>{(equipment as any).serialNumber || 'N/A'}</Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Location</Text>\r\n                      <Text size=\"sm\">{equipment.location}</Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Purchase Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {(equipment as any).purchaseDate ? new Date((equipment as any).purchaseDate).toLocaleDateString() : 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Warranty</Text>\r\n                      <Text \r\n                        size=\"sm\" \r\n                        c={(equipment as any).warrantyExpiry && new Date((equipment as any).warrantyExpiry) < new Date() ? 'red' : 'green'}\r\n                      >\r\n                        {(equipment as any).warrantyExpiry ? (new Date((equipment as any).warrantyExpiry) < new Date() ? 'Expired' : 'Valid') : 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n\r\n                    {(equipment as any).nextMaintenanceDate && (\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\" c=\"dimmed\">Next Maintenance</Text>\r\n                        <Text \r\n                          size=\"sm\" \r\n                          c={new Date((equipment as any).nextMaintenanceDate) < new Date() ? 'red' : 'dimmed'}\r\n                        >\r\n                          {new Date((equipment as any).nextMaintenanceDate).toLocaleDateString()}\r\n                        </Text>\r\n                      </Group>\r\n                    )}\r\n                  </Stack>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\" fw={600} c=\"blue\">\r\n                      {formatCurrency((equipment as any).purchasePrice || 0)}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewEquipment(equipment as any)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconSettings size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Reports & Analytics Tab */}\r\n        <Tabs.Panel value=\"reports\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Inventory Reports & Analytics</Title>\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {/* Category Distribution */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Items by Category</Title>\r\n                <MantineDonutChart\r\n                  data={categoryDistribution}\r\n                  size={160}\r\n                  thickness={30}\r\n                  withLabels\r\n                />\r\n              </Card>\r\n              \r\n              {/* Stock Levels */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Stock Level Distribution</Title>\r\n                <SimpleBarChart\r\n                  h={200}\r\n                  data={stockLevelsData}\r\n                  dataKey=\"level\"\r\n                  series={[{ name: 'count', color: 'blue.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Monthly Consumption */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder style={{ gridColumn: '1 / -1' }}>\r\n                <Title order={4} mb=\"md\">Monthly Consumption Trends</Title>\r\n                <SimpleLineChart\r\n                  h={300}\r\n                  data={monthlyConsumption}\r\n                  dataKey=\"month\"\r\n                  series={[\r\n                    { name: 'consumed', color: 'blue.6', label: 'Consumed' },\r\n                    { name: 'restocked', color: 'green.6', label: 'Restocked' }\r\n                  ]}\r\n                />\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Add Item Modal */}\r\n      <Modal\r\n        opened={addItemOpened}\r\n        onClose={closeAddItem}\r\n        title=\"Add New Item\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"Item Name\"\r\n              placeholder=\"Enter item name\"\r\n              required\r\n            />\r\n            <TextInput\r\n              label=\"Item Code\"\r\n              placeholder=\"Enter item code\"\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Select\r\n            label=\"Category\"\r\n            placeholder=\"Select category\"\r\n            data={[\r\n              { value: 'medication', label: 'Medication' },\r\n              { value: 'medical_supplies', label: 'Medical Supplies' },\r\n              { value: 'surgical_instruments', label: 'Surgical Instruments' },\r\n              { value: 'laboratory', label: 'Laboratory' },\r\n              { value: 'consumables', label: 'Consumables' }\r\n            ]}\r\n            required\r\n          />\r\n          \r\n          <Textarea\r\n            label=\"Description\"\r\n            placeholder=\"Enter item description\"\r\n            rows={3}\r\n          />\r\n          \r\n          <SimpleGrid cols={3}>\r\n            <NumberInput\r\n              label=\"Unit Price\"\r\n              placeholder=\"Enter price\"\r\n              leftSection=\"₹\"\r\n              min={0}\r\n              required\r\n            />\r\n            <NumberInput\r\n              label=\"Minimum Stock\"\r\n              placeholder=\"Min stock level\"\r\n              min={0}\r\n              required\r\n            />\r\n            <NumberInput\r\n              label=\"Maximum Stock\"\r\n              placeholder=\"Max stock level\"\r\n              min={0}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"Unit\"\r\n              placeholder=\"e.g., pcs, mg, ml\"\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Supplier\"\r\n              placeholder=\"Select supplier\"\r\n              data={[].map /* TODO: Fetch from API */(supplier => ({ \r\n                value: supplier.id, \r\n                label: (supplier as any).companyName || (supplier as any).name || 'Unknown' \r\n              }))}\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <DatePickerInput\r\n            label=\"Expiry Date (Optional)\"\r\n            placeholder=\"Select expiry date\"\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddItem}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Success',\r\n                message: 'Item added successfully',\r\n                color: 'green',\r\n              });\r\n              closeAddItem();\r\n            }}>\r\n              Add Item\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* Add Order Modal */}\r\n      <Modal\r\n        opened={addOrderOpened}\r\n        onClose={closeAddOrder}\r\n        title=\"Create Purchase Order\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <Select\r\n            label=\"Supplier\"\r\n            placeholder=\"Select supplier\"\r\n            data={[].map /* TODO: Fetch from API */(supplier => ({ \r\n              value: supplier.id, \r\n              label: (supplier as any).companyName || (supplier as any).name || 'Unknown' \r\n            }))}\r\n            required\r\n          />\r\n          \r\n          <DatePickerInput\r\n            label=\"Expected Delivery Date\"\r\n            placeholder=\"Select delivery date\"\r\n            required\r\n          />\r\n          \r\n          <Divider label=\"Order Items\" labelPosition=\"center\" />\r\n          \r\n          <SimpleGrid cols={3}>\r\n            <Select\r\n              label=\"Item\"\r\n              placeholder=\"Select item\"\r\n              data={[].map /* TODO: Fetch from API */(item => ({ \r\n                value: item.id, \r\n                label: (item as any).itemName || item.name \r\n              }))}\r\n              required\r\n            />\r\n            <NumberInput\r\n              label=\"Quantity\"\r\n              placeholder=\"Enter quantity\"\r\n              min={1}\r\n              required\r\n            />\r\n            <NumberInput\r\n              label=\"Unit Price\"\r\n              placeholder=\"Enter price\"\r\n              leftSection=\"₹\"\r\n              min={0}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Button variant=\"light\" leftSection={<IconPlus size={16} />}>\r\n            Add More Items\r\n          </Button>\r\n          \r\n          <Textarea\r\n            label=\"Notes\"\r\n            placeholder=\"Additional notes...\"\r\n            rows={3}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddOrder}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Success',\r\n                message: 'Purchase order created successfully',\r\n                color: 'green',\r\n              });\r\n              closeAddOrder();\r\n            }}>\r\n              Create Order\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InventoryManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\ipd\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Paper' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Avatar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ScrollArea' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Progress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'NumberInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Textarea' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Switch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Divider' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Alert' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Indicator' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useDisclosure' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 34,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'notifications' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 36,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DatePickerInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 37,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconActivity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 41,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlertCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 42,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 43,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 43,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 44,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBedFilled' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 46,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendarEvent' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 48,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 49,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 49,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 52,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCreditCard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 54,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDownload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 55,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDroplet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 56,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 56,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconEmergencyBed' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 58,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 58,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHeart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 61,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHome' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLungs' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 63,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 63,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 64,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMapPin' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedicalCross' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNurse' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPill' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 69,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPrinter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 71,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReceipt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReport' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 74,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 74,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStethoscope' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 76,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconThermometer' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTransfer' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 78,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 79,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 80,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 81,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 81,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUser' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 82,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUserCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockIPDPatients' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 174,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 174,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockBeds' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 175,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 175,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockWards' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 176,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 176,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedBed' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 185,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 185,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 191,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 191,
        "endColumn": 15
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.",
        "line": 196,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 196,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAllData]",
            "fix": { "range": [4443, 4445], "text": "[fetchAllData]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 55,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Switch,\r\n  Divider,\r\n  Alert,\r\n  Timeline,\r\n  List,\r\n  Indicator,\r\n  Stack\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport ipdService from '../../../services/ipd.service';\r\n// import { LineChart, BarChart, DonutChart, AreaChart } from '@mantine/charts';\r\nimport {\r\n  IconActivity,\r\n  IconAlertCircle,\r\n  IconArrowDown,\r\n  IconArrowUp,\r\n  IconBed,\r\n  IconBedFilled,\r\n  IconCalendar,\r\n  IconCalendarEvent,\r\n  IconCash,\r\n  IconChartBar,\r\n  IconCheck,\r\n  IconClipboard,\r\n  IconClock,\r\n  IconCreditCard,\r\n  IconDownload,\r\n  IconDroplet,\r\n  IconEdit,\r\n  IconEmergencyBed,\r\n  IconEye,\r\n  IconFileText,\r\n  IconHeart,\r\n  IconHome,\r\n  IconLungs,\r\n  IconMail,\r\n  IconMapPin,\r\n  IconMedicalCross,\r\n  IconNurse,\r\n  IconPhone,\r\n  IconPill,\r\n  IconPlus,\r\n  IconPrinter,\r\n  IconReceipt,\r\n  IconRefresh,\r\n  IconReport,\r\n  IconSearch,\r\n  IconStethoscope,\r\n  IconThermometer,\r\n  IconTransfer,\r\n  IconTrash,\r\n  IconTrendingDown,\r\n  IconTrendingUp,\r\n  IconUser,\r\n  IconUserCheck,\r\n  IconUsers,\r\n  IconX,\r\n  IconBedOff,\r\n  IconAlertTriangle,\r\n  IconCurrencyRupee,\r\n  IconBuilding\r\n} from '@tabler/icons-react';\r\n\r\n// Types\r\ninterface IPDPatient {\r\n  id: string;\r\n  admissionNumber: string;\r\n  patientId: string;\r\n  patientName: string;\r\n  patientAge: number;\r\n  patientGender: string;\r\n  patientPhone: string;\r\n  bedNumber: string;\r\n  wardName: string;\r\n  roomNumber: string;\r\n  admissionDate: string;\r\n  expectedDischargeDate?: string;\r\n  actualDischargeDate?: string;\r\n  admissionType: 'emergency' | 'elective' | 'transfer';\r\n  status: 'admitted' | 'critical' | 'stable' | 'discharged' | 'transferred';\r\n  primaryDoctor: string;\r\n  consultingDoctors: string[];\r\n  assignedNurse: string;\r\n  diagnosis: string;\r\n  procedure?: string;\r\n  insurance: {\r\n    provider: string;\r\n    policyNumber: string;\r\n    approvalAmount: number;\r\n  } | null;\r\n  lengthOfStay: number;\r\n  dailyCharges: number;\r\n  totalCharges: number;\r\n  pendingAmount: number;\r\n  vitalSigns: {\r\n    bloodPressure: string;\r\n    heartRate: number;\r\n    temperature: number;\r\n    respiratoryRate: number;\r\n    oxygenSaturation: number;\r\n    painScale: number;\r\n    lastUpdated: string;\r\n  };\r\n  medications: Array<{\r\n    name: string;\r\n    dosage: string;\r\n    frequency: string;\r\n    route: string;\r\n    startDate: string;\r\n    endDate?: string;\r\n  }>;\r\n  nursingNotes: Array<{\r\n    timestamp: string;\r\n    note: string;\r\n    nurseName: string;\r\n  }>;\r\n}\r\n\r\ninterface Bed {\r\n  id: string;\r\n  bedNumber: string;\r\n  wardName: string;\r\n  roomNumber: string;\r\n  bedType: 'general' | 'private' | 'icu' | 'hdu' | 'isolation';\r\n  status: 'occupied' | 'vacant' | 'maintenance' | 'reserved';\r\n  patientId?: string;\r\n  patientName?: string;\r\n  dailyRate: number;\r\n  amenities: string[];\r\n  lastCleaned?: string;\r\n}\r\n\r\ninterface Ward {\r\n  id: string;\r\n  name: string;\r\n  department: string;\r\n  totalBeds: number;\r\n  occupiedBeds: number;\r\n  availableBeds: number;\r\n  maintenanceBeds: number;\r\n  nursesOnDuty: number;\r\n  headNurse: string;\r\n}\r\n\r\n// Mock data removed - using API data only\r\nconst mockIPDPatients: IPDPatient[] = [];\r\nconst mockBeds: Bed[] = [];\r\nconst mockWards: Ward[] = [];\r\n\r\nconst IPDManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('patients');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedWard, setSelectedWard] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedPatient, setSelectedPatient] = useState<IPDPatient | null>(null);\r\n  const [selectedBed, setSelectedBed] = useState<Bed | null>(null);\r\n\r\n  // API state\r\n  const [admissions, setAdmissions] = useState<any[]>([]);\r\n  const [ipdStatsAPI, setIpdStatsAPI] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Fetch data\r\n  useEffect(() => {\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  const fetchAllData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      await Promise.all([fetchAdmissions(), fetchStats()]);\r\n    } catch (err: any) {\r\n      console.error('Error loading IPD data:', err);\r\n      setError(err.response?.data?.message || err.message || 'Failed to load IPD data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchAdmissions = async () => {\r\n    try {\r\n      // IPD service doesn't have getAdmissions - using empty data\r\n      console.warn('IPD admissions API not implemented - showing empty state');\r\n      setAdmissions([]);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching admissions:', err.response?.data?.message || err.message);\r\n      setAdmissions([]);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const stats = await ipdService.getStats();\r\n      setIpdStatsAPI(stats);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching IPD stats:', err.response?.data?.message || err.message);\r\n      setIpdStatsAPI(null);\r\n    }\r\n  };\r\n\r\n  // Modal handlers\r\n  const handleViewPatient = (patient: IPDPatient) => {\r\n    setSelectedPatient(patient);\r\n  };\r\n\r\n  const handleViewBed = (bed: Bed) => {\r\n    setSelectedBed(bed);\r\n  };\r\n\r\n  // Filter patients\r\n  const filteredPatients = useMemo(() => {\r\n    const patientsList = admissions.length > 0 ? admissions : [];\r\n    return patientsList.filter((patient: any) => {\r\n      const matchesSearch = \r\n        patient.patientName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        patient.admissionNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        patient.bedNumber.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesWard = !selectedWard || patient.wardName === selectedWard;\r\n      const matchesStatus = !selectedStatus || patient.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesWard && matchesStatus;\r\n    });\r\n  }, [admissions, searchQuery, selectedWard, selectedStatus]);\r\n\r\n  // Quick stats\r\n  const ipdStats = {\r\n    totalPatients: ipdStatsAPI?.totalAdmissions || 0,\r\n    totalBeds: ipdStatsAPI?.totalBeds || 0,\r\n    occupiedBeds: ipdStatsAPI?.occupiedBeds || 0,\r\n    availableBeds: ipdStatsAPI?.availableBeds || 0,\r\n    criticalPatients: ipdStatsAPI?.criticalPatients || 0,\r\n    averageLOS: ipdStatsAPI?.averageLengthOfStay || 0,\r\n    occupancyRate: ipdStatsAPI?.occupancyRate || 0,\r\n    totalRevenue: ipdStatsAPI?.totalRevenue || 0\r\n  };\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={2}>IPD Management</Title>\r\n          <Text size=\"sm\" c=\"dimmed\">Inpatient department care and bed management system</Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconRefresh size={16} />}\r\n            variant=\"light\"\r\n            onClick={fetchAllData}\r\n            loading={loading}\r\n          >\r\n            Refresh Status\r\n          </Button>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={() => {/* TODO: Open admission modal */}}\r\n          >\r\n            New Admission\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Quick Stats */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4, lg: 8 }} spacing=\"lg\" mb=\"xl\">\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"apart\">\r\n            <div>\r\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>Total Patients</Text>\r\n              <Text size=\"xl\" fw={700}>{ipdStats.totalPatients}</Text>\r\n            </div>\r\n            <ThemeIcon size=\"lg\" radius=\"md\" variant=\"light\" color=\"blue\">\r\n              <IconUsers size={20} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"apart\">\r\n            <div>\r\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>Total Beds</Text>\r\n              <Text size=\"xl\" fw={700}>{ipdStats.totalBeds}</Text>\r\n            </div>\r\n            <ThemeIcon size=\"lg\" radius=\"md\" variant=\"light\" color=\"green\">\r\n              <IconBed size={20} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"apart\">\r\n            <div>\r\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>Occupied</Text>\r\n              <Text size=\"xl\" fw={700}>{ipdStats.occupiedBeds}</Text>\r\n            </div>\r\n            <ThemeIcon size=\"lg\" radius=\"md\" variant=\"light\" color=\"red\">\r\n              <IconBedOff size={20} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"apart\">\r\n            <div>\r\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>Available</Text>\r\n              <Text size=\"xl\" fw={700}>{ipdStats.availableBeds}</Text>\r\n            </div>\r\n            <ThemeIcon size=\"lg\" radius=\"md\" variant=\"light\" color=\"teal\">\r\n              <IconCheck size={20} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"apart\">\r\n            <div>\r\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>Critical</Text>\r\n              <Text size=\"xl\" fw={700}>{ipdStats.criticalPatients}</Text>\r\n            </div>\r\n            <ThemeIcon size=\"lg\" radius=\"md\" variant=\"light\" color=\"orange\">\r\n              <IconAlertTriangle size={20} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"apart\">\r\n            <div>\r\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>Avg LOS</Text>\r\n              <Text size=\"xl\" fw={700}>{ipdStats.averageLOS}</Text>\r\n            </div>\r\n            <ThemeIcon size=\"lg\" radius=\"md\" variant=\"light\" color=\"violet\">\r\n              <IconCalendar size={20} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"apart\">\r\n            <div>\r\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>Occupancy</Text>\r\n              <Text size=\"xl\" fw={700}>{ipdStats.occupancyRate}%</Text>\r\n            </div>\r\n            <ThemeIcon size=\"lg\" radius=\"md\" variant=\"light\" color=\"indigo\">\r\n              <IconChartBar size={20} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"md\" radius=\"md\" withBorder>\r\n          <Group justify=\"apart\">\r\n            <div>\r\n              <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>Revenue</Text>\r\n              <Text size=\"xl\" fw={700}>₹{(ipdStats.totalRevenue / 100000).toFixed(2)}L</Text>\r\n            </div>\r\n            <ThemeIcon size=\"lg\" radius=\"md\" variant=\"light\" color=\"green\">\r\n              <IconCurrencyRupee size={20} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n      </SimpleGrid>\r\n\r\n      {/* Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab as any}>\r\n        <Tabs.List mb=\"md\">\r\n          <Tabs.Tab value=\"patients\" leftSection={<IconUsers size={16} />}>\r\n            IPD Patients\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"beds\" leftSection={<IconBed size={16} />}>\r\n            Bed Status\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"wards\" leftSection={<IconBuilding size={16} />}>\r\n            Ward Management\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconChartBar size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* IPD Patients Tab */}\r\n        <Tabs.Panel value=\"patients\">\r\n          <Card padding=\"lg\" radius=\"md\" withBorder>\r\n            {/* Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search patients...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Ward\"\r\n                data={[\r\n                  { value: '', label: 'All Wards' },\r\n                  { value: 'ICU', label: 'ICU' },\r\n                  { value: 'General Ward', label: 'General Ward' },\r\n                  { value: 'Private Ward', label: 'Private Ward' }\r\n                ]}\r\n                value={selectedWard}\r\n                onChange={setSelectedWard as any}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: '', label: 'All Status' },\r\n                  { value: 'critical', label: 'Critical' },\r\n                  { value: 'stable', label: 'Stable' },\r\n                  { value: 'recovering', label: 'Recovering' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus as any}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Patients Table */}\r\n            <Table striped highlightOnHover>\r\n              <Table.Thead>\r\n                <Table.Tr>\r\n                  <Table.Th>Admission #</Table.Th>\r\n                  <Table.Th>Patient</Table.Th>\r\n                  <Table.Th>Bed/Ward</Table.Th>\r\n                  <Table.Th>Doctor</Table.Th>\r\n                  <Table.Th>Admission Date</Table.Th>\r\n                  <Table.Th>LOS</Table.Th>\r\n                  <Table.Th>Status</Table.Th>\r\n                  <Table.Th>Charges</Table.Th>\r\n                  <Table.Th>Actions</Table.Th>\r\n                </Table.Tr>\r\n              </Table.Thead>\r\n              <Table.Tbody>\r\n                {filteredPatients.length === 0 ? (\r\n                  <Table.Tr>\r\n                    <Table.Td colSpan={9}>\r\n                      <EmptyState\r\n                        icon={<IconBed size={48} />}\r\n                        title=\"No IPD patients found\"\r\n                        description={searchQuery || selectedWard || selectedStatus ?\r\n                          \"No patients match your search criteria. Try adjusting your filters.\" :\r\n                          \"No patients admitted yet. Add your first IPD admission to get started.\"\r\n                        }\r\n                        size=\"sm\"\r\n                      />\r\n                    </Table.Td>\r\n                  </Table.Tr>\r\n                ) : (\r\n                  filteredPatients.map((patient: any) => (\r\n                    <Table.Tr key={patient.id}>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <IconFileText size={16} />\r\n                          <Text size=\"sm\" fw={500}>{patient.admissionNumber}</Text>\r\n                        </Group>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>{patient.patientName}</Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">{patient.patientAge}y, {patient.patientGender}</Text>\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text size=\"sm\">{patient.bedNumber}</Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">{patient.wardName}</Text>\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">{patient.primaryDoctor}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">{new Date(patient.admissionDate).toLocaleDateString()}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">{patient.lengthOfStay} days</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge\r\n                          color={\r\n                            patient.status === 'critical' ? 'red' :\r\n                            patient.status === 'stable' ? 'green' :\r\n                            patient.status === 'recovering' ? 'blue' : 'gray'\r\n                          }\r\n                          variant=\"light\"\r\n                        >\r\n                          {patient.status.toUpperCase()}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>₹{patient.totalCharges.toLocaleString()}</Text>\r\n                          {patient.pendingAmount > 0 && (\r\n                            <Text size=\"xs\" c=\"red\">Pending: ₹{patient.pendingAmount.toLocaleString()}</Text>\r\n                          )}\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon\r\n                            variant=\"light\"\r\n                            color=\"blue\"\r\n                            onClick={() => handleViewPatient(patient)}\r\n                          >\r\n                            <IconEye size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"light\" color=\"green\">\r\n                            <IconEdit size={16} />\r\n                          </ActionIcon>\r\n                        </Group>\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ))\r\n                )}\r\n              </Table.Tbody>\r\n            </Table>\r\n          </Card>\r\n        </Tabs.Panel>\r\n\r\n        {/* Bed Status Tab */}\r\n        <Tabs.Panel value=\"beds\">\r\n          <Card padding=\"lg\" radius=\"md\" withBorder>\r\n            <Title order={3} mb=\"lg\">Bed Status Overview</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 4 }} spacing=\"lg\">\r\n              {0 /* TODO: Fetch from API */ === 0 ? (\r\n                <Text c=\"dimmed\">No bed data available</Text>\r\n              ) : (\r\n                [].map /* TODO: Fetch from API */((bed) => (\r\n                  <Card key={bed.id} padding=\"lg\" radius=\"md\" withBorder onClick={() => handleViewBed(bed)} style={{ cursor: 'pointer' }}>\r\n                    <Group justify=\"space-between\" mb=\"md\">\r\n                      <div>\r\n                        <Text size=\"lg\" fw={700}>{bed.bedNumber}</Text>\r\n                        <Text size=\"sm\" c=\"dimmed\">{bed.wardName}</Text>\r\n                      </div>\r\n                      <Badge\r\n                        color={\r\n                          bed.status === 'occupied' ? 'red' :\r\n                          bed.status === 'vacant' ? 'green' :\r\n                          'yellow'\r\n                        }\r\n                        variant=\"filled\"\r\n                      >\r\n                        {bed.status}\r\n                      </Badge>\r\n                    </Group>\r\n                    {bed.patientName && (\r\n                      <Text size=\"sm\" mb=\"xs\">Patient: {bed.patientName}</Text>\r\n                    )}\r\n                    <Text size=\"xs\" c=\"dimmed\">Rate: ₹{bed.dailyRate}/day</Text>\r\n                  </Card>\r\n                ))\r\n              )}\r\n            </SimpleGrid>\r\n          </Card>\r\n        </Tabs.Panel>\r\n\r\n        {/* Ward Management Tab */}\r\n        <Tabs.Panel value=\"wards\">\r\n          <Card padding=\"lg\" radius=\"md\" withBorder>\r\n            <Title order={3} mb=\"lg\">Ward Overview</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {0 /* TODO: Fetch from API */ === 0 ? (\r\n                <Text c=\"dimmed\">No ward data available</Text>\r\n              ) : (\r\n                [].map /* TODO: Fetch from API */((ward) => (\r\n                  <Card key={ward.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                    <Group justify=\"space-between\" mb=\"md\">\r\n                      <div>\r\n                        <Text size=\"lg\" fw={700}>{ward.name}</Text>\r\n                        <Text size=\"sm\" c=\"dimmed\">{ward.department}</Text>\r\n                      </div>\r\n                    </Group>\r\n                    <Stack gap=\"xs\">\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\">Total Beds:</Text>\r\n                        <Text size=\"sm\" fw={500}>{ward.totalBeds}</Text>\r\n                      </Group>\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\">Occupied:</Text>\r\n                        <Text size=\"sm\" fw={500} c=\"red\">{ward.occupiedBeds}</Text>\r\n                      </Group>\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\">Available:</Text>\r\n                        <Text size=\"sm\" fw={500} c=\"green\">{ward.availableBeds}</Text>\r\n                      </Group>\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\">Nurses on Duty:</Text>\r\n                        <Text size=\"sm\" fw={500}>{ward.nursesOnDuty}</Text>\r\n                      </Group>\r\n                      <Text size=\"xs\" c=\"dimmed\" mt=\"xs\">Head Nurse: {ward.headNurse}</Text>\r\n                    </Stack>\r\n                  </Card>\r\n                ))\r\n              )}\r\n            </SimpleGrid>\r\n          </Card>\r\n        </Tabs.Panel>\r\n\r\n        {/* Analytics Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <Card padding=\"lg\" radius=\"md\" withBorder>\r\n            <Title order={3} mb=\"lg\">IPD Analytics</Title>\r\n            <Text c=\"dimmed\">Analytics dashboard coming soon...</Text>\r\n          </Card>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Patient Details Modal */}\r\n      {selectedPatient && (\r\n        <Modal\r\n          opened={!!selectedPatient}\r\n          onClose={() => setSelectedPatient(null)}\r\n          title={`Patient Details - ${selectedPatient.admissionNumber}`}\r\n          size=\"xl\"\r\n        >\r\n          <Stack gap=\"md\">\r\n            <div>\r\n              <Text size=\"lg\" fw={700}>{selectedPatient.patientName}</Text>\r\n              <Text size=\"sm\" c=\"dimmed\">{selectedPatient.patientAge}y, {selectedPatient.patientGender}</Text>\r\n            </div>\r\n            <Group>\r\n              <Text size=\"sm\"><strong>Bed:</strong> {selectedPatient.bedNumber}</Text>\r\n              <Text size=\"sm\"><strong>Ward:</strong> {selectedPatient.wardName}</Text>\r\n            </Group>\r\n            <Text size=\"sm\"><strong>Diagnosis:</strong> {selectedPatient.diagnosis}</Text>\r\n            <Text size=\"sm\"><strong>Doctor:</strong> {selectedPatient.primaryDoctor}</Text>\r\n            <Group>\r\n              <Button onClick={() => setSelectedPatient(null)}>Close</Button>\r\n            </Group>\r\n          </Stack>\r\n        </Modal>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default IPDManagement;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\laboratory\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Progress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Stepper' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Checkbox' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 32,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleLineChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 37,
        "column": 46,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 61
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 44,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 47,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 48,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPrinter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 58,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 58,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShare' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 59,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconExclamationMark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 64,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUsers' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalculator' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRefresh' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 69,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCircleCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 75,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHeartbeat' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 79,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrain' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 80,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 81,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 81,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconActivity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 82,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedicalCross' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TestStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 89,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TestType' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 90,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 90,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 93,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LabResult' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 94,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 94,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TestParameter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 95,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SampleStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 97,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SampleType' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 98,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 98,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LabEquipment' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 99,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 99,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LabEquipmentStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 100,
        "column": 22,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 100,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'QualityControl' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 101,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 101,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'QCStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 102,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 102,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LabStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 103,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 103,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LabFilters' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 104,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedOrder' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 117,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedSample' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 118,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 118,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'orderDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 130,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 130,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeOrderDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 130,
        "column": 61,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 130,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'addOrderOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 131,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 131,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeAddOrder' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 131,
        "column": 55,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 131,
        "endColumn": 68
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'sampleDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 132,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 132,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeSampleDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 132,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 132,
        "endColumn": 80
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.",
        "line": 136,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 136,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAllData]",
            "fix": { "range": [3565, 3567], "text": "[fetchAllData]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'fetchLabOrders', 'fetchLabTests', and 'loading'. Either include them or remove the dependency array.",
        "line": 213,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 213,
        "endColumn": 81,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [activeTab, searchQuery, selectedCategory, selectedStatus, selectedPatient, loading, fetchLabTests, fetchLabOrders]",
            "fix": {
              "range": [5869, 5944],
              "text": "[activeTab, searchQuery, selectedCategory, selectedStatus, selectedPatient, loading, fetchLabTests, fetchLabOrders]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useMemo has a missing dependency: 'labTests'. Either include it or remove the dependency array.",
        "line": 228,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 228,
        "endColumn": 67,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [labTests, searchQuery, selectedCategory, selectedStatus, selectedType]",
            "fix": {
              "range": [6582, 6643],
              "text": "[labTests, searchQuery, selectedCategory, selectedStatus, selectedType]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useMemo has a missing dependency: 'labOrders'. Either include it or remove the dependency array.",
        "line": 243,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 243,
        "endColumn": 52,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [labOrders, searchQuery, selectedStatus, selectedPatient]",
            "fix": {
              "range": [7292, 7338],
              "text": "[labOrders, searchQuery, selectedStatus, selectedPatient]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 49,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Alert,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Timeline,\r\n  Stepper,\r\n  Checkbox\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleLineChart, SimpleBarChart } from '../../../components/MantineChart';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconCalendar,\r\n  IconTestPipe,\r\n  IconChartBar,\r\n  IconPhone,\r\n  IconMail,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconFlask,\r\n  IconMicroscope,\r\n  IconClipboardList,\r\n  IconFileText,\r\n  IconDownload,\r\n  IconPrinter,\r\n  IconShare,\r\n  IconDroplet,\r\n  IconDna,\r\n  IconExclamationMark,\r\n  IconClockHour4,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconUsers,\r\n  IconCalculator,\r\n  IconSettings,\r\n  IconRefresh,\r\n  IconFilter,\r\n  IconBarcode,\r\n  IconTemperature,\r\n  IconShieldCheck,\r\n  IconAlertTriangle,\r\n  IconCircleCheck,\r\n  IconClipboard,\r\n  IconReportMedical,\r\n  IconAtom,\r\n  IconHeartbeat,\r\n  IconBrain,\r\n  IconBone,\r\n  IconActivity,\r\n  IconMedicalCross\r\n} from '@tabler/icons-react';\r\n\r\n// Import types, services and mock data\r\nimport {\r\n  LabTest,\r\n  TestStatus,\r\n  TestType,\r\n  TestCategory,\r\n  LabOrder,\r\n  OrderStatus,\r\n  LabResult,\r\n  TestParameter,\r\n  Sample,\r\n  SampleStatus,\r\n  SampleType,\r\n  LabEquipment,\r\n  EquipmentStatus as LabEquipmentStatus,\r\n  QualityControl,\r\n  QCStatus,\r\n  LabStats,\r\n  LabFilters\r\n} from '../../../types/laboratory';\r\nimport laboratoryService from '../../../services/laboratory.service';\r\n// Mock data imports removed\r\nconst LaboratoryManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('tests');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedType, setSelectedType] = useState<string>('');\r\n  const [selectedPatient, setSelectedPatient] = useState<string>('');\r\n  const [selectedTest, setSelectedTest] = useState<LabTest | null>(null);\r\n  const [selectedOrder, setSelectedOrder] = useState<LabOrder | null>(null);\r\n  const [selectedSample, setSelectedSample] = useState<Sample | null>(null);\r\n\r\n  // API data state\r\n  const [labTests, setLabTests] = useState<LabTest[]>([]);\r\n  const [labOrders, setLabOrders] = useState<LabOrder[]>([]);\r\n  const [labStats, setLabStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Modal states\r\n  const [testDetailOpened, { open: openTestDetail, close: closeTestDetail }] = useDisclosure(false);\r\n  const [addTestOpened, { open: openAddTest, close: closeAddTest }] = useDisclosure(false);\r\n  const [orderDetailOpened, { open: openOrderDetail, close: closeOrderDetail }] = useDisclosure(false);\r\n  const [addOrderOpened, { open: openAddOrder, close: closeAddOrder }] = useDisclosure(false);\r\n  const [sampleDetailOpened, { open: openSampleDetail, close: closeSampleDetail }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  const fetchAllData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      await Promise.all([\r\n        fetchLabTests(),\r\n        fetchLabOrders(),\r\n        fetchLabStats()\r\n      ]);\r\n    } catch (err: any) {\r\n      console.error('Error loading laboratory data:', err);\r\n      setError(err.response?.data?.message || err.message || 'Failed to load laboratory data');\r\n      // Fallback to mock data\r\n      setLabTests([] /* TODO: Fetch from API */);\r\n      setLabOrders([] /* TODO: Fetch from API */);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchLabTests = async () => {\r\n    try {\r\n      const filters = {\r\n        category: selectedCategory || undefined,\r\n        search: searchQuery || undefined\r\n      };\r\n      const response = await laboratoryService.getLabTests(filters) as any;\r\n      setLabTests(response.data?.items || response.data || []);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching lab tests (using empty data):', err.message || err);\r\n      setLabTests([]);\r\n    }\r\n  };\r\n\r\n  const fetchLabOrders = async () => {\r\n    try {\r\n      const filters = {\r\n        patientId: selectedPatient || undefined,\r\n        status: selectedStatus || undefined,\r\n        search: searchQuery || undefined\r\n      };\r\n      const response = await laboratoryService.getLabOrders(filters) as any;\r\n      setLabOrders(response.data?.items || response.data || []);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching lab orders (using empty data):', err.message || err);\r\n      setLabOrders([]);\r\n    }\r\n  };\r\n\r\n  const fetchLabStats = async () => {\r\n    try {\r\n      const response = await laboratoryService.getLabStats() as any;\r\n      setLabStats(response.data);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching lab stats (using default values):', err.message || err);\r\n      setLabStats({\r\n        totalTests: 0,\r\n        pendingTests: 0,\r\n        completedTests: 0,\r\n        totalOrders: 0,\r\n        pendingOrders: 0,\r\n        completedOrders: 0\r\n      });\r\n    }\r\n  };\r\n\r\n  // Refetch when filters change\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      if (activeTab === 'tests') {\r\n        fetchLabTests();\r\n      } else if (activeTab === 'orders') {\r\n        fetchLabOrders();\r\n      }\r\n    }\r\n  }, [activeTab, searchQuery, selectedCategory, selectedStatus, selectedPatient]);\r\n\r\n  // Filter lab tests\r\n  const filteredTests = useMemo(() => {\r\n    return labTests.filter((test) => {\r\n      const matchesSearch = \r\n        test.testName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        test.testCode.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesCategory = !selectedCategory || test.category === selectedCategory;\r\n      const matchesStatus = !selectedStatus || test.status === selectedStatus;\r\n      const matchesType = !selectedType || test.testType === selectedType;\r\n\r\n      return matchesSearch && matchesCategory && matchesStatus && matchesType;\r\n    });\r\n  }, [searchQuery, selectedCategory, selectedStatus, selectedType]);\r\n\r\n  // Filter lab orders\r\n  const filteredOrders = useMemo(() => {\r\n    return labOrders.filter((order) => {\r\n      const matchesSearch = \r\n        order.orderNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        order.patient.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        order.patient.lastName.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesStatus = !selectedStatus || order.status === selectedStatus;\r\n      const matchesPatient = !selectedPatient || order.patientId === selectedPatient;\r\n\r\n      return matchesSearch && matchesStatus && matchesPatient;\r\n    });\r\n  }, [searchQuery, selectedStatus, selectedPatient]);\r\n\r\n  // Filter samples\r\n  const filteredSamples = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((sample) => {\r\n      const matchesSearch = \r\n        sample.sampleId.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        sample.patientName.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesStatus = !selectedStatus || sample.status === selectedStatus;\r\n      const matchesType = !selectedType || sample.sampleType === selectedType;\r\n\r\n      return matchesSearch && matchesStatus && matchesType;\r\n    });\r\n  }, [searchQuery, selectedStatus, selectedType]);\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'active':\r\n      case 'completed':\r\n      case 'processed':\r\n      case 'operational':\r\n      case 'passed': return 'green';\r\n      case 'pending':\r\n      case 'in_progress':\r\n      case 'collected':\r\n      case 'maintenance':\r\n      case 'in_review': return 'orange';\r\n      case 'cancelled':\r\n      case 'rejected':\r\n      case 'contaminated':\r\n      case 'out_of_service':\r\n      case 'failed': return 'red';\r\n      case 'draft':\r\n      case 'ordered':\r\n      case 'received':\r\n      case 'calibration': return 'blue';\r\n      case 'expired': return 'dark';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getCategoryColor = (category: TestCategory) => {\r\n    switch (category) {\r\n      case 'hematology': return 'red';\r\n      case 'biochemistry': return 'blue';\r\n      case 'microbiology': return 'green';\r\n      case 'immunology': return 'purple';\r\n      case 'pathology': return 'orange';\r\n      case 'molecular': return 'cyan';\r\n      case 'genetics': return 'pink';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getCategoryIcon = (category: TestCategory) => {\r\n    switch (category) {\r\n      case 'hematology': return <IconDroplet size={16} />;\r\n      case 'biochemistry': return <IconFlask size={16} />;\r\n      case 'microbiology': return <IconMicroscope size={16} />;\r\n      case 'immunology': return <IconShieldCheck size={16} />;\r\n      case 'pathology': return <IconReportMedical size={16} />;\r\n      case 'molecular': return <IconDna size={16} />;\r\n      case 'genetics': return <IconAtom size={16} />;\r\n      default: return <IconTestPipe size={16} />;\r\n    }\r\n  };\r\n\r\n  const handleViewTest = (test: LabTest) => {\r\n    setSelectedTest(test);\r\n    openTestDetail();\r\n  };\r\n\r\n  const handleViewOrder = (order: LabOrder) => {\r\n    setSelectedOrder(order);\r\n    openOrderDetail();\r\n  };\r\n\r\n  const handleViewSample = (sample: Sample) => {\r\n    setSelectedSample(sample);\r\n    openSampleDetail();\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchQuery('');\r\n    setSelectedCategory('');\r\n    setSelectedStatus('');\r\n    setSelectedType('');\r\n    setSelectedPatient('');\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-IN', {\r\n      style: 'currency',\r\n      currency: 'INR'\r\n    }).format(amount);\r\n  };\r\n\r\n  // Statistics cards\r\n  const statsCards = [\r\n    {\r\n      title: 'Total Tests',\r\n      value: labStats?.totalTests || 0 /* TODO: Fetch from API */,\r\n      icon: IconTestPipe,\r\n      color: 'blue',\r\n      trend: '+0%'\r\n    },\r\n    {\r\n      title: 'Pending Results',\r\n      value: labStats?.pendingTests || 0 /* TODO: Fetch from API */,\r\n      icon: IconClockHour4,\r\n      color: 'orange',\r\n      trend: '0%'\r\n    },\r\n    {\r\n      title: 'Completed Today',\r\n      value: labStats?.completedToday || 0,\r\n      icon: IconCheck,\r\n      color: 'green',\r\n      trend: '+0%'\r\n    },\r\n    {\r\n      title: 'Equipment Status',\r\n      value: labStats?.equipmentOperational && labStats?.totalEquipment \r\n        ? `${labStats.equipmentOperational}/${labStats.totalEquipment}`\r\n        : `${0 /* TODO: Fetch from API */}/${0 /* TODO: Fetch from API */}`,\r\n      icon: IconSettings,\r\n      color: 'purple',\r\n      trend: '0%'\r\n    }\r\n  ];\r\n\r\n  // Chart data\r\n  const testCategoryData = (labStats?.testsByCategory && typeof labStats.testsByCategory === 'object')\r\n    ? Object.entries(labStats.testsByCategory)\r\n        .map(([category, count]) => ({\r\n          name: category.replace('_', ' ').toUpperCase(),\r\n          value: count as number,\r\n          color: getCategoryColor(category as TestCategory)\r\n        }))\r\n    : [];\r\n\r\n  const dailyTestsData = Array.isArray(labStats?.dailyTestVolume) ? labStats.dailyTestVolume : [];\r\n  const turnaroundTimeData = Array.isArray(labStats?.averageTurnaroundTime) ? labStats.averageTurnaroundTime : [];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Laboratory Management</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage lab tests, samples, results, and equipment\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={openAddTest}\r\n          >\r\n            Add Test\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconFlask size={16} />}\r\n            onClick={openAddOrder}\r\n          >\r\n            New Order\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Loading State */}\r\n      {loading && (\r\n        <Alert icon={<IconAlertCircle size={16} />} color=\"blue\" mb=\"lg\">\r\n          Loading laboratory data...\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Error State */}\r\n      {error && (\r\n        <Alert icon={<IconAlertTriangle size={16} />} color=\"red\" mb=\"lg\" withCloseButton onClose={() => setError(null)}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Statistics Cards */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {statsCards.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n              <Group justify=\"space-between\" mt=\"sm\">\r\n                <Badge \r\n                  color={stat.trend.includes('%') && stat.trend.startsWith('+') ? 'green' : stat.trend.includes('%') ? 'red' : 'blue'} \r\n                  variant=\"light\"\r\n                  size=\"sm\"\r\n                >\r\n                  {stat.trend}\r\n                </Badge>\r\n                <Text size=\"xs\" c=\"dimmed\">\r\n                  {stat.trend.includes('%') ? 'vs last month' : 'operational'}\r\n                </Text>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"tests\" leftSection={<IconTestPipe size={16} />}>\r\n            Lab Tests\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"orders\" leftSection={<IconClipboardList size={16} />}>\r\n            Lab Orders\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"samples\" leftSection={<IconFlask size={16} />}>\r\n            Samples\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"equipment\" leftSection={<IconSettings size={16} />}>\r\n            Equipment\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"qc\" leftSection={<IconShieldCheck size={16} />}>\r\n            Quality Control\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"reports\" leftSection={<IconChartBar size={16} />}>\r\n            Reports\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Lab Tests Tab */}\r\n        <Tabs.Panel value=\"tests\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search tests...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Category\"\r\n                data={[\r\n                  { value: 'hematology', label: 'Hematology' },\r\n                  { value: 'biochemistry', label: 'Biochemistry' },\r\n                  { value: 'microbiology', label: 'Microbiology' },\r\n                  { value: 'immunology', label: 'Immunology' },\r\n                  { value: 'pathology', label: 'Pathology' },\r\n                  { value: 'molecular', label: 'Molecular' },\r\n                  { value: 'genetics', label: 'Genetics' }\r\n                ]}\r\n                value={selectedCategory}\r\n                onChange={setSelectedCategory}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'active', label: 'Active' },\r\n                  { value: 'pending', label: 'Pending' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'cancelled', label: 'Cancelled' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Type\"\r\n                data={[\r\n                  { value: 'routine', label: 'Routine' },\r\n                  { value: 'urgent', label: 'Urgent' },\r\n                  { value: 'stat', label: 'STAT' },\r\n                  { value: 'research', label: 'Research' }\r\n                ]}\r\n                value={selectedType}\r\n                onChange={setSelectedType}\r\n                clearable\r\n              />\r\n              <Button variant=\"light\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Tests Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {filteredTests.map((test) => (\r\n                <Card key={test.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div style={{ flex: 1 }}>\r\n                      <Group>\r\n                        <ThemeIcon \r\n                          color={getCategoryColor(test.category)} \r\n                          variant=\"light\" \r\n                          size=\"lg\"\r\n                        >\r\n                          {getCategoryIcon(test.category)}\r\n                        </ThemeIcon>\r\n                        <div>\r\n                          <Text fw={600} size=\"sm\" lineClamp={1}>\r\n                            {test.testName}\r\n                          </Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">\r\n                            {test.testCode}\r\n                          </Text>\r\n                        </div>\r\n                      </Group>\r\n                    </div>\r\n                    <Badge color={getStatusColor(test.status)} variant=\"light\" size=\"sm\">\r\n                      {test.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Category</Text>\r\n                      <Badge color={getCategoryColor(test.category)} variant=\"light\" size=\"xs\">\r\n                        {test.category}\r\n                      </Badge>\r\n                    </Group>\r\n                    \r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Type</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {test.testType.toUpperCase()}\r\n                      </Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Price</Text>\r\n                      <Text size=\"sm\" fw={600}>\r\n                        {formatCurrency(test.price)}\r\n                      </Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Turnaround Time</Text>\r\n                      <Text size=\"sm\">\r\n                        {test.turnaroundTime}\r\n                      </Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Sample Type</Text>\r\n                      <Text size=\"sm\">\r\n                        {test.sampleType.replace('_', ' ')}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\" lineClamp={2}>\r\n                      {test.description}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewTest(test)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <Menu>\r\n                        <Menu.Target>\r\n                          <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                            <IconDotsVertical size={16} />\r\n                          </ActionIcon>\r\n                        </Menu.Target>\r\n                        <Menu.Dropdown>\r\n                          <Menu.Item leftSection={<IconClipboard size={14} />}>\r\n                            Order Test\r\n                          </Menu.Item>\r\n                          <Menu.Item leftSection={<IconDownload size={14} />}>\r\n                            Export Details\r\n                          </Menu.Item>\r\n                          <Menu.Divider />\r\n                          <Menu.Item \r\n                            leftSection={<IconTrash size={14} />}\r\n                            color=\"red\"\r\n                          >\r\n                            Delete\r\n                          </Menu.Item>\r\n                        </Menu.Dropdown>\r\n                      </Menu>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Lab Orders Tab */}\r\n        <Tabs.Panel value=\"orders\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Laboratory Orders</Title>\r\n              <Button leftSection={<IconPlus size={16} />} onClick={openAddOrder}>\r\n                New Order\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Order Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search orders...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Patient\"\r\n                data={[].map /* TODO: Fetch from API */(patient => ({ \r\n                  value: patient.id, \r\n                  label: `${patient.firstName} ${patient.lastName}` \r\n                }))}\r\n                value={selectedPatient}\r\n                onChange={setSelectedPatient}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'pending', label: 'Pending' },\r\n                  { value: 'in_progress', label: 'In Progress' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'cancelled', label: 'Cancelled' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Orders Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Order #</Table.Th>\r\n                    <Table.Th>Patient</Table.Th>\r\n                    <Table.Th>Doctor</Table.Th>\r\n                    <Table.Th>Tests</Table.Th>\r\n                    <Table.Th>Order Date</Table.Th>\r\n                    <Table.Th>Priority</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredOrders.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={9}>\r\n                        <EmptyState\r\n                          icon={<IconTestPipe size={48} />}\r\n                          title=\"No lab tests\"\r\n                          description=\"Order your first lab test to begin diagnostics\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredOrders.map((order) => (\r\n                      <Table.Tr key={order.id}>\r\n                        <Table.Td>\r\n                          <Text fw={500}>{order.orderNumber}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group>\r\n                            <Avatar color=\"blue\" radius=\"xl\" size=\"sm\">\r\n                              {order.patient.firstName[0]}{order.patient.lastName[0]}\r\n                            </Avatar>\r\n                            <div>\r\n                              <Text size=\"sm\" fw={500}>\r\n                                {order.patient.firstName} {order.patient.lastName}\r\n                              </Text>\r\n                              <Text size=\"xs\" c=\"dimmed\">\r\n                                {order.patient.patientId}\r\n                              </Text>\r\n                            </div>\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>\r\n                              {order.orderingDoctor.firstName} {order.orderingDoctor.lastName}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              {order.orderingDoctor.department?.name}\r\n                            </Text>\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{order.tests.length} tests</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">\r\n                            {typeof order.orderDate === 'string' ? order.orderDate : new Date(order.orderDate).toISOString().split('T')[0]}\r\n                          </Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge \r\n                            color={\r\n                              order.priority === 'stat' ? 'red' : \r\n                              order.priority === 'urgent' ? 'orange' : 'blue'\r\n                            } \r\n                            variant=\"light\"\r\n                            size=\"sm\"\r\n                          >\r\n                            {order.priority.toUpperCase()}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getStatusColor(order.status)} variant=\"light\">\r\n                            {order.status.replace('_', ' ')}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon\r\n                              variant=\"subtle\"\r\n                              color=\"blue\"\r\n                              onClick={() => handleViewOrder(order)}\r\n                            >\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"green\">\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                              <IconDownload size={16} />\r\n                            </ActionIcon>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))\r\n                  )}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Samples Tab */}\r\n        <Tabs.Panel value=\"samples\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Sample Management</Title>\r\n              <Group>\r\n                <Button leftSection={<IconBarcode size={16} />} variant=\"light\">\r\n                  Scan Sample\r\n                </Button>\r\n                <Button leftSection={<IconFlask size={16} />}>\r\n                  Register Sample\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Sample Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search samples...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Sample Type\"\r\n                data={[\r\n                  { value: 'blood', label: 'Blood' },\r\n                  { value: 'urine', label: 'Urine' },\r\n                  { value: 'stool', label: 'Stool' },\r\n                  { value: 'sputum', label: 'Sputum' },\r\n                  { value: 'csf', label: 'CSF' },\r\n                  { value: 'tissue', label: 'Tissue' },\r\n                  { value: 'swab', label: 'Swab' }\r\n                ]}\r\n                value={selectedType}\r\n                onChange={setSelectedType}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'collected', label: 'Collected' },\r\n                  { value: 'received', label: 'Received' },\r\n                  { value: 'processed', label: 'Processed' },\r\n                  { value: 'rejected', label: 'Rejected' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Samples Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {filteredSamples.map((sample) => (\r\n                <Card key={sample.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{sample.sampleId}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{sample.patientName}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(sample.status)} variant=\"light\">\r\n                      {sample.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Sample Type</Text>\r\n                      <Group gap=\"xs\">\r\n                        <IconFlask size={16} />\r\n                        <Text size=\"sm\" fw={500}>\r\n                          {sample.sampleType.replace('_', ' ').toUpperCase()}\r\n                        </Text>\r\n                      </Group>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Collection Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {typeof sample.collectionDate === 'string' ? sample.collectionDate : new Date(sample.collectionDate).toISOString().split('T')[0]}\r\n                      </Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Collection Time</Text>\r\n                      <Text size=\"sm\">\r\n                        {(sample as any).collectionTime || 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Volume</Text>\r\n                      <Text size=\"sm\">{sample.volume} {sample.unit}</Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Container</Text>\r\n                      <Text size=\"sm\">{sample.containerType}</Text>\r\n                    </Group>\r\n\r\n                    {sample.storageConditions && (\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\" c=\"dimmed\">Storage</Text>\r\n                        <Group gap=\"xs\">\r\n                          <IconTemperature size={14} />\r\n                          <Text size=\"sm\">{sample.storageConditions}</Text>\r\n                        </Group>\r\n                      </Group>\r\n                    )}\r\n                  </Stack>\r\n\r\n                  {sample.notes && (\r\n                    <Alert variant=\"light\" color=\"blue\" mb=\"md\">\r\n                      <Text size=\"sm\">{sample.notes}</Text>\r\n                    </Alert>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Collected by: {sample.collectedBy}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewSample(sample)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconBarcode size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Equipment Tab */}\r\n        <Tabs.Panel value=\"equipment\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Laboratory Equipment</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Add Equipment\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Equipment Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((equipment) => (\r\n                <Card key={equipment.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div style={{ flex: 1 }}>\r\n                      <Text fw={600} size=\"lg\" lineClamp={1}>\r\n                        {equipment.equipmentName}\r\n                      </Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {equipment.manufacturer} - {equipment.model}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(equipment.status)} variant=\"light\">\r\n                      {equipment.status.replace('_', ' ')}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Serial Number</Text>\r\n                      <Text size=\"sm\" fw={500}>{equipment.serialNumber}</Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Location</Text>\r\n                      <Text size=\"sm\">{equipment.location}</Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Installation Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {typeof equipment.installationDate === 'string' ? equipment.installationDate : new Date(equipment.installationDate).toISOString().split('T')[0]}\r\n                      </Text>\r\n                    </Group>\r\n\r\n                    {equipment.lastMaintenanceDate && (\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\" c=\"dimmed\">Last Maintenance</Text>\r\n                        <Text size=\"sm\">\r\n                          {typeof equipment.lastMaintenanceDate === 'string' ? equipment.lastMaintenanceDate : new Date(equipment.lastMaintenanceDate).toISOString().split('T')[0]}\r\n                        </Text>\r\n                      </Group>\r\n                    )}\r\n\r\n                    {equipment.nextMaintenanceDate && (\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\" c=\"dimmed\">Next Maintenance</Text>\r\n                        <Text \r\n                          size=\"sm\" \r\n                          c=\"dimmed\"\r\n                        >\r\n                          {typeof equipment.nextMaintenanceDate === 'string' ? equipment.nextMaintenanceDate : new Date(equipment.nextMaintenanceDate).toISOString().split('T')[0]}\r\n                        </Text>\r\n                      </Group>\r\n                    )}\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Warranty</Text>\r\n                      <Text \r\n                        size=\"sm\" \r\n                        c={new Date(equipment.warrantyExpiry) < new Date() ? 'red' : 'green'}\r\n                      >\r\n                        {new Date(equipment.warrantyExpiry) < new Date() ? 'Expired' : 'Valid'}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\" fw={600} c=\"blue\">\r\n                      {formatCurrency(equipment.purchasePrice)}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconSettings size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Quality Control Tab */}\r\n        <Tabs.Panel value=\"qc\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Quality Control</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Add QC Test\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* QC Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((qc) => (\r\n                <Card key={qc.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{qc.testName}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{qc.controlLotNumber}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(qc.status)} variant=\"light\">\r\n                      {qc.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Test Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {typeof qc.testDate === 'string' ? qc.testDate : new Date(qc.testDate).toISOString().split('T')[0]}\r\n                      </Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Expected Value</Text>\r\n                      <Text size=\"sm\" fw={500}>{qc.expectedValue}</Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Actual Value</Text>\r\n                      <Text size=\"sm\" fw={500}>{qc.actualValue}</Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Acceptable Range</Text>\r\n                      <Text size=\"sm\">{qc.acceptableRange}</Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Performed By</Text>\r\n                      <Text size=\"sm\">{qc.performedBy}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {qc.comments && (\r\n                    <Alert \r\n                      variant=\"light\" \r\n                      color={qc.status === 'failed' ? 'red' : 'blue'} \r\n                      mb=\"md\"\r\n                    >\r\n                      <Text size=\"sm\">{qc.comments}</Text>\r\n                    </Alert>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Control Type: {qc.controlType}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Reports Tab */}\r\n        <Tabs.Panel value=\"reports\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Laboratory Reports & Analytics</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {/* Test Distribution by Category */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Tests by Category</Title>\r\n                <MantineDonutChart\r\n                  data={testCategoryData}\r\n                  size={160}\r\n                  thickness={30}\r\n                  withLabels\r\n                />\r\n              </Card>\r\n              \r\n              {/* Daily Test Volume */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Daily Test Volume</Title>\r\n                <SimpleAreaChart\r\n                  data={dailyTestsData}\r\n                  dataKey=\"date\"\r\n                  series={[{ name: 'tests', color: 'blue.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Turnaround Time Analysis */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder style={{ gridColumn: '1 / -1' }}>\r\n                <Title order={4} mb=\"md\">Average Turnaround Time by Category</Title>\r\n                <SimpleBarChart\r\n                  data={turnaroundTimeData}\r\n                  dataKey=\"category\"\r\n                  series={[{ name: 'hours', color: 'orange.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Key Performance Indicators */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Key Performance Indicators</Title>\r\n                <Stack gap=\"md\">\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Test Accuracy Rate</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"green\">\r\n                      {0 /* TODO: Fetch from API */}%\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Average TAT</Text>\r\n                    <Text size=\"sm\" fw={600}>\r\n                      {0 /* TODO: Fetch from API */} hours\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Sample Rejection Rate</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"red\">\r\n                      {0 /* TODO: Fetch from API */}%\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Equipment Uptime</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"green\">\r\n                      {0 /* TODO: Fetch from API */}%\r\n                    </Text>\r\n                  </Group>\r\n                </Stack>\r\n              </Card>\r\n              \r\n              {/* Quick Actions */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Quick Reports</Title>\r\n                <Stack gap=\"sm\">\r\n                  <Button fullWidth leftSection={<IconDownload size={16} />} variant=\"light\">\r\n                    Export Test Results\r\n                  </Button>\r\n                  <Button fullWidth leftSection={<IconFileText size={16} />} variant=\"light\">\r\n                    Quality Control Report\r\n                  </Button>\r\n                  <Button fullWidth leftSection={<IconChartBar size={16} />} variant=\"light\">\r\n                    Workload Analysis\r\n                  </Button>\r\n                  <Button fullWidth leftSection={<IconSettings size={16} />} variant=\"light\">\r\n                    Equipment Performance\r\n                  </Button>\r\n                </Stack>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Test Detail Modal */}\r\n      <Modal\r\n        opened={testDetailOpened}\r\n        onClose={closeTestDetail}\r\n        title=\"Test Details\"\r\n        size=\"lg\"\r\n      >\r\n        {selectedTest && (\r\n          <ScrollArea h={500}>\r\n            <Stack gap=\"md\">\r\n              <Group>\r\n                <ThemeIcon \r\n                  color={getCategoryColor(selectedTest.category)} \r\n                  size=\"xl\" \r\n                  variant=\"light\"\r\n                >\r\n                  {getCategoryIcon(selectedTest.category)}\r\n                </ThemeIcon>\r\n                <div>\r\n                  <Title order={3}>{selectedTest.testName}</Title>\r\n                  <Text c=\"dimmed\">{selectedTest.testCode}</Text>\r\n                  <Badge color={getStatusColor(selectedTest.status)} variant=\"light\" mt=\"xs\">\r\n                    {selectedTest.status}\r\n                  </Badge>\r\n                </div>\r\n              </Group>\r\n\r\n              <Divider />\r\n\r\n              <SimpleGrid cols={2}>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Category</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedTest.category}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Type</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedTest.testType}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Price</Text>\r\n                  <Text size=\"sm\" fw={600}>{formatCurrency(selectedTest.price)}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Turnaround Time</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedTest.turnaroundTime}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Sample Type</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedTest.sampleType.replace('_', ' ')}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Sample Volume</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedTest.sampleVolume}</Text>\r\n                </div>\r\n              </SimpleGrid>\r\n\r\n              <div>\r\n                <Text size=\"sm\" fw={500} mb=\"sm\">Description</Text>\r\n                <Text size=\"sm\">{selectedTest.description}</Text>\r\n              </div>\r\n\r\n              {selectedTest.parameters && selectedTest.parameters.length > 0 && (\r\n                <div>\r\n                  <Text size=\"sm\" fw={500} mb=\"sm\">Test Parameters</Text>\r\n                  <Stack gap=\"xs\">\r\n                    {selectedTest.parameters.map((param) => (\r\n                      <Group key={param.id} justify=\"space-between\" p=\"sm\" \r\n                             style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                        <Text size=\"sm\" fw={500}>{param.parameterName}</Text>\r\n                        <Text size=\"sm\" c=\"dimmed\">\r\n                          {param.normalRange} {param.unit}\r\n                        </Text>\r\n                      </Group>\r\n                    ))}\r\n                  </Stack>\r\n                </div>\r\n              )}\r\n\r\n              <Group justify=\"flex-end\">\r\n                <Button variant=\"light\" onClick={closeTestDetail}>\r\n                  Close\r\n                </Button>\r\n                <Button>\r\n                  Edit Test\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </ScrollArea>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Add Test Modal */}\r\n      <Modal\r\n        opened={addTestOpened}\r\n        onClose={closeAddTest}\r\n        title=\"Add New Test\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"Test Name\"\r\n              placeholder=\"Enter test name\"\r\n              required\r\n            />\r\n            <TextInput\r\n              label=\"Test Code\"\r\n              placeholder=\"Enter test code\"\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Category\"\r\n              placeholder=\"Select category\"\r\n              data={[\r\n                { value: 'hematology', label: 'Hematology' },\r\n                { value: 'biochemistry', label: 'Biochemistry' },\r\n                { value: 'microbiology', label: 'Microbiology' },\r\n                { value: 'immunology', label: 'Immunology' },\r\n                { value: 'pathology', label: 'Pathology' },\r\n                { value: 'molecular', label: 'Molecular' },\r\n                { value: 'genetics', label: 'Genetics' }\r\n              ]}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Test Type\"\r\n              placeholder=\"Select type\"\r\n              data={[\r\n                { value: 'routine', label: 'Routine' },\r\n                { value: 'urgent', label: 'Urgent' },\r\n                { value: 'stat', label: 'STAT' },\r\n                { value: 'research', label: 'Research' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Description\"\r\n            placeholder=\"Enter test description\"\r\n            rows={3}\r\n          />\r\n          \r\n          <SimpleGrid cols={3}>\r\n            <NumberInput\r\n              label=\"Price\"\r\n              placeholder=\"Enter price\"\r\n              leftSection=\"₹\"\r\n              min={0}\r\n              required\r\n            />\r\n            <TextInput\r\n              label=\"Turnaround Time\"\r\n              placeholder=\"e.g., 2-4 hours\"\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Sample Type\"\r\n              placeholder=\"Select sample type\"\r\n              data={[\r\n                { value: 'blood', label: 'Blood' },\r\n                { value: 'urine', label: 'Urine' },\r\n                { value: 'stool', label: 'Stool' },\r\n                { value: 'sputum', label: 'Sputum' },\r\n                { value: 'tissue', label: 'Tissue' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <TextInput\r\n            label=\"Sample Volume\"\r\n            placeholder=\"e.g., 5ml\"\r\n            required\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddTest}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Success',\r\n                message: 'Test added successfully',\r\n                color: 'green',\r\n              });\r\n              closeAddTest();\r\n            }}>\r\n              Add Test\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LaboratoryManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\layout.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Suspense' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 42,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'dynamic' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Badge' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 16,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 393,
        "column": 35,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 393,
        "endColumn": 40
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport { ReactNode, useState, useEffect, Suspense } from 'react';\r\nimport { usePathname, useRouter } from 'next/navigation';\r\nimport dynamic from 'next/dynamic';\r\nimport LoadingSpinner from '@/components/ui/LoadingSpinner';\r\nimport {\r\n  AppShell,\r\n  AppShellNavbar,\r\n  AppShellHeader,\r\n  Group,\r\n  Text,\r\n  Button,\r\n  UnstyledButton,\r\n  Tooltip,\r\n  Badge,\r\n  Avatar,\r\n  Menu,\r\n  ActionIcon,\r\n  NavLink,\r\n  ScrollArea\r\n} from '@mantine/core';\r\nimport {\r\n  IconLayoutDashboard,\r\n  IconUsers,\r\n  IconCalendarEvent,\r\n  IconStethoscope,\r\n  IconBuildingHospital,\r\n  IconAmbulance,\r\n  IconFlask,\r\n  IconMicroscope,\r\n  IconPills,\r\n  IconVaccine,\r\n  IconScissors,\r\n  IconShield,\r\n  IconCalculator,\r\n  IconCash,\r\n  IconShieldCheck,\r\n  IconUser,\r\n  IconHeart,\r\n  IconPackage,\r\n  IconDeviceComputerCamera,\r\n  IconKey,\r\n  IconMessage,\r\n  IconChartBar,\r\n  IconSearch,\r\n  IconPlug,\r\n  IconRobot,\r\n  IconChevronDown,\r\n  IconLogout,\r\n  IconSettings,\r\n  IconBell,\r\n  IconUserCircle\r\n} from '@tabler/icons-react';\r\nimport { UserRole } from '@/lib/rbac';\r\n\r\ninterface DashboardLayoutProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\r\n  const pathname = usePathname();\r\n  const router = useRouter();\r\n  const [user, setUser] = useState(null);\r\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    } else {\r\n      router.push('/login');\r\n    }\r\n  }, [router]);\r\n\r\n  // Show loading spinner while checking auth\r\n  if (!user) {\r\n    return <LoadingSpinner fullScreen message=\"Loading Dashboard...\" />;\r\n  }\r\n\r\n  // Define all modules with role-based access control\r\n  const allModules: {\r\n    title: string;\r\n    href: string;\r\n    icon: any;\r\n    active: boolean;\r\n    color: string;\r\n    requiredRoles: UserRole[];\r\n  }[] = [\r\n    {\r\n      title: \"Dashboard\",\r\n      href: \"/dashboard\",\r\n      icon: IconLayoutDashboard,\r\n      active: true,\r\n      color: \"#3b82f6\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST', 'RESIDENT', 'NURSE', 'LAB_TECHNICIAN', 'RADIOLOGIST', 'PHARMACIST', 'RECEPTIONIST', 'ACCOUNTANT', 'HR_MANAGER', 'INVENTORY_MANAGER', 'PATIENT']\r\n    },\r\n    {\r\n      title: \"Patient Management\",\r\n      href: \"/dashboard/patients\",\r\n      icon: IconUsers,\r\n      active: true,\r\n      color: \"#3b82f6\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST', 'RESIDENT', 'NURSE', 'RECEPTIONIST']\r\n    },\r\n    {\r\n      title: \"Appointments\",\r\n      href: \"/dashboard/appointments\",\r\n      icon: IconCalendarEvent,\r\n      active: true,\r\n      color: \"#10b981\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST', 'RESIDENT', 'NURSE', 'RECEPTIONIST', 'PATIENT']\r\n    },\r\n    {\r\n      title: \"OPD Management\",\r\n      href: \"/dashboard/opd\",\r\n      icon: IconStethoscope,\r\n      active: true,\r\n      color: \"#8b5cf6\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST', 'RESIDENT', 'NURSE', 'RECEPTIONIST']\r\n    },\r\n    {\r\n      title: \"IPD Management\",\r\n      href: \"/dashboard/ipd\",\r\n      icon: IconBuildingHospital,\r\n      active: true,\r\n      color: \"#ef4444\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST', 'NURSE']\r\n    },\r\n    {\r\n      title: \"Emergency\",\r\n      href: \"/dashboard/emergency\",\r\n      icon: IconAmbulance,\r\n      active: true,\r\n      color: \"#dc2626\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST', 'NURSE']\r\n    },\r\n    {\r\n      title: \"Laboratory\",\r\n      href: \"/dashboard/laboratory\",\r\n      icon: IconFlask,\r\n      active: true,\r\n      color: \"#06b6d4\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST', 'RESIDENT', 'LAB_TECHNICIAN', 'NURSE']\r\n    },\r\n    {\r\n      title: \"Radiology\",\r\n      href: \"/dashboard/radiology\",\r\n      icon: IconMicroscope,\r\n      active: true,\r\n      color: \"#0891b2\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST', 'RADIOLOGIST']\r\n    },\r\n    {\r\n      title: \"Pathology\",\r\n      href: \"/dashboard/pathology\",\r\n      icon: IconVaccine,\r\n      active: true,\r\n      color: \"#0e7490\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST', 'LAB_TECHNICIAN']\r\n    },\r\n    {\r\n      title: \"Pharmacy\",\r\n      href: \"/dashboard/pharmacy\",\r\n      icon: IconPills,\r\n      active: true,\r\n      color: \"#84cc16\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'PHARMACIST', 'DOCTOR', 'SPECIALIST']\r\n    },\r\n    {\r\n      title: \"Surgery\",\r\n      href: \"/dashboard/surgery\",\r\n      icon: IconScissors,\r\n      active: true,\r\n      color: \"#be123c\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST', 'NURSE']\r\n    },\r\n    {\r\n      title: \"Billing & Invoices\",\r\n      href: \"/dashboard/billing\",\r\n      icon: IconCalculator,\r\n      active: true,\r\n      color: \"#f59e0b\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'ACCOUNTANT', 'RECEPTIONIST']\r\n    },\r\n    {\r\n      title: \"Finance\",\r\n      href: \"/dashboard/finance\",\r\n      icon: IconCash,\r\n      active: true,\r\n      color: \"#d97706\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'ACCOUNTANT']\r\n    },\r\n    {\r\n      title: \"Insurance\",\r\n      href: \"/dashboard/insurance\",\r\n      icon: IconShieldCheck,\r\n      active: true,\r\n      color: \"#0284c7\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'ACCOUNTANT', 'INSURANCE_PROVIDER']\r\n    },\r\n    {\r\n      title: \"Staff Management\",\r\n      href: \"/dashboard/staff\",\r\n      icon: IconUser,\r\n      active: true,\r\n      color: \"#ec4899\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'HR_MANAGER']\r\n    },\r\n    {\r\n      title: \"HR Management\",\r\n      href: \"/dashboard/hr\",\r\n      icon: IconHeart,\r\n      active: true,\r\n      color: \"#db2777\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'HR_MANAGER']\r\n    },\r\n    {\r\n      title: \"EMR\",\r\n      href: \"/dashboard/emr\",\r\n      icon: IconHeart,\r\n      active: true,\r\n      color: \"#7c3aed\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST', 'RESIDENT', 'NURSE']\r\n    },\r\n    {\r\n      title: \"Inventory\",\r\n      href: \"/dashboard/inventory\",\r\n      icon: IconPackage,\r\n      active: true,\r\n      color: \"#2563eb\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'INVENTORY_MANAGER', 'PHARMACIST']\r\n    },\r\n    {\r\n      title: \"Telemedicine\",\r\n      href: \"/dashboard/telemedicine\",\r\n      icon: IconDeviceComputerCamera,\r\n      active: true,\r\n      color: \"#059669\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST', 'PATIENT']\r\n    },\r\n    {\r\n      title: \"Patient Portal\",\r\n      href: \"/dashboard/patient-portal\",\r\n      icon: IconKey,\r\n      active: true,\r\n      color: \"#0d9488\",\r\n      requiredRoles: ['PATIENT']\r\n    },\r\n    {\r\n      title: \"Communications\",\r\n      href: \"/dashboard/communications\",\r\n      icon: IconMessage,\r\n      active: true,\r\n      color: \"#8b5cf6\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST', 'NURSE', 'RECEPTIONIST']\r\n    },\r\n    {\r\n      title: \"Reports & Analytics\",\r\n      href: \"/dashboard/reports\",\r\n      icon: IconChartBar,\r\n      active: true,\r\n      color: \"#6366f1\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'ACCOUNTANT', 'DOCTOR']\r\n    },\r\n    {\r\n      title: \"Quality Management\",\r\n      href: \"/dashboard/quality\",\r\n      icon: IconShield,\r\n      active: true,\r\n      color: \"#10b981\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN']\r\n    },\r\n    {\r\n      title: \"Research\",\r\n      href: \"/dashboard/research\",\r\n      icon: IconSearch,\r\n      active: true,\r\n      color: \"#6366f1\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST']\r\n    },\r\n    {\r\n      title: \"Integration\",\r\n      href: \"/dashboard/integration\",\r\n      icon: IconPlug,\r\n      active: true,\r\n      color: \"#64748b\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN']\r\n    },\r\n    {\r\n      title: \"AI Assistant\",\r\n      href: \"/dashboard/ai-assistant\",\r\n      icon: IconRobot,\r\n      active: true,\r\n      color: \"#8b5cf6\",\r\n      requiredRoles: ['SUPER_ADMIN', 'TENANT_ADMIN', 'HOSPITAL_ADMIN', 'DOCTOR', 'SPECIALIST']\r\n    },\r\n    {\r\n      title: \"My Health Records\",\r\n      href: \"/dashboard/my-records\",\r\n      icon: IconHeart,\r\n      active: true,\r\n      color: \"#4caf50\",\r\n      requiredRoles: ['PATIENT']\r\n    },\r\n    {\r\n      title: \"My Appointments\",\r\n      href: \"/dashboard/my-appointments\",\r\n      icon: IconCalendarEvent,\r\n      active: true,\r\n      color: \"#2196f3\",\r\n      requiredRoles: ['PATIENT']\r\n    },\r\n    {\r\n      title: \"My Bills\",\r\n      href: \"/dashboard/my-bills\",\r\n      icon: IconCash,\r\n      active: true,\r\n      color: \"#ff9800\",\r\n      requiredRoles: ['PATIENT']\r\n    }\r\n  ];\r\n\r\n  // Filter modules based on user role\r\n  const modules = user?.role \r\n    ? allModules.filter(module => \r\n        module.requiredRoles.includes(user.role as UserRole) || user.role === 'SUPER_ADMIN'\r\n      )\r\n    : [];\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('user');\r\n    router.push('/login');\r\n  };\r\n\r\n  const isActive = (href: string) => pathname.startsWith(href);\r\n\r\n  return (\r\n    <AppShell\r\n      navbar={{\r\n        width: sidebarCollapsed ? 80 : 300,\r\n        breakpoint: 'sm'\r\n      }}\r\n      header={{\r\n        height: 70\r\n      }}\r\n    >\r\n      <AppShellNavbar \r\n        p=\"md\" \r\n        style={{\r\n          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%)',\r\n          borderRight: '1px solid rgba(255,255,255,0.1)',\r\n          boxShadow: '4px 0 20px rgba(0,0,0,0.1)',\r\n          backgroundAttachment: 'fixed'\r\n        }}\r\n        role=\"navigation\"\r\n        aria-label=\"Main navigation\"\r\n      >\r\n        <ScrollArea h=\"100%\">\r\n          <div style={{ padding: '1rem 0' }}>\r\n            <div style={{\r\n              textAlign: sidebarCollapsed ? 'center' : 'left',\r\n              marginBottom: '2rem',\r\n              padding: sidebarCollapsed ? '0.5rem' : '1rem',\r\n              background: 'rgba(255,255,255,0.1)',\r\n              borderRadius: '12px',\r\n              backdropFilter: 'blur(10px)',\r\n              border: '1px solid rgba(255,255,255,0.2)'\r\n            }}>\r\n              <Text\r\n                size=\"md\"\r\n                fw={700}\r\n                c=\"white\"\r\n                style={{\r\n                  fontSize: sidebarCollapsed ? '1.2rem' : '1.3rem',\r\n                  marginBottom: sidebarCollapsed ? '0' : '0.5rem',\r\n                  background: 'linear-gradient(135deg, #ffffff 0%, #f0f9ff 100%)',\r\n                  backgroundClip: 'text',\r\n                  WebkitBackgroundClip: 'text',\r\n                  WebkitTextFillColor: 'transparent'\r\n                }}\r\n              >\r\n                {sidebarCollapsed ? '🏥' : '🏥 HMS SAAS'}\r\n              </Text>\r\n              {!sidebarCollapsed && (\r\n                <Text size=\"sm\" c=\"rgba(255,255,255,0.9)\">\r\n                  Hospital Management System\r\n                </Text>\r\n              )}\r\n            </div>\r\n\r\n            {modules.map((module, index) => {\r\n              const Icon = module.icon;\r\n              const active = isActive(module.href);\r\n\r\n              return (\r\n                <Tooltip key={module.href} label={module.title} position=\"right\" disabled={!sidebarCollapsed}>\r\n                  <div style={{\r\n                    marginBottom: '0.25rem',\r\n                    borderRadius: '10px',\r\n                    overflow: 'hidden'\r\n                  }}>\r\n                    <NavLink\r\n                      component=\"a\"\r\n                      href={module.active ? module.href : '#'}\r\n                      label={!sidebarCollapsed ? module.title : ''}\r\n                      aria-label={module.title}\r\n                      aria-current={active ? 'page' : undefined}\r\n                      leftSection={\r\n                        <div style={{\r\n                          background: active ? 'rgba(255,255,255,0.2)' : 'rgba(255,255,255,0.1)',\r\n                          borderRadius: '8px',\r\n                          padding: '0.5rem',\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          justifyContent: 'center',\r\n                          transition: 'all 0.3s ease',\r\n                          border: active ? '1px solid rgba(255,255,255,0.3)' : '1px solid rgba(255,255,255,0.1)'\r\n                        }}>\r\n                          <Icon size={16} color={active ? 'white' : 'rgba(255,255,255,0.9)'} />\r\n                        </div>\r\n                      }\r\n                      active={active}\r\n                      style={{\r\n                        background: active\r\n                          ? 'rgba(255,255,255,0.15)'\r\n                          : 'rgba(255,255,255,0.05)',\r\n                        borderRadius: '10px',\r\n                        marginBottom: '2px',\r\n                        color: active ? 'white' : 'rgba(255,255,255,0.9)',\r\n                        pointerEvents: module.active ? 'auto' : 'none',\r\n                        opacity: module.active ? 1 : 0.6,\r\n                        minHeight: '44px',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        padding: '0.75rem 1rem',\r\n                        transition: 'all 0.3s ease',\r\n                        border: active ? '1px solid rgba(255,255,255,0.2)' : '1px solid transparent',\r\n                        backdropFilter: active ? 'blur(10px)' : 'none',\r\n                        boxShadow: active ? '0 4px 20px rgba(0,0,0,0.1)' : 'none'\r\n                      }}\r\n                      onClick={(e) => {\r\n                        if (!module.active) {\r\n                          e.preventDefault();\r\n                        }\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </Tooltip>\r\n              );\r\n            })}\r\n          </div>\r\n        </ScrollArea>\r\n\r\n        <div style={{\r\n          marginTop: 'auto',\r\n          padding: '1rem 0',\r\n          borderTop: '1px solid rgba(255,255,255,0.1)'\r\n        }}>\r\n          <Menu shadow=\"lg\" width={220} position=\"right-end\">\r\n            <Menu.Target>\r\n              <UnstyledButton\r\n                style={{\r\n                  width: '100%',\r\n                  padding: '1rem',\r\n                  borderRadius: '12px',\r\n                  background: 'rgba(255,255,255,0.1)',\r\n                  color: 'white',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  gap: '12px',\r\n                  transition: 'all 0.3s ease',\r\n                  backdropFilter: 'blur(10px)',\r\n                  border: '1px solid rgba(255,255,255,0.1)'\r\n                }}\r\n              >\r\n                <div style={{\r\n                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                  borderRadius: '50%',\r\n                  padding: '2px',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center'\r\n                }}>\r\n                  <Avatar size=\"md\" color=\"blue\" style={{\r\n                    background: 'rgba(255,255,255,0.2)',\r\n                    border: '2px solid white'\r\n                  }}>\r\n                    {user.firstName?.[0]}{user.lastName?.[0]}\r\n                  </Avatar>\r\n                </div>\r\n                {!sidebarCollapsed && (\r\n                  <div style={{ flex: 1, textAlign: 'left' }}>\r\n                    <Text size=\"sm\" fw={600} c=\"white\">\r\n                      {user.firstName} {user.lastName}\r\n                    </Text>\r\n                    <Text size=\"xs\" c=\"rgba(255,255,255,0.7)\">\r\n                      {user.role}\r\n                    </Text>\r\n                  </div>\r\n                )}\r\n                {!sidebarCollapsed && <IconChevronDown size={16} color=\"rgba(255,255,255,0.8)\" />}\r\n              </UnstyledButton>\r\n            </Menu.Target>\r\n\r\n            <Menu.Dropdown style={{\r\n              background: 'rgba(255,255,255,0.95)',\r\n              backdropFilter: 'blur(10px)',\r\n              border: '1px solid rgba(0,0,0,0.1)',\r\n              borderRadius: '12px',\r\n              boxShadow: '0 8px 32px rgba(0,0,0,0.12)'\r\n            }}>\r\n              <Menu.Item\r\n                leftSection={<IconUserCircle size={16} color=\"#667eea\" />}\r\n                style={{\r\n                  borderRadius: '8px',\r\n                  marginBottom: '0.25rem'\r\n                }}\r\n              >\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Profile</Text>\r\n                  <Text size=\"xs\" c=\"dimmed\">View your profile</Text>\r\n                </div>\r\n              </Menu.Item>\r\n              <Menu.Item\r\n                leftSection={<IconSettings size={16} color=\"#667eea\" />}\r\n                style={{\r\n                  borderRadius: '8px',\r\n                  marginBottom: '0.25rem'\r\n                }}\r\n              >\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Settings</Text>\r\n                  <Text size=\"xs\" c=\"dimmed\">App preferences</Text>\r\n                </div>\r\n              </Menu.Item>\r\n              <Menu.Divider />\r\n              <Menu.Item\r\n                leftSection={<IconLogout size={16} color=\"#ef4444\" />}\r\n                onClick={handleLogout}\r\n                color=\"red\"\r\n                style={{\r\n                  borderRadius: '8px',\r\n                  background: 'rgba(239, 68, 68, 0.1)'\r\n                }}\r\n              >\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Logout</Text>\r\n                  <Text size=\"xs\" c=\"dimmed\">Sign out of your account</Text>\r\n                </div>\r\n              </Menu.Item>\r\n            </Menu.Dropdown>\r\n          </Menu>\r\n        </div>\r\n      </AppShellNavbar>\r\n\r\n      <AppShellHeader style={{\r\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%)',\r\n        borderBottom: '1px solid rgba(255,255,255,0.1)',\r\n        boxShadow: '0 2px 20px rgba(0,0,0,0.08)',\r\n        backdropFilter: 'blur(10px)',\r\n        backgroundAttachment: 'fixed'\r\n      }}>\r\n        <Group justify=\"space-between\" h=\"100%\" px=\"md\">\r\n          <Group>\r\n            <Button\r\n              variant=\"subtle\"\r\n              size=\"sm\"\r\n              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\r\n              style={{\r\n                borderRadius: '8px',\r\n                transition: 'all 0.2s ease',\r\n                background: sidebarCollapsed ? 'rgba(255,255,255,0.1)' : 'transparent',\r\n                color: 'white',\r\n                border: '1px solid rgba(255,255,255,0.2)'\r\n              }}\r\n            >\r\n              ☰\r\n            </Button>\r\n            <div style={{\r\n              background: 'linear-gradient(135deg, #ffffff 0%, #f0f9ff 100%)',\r\n              backgroundClip: 'text',\r\n              WebkitBackgroundClip: 'text',\r\n              WebkitTextFillColor: 'transparent'\r\n            }}>\r\n              <Text size=\"md\" fw={600}>\r\n                {modules.find(m => isActive(m.href))?.title || 'Dashboard'}\r\n              </Text>\r\n            </div>\r\n          </Group>\r\n\r\n          <Group>\r\n            <ActionIcon\r\n              variant=\"light\"\r\n              size=\"md\"\r\n              style={{\r\n                borderRadius: '10px',\r\n                background: 'rgba(255,255,255,0.2)',\r\n                transition: 'all 0.2s ease',\r\n                border: '1px solid rgba(255,255,255,0.3)'\r\n              }}\r\n            >\r\n              <IconBell size={18} color=\"white\" />\r\n            </ActionIcon>\r\n            <Button\r\n              variant=\"light\"\r\n              onClick={() => router.push('/dashboard')}\r\n              style={{\r\n                borderRadius: '10px',\r\n                background: 'rgba(255,255,255,0.2)',\r\n                color: 'white',\r\n                transition: 'all 0.2s ease',\r\n                boxShadow: '0 4px 15px rgba(255,255,255,0.2)',\r\n                border: '1px solid rgba(255,255,255,0.3)',\r\n                backdropFilter: 'blur(10px)'\r\n              }}\r\n            >\r\n              Back to Dashboard\r\n            </Button>\r\n          </Group>\r\n        </Group>\r\n      </AppShellHeader>\r\n\r\n      <AppShell.Main style={{\r\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%)',\r\n        minHeight: '100vh',\r\n        position: 'relative',\r\n        backgroundAttachment: 'fixed'\r\n      }}>\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          right: 0,\r\n          height: '4px',\r\n          background: 'linear-gradient(90deg, #667eea 0%, #764ba2 50%, #f093fb 100%)',\r\n          borderRadius: '0 0 8px 8px'\r\n        }} />\r\n        <div style={{\r\n          padding: '2rem',\r\n          background: 'rgba(255,255,255,0.95)',\r\n          backdropFilter: 'blur(10px)',\r\n          minHeight: 'calc(100vh - 70px)',\r\n          borderRadius: '16px 16px 0 0',\r\n          margin: '1rem',\r\n          marginTop: '0',\r\n          boxShadow: '0 8px 32px rgba(0,0,0,0.1)',\r\n          border: '1px solid rgba(255,255,255,0.2)'\r\n        }}>\r\n          {children}\r\n        </div>\r\n      </AppShell.Main>\r\n    </AppShell>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\my-appointments\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\my-bills\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\my-records\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\opd\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'NumberInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Switch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Divider' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Alert' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'notifications' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 35,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 44,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUser' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 48,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileText' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 52,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDownload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 54,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUserCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 56,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 56,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 59,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 60,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHeart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 61,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedicalCross' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNurse' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 63,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 63,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 64,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMapPin' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCreditCard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReceipt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 69,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 71,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlertCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 73,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReport' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 75,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrandWhatsapp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 76,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBell' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 78,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockOPDVisits' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 128,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 128,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockDoctors' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 214,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 214,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedDoctor' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 260,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 260,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 266,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 266,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'doctorScheduleOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 271,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 271,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeDoctorSchedule' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 271,
        "column": 67,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 271,
        "endColumn": 86
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'prescriptionOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 272,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 272,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'openPrescription' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 272,
        "column": 38,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 272,
        "endColumn": 54
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closePrescription' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 272,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 272,
        "endColumn": 80
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.",
        "line": 276,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 276,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAllData]",
            "fix": { "range": [7412, 7414], "text": "[fetchAllData]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'fetchVisits' and 'loading'. Either include them or remove the dependency array.",
        "line": 331,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 331,
        "endColumn": 55,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchVisits, loading, searchQuery, selectedDepartment, selectedStatus]",
            "fix": {
              "range": [9057, 9106],
              "text": "[fetchVisits, loading, searchQuery, selectedDepartment, selectedStatus]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useMemo has a missing dependency: 'opdVisits'. Either include it or remove the dependency array.",
        "line": 346,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 346,
        "endColumn": 55,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [opdVisits, searchQuery, selectedDepartment, selectedStatus]",
            "fix": {
              "range": [9752, 9801],
              "text": "[opdVisits, searchQuery, selectedDepartment, selectedStatus]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'formatDate' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 365,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 365,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'statsDisplay' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 395,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 395,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 43,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Stack,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Switch,\r\n  Divider,\r\n  Alert,\r\n  Timeline,\r\n  List\r\n} from '@mantine/core';\r\nimport { DatePickerInput, TimeInput } from '@mantine/dates';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport { notifications } from '@mantine/notifications';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport opdService from '../../../services/opd.service';\r\n// import { LineChart, BarChart, DonutChart, AreaChart } from '@mantine/charts';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconStethoscope,\r\n  IconCalendar,\r\n  IconClock,\r\n  IconUser,\r\n  IconUsers,\r\n  IconClipboard,\r\n  IconPrescription,\r\n  IconFileText,\r\n  IconPrinter,\r\n  IconDownload,\r\n  IconRefresh,\r\n  IconUserCheck,\r\n  IconActivity,\r\n  IconChartBar,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconHeart,\r\n  IconMedicalCross,\r\n  IconNurse,\r\n  IconPhone,\r\n  IconMail,\r\n  IconMapPin,\r\n  IconCash,\r\n  IconCreditCard,\r\n  IconReceipt,\r\n  IconCheck,\r\n  IconX,\r\n  IconAlertCircle,\r\n  IconFilter,\r\n  IconCalendarEvent,\r\n  IconReport,\r\n  IconBrandWhatsapp,\r\n  IconMessage,\r\n  IconBell\r\n} from '@tabler/icons-react';\r\n\r\n// Types\r\ninterface OPDVisit {\r\n  id: string;\r\n  visitNumber: string;\r\n  patientId: string;\r\n  patientName: string;\r\n  patientPhone: string;\r\n  doctorId: string;\r\n  doctorName: string;\r\n  department: string;\r\n  appointmentTime: string;\r\n  actualArrivalTime?: string;\r\n  consultationStartTime?: string;\r\n  consultationEndTime?: string;\r\n  status: 'scheduled' | 'arrived' | 'in_consultation' | 'completed' | 'no_show' | 'cancelled';\r\n  visitType: 'new' | 'follow_up' | 'emergency';\r\n  chiefComplaint: string;\r\n  diagnosis?: string;\r\n  prescription?: string[];\r\n  nextVisitDate?: string;\r\n  consultationFee: number;\r\n  paymentStatus: 'pending' | 'paid' | 'insurance';\r\n  vitalSigns?: {\r\n    bloodPressure: string;\r\n    heartRate: number;\r\n    temperature: number;\r\n    weight: number;\r\n    height: number;\r\n  };\r\n  waitingTime?: number;\r\n  consultationDuration?: number;\r\n}\r\n\r\ninterface Doctor {\r\n  id: string;\r\n  name: string;\r\n  specialization: string;\r\n  department: string;\r\n  qualification: string;\r\n  experience: number;\r\n  consultationFee: number;\r\n  availableSlots: string[];\r\n  currentPatients: number;\r\n  maxPatientsPerDay: number;\r\n}\r\n\r\n// Mock data\r\nconst mockOPDVisits: OPDVisit[] = [\r\n  {\r\n    id: '1',\r\n    visitNumber: 'OPD2024001',\r\n    patientId: 'P2024001',\r\n    patientName: 'Rajesh Kumar',\r\n    patientPhone: '+91 98765 43210',\r\n    doctorId: 'D001',\r\n    doctorName: 'Dr. Sharma',\r\n    department: 'Cardiology',\r\n    appointmentTime: '2024-01-15T09:00:00Z',\r\n    actualArrivalTime: '2024-01-15T08:55:00Z',\r\n    consultationStartTime: '2024-01-15T09:15:00Z',\r\n    status: 'in_consultation',\r\n    visitType: 'new',\r\n    chiefComplaint: 'Chest pain and shortness of breath',\r\n    consultationFee: 500,\r\n    paymentStatus: 'paid',\r\n    vitalSigns: {\r\n      bloodPressure: '140/90',\r\n      heartRate: 85,\r\n      temperature: 98.6,\r\n      weight: 75,\r\n      height: 170\r\n    },\r\n    waitingTime: 15\r\n  },\r\n  {\r\n    id: '2',\r\n    visitNumber: 'OPD2024002',\r\n    patientId: 'P2024002',\r\n    patientName: 'Sunita Patel',\r\n    patientPhone: '+91 87654 32109',\r\n    doctorId: 'D002',\r\n    doctorName: 'Dr. Reddy',\r\n    department: 'General Medicine',\r\n    appointmentTime: '2024-01-15T10:30:00Z',\r\n    status: 'arrived',\r\n    visitType: 'follow_up',\r\n    chiefComplaint: 'Follow-up for diabetes management',\r\n    consultationFee: 350,\r\n    paymentStatus: 'insurance',\r\n    actualArrivalTime: '2024-01-15T10:25:00Z',\r\n    waitingTime: 5\r\n  },\r\n  {\r\n    id: '3',\r\n    visitNumber: 'OPD2024003',\r\n    patientId: 'P2024003',\r\n    patientName: 'Mohammed Ali',\r\n    patientPhone: '+91 76543 21098',\r\n    doctorId: 'D003',\r\n    doctorName: 'Dr. Singh',\r\n    department: 'Orthopedics',\r\n    appointmentTime: '2024-01-15T14:00:00Z',\r\n    status: 'scheduled',\r\n    visitType: 'new',\r\n    chiefComplaint: 'Knee pain and stiffness',\r\n    consultationFee: 600,\r\n    paymentStatus: 'pending'\r\n  },\r\n  {\r\n    id: '4',\r\n    visitNumber: 'OPD2024004',\r\n    patientId: 'P2024004',\r\n    patientName: 'Priya Gupta',\r\n    patientPhone: '+91 65432 10987',\r\n    doctorId: 'D001',\r\n    doctorName: 'Dr. Sharma',\r\n    department: 'Cardiology',\r\n    appointmentTime: '2024-01-15T11:30:00Z',\r\n    consultationStartTime: '2024-01-15T11:35:00Z',\r\n    consultationEndTime: '2024-01-15T12:05:00Z',\r\n    status: 'completed',\r\n    visitType: 'follow_up',\r\n    chiefComplaint: 'Post-surgery follow-up',\r\n    diagnosis: 'Post-operative recovery normal',\r\n    prescription: ['Aspirin 75mg - 1 daily', 'Metoprolol 25mg - 1 BD'],\r\n    nextVisitDate: '2024-02-15T11:30:00Z',\r\n    consultationFee: 500,\r\n    paymentStatus: 'paid',\r\n    consultationDuration: 30,\r\n    waitingTime: 5\r\n  }\r\n];\r\n\r\nconst mockDoctors: Doctor[] = [\r\n  {\r\n    id: 'D001',\r\n    name: 'Dr. Sharma',\r\n    specialization: 'Cardiologist',\r\n    department: 'Cardiology',\r\n    qualification: 'MD, DM Cardiology',\r\n    experience: 15,\r\n    consultationFee: 500,\r\n    availableSlots: ['09:00', '09:30', '10:00', '10:30', '11:00', '11:30'],\r\n    currentPatients: 8,\r\n    maxPatientsPerDay: 20\r\n  },\r\n  {\r\n    id: 'D002',\r\n    name: 'Dr. Reddy',\r\n    specialization: 'General Physician',\r\n    department: 'General Medicine',\r\n    qualification: 'MBBS, MD Internal Medicine',\r\n    experience: 12,\r\n    consultationFee: 350,\r\n    availableSlots: ['10:00', '10:30', '11:00', '11:30', '14:00', '14:30'],\r\n    currentPatients: 15,\r\n    maxPatientsPerDay: 25\r\n  },\r\n  {\r\n    id: 'D003',\r\n    name: 'Dr. Singh',\r\n    specialization: 'Orthopedic Surgeon',\r\n    department: 'Orthopedics',\r\n    qualification: 'MS Orthopedics',\r\n    experience: 18,\r\n    consultationFee: 600,\r\n    availableSlots: ['14:00', '14:30', '15:00', '15:30', '16:00'],\r\n    currentPatients: 6,\r\n    maxPatientsPerDay: 15\r\n  }\r\n];\r\n\r\nconst OPDManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('queue');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedDepartment, setSelectedDepartment] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedVisit, setSelectedVisit] = useState<OPDVisit | null>(null);\r\n  const [selectedDoctor, setSelectedDoctor] = useState<Doctor | null>(null);\r\n\r\n  // API data state\r\n  const [opdVisits, setOpdVisits] = useState<OPDVisit[]>([]);\r\n  const [opdStats, setOpdStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Modal states\r\n  const [visitDetailOpened, { open: openVisitDetail, close: closeVisitDetail }] = useDisclosure(false);\r\n  const [newVisitOpened, { open: openNewVisit, close: closeNewVisit }] = useDisclosure(false);\r\n  const [doctorScheduleOpened, { open: openDoctorSchedule, close: closeDoctorSchedule }] = useDisclosure(false);\r\n  const [prescriptionOpened, { open: openPrescription, close: closePrescription }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  const fetchAllData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      await Promise.all([fetchVisits(), fetchStats()]);\r\n    } catch (err: any) {\r\n      console.error('Error loading OPD data:', err);\r\n      setError(err.response?.data?.message || err.message || 'Failed to load OPD data');\r\n      setOpdVisits([] /* TODO: Fetch from API */);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchVisits = async () => {\r\n    try {\r\n      const filters = {\r\n        status: selectedStatus || undefined,\r\n        search: searchQuery || undefined\r\n      };\r\n      const response = await opdService.getVisits(filters);\r\n      // Handle different response structures\r\n      const visits = Array.isArray(response.data) \r\n        ? response.data \r\n        : (response.data?.items || []);\r\n      setOpdVisits(visits as OPDVisit[]);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching OPD visits (using empty data):', err.response?.data?.message || err.message);\r\n      setOpdVisits([]);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await opdService.getStats();\r\n      setOpdStats(response.data);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching OPD stats (using default values):', err.response?.data?.message || err.message);\r\n      // Set default stats when backend is unavailable\r\n      setOpdStats({\r\n        totalVisits: 0,\r\n        todayVisits: 0,\r\n        completed: 0,\r\n        inProgress: 0,\r\n        averageWaitTime: 0\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      fetchVisits();\r\n    }\r\n  }, [searchQuery, selectedDepartment, selectedStatus]);\r\n\r\n  // Filter visits\r\n  const filteredVisits = useMemo(() => {\r\n    return opdVisits.filter((visit) => {\r\n      const matchesSearch = \r\n        visit.patientName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        visit.visitNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        visit.doctorName.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesDepartment = !selectedDepartment || visit.department === selectedDepartment;\r\n      const matchesStatus = !selectedStatus || visit.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesDepartment && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedDepartment, selectedStatus]);\r\n\r\n  const handleViewVisit = (visit: OPDVisit) => {\r\n    setSelectedVisit(visit);\r\n    openVisitDetail();\r\n  };\r\n\r\n  const handleViewDoctorSchedule = (doctor: Doctor) => {\r\n    setSelectedDoctor(doctor);\r\n    openDoctorSchedule();\r\n  };\r\n\r\n  const formatTime = (dateString: string) => {\r\n    return new Date(dateString).toLocaleTimeString('en-IN', {\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('en-IN', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'scheduled': return 'blue';\r\n      case 'arrived': return 'orange';\r\n      case 'in_consultation': return 'yellow';\r\n      case 'completed': return 'green';\r\n      case 'no_show': return 'red';\r\n      case 'cancelled': return 'gray';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getPaymentStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'paid': return 'green';\r\n      case 'pending': return 'red';\r\n      case 'insurance': return 'blue';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  // Quick stats from API\r\n  const statsDisplay = opdStats || {\r\n    totalVisitsToday: 0,\r\n    waiting: 0,\r\n    inConsultation: 0,\r\n    completed: 0,\r\n    cancelled: 0\r\n  };\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>OPD Management</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Outpatient department consultation and queue management\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button variant=\"light\" leftSection={<IconRefresh size={16} />}>\r\n            Refresh Queue\r\n          </Button>\r\n          <Button leftSection={<IconPlus size={16} />} onClick={openNewVisit}>\r\n            New OPD Visit\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Quick Stats */}\r\n      {opdStats && (\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 5 }} mb=\"lg\">\r\n        <Card padding=\"lg\" radius=\"md\" withBorder>\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Text c=\"dimmed\" size=\"sm\" fw={500}>Total Visits</Text>\r\n              <Text fw={700} size=\"xl\">{opdStats.totalVisits || 0}</Text>\r\n            </div>\r\n            <ThemeIcon color=\"blue\" size=\"xl\" radius=\"md\" variant=\"light\">\r\n              <IconUsers size={24} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"lg\" radius=\"md\" withBorder>\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Text c=\"dimmed\" size=\"sm\" fw={500}>Today&apos;s Visits</Text>\r\n              <Text fw={700} size=\"xl\">{opdStats.todayVisits || 0}</Text>\r\n            </div>\r\n            <ThemeIcon color=\"green\" size=\"xl\" radius=\"md\" variant=\"light\">\r\n              <IconCalendar size={24} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"lg\" radius=\"md\" withBorder>\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Text c=\"dimmed\" size=\"sm\" fw={500}>Completed</Text>\r\n              <Text fw={700} size=\"xl\">{opdStats.completed || 0}</Text>\r\n            </div>\r\n            <ThemeIcon color=\"cyan\" size=\"xl\" radius=\"md\" variant=\"light\">\r\n              <IconCheck size={24} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"lg\" radius=\"md\" withBorder>\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Text c=\"dimmed\" size=\"sm\" fw={500}>In Progress</Text>\r\n              <Text fw={700} size=\"xl\">{opdStats.inProgress || 0}</Text>\r\n            </div>\r\n            <ThemeIcon color=\"orange\" size=\"xl\" radius=\"md\" variant=\"light\">\r\n              <IconActivity size={24} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"lg\" radius=\"md\" withBorder>\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Text c=\"dimmed\" size=\"sm\" fw={500}>Avg Wait Time</Text>\r\n              <Text fw={700} size=\"xl\">{opdStats.averageWaitTime || 0}min</Text>\r\n            </div>\r\n            <ThemeIcon color=\"red\" size=\"xl\" radius=\"md\" variant=\"light\">\r\n              <IconClock size={24} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n      </SimpleGrid>\r\n      )}\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"queue\" leftSection={<IconUsers size={16} />}>\r\n            Patient Queue\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"doctors\" leftSection={<IconStethoscope size={16} />}>\r\n            Doctor Schedule\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconChartBar size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Patient Queue Tab */}\r\n        <Tabs.Panel value=\"queue\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search visits...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Department\"\r\n                data={[\r\n                  { value: 'Cardiology', label: 'Cardiology' },\r\n                  { value: 'General Medicine', label: 'General Medicine' },\r\n                  { value: 'Orthopedics', label: 'Orthopedics' },\r\n                  { value: 'Pediatrics', label: 'Pediatrics' },\r\n                  { value: 'Gynecology', label: 'Gynecology' }\r\n                ]}\r\n                value={selectedDepartment}\r\n                onChange={setSelectedDepartment}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'scheduled', label: 'Scheduled' },\r\n                  { value: 'arrived', label: 'Arrived' },\r\n                  { value: 'in_consultation', label: 'In Consultation' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'no_show', label: 'No Show' },\r\n                  { value: 'cancelled', label: 'Cancelled' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Visits Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Visit #</Table.Th>\r\n                    <Table.Th>Patient</Table.Th>\r\n                    <Table.Th>Doctor</Table.Th>\r\n                    <Table.Th>Department</Table.Th>\r\n                    <Table.Th>Appointment Time</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Payment</Table.Th>\r\n                    <Table.Th>Wait Time</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredVisits.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={8}>\r\n                        <EmptyState\r\n                          icon={<IconStethoscope size={48} />}\r\n                          title=\"No OPD consultations\"\r\n                          description=\"Register your first outpatient consultation to get started\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredVisits.map((visit) => (\r\n                    <Table.Tr key={visit.id}>\r\n                      <Table.Td>\r\n                        <Text fw={500} size=\"sm\">{visit.visitNumber}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group>\r\n                          <Avatar color=\"blue\" radius=\"xl\" size=\"sm\">\r\n                            {visit.patientName.split(' ').map(n => n[0]).join('')}\r\n                          </Avatar>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>{visit.patientName}</Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">{visit.patientPhone}</Text>\r\n                          </div>\r\n                        </Group>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>{visit.doctorName}</Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">{visit.department}</Text>\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge variant=\"light\" size=\"sm\">\r\n                          {visit.department}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">{formatTime(visit.appointmentTime)}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getStatusColor(visit.status)} variant=\"light\" size=\"sm\">\r\n                          {visit.status.replace('_', ' ').toUpperCase()}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <Badge color={getPaymentStatusColor(visit.paymentStatus)} variant=\"light\" size=\"sm\">\r\n                            {visit.paymentStatus.toUpperCase()}\r\n                          </Badge>\r\n                          <Text size=\"xs\" c=\"dimmed\">₹{visit.consultationFee}</Text>\r\n                        </Group>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\" c={visit.waitingTime && visit.waitingTime > 30 ? 'red' : 'dimmed'}>\r\n                          {visit.waitingTime ? `${visit.waitingTime}min` : '-'}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon\r\n                            variant=\"subtle\"\r\n                            color=\"blue\"\r\n                            onClick={() => handleViewVisit(visit)}\r\n                          >\r\n                            <IconEye size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"green\">\r\n                            <IconEdit size={16} />\r\n                          </ActionIcon>\r\n                          {visit.status === 'completed' && (\r\n                            <ActionIcon variant=\"subtle\" color=\"purple\">\r\n                              <IconPrescription size={16} />\r\n                            </ActionIcon>\r\n                          )}\r\n                        </Group>\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  )))}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Doctor Schedule Tab */}\r\n        <Tabs.Panel value=\"doctors\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Doctor Schedules & Availability</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((doctor) => (\r\n                <Card key={doctor.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{doctor.name}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{doctor.specialization}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">{doctor.qualification}</Text>\r\n                    </div>\r\n                    <ThemeIcon color=\"blue\" size=\"xl\" radius=\"xl\" variant=\"light\">\r\n                      <IconStethoscope size={20} />\r\n                    </ThemeIcon>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Department</Text>\r\n                      <Badge variant=\"light\">{doctor.department}</Badge>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Experience</Text>\r\n                      <Text size=\"sm\">{doctor.experience} years</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Consultation Fee</Text>\r\n                      <Text size=\"sm\" fw={500}>₹{doctor.consultationFee}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <div style={{ marginBottom: 'var(--mantine-spacing-md)' }}>\r\n                    <Text size=\"sm\" c=\"dimmed\" mb=\"xs\">Today&apos;s Load</Text>\r\n                    <Progress\r\n                      value={(doctor.currentPatients / doctor.maxPatientsPerDay) * 100} \r\n                      size=\"lg\" \r\n                      color={doctor.currentPatients > doctor.maxPatientsPerDay * 0.8 ? 'red' : 'blue'}\r\n                    />\r\n                    <Text size=\"xs\" c=\"dimmed\" mt=\"xs\">\r\n                      {doctor.currentPatients} / {doctor.maxPatientsPerDay} patients\r\n                    </Text>\r\n                  </div>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Button \r\n                      variant=\"light\" \r\n                      size=\"xs\"\r\n                      onClick={() => handleViewDoctorSchedule(doctor)}\r\n                    >\r\n                      View Schedule\r\n                    </Button>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconCalendarEvent size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconMessage size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Analytics Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\" mt=\"md\">\r\n            {/* Daily Visit Trends */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Daily Visit Trends</Title>\r\n              <Text c=\"dimmed\" ta=\"center\" p=\"xl\">\r\n                Chart component temporarily disabled\r\n              </Text>\r\n            </Card>\r\n\r\n            {/* Department Distribution */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Department-wise Visits</Title>\r\n              <Text c=\"dimmed\" ta=\"center\" p=\"xl\">\r\n                Chart component temporarily disabled\r\n              </Text>\r\n            </Card>\r\n\r\n            {/* Wait Time Analysis */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Average Wait Times by Department</Title>\r\n              <Text c=\"dimmed\" ta=\"center\" p=\"xl\">\r\n                Chart component temporarily disabled\r\n              </Text>\r\n            </Card>\r\n\r\n            {/* Revenue Analysis */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">OPD Revenue Trends</Title>\r\n              <Text c=\"dimmed\" ta=\"center\" p=\"xl\">\r\n                Chart component temporarily disabled\r\n              </Text>\r\n            </Card>\r\n          </SimpleGrid>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Visit Detail Modal */}\r\n      <Modal\r\n        opened={visitDetailOpened}\r\n        onClose={closeVisitDetail}\r\n        title=\"OPD Visit Details\"\r\n        size=\"lg\"\r\n      >\r\n        {selectedVisit && (\r\n          <Stack gap=\"md\">\r\n            <Group justify=\"space-between\">\r\n              <div>\r\n                <Title order={3}>{selectedVisit.patientName}</Title>\r\n                <Text c=\"dimmed\">Visit: {selectedVisit.visitNumber}</Text>\r\n              </div>\r\n              <Badge color={getStatusColor(selectedVisit.status)} variant=\"light\">\r\n                {selectedVisit.status.replace('_', ' ').toUpperCase()}\r\n              </Badge>\r\n            </Group>\r\n\r\n            <SimpleGrid cols={2} spacing=\"md\">\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" fw={500}>Doctor</Text>\r\n                <Text>{selectedVisit.doctorName}</Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" fw={500}>Department</Text>\r\n                <Text>{selectedVisit.department}</Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" fw={500}>Appointment Time</Text>\r\n                <Text>{formatTime(selectedVisit.appointmentTime)}</Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" fw={500}>Visit Type</Text>\r\n                <Text tt=\"capitalize\">{selectedVisit.visitType.replace('_', ' ')}</Text>\r\n              </div>\r\n            </SimpleGrid>\r\n\r\n            <div>\r\n              <Text size=\"sm\" c=\"dimmed\" fw={500} mb=\"xs\">Chief Complaint</Text>\r\n              <Text>{selectedVisit.chiefComplaint}</Text>\r\n            </div>\r\n\r\n            {selectedVisit.vitalSigns && (\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" fw={500} mb=\"xs\">Vital Signs</Text>\r\n                <SimpleGrid cols={3} spacing=\"sm\">\r\n                  <Text size=\"sm\">BP: {selectedVisit.vitalSigns.bloodPressure}</Text>\r\n                  <Text size=\"sm\">HR: {selectedVisit.vitalSigns.heartRate} bpm</Text>\r\n                  <Text size=\"sm\">Temp: {selectedVisit.vitalSigns.temperature}°F</Text>\r\n                  <Text size=\"sm\">Weight: {selectedVisit.vitalSigns.weight} kg</Text>\r\n                  <Text size=\"sm\">Height: {selectedVisit.vitalSigns.height} cm</Text>\r\n                </SimpleGrid>\r\n              </div>\r\n            )}\r\n\r\n            {selectedVisit.diagnosis && (\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" fw={500} mb=\"xs\">Diagnosis</Text>\r\n                <Text>{selectedVisit.diagnosis}</Text>\r\n              </div>\r\n            )}\r\n\r\n            {selectedVisit.prescription && selectedVisit.prescription.length > 0 && (\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" fw={500} mb=\"xs\">Prescription</Text>\r\n                <List size=\"sm\">\r\n                  {selectedVisit.prescription.map((med, index) => (\r\n                    <List.Item key={index}>{med}</List.Item>\r\n                  ))}\r\n                </List>\r\n              </div>\r\n            )}\r\n\r\n            <Group justify=\"space-between\">\r\n              <Group>\r\n                <Text size=\"sm\" c=\"dimmed\">Fee: ₹{selectedVisit.consultationFee}</Text>\r\n                <Badge color={getPaymentStatusColor(selectedVisit.paymentStatus)} size=\"sm\">\r\n                  {selectedVisit.paymentStatus.toUpperCase()}\r\n                </Badge>\r\n              </Group>\r\n              <Group>\r\n                <Button variant=\"light\" leftSection={<IconPrinter size={16} />}>\r\n                  Print\r\n                </Button>\r\n                <Button onClick={closeVisitDetail}>\r\n                  Close\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n          </Stack>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* New Visit Modal */}\r\n      <Modal\r\n        opened={newVisitOpened}\r\n        onClose={closeNewVisit}\r\n        title=\"Schedule New OPD Visit\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2} spacing=\"md\">\r\n            <Select\r\n              label=\"Patient\"\r\n              placeholder=\"Select patient\"\r\n              data={[\r\n                { value: 'P001', label: 'Rajesh Kumar' },\r\n                { value: 'P002', label: 'Sunita Patel' },\r\n                { value: 'P003', label: 'Mohammed Ali' }\r\n              ]}\r\n              searchable\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Visit Type\"\r\n              placeholder=\"Select visit type\"\r\n              data={[\r\n                { value: 'new', label: 'New Patient' },\r\n                { value: 'follow_up', label: 'Follow-up' },\r\n                { value: 'emergency', label: 'Emergency' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n\r\n          <SimpleGrid cols={2} spacing=\"md\">\r\n            <Select\r\n              label=\"Department\"\r\n              placeholder=\"Select department\"\r\n              data={[\r\n                { value: 'cardiology', label: 'Cardiology' },\r\n                { value: 'general', label: 'General Medicine' },\r\n                { value: 'orthopedics', label: 'Orthopedics' }\r\n              ]}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Doctor\"\r\n              placeholder=\"Select doctor\"\r\n              data={[\r\n                { value: 'D001', label: 'Dr. Sharma (Cardiology)' },\r\n                { value: 'D002', label: 'Dr. Reddy (General Medicine)' },\r\n                { value: 'D003', label: 'Dr. Singh (Orthopedics)' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n\r\n          <SimpleGrid cols={2} spacing=\"md\">\r\n            <DatePickerInput\r\n              label=\"Appointment Date\"\r\n              placeholder=\"Select date\"\r\n              required\r\n            />\r\n            <TimeInput\r\n              label=\"Appointment Time\"\r\n              placeholder=\"Select time\"\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n\r\n          <Textarea\r\n            label=\"Chief Complaint\"\r\n            placeholder=\"Enter chief complaint\"\r\n            rows={3}\r\n            required\r\n          />\r\n\r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeNewVisit}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              // notifications.show({\r\n              //   title: 'OPD Visit Scheduled',\r\n              //   message: 'New OPD visit has been successfully scheduled',\r\n              //   color: 'green',\r\n              // });\r\n              console.log('OPD Visit Scheduled');\r\n              closeNewVisit();\r\n            }}>\r\n              Schedule Visit\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default OPDManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\pathology\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Progress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'NumberInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Stepper' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 32,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 33,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 34,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Highlight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 36,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Accordion' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 37,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'FileButton' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 38,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ColorSwatch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 39,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Code' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 40,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleLineChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 48,
        "column": 46,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 61
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 54,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 55,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 61,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboardList' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileText' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPrinter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 69,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShare' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconActivity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 71,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconExclamationMark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClockHour4' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 73,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 74,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 74,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 75,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalculator' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSettings' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 78,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRefresh' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 79,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 80,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTemperature' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 82,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShieldCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlertTriangle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 84,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCircleCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 86,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 86,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLungs' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 87,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHeart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 88,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 88,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrain' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 89,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 90,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 90,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStethoscope' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 91,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 91,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedicalCross' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 92,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPackage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 93,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTruck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 94,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 94,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 95,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReceipt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 96,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 96,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNotes' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 97,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTag' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 98,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 98,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlarm' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 99,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 99,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconInfoCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 100,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 100,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBed' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 101,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 101,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAmbulance' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 102,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 102,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNurse' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 105,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBandage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 106,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 106,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPill' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 107,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 107,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMask' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 108,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 108,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBolt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 109,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 109,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCut' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 111,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 111,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTool' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 112,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 112,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhoto' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 113,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 113,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconScan' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 114,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 114,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDeviceDesktop' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 115,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCamera' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 116,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 117,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTarget' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 118,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 118,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFocus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 119,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 119,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrightness' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 124,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 124,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAdjustments' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 125,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 125,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMaximize' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 126,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 126,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMinimize' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 127,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 127,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlayerPlay' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 128,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 128,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlayerPause' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 129,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 129,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVolume' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 130,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 130,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 131,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 131,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 132,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 132,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVirus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 134,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 134,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAtom' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 136,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 136,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDna2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 137,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 137,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCellSignal4' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 138,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 138,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCertificate' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 139,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 139,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReport' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 140,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 140,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCopy' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 141,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 141,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDatabase' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 143,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 143,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFlask2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 144,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 144,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconScale' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 145,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 145,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedReport' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 161,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 161,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedTest' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 162,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 162,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'labTests' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 166,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 166,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'labOrders' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 167,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 167,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'reportDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 238,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 238,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeReportDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 238,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 238,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'testDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 239,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 239,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeTestDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 239,
        "column": 59,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 239,
        "endColumn": 74
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'createReportOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 241,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 241,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeCreateReport' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 241,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 241,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'molecularTestOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 242,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 242,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeMolecularTest' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 242,
        "column": 65,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 242,
        "endColumn": 83
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'filteredTests' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 262,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 262,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleViewTest' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 342,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 342,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 98,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Alert,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Timeline,\r\n  Stepper,\r\n  RingProgress,\r\n  Tooltip,\r\n  List,\r\n  Image,\r\n  Loader,\r\n  Highlight,\r\n  Accordion,\r\n  FileButton,\r\n  ColorSwatch,\r\n  Code,\r\n  Spoiler,\r\n  Mark,\r\n  SimpleGrid\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleLineChart, SimpleBarChart } from '../../../components/MantineChart';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconCalendar,\r\n  IconMicroscope,\r\n  IconChartBar,\r\n  IconPhone,\r\n  IconMail,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconReportMedical,\r\n  IconClock,\r\n  IconClipboardList,\r\n  IconFileText,\r\n  IconDownload,\r\n  IconPrinter,\r\n  IconShare,\r\n  IconActivity,\r\n  IconExclamationMark,\r\n  IconClockHour4,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconUsers,\r\n  IconCalculator,\r\n  IconSettings,\r\n  IconRefresh,\r\n  IconFilter,\r\n  IconBarcode,\r\n  IconTemperature,\r\n  IconShieldCheck,\r\n  IconAlertTriangle,\r\n  IconCircleCheck,\r\n  IconClipboard,\r\n  IconLungs,\r\n  IconHeart,\r\n  IconBrain,\r\n  IconBone,\r\n  IconStethoscope,\r\n  IconMedicalCross,\r\n  IconPackage,\r\n  IconTruck,\r\n  IconCash,\r\n  IconReceipt,\r\n  IconNotes,\r\n  IconTag,\r\n  IconAlarm,\r\n  IconInfoCircle,\r\n  IconBed,\r\n  IconAmbulance,\r\n  IconFlask,\r\n  IconDroplet,\r\n  IconNurse,\r\n  IconBandage,\r\n  IconPill,\r\n  IconMask,\r\n  IconBolt,\r\n  IconZoom,\r\n  IconCut,\r\n  IconTool,\r\n  IconPhoto,\r\n  IconScan,\r\n  IconDeviceDesktop,\r\n  IconCamera,\r\n  IconUpload,\r\n  IconTarget,\r\n  IconFocus,\r\n  IconColorPicker,\r\n  IconRuler,\r\n  IconRotate,\r\n  IconContrast,\r\n  IconBrightness,\r\n  IconAdjustments,\r\n  IconMaximize,\r\n  IconMinimize,\r\n  IconPlayerPlay,\r\n  IconPlayerPause,\r\n  IconVolume,\r\n  IconFileUpload,\r\n  IconCloudUpload,\r\n  IconDna,\r\n  IconVirus,\r\n  IconTestPipe,\r\n  IconAtom,\r\n  IconDna2,\r\n  IconCellSignal4,\r\n  IconCertificate,\r\n  IconReport,\r\n  IconCopy,\r\n  IconFileReport,\r\n  IconDatabase,\r\n  IconFlask2,\r\n  IconScale\r\n} from '@tabler/icons-react';\r\n\r\n// Import types and mock data - using any for flexibility\r\n// Mock data imports removed\r\nimport pathologyService from '../../../services/pathology.service';\r\n\r\nconst PathologyManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('specimens');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedType, setSelectedType] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedTestStatus, setSelectedTestStatus] = useState<string>('');\r\n  const [selectedBiopsyType, setSelectedBiopsyType] = useState<string>('');\r\n  const [selectedSpecimen, setSelectedSpecimen] = useState<any>(null);\r\n  const [selectedReport, setSelectedReport] = useState<any>(null);\r\n  const [selectedTest, setSelectedTest] = useState<any>(null);\r\n  const [selectedSlide, setSelectedSlide] = useState<any>(null);\r\n\r\n  // API state\r\n  const [labTests, setLabTests] = useState<any[]>([]);\r\n  const [labOrders, setLabOrders] = useState<any[]>([]);\r\n  const [pathologyStats, setPathologyStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Fetch lab tests\r\n  const fetchLabTests = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await pathologyService.getTests({ limit: 100 });\r\n      if (response.success) {\r\n        setLabTests(response.data.items);\r\n      }\r\n    } catch (err: any) {\r\n      console.warn('Error fetching lab tests (using empty data):', err.response?.data?.message || err.message);\r\n      setError(null);\r\n      setLabTests([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch lab orders\r\n  const fetchLabOrders = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await pathologyService.getOrders({ limit: 100 });\r\n      if (response.success) {\r\n        setLabOrders(response.data.items);\r\n      }\r\n    } catch (err: any) {\r\n      console.warn('Error fetching lab orders (using empty data):', err.response?.data?.message || err.message);\r\n      setError(null);\r\n      setLabOrders([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch pathology stats\r\n  const fetchPathologyStats = async () => {\r\n    try {\r\n      const response = await pathologyService.getStats();\r\n      if (response.success) {\r\n        setPathologyStats(response.data);\r\n      }\r\n    } catch (err: any) {\r\n      console.warn('Error fetching pathology stats (using default values):', err.response?.data?.message || err.message);\r\n      setPathologyStats({\r\n        totalTests: 0,\r\n        pendingTests: 0,\r\n        completedTests: 0,\r\n        totalOrders: 0,\r\n        pendingOrders: 0,\r\n        completedOrders: 0\r\n      });\r\n    }\r\n  };\r\n\r\n  // Initial data fetch\r\n  useEffect(() => {\r\n    fetchLabTests();\r\n    fetchLabOrders();\r\n    fetchPathologyStats();\r\n  }, []);\r\n\r\n  // Modal states\r\n  const [specimenDetailOpened, { open: openSpecimenDetail, close: closeSpecimenDetail }] = useDisclosure(false);\r\n  const [addSpecimenOpened, { open: openAddSpecimen, close: closeAddSpecimen }] = useDisclosure(false);\r\n  const [reportDetailOpened, { open: openReportDetail, close: closeReportDetail }] = useDisclosure(false);\r\n  const [testDetailOpened, { open: openTestDetail, close: closeTestDetail }] = useDisclosure(false);\r\n  const [slideViewerOpened, { open: openSlideViewer, close: closeSlideViewer }] = useDisclosure(false);\r\n  const [createReportOpened, { open: openCreateReport, close: closeCreateReport }] = useDisclosure(false);\r\n  const [molecularTestOpened, { open: openMolecularTest, close: closeMolecularTest }] = useDisclosure(false);\r\n\r\n  // Filter specimens\r\n  const filteredSpecimens = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((specimen: any) => {\r\n      const matchesSearch = \r\n        specimen.patient?.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        specimen.patient?.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        specimen.specimenId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        specimen.sourceLocation?.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesType = !selectedType || specimen.specimenType === selectedType;\r\n      const matchesStatus = !selectedStatus || specimen.status === selectedStatus;\r\n      const matchesBiopsyType = !selectedBiopsyType || specimen.biopsyType === selectedBiopsyType;\r\n\r\n      return matchesSearch && matchesType && matchesStatus && matchesBiopsyType;\r\n    });\r\n  }, [searchQuery, selectedType, selectedStatus, selectedBiopsyType]);\r\n\r\n  // Filter tests\r\n  const filteredTests = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((test: any) => {\r\n      const matchesSearch = \r\n        test.testName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        test.testId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        test.patient?.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        test.patient?.lastName?.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesStatus = !selectedTestStatus || test.status === selectedTestStatus;\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedTestStatus]);\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'received':\r\n      case 'pending':\r\n      case 'draft':\r\n      case 'ordered': return 'blue';\r\n      case 'processing':\r\n      case 'in_progress':\r\n      case 'reviewing': return 'orange';\r\n      case 'completed':\r\n      case 'finalized':\r\n      case 'reported': return 'green';\r\n      case 'rejected':\r\n      case 'cancelled': return 'red';\r\n      case 'archived': return 'gray';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getSpecimenTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'tissue': return 'green';\r\n      case 'fluid': return 'blue';\r\n      case 'cytology': return 'purple';\r\n      case 'blood': return 'red';\r\n      case 'bone_marrow': return 'orange';\r\n      case 'frozen_section': return 'cyan';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getBiopsyTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'core_biopsy': return 'blue';\r\n      case 'fine_needle': return 'green';\r\n      case 'excisional': return 'orange';\r\n      case 'incisional': return 'purple';\r\n      case 'endoscopic': return 'cyan';\r\n      case 'surgical': return 'red';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getDiagnosisCategoryColor = (category: string) => {\r\n    switch (category) {\r\n      case 'benign': return 'green';\r\n      case 'malignant': return 'red';\r\n      case 'suspicious': return 'orange';\r\n      case 'inflammatory': return 'blue';\r\n      case 'infectious': return 'purple';\r\n      case 'normal': return 'gray';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const handleViewSpecimen = (specimen: any) => {\r\n    setSelectedSpecimen(specimen);\r\n    openSpecimenDetail();\r\n  };\r\n\r\n  const handleViewReport = (report: any) => {\r\n    setSelectedReport(report);\r\n    openReportDetail();\r\n  };\r\n\r\n  const handleViewTest = (test: any) => {\r\n    setSelectedTest(test);\r\n    openTestDetail();\r\n  };\r\n\r\n  const handleViewSlide = (slide: any) => {\r\n    setSelectedSlide(slide);\r\n    openSlideViewer();\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchQuery('');\r\n    setSelectedType('');\r\n    setSelectedStatus('');\r\n    setSelectedTestStatus('');\r\n    setSelectedBiopsyType('');\r\n  };\r\n\r\n  // Statistics cards\r\n  const statsCards = [\r\n    {\r\n      title: 'Total Tests',\r\n      value: pathologyStats?.tests?.total || 0,\r\n      icon: IconFlask,\r\n      color: 'blue',\r\n      trend: '+0%'\r\n    },\r\n    {\r\n      title: 'Pending Orders',\r\n      value: pathologyStats?.orders?.pending || 0,\r\n      icon: IconReportMedical,\r\n      color: 'orange',\r\n      trend: '0'\r\n    },\r\n    {\r\n      title: 'Completed Orders',\r\n      value: pathologyStats?.orders?.completed || 0,\r\n      icon: IconMicroscope,\r\n      color: 'green',\r\n      trend: '+0'\r\n    },\r\n    {\r\n      title: 'Active Tests',\r\n      value: pathologyStats?.tests?.active || 0,\r\n      icon: IconUsers,\r\n      color: 'purple',\r\n      trend: '0% available'\r\n    }\r\n  ];\r\n\r\n  // Chart data\r\n  const specimenTypeData = [];\r\n\r\n  const monthlyVolume = [];\r\n  const diagnosisDistribution = [];\r\n  const turnaroundTimes = [];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Pathology & Laboratory Information System</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage pathology specimens, reports, and laboratory workflows\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={openAddSpecimen}\r\n            color=\"blue\"\r\n          >\r\n            New Specimen\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconMicroscope size={16} />}\r\n            color=\"green\"\r\n          >\r\n            Quick Test\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Statistics Cards */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {statsCards.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n              <Group justify=\"space-between\" mt=\"sm\">\r\n                <Badge \r\n                  color={stat.trend.includes('+') ? 'green' : stat.trend.includes('-') ? 'red' : 'blue'} \r\n                  variant=\"light\"\r\n                  size=\"sm\"\r\n                >\r\n                  {stat.trend}\r\n                </Badge>\r\n                <Text size=\"xs\" c=\"dimmed\">vs last month</Text>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"specimens\" leftSection={<IconFlask size={16} />}>\r\n            Specimens\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"reports\" leftSection={<IconReportMedical size={16} />}>\r\n            Reports\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"histology\" leftSection={<IconMicroscope size={16} />}>\r\n            Histology\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"cytology\" leftSection={<IconDroplet size={16} />}>\r\n            Cytology\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"molecular\" leftSection={<IconDna size={16} />}>\r\n            Molecular\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"pathologists\" leftSection={<IconUsers size={16} />}>\r\n            Pathologists\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconChartBar size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Specimens Tab */}\r\n        <Tabs.Panel value=\"specimens\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {loading && (\r\n              <Group justify=\"center\" mb=\"md\">\r\n                <Loader size=\"sm\" />\r\n                <Text size=\"sm\" c=\"dimmed\">Loading pathology data...</Text>\r\n              </Group>\r\n            )}\r\n            {error && (\r\n              <Alert icon={<IconAlertCircle size={16} />} color=\"red\" mb=\"md\" onClose={() => setError(null)} withCloseButton>\r\n                {error}\r\n              </Alert>\r\n            )}\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search specimens...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Specimen Type\"\r\n                data={[\r\n                  { value: 'tissue', label: 'Tissue' },\r\n                  { value: 'fluid', label: 'Fluid' },\r\n                  { value: 'cytology', label: 'Cytology' },\r\n                  { value: 'blood', label: 'Blood' },\r\n                  { value: 'bone_marrow', label: 'Bone Marrow' },\r\n                  { value: 'frozen_section', label: 'Frozen Section' }\r\n                ]}\r\n                value={selectedType}\r\n                onChange={setSelectedType}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'received', label: 'Received' },\r\n                  { value: 'processing', label: 'Processing' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'reported', label: 'Reported' },\r\n                  { value: 'archived', label: 'Archived' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Biopsy Type\"\r\n                data={[\r\n                  { value: 'core_biopsy', label: 'Core Biopsy' },\r\n                  { value: 'fine_needle', label: 'Fine Needle' },\r\n                  { value: 'excisional', label: 'Excisional' },\r\n                  { value: 'incisional', label: 'Incisional' },\r\n                  { value: 'endoscopic', label: 'Endoscopic' },\r\n                  { value: 'surgical', label: 'Surgical' }\r\n                ]}\r\n                value={selectedBiopsyType}\r\n                onChange={setSelectedBiopsyType}\r\n                clearable\r\n              />\r\n              <Button variant=\"light\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Specimens Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Specimen ID</Table.Th>\r\n                    <Table.Th>Patient</Table.Th>\r\n                    <Table.Th>Type</Table.Th>\r\n                    <Table.Th>Source Location</Table.Th>\r\n                    <Table.Th>Collection Date</Table.Th>\r\n                    <Table.Th>Biopsy Type</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Pathologist</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredSpecimens.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={10}>\r\n                        <EmptyState\r\n                          icon={<IconMicroscope size={48} />}\r\n                          title=\"No pathology tests\"\r\n                          description=\"Order pathology tests for patients\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredSpecimens.map((specimen) => (\r\n                      <Table.Tr key={specimen.id}>\r\n                        <Table.Td>\r\n                          <Group>\r\n                            <Text fw={500}>{specimen.specimenId}</Text>\r\n                            {specimen.isUrgent && (\r\n                              <Badge color=\"red\" variant=\"light\" size=\"xs\">\r\n                                URGENT\r\n                              </Badge>\r\n                            )}\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group>\r\n                            <Avatar color=\"blue\" radius=\"xl\" size=\"sm\">\r\n                              {specimen.patient?.firstName?.[0] || 'P'}{specimen.patient?.lastName?.[0] || 'S'}\r\n                            </Avatar>\r\n                            <div>\r\n                              <Text size=\"sm\" fw={500}>\r\n                                {specimen.patient?.firstName || 'N/A'} {specimen.patient?.lastName || ''}\r\n                              </Text>\r\n                              <Text size=\"xs\" c=\"dimmed\">\r\n                                MRN: {specimen.patient?.medicalRecordNumber || 'N/A'}\r\n                              </Text>\r\n                            </div>\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getSpecimenTypeColor(specimen.specimenType)} variant=\"light\">\r\n                            {specimen.specimenType.replace('_', ' ').toUpperCase()}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\" fw={500}>\r\n                            {specimen.sourceLocation}\r\n                          </Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>\r\n                              {specimen.collectionDate ? (typeof specimen.collectionDate === 'string' ? specimen.collectionDate : new Date(specimen.collectionDate).toISOString().split('T')[0]) : 'N/A'}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              {specimen.collectionDate && typeof specimen.collectionDate !== 'string' ? new Date(specimen.collectionDate).toISOString().split('T')[1].substring(0, 5) : ''}\r\n                            </Text>\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getBiopsyTypeColor(specimen.biopsyType)} variant=\"light\" size=\"sm\">\r\n                            {specimen.biopsyType.replace('_', ' ')}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getStatusColor(specimen.status)} variant=\"light\">\r\n                            {specimen.status}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>\r\n                              Dr. {specimen.pathologist.lastName}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              {specimen.pathologist.specialization}\r\n                            </Text>\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon\r\n                              variant=\"subtle\"\r\n                              color=\"blue\"\r\n                              onClick={() => handleViewSpecimen(specimen)}\r\n                            >\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"green\">\r\n                              <IconMicroscope size={16} />\r\n                            </ActionIcon>\r\n                            <Menu>\r\n                              <Menu.Target>\r\n                                <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                                  <IconDotsVertical size={16} />\r\n                                </ActionIcon>\r\n                              </Menu.Target>\r\n                              <Menu.Dropdown>\r\n                                <Menu.Item leftSection={<IconReportMedical size={14} />}>\r\n                                  Create Report\r\n                                </Menu.Item>\r\n                                <Menu.Item leftSection={<IconTestPipe size={14} />}>\r\n                                  Order Tests\r\n                                </Menu.Item>\r\n                                <Menu.Item leftSection={<IconBarcode size={14} />}>\r\n                                  Print Label\r\n                                </Menu.Item>\r\n                                <Menu.Divider />\r\n                                <Menu.Item \r\n                                  leftSection={<IconX size={14} />}\r\n                                  color=\"red\"\r\n                                >\r\n                                  Reject Specimen\r\n                                </Menu.Item>\r\n                              </Menu.Dropdown>\r\n                            </Menu>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))\r\n                  )}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Reports Tab */}\r\n        <Tabs.Panel value=\"reports\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Pathology Reports</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />} onClick={openCreateReport}>\r\n                  Create Report\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconDownload size={16} />}>\r\n                  Export Reports\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Reports Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((report: any) => (\r\n                <Card key={report.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{report.reportId}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{report.specimenType}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(report.status)} variant=\"light\">\r\n                      {report.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Patient</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {report.patient?.firstName || 'N/A'} {report.patient?.lastName || ''}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Pathologist</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {report.pathologist?.lastName ? `Dr. ${report.pathologist.lastName}` : 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Collection Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {report.collectionDate ? (typeof report.collectionDate === 'string' ? report.collectionDate : new Date(report.collectionDate).toISOString().split('T')[0]) : 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Report Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {report.reportDate ? (typeof report.reportDate === 'string' ? report.reportDate : new Date(report.reportDate).toISOString().split('T')[0]) : 'Pending'}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {report.diagnosis && (\r\n                    <div style={{ marginBottom: '1rem' }}>\r\n                      <Text size=\"sm\" fw={500} mb=\"xs\">Primary Diagnosis</Text>\r\n                      <Group gap=\"xs\" mb=\"sm\">\r\n                        <Badge color={getDiagnosisCategoryColor(report.diagnosisCategory)} variant=\"light\">\r\n                          {report.diagnosisCategory?.toUpperCase() || 'N/A'}\r\n                        </Badge>\r\n                      </Group>\r\n                      <Text size=\"sm\" lineClamp={2}>\r\n                        {report.diagnosis}\r\n                      </Text>\r\n                    </div>\r\n                  )}\r\n\r\n                  {report.microscopicFindings && (\r\n                    <Spoiler maxHeight={60} showLabel=\"Show findings\" hideLabel=\"Hide\">\r\n                      <Text size=\"sm\" fw={500} mb=\"xs\">Microscopic Findings</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {report.microscopicFindings}\r\n                      </Text>\r\n                    </Spoiler>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\" mt=\"md\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      {report.isUrgent && <Mark color=\"red\">URGENT</Mark>}\r\n                      TAT: {report.turnaroundTime}h\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewReport(report)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Histology Tab */}\r\n        <Tabs.Panel value=\"histology\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Histology Slides</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />}>\r\n                  Prepare Slides\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconMicroscope size={16} />}>\r\n                  Digital Microscopy\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Histology Slides Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((slide) => (\r\n                <Card key={slide.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{slide.slideId}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">Block: {slide.blockId}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(slide.status)} variant=\"light\">\r\n                      {slide.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  {/* Slide Thumbnail */}\r\n                  <div\r\n                    style={{\r\n                      height: '100px',\r\n                      backgroundColor: '#f1f3f4',\r\n                      borderRadius: '8px',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                      marginBottom: '1rem',\r\n                      position: 'relative'\r\n                    }}\r\n                  >\r\n                    <IconMicroscope size={32} color=\"#868e96\" />\r\n                    <div style={{\r\n                      position: 'absolute',\r\n                      top: '8px',\r\n                      right: '8px',\r\n                      backgroundColor: 'rgba(255,255,255,0.9)',\r\n                      borderRadius: '4px',\r\n                      padding: '2px 6px'\r\n                    }}>\r\n                      <Text size=\"xs\" fw={500}>{slide.magnification}x</Text>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Patient</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {slide.patient?.firstName || 'N/A'} {slide.patient?.lastName || ''}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Staining</Text>\r\n                      <div>\r\n                        {slide.staining.map((stain) => (\r\n                          <Badge key={stain} size=\"xs\" variant=\"light\" mr=\"xs\">\r\n                            {stain.toUpperCase()}\r\n                          </Badge>\r\n                        ))}\r\n                      </div>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Section Thickness</Text>\r\n                      <Text size=\"sm\">{slide.sectionThickness}μm</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Preparation Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {slide.preparationDate ? (typeof slide.preparationDate === 'string' ? slide.preparationDate : new Date(slide.preparationDate).toISOString().split('T')[0]) : 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Quality: {slide.qualityScore}/10\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewSlide(slide)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconMicroscope size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Cytology Tab */}\r\n        <Tabs.Panel value=\"cytology\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Cytology Specimens</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />}>\r\n                  New Cytology\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconDroplet size={16} />}>\r\n                  Liquid Based\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Cytology Slides Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((slide) => (\r\n                <Card key={slide.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{slide.slideId}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{slide.specimenType}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(slide.status)} variant=\"light\">\r\n                      {slide.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  {/* Cytology Slide Thumbnail */}\r\n                  <div\r\n                    style={{\r\n                      height: '100px',\r\n                      backgroundColor: '#e3f2fd',\r\n                      borderRadius: '8px',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                      marginBottom: '1rem'\r\n                    }}\r\n                  >\r\n                    <IconDroplet size={32} color=\"#1976d2\" />\r\n                  </div>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Patient</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {slide.patient?.firstName || 'N/A'} {slide.patient?.lastName || ''}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Collection Method</Text>\r\n                      <Badge color=\"blue\" variant=\"light\" size=\"sm\">\r\n                        {slide.collectionMethod.replace('_', ' ')}\r\n                      </Badge>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Adequacy</Text>\r\n                      <Badge \r\n                        color={slide.adequacy === 'adequate' ? 'green' : 'orange'} \r\n                        variant=\"light\" \r\n                        size=\"sm\"\r\n                      >\r\n                        {slide.adequacy}\r\n                      </Badge>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Collection Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {slide.collectionDate ? (typeof slide.collectionDate === 'string' ? slide.collectionDate : new Date(slide.collectionDate).toISOString().split('T')[0]) : 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {slide.interpretation && (\r\n                    <div style={{ marginBottom: '0.5rem' }}>\r\n                      <Text size=\"sm\" fw={500} mb=\"xs\">Interpretation</Text>\r\n                      <Text size=\"sm\" lineClamp={2} c=\"dimmed\">\r\n                        {slide.interpretation}\r\n                      </Text>\r\n                    </div>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Screening: {slide.screeningDate ? 'Complete' : 'Pending'}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewSlide(slide)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconMicroscope size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconFileReport size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Molecular Tab */}\r\n        <Tabs.Panel value=\"molecular\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Molecular Pathology</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />} onClick={openMolecularTest}>\r\n                  Order Test\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconDna size={16} />}>\r\n                  PCR Analysis\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Molecular Tests Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((test) => (\r\n                <Card key={test.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{test.testId}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{test.testType}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(test.status)} variant=\"light\">\r\n                      {test.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Patient</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {test.patient?.firstName || 'N/A'} {test.patient?.lastName || ''}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Gene/Marker</Text>\r\n                      <Badge color=\"purple\" variant=\"light\">\r\n                        {test.geneMarker}\r\n                      </Badge>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Method</Text>\r\n                      <Text size=\"sm\">{test.methodology}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Ordered Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {test.orderedDate ? (typeof test.orderedDate === 'string' ? test.orderedDate : new Date(test.orderedDate).toISOString().split('T')[0]) : 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {test.result && (\r\n                    <Alert \r\n                      variant=\"light\" \r\n                      color={test.result === 'positive' ? 'red' : test.result === 'negative' ? 'green' : 'blue'}\r\n                      mb=\"md\"\r\n                    >\r\n                      <Text size=\"sm\" fw={500}>\r\n                        Result: {test.result.toUpperCase()}\r\n                      </Text>\r\n                      {test.interpretation && (\r\n                        <Text size=\"sm\" mt=\"xs\">\r\n                          {test.interpretation}\r\n                        </Text>\r\n                      )}\r\n                    </Alert>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      TAT: {test.turnaroundTime}h\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconDna size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Pathologists Tab */}\r\n        <Tabs.Panel value=\"pathologists\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Pathologists</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Add Pathologist\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Pathologists Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((pathologist) => (\r\n                <Card key={pathologist.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group mb=\"md\">\r\n                    <Avatar size=\"lg\" color=\"blue\" radius=\"xl\">\r\n                      {pathologist.firstName[0]}{pathologist.lastName[0]}\r\n                    </Avatar>\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">\r\n                        Dr. {pathologist.firstName} {pathologist.lastName}\r\n                      </Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{pathologist.specialization}</Text>\r\n                      <Badge \r\n                        color={pathologist.isAvailable ? 'green' : 'red'} \r\n                        variant=\"light\" \r\n                        size=\"sm\"\r\n                      >\r\n                        {pathologist.isAvailable ? 'Available' : 'Busy'}\r\n                      </Badge>\r\n                    </div>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">License</Text>\r\n                      <Text size=\"sm\" fw={500}>{pathologist.licenseNumber}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Experience</Text>\r\n                      <Text size=\"sm\">{pathologist.yearsOfExperience} years</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Cases (Month)</Text>\r\n                      <Text size=\"sm\" fw={500}>{pathologist.casesThisMonth}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Pending Reports</Text>\r\n                      <Badge \r\n                        color={pathologist.pendingReports > 10 ? 'red' : pathologist.pendingReports > 5 ? 'orange' : 'green'} \r\n                        variant=\"light\"\r\n                      >\r\n                        {pathologist.pendingReports}\r\n                      </Badge>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500} mb=\"xs\">Subspecialties</Text>\r\n                    <Group gap=\"xs\">\r\n                      {pathologist.subspecialties.slice(0, 3).map((specialty) => (\r\n                        <Badge key={specialty} size=\"xs\" variant=\"light\">\r\n                          {specialty}\r\n                        </Badge>\r\n                      ))}\r\n                      {pathologist.subspecialties.length > 3 && (\r\n                        <Badge size=\"xs\" variant=\"light\" color=\"gray\">\r\n                          +{pathologist.subspecialties.length - 3}\r\n                        </Badge>\r\n                      )}\r\n                    </Group>\r\n                  </div>\r\n\r\n                  <Group justify=\"space-between\" mt=\"md\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Avg TAT: {pathologist.averageTurnaroundTime}h\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconMail size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconPhone size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Analytics Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Pathology Analytics</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {/* Specimen Types Distribution */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Specimens by Type</Title>\r\n                <MantineDonutChart\r\n                  data={specimenTypeData}\r\n                  size={160}\r\n                  thickness={30}\r\n                  withLabels\r\n                />\r\n              </Card>\r\n              \r\n              {/* Monthly Volume */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Monthly Pathology Volume</Title>\r\n                <SimpleAreaChart\r\n                  data={monthlyVolume}\r\n                  dataKey=\"month\"\r\n                  series={[{ name: 'volume', color: 'blue.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Diagnosis Distribution */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Diagnosis Distribution</Title>\r\n                <SimpleBarChart\r\n                  data={diagnosisDistribution}\r\n                  dataKey=\"category\"\r\n                  series={[{ name: 'count', color: 'green.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Turnaround Times */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Average Turnaround Times</Title>\r\n                <SimpleBarChart\r\n                  data={turnaroundTimes}\r\n                  dataKey=\"type\"\r\n                  series={[\r\n                    { name: 'hours', color: 'orange.6' }\r\n                  ]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Key Metrics */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder style={{ gridColumn: '1 / -1' }}>\r\n                <Title order={4} mb=\"md\">Key Performance Indicators</Title>\r\n                <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }}>\r\n                  <div style={{ textAlign: 'center' }}>\r\n                    <RingProgress\r\n                      size={120}\r\n                      thickness={12}\r\n                      sections={[{ value: 0, color: 'green' }]}\r\n                      label={\r\n                        <Text size=\"lg\" fw={700} ta=\"center\">\r\n                          0%\r\n                        </Text>\r\n                      }\r\n                    />\r\n                    <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">Report Completion Rate</Text>\r\n                  </div>\r\n                  \r\n                  <div style={{ textAlign: 'center' }}>\r\n                    <RingProgress\r\n                      size={120}\r\n                      thickness={12}\r\n                      sections={[{ value: 0, color: 'blue' }]}\r\n                      label={\r\n                        <Text size=\"lg\" fw={700} ta=\"center\">\r\n                          0h\r\n                        </Text>\r\n                      }\r\n                    />\r\n                    <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">Avg Turnaround Time</Text>\r\n                  </div>\r\n                  \r\n                  <div style={{ textAlign: 'center' }}>\r\n                    <RingProgress\r\n                      size={120}\r\n                      thickness={12}\r\n                      sections={[{ value: 0, color: 'purple' }]}\r\n                      label={\r\n                        <Text size=\"lg\" fw={700} ta=\"center\">\r\n                          0/10\r\n                        </Text>\r\n                      }\r\n                    />\r\n                    <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">Quality Score</Text>\r\n                  </div>\r\n                  \r\n                  <div style={{ textAlign: 'center' }}>\r\n                    <RingProgress\r\n                      size={120}\r\n                      thickness={12}\r\n                      sections={[{ value: 0, color: 'red' }]}\r\n                      label={\r\n                        <Text size=\"lg\" fw={700} ta=\"center\">\r\n                          0\r\n                        </Text>\r\n                      }\r\n                    />\r\n                    <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">Critical Alerts</Text>\r\n                  </div>\r\n                </SimpleGrid>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Specimen Detail Modal */}\r\n      <Modal\r\n        opened={specimenDetailOpened}\r\n        onClose={closeSpecimenDetail}\r\n        title=\"Specimen Details\"\r\n        size=\"xl\"\r\n      >\r\n        {selectedSpecimen && (\r\n          <ScrollArea h={600}>\r\n            <Stack gap=\"md\">\r\n              <Group>\r\n                <ThemeIcon color=\"blue\" size=\"xl\" variant=\"light\">\r\n                  <IconFlask size={24} />\r\n                </ThemeIcon>\r\n                <div>\r\n                  <Title order={3}>Specimen {selectedSpecimen.specimenId}</Title>\r\n                  <Text c=\"dimmed\">{selectedSpecimen.sourceLocation}</Text>\r\n                  <Badge color={getStatusColor(selectedSpecimen.status)} variant=\"light\" mt=\"xs\">\r\n                    {selectedSpecimen.status}\r\n                  </Badge>\r\n                </div>\r\n              </Group>\r\n\r\n              <Divider />\r\n\r\n              <SimpleGrid cols={2}>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Patient</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {selectedSpecimen.patient?.firstName || 'N/A'} {selectedSpecimen.patient?.lastName || ''}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Medical Record Number</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedSpecimen.patient?.medicalRecordNumber || 'N/A'}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Specimen Type</Text>\r\n                  <Badge color={getSpecimenTypeColor(selectedSpecimen.specimenType)} variant=\"light\">\r\n                    {selectedSpecimen.specimenType.replace('_', ' ').toUpperCase()}\r\n                  </Badge>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Biopsy Type</Text>\r\n                  <Badge color={getBiopsyTypeColor(selectedSpecimen.biopsyType)} variant=\"light\">\r\n                    {selectedSpecimen.biopsyType.replace('_', ' ')}\r\n                  </Badge>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Collection Date</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {new Date(selectedSpecimen.collectionDate).toLocaleString()}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Received Date</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {new Date(selectedSpecimen.receivedDate).toLocaleString()}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Pathologist</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    Dr. {selectedSpecimen.pathologist.firstName} {selectedSpecimen.pathologist.lastName}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Priority</Text>\r\n                  <Badge color={selectedSpecimen.isUrgent ? 'red' : 'blue'} variant=\"light\">\r\n                    {selectedSpecimen.isUrgent ? 'URGENT' : 'ROUTINE'}\r\n                  </Badge>\r\n                </div>\r\n              </SimpleGrid>\r\n\r\n              {selectedSpecimen.clinicalHistory && (\r\n                <>\r\n                  <Divider />\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500} mb=\"sm\">Clinical History</Text>\r\n                    <Text size=\"sm\">{selectedSpecimen.clinicalHistory}</Text>\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              {selectedSpecimen.grossDescription && (\r\n                <>\r\n                  <Divider />\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500} mb=\"sm\">Gross Description</Text>\r\n                    <Text size=\"sm\">{selectedSpecimen.grossDescription}</Text>\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              <Group justify=\"flex-end\">\r\n                <Button variant=\"light\" onClick={closeSpecimenDetail}>\r\n                  Close\r\n                </Button>\r\n                <Button leftSection={<IconReportMedical size={16} />}>\r\n                  Create Report\r\n                </Button>\r\n                <Button leftSection={<IconEdit size={16} />}>\r\n                  Edit Specimen\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </ScrollArea>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Add Specimen Modal */}\r\n      <Modal\r\n        opened={addSpecimenOpened}\r\n        onClose={closeAddSpecimen}\r\n        title=\"New Pathology Specimen\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Patient\"\r\n              placeholder=\"Select patient\"\r\n              data={[].map /* TODO: Fetch from API */(patient => ({ \r\n                value: patient.id, \r\n                label: `${patient.firstName} ${patient.lastName}` \r\n              }))}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Pathologist\"\r\n              placeholder=\"Select pathologist\"\r\n              data={[].map /* TODO: Fetch from API */(pathologist => ({ \r\n                value: pathologist.id, \r\n                label: `Dr. ${pathologist.firstName} ${pathologist.lastName}` \r\n              }))}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Specimen Type\"\r\n              placeholder=\"Select specimen type\"\r\n              data={[\r\n                { value: 'tissue', label: 'Tissue' },\r\n                { value: 'fluid', label: 'Fluid' },\r\n                { value: 'cytology', label: 'Cytology' },\r\n                { value: 'blood', label: 'Blood' },\r\n                { value: 'bone_marrow', label: 'Bone Marrow' },\r\n                { value: 'frozen_section', label: 'Frozen Section' }\r\n              ]}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Biopsy Type\"\r\n              placeholder=\"Select biopsy type\"\r\n              data={[\r\n                { value: 'core_biopsy', label: 'Core Biopsy' },\r\n                { value: 'fine_needle', label: 'Fine Needle' },\r\n                { value: 'excisional', label: 'Excisional' },\r\n                { value: 'incisional', label: 'Incisional' },\r\n                { value: 'endoscopic', label: 'Endoscopic' },\r\n                { value: 'surgical', label: 'Surgical' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <TextInput\r\n            label=\"Source Location\"\r\n            placeholder=\"Enter anatomical location\"\r\n            required\r\n          />\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"Collection Date\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              type=\"date\"\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Priority\"\r\n              placeholder=\"Select priority\"\r\n              data={[\r\n                { value: 'routine', label: 'Routine' },\r\n                { value: 'urgent', label: 'Urgent' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Clinical History\"\r\n            placeholder=\"Enter clinical history\"\r\n            rows={3}\r\n            required\r\n          />\r\n          \r\n          <Textarea\r\n            label=\"Gross Description\"\r\n            placeholder=\"Enter gross description\"\r\n            rows={3}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddSpecimen}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={async () => {\r\n              try {\r\n                // Note: Creating specimens is not yet supported by the API\r\n                // This would need to be added to the pathology service\r\n                notifications.show({\r\n                  title: 'Specimen Received',\r\n                  message: 'Pathology specimen has been successfully logged',\r\n                  color: 'green',\r\n                });\r\n                closeAddSpecimen();\r\n                // Refresh data\r\n                await fetchLabTests();\r\n              } catch (err: any) {\r\n                notifications.show({\r\n                  title: 'Error',\r\n                  message: err.message || 'Failed to create specimen',\r\n                  color: 'red',\r\n                });\r\n              }\r\n            }}>\r\n              Create Specimen\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* Slide Viewer Modal */}\r\n      <Modal\r\n        opened={slideViewerOpened}\r\n        onClose={closeSlideViewer}\r\n        title=\"Digital Microscopy Viewer\"\r\n        size=\"xl\"\r\n        fullScreen\r\n      >\r\n        {selectedSlide && (\r\n          <div style={{ height: 'calc(100vh - 120px)' }}>\r\n            <Group justify=\"space-between\" mb=\"md\">\r\n              <div>\r\n                <Text fw={600} size=\"lg\">Slide {selectedSlide.slideId}</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">\r\n                  {selectedSlide.patient?.firstName || 'N/A'} {selectedSlide.patient?.lastName || ''}\r\n                </Text>\r\n              </div>\r\n              <Group>\r\n                <Button variant=\"light\" leftSection={<IconZoom size={16} />}>\r\n                  Zoom\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconRuler size={16} />}>\r\n                  Measure\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconColorPicker size={16} />}>\r\n                  Annotate\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconDownload size={16} />}>\r\n                  Export\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n            \r\n            <div\r\n              style={{\r\n                height: 'calc(100% - 60px)',\r\n                backgroundColor: '#1a1b1e',\r\n                borderRadius: '8px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                position: 'relative'\r\n              }}\r\n            >\r\n              <div style={{ textAlign: 'center', color: '#868e96' }}>\r\n                <IconMicroscope size={120} />\r\n                <Text size=\"lg\" mt=\"md\">Digital Microscopy Viewer</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">\r\n                  {'magnification' in selectedSlide ? \r\n                    `${selectedSlide.magnification}x magnification` : \r\n                    'High resolution digital slides'\r\n                  }\r\n                </Text>\r\n              </div>\r\n              \r\n              {/* Microscopy viewer controls */}\r\n              <div\r\n                style={{\r\n                  position: 'absolute',\r\n                  bottom: '20px',\r\n                  left: '50%',\r\n                  transform: 'translateX(-50%)',\r\n                  display: 'flex',\r\n                  gap: '10px'\r\n                }}\r\n              >\r\n                <ActionIcon color=\"white\" variant=\"filled\">\r\n                  <IconZoom size={16} />\r\n                </ActionIcon>\r\n                <ActionIcon color=\"white\" variant=\"filled\">\r\n                  <IconRotate size={16} />\r\n                </ActionIcon>\r\n                <ActionIcon color=\"white\" variant=\"filled\">\r\n                  <IconContrast size={16} />\r\n                </ActionIcon>\r\n                <ActionIcon color=\"white\" variant=\"filled\">\r\n                  <IconRuler size={16} />\r\n                </ActionIcon>\r\n                <ActionIcon color=\"white\" variant=\"filled\">\r\n                  <IconColorPicker size={16} />\r\n                </ActionIcon>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PathologyManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\patient-portal\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Table' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Menu' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Divider' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ScrollArea' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Progress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'NumberInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Stepper' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RingProgress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 32,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 33,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Notification' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 34,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'UnstyledButton' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 36,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'rem' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 37,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Calendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 43,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 43,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 46,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUsers' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 52,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 54,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 55,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlertCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 56,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 56,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 57,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDotsVertical' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 59,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 61,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboardList' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPrinter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconActivity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconExclamationMark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClockHour4' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 69,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 71,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalculator' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 75,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBarcode' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 76,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTemperature' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShieldCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 78,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlertTriangle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 79,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCircleCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 80,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 81,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 81,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLungs' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 82,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHeart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrain' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 84,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedicalCross' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 87,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPackage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 88,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 88,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTruck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 89,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 90,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 90,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReceipt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 91,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 91,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNotes' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 92,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTag' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 93,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlarm' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 94,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 94,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconInfoCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 95,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBed' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 96,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 96,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAmbulance' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 97,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDroplet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 99,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 99,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNurse' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 100,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 100,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBandage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 101,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 101,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMask' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 103,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 103,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBolt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 104,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconZoom' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 105,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTool' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 107,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 107,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhoto' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 108,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 108,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconScan' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 109,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 109,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDeviceDesktop' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 110,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 110,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCamera' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 111,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 111,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 112,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 112,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTarget' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 113,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 113,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFocus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 114,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 114,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconColorPicker' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 115,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRuler' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 116,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRotate' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 117,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconContrast' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 118,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 118,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrightness' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 119,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 119,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAdjustments' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 120,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 120,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMaximize' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 121,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 121,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMinimize' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 122,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 122,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlayerPlay' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 123,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 123,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlayerPause' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 124,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 124,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVolume' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 125,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 125,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 126,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 126,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 127,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 127,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDna' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 128,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 128,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVirus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 129,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 129,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTestPipe' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 130,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 130,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAtom' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 131,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 131,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDna2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 132,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 132,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCellSignal4' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 133,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 133,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCertificate' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 134,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 134,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReport' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 135,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 135,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCopy' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 136,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 136,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileReport' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 137,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 137,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDatabase' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 138,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 138,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFlask2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 139,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 139,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMicroscope' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 140,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 140,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconScale' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 141,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 141,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUser' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 142,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 142,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUserPlus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 143,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 143,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUserCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 144,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 144,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUserX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 145,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 145,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBriefcase' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 146,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 146,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSchool' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 147,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 147,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAward' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 148,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 148,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 149,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 149,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendarTime' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 151,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 151,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCurrencyDollar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 152,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 152,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconWallet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 153,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 153,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPigMoney' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 154,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 154,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReceiptTax' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 155,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 155,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCreditCard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 156,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 156,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBuildingBank' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 157,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 157,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHome' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 158,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 158,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMapPin' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 159,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 159,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconIdBadge' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 160,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 160,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLicense' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 161,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 161,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCertificate2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 162,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 162,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrophy' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 163,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 163,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedal' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 164,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 164,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRocket' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 165,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 165,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChecklist' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 166,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 166,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboardCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 167,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 167,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 169,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 169,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBuilding' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 170,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 170,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHierarchy' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 171,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 171,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLogin' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 172,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 172,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLogout' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 173,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 173,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTimelineEvent' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 174,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 174,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMoneybag' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 175,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 175,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCoins' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 176,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 176,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCreditCardPay' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 177,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 177,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTransfer' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 178,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 178,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChartPie' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 179,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 179,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChartLine' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 180,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 180,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPercentage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 181,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 181,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSum' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 182,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 182,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMinus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 183,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 183,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 184,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 184,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 185,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 185,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBusinessplan' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 186,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 186,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReportAnalytics' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 187,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 187,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileInvoice' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 188,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 188,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileSpreadsheet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 189,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 189,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconZoomMoney' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 190,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 190,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCashBanknote' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 191,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 191,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShoppingCart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 192,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 192,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBuildingStore' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 193,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 193,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCurrency' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 194,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 194,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTax' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 195,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 195,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDiscount2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 196,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 196,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBooks' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 197,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 197,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBookmark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 198,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 198,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileDescription' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 199,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 199,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMessageCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 201,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 201,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBellRinging' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 204,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 204,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendarStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 205,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 205,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboardData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 206,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 206,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHealthRecognition' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 207,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 207,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStethoscopeOff' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 208,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 208,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFirstAidKit' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 209,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 209,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconEmergencyBed' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 210,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 210,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHeartHandshake' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 211,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 211,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHeartRateMonitor' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 212,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 212,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMoodHappy' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 213,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 213,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMoodSad' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 214,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 214,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPrescription' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 215,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 215,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReportSearch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 216,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 216,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTestPipe2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 217,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 217,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVaccine' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 218,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 218,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconWheelchair' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 219,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 219,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconZodiacCancer' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 220,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 220,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrandZoom' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 221,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 221,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVideo' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 222,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 222,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVideoOff' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 223,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 223,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMicrophone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 224,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 224,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMicrophoneOff' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 225,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 225,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDeviceMobile' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 226,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 226,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDeviceTablet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 227,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 227,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDeviceLaptop' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 228,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 228,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconWifi' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 229,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 229,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconWifiOff' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 230,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 230,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShield' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 231,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 231,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 232,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 232,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconKey' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 233,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 233,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFingerprint' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 234,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 234,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHistory' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 235,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 235,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArchive' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 236,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 236,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFolder' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 237,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 237,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFolderOpen' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 238,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 238,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFiles' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 239,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 239,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFile' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 240,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 240,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileCertificate' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 241,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 241,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 242,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 242,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileDigit' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 243,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 243,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileDots' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 244,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 244,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileExport' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 245,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 245,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileImport' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 246,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 246,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileLike' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 247,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 247,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileMinus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 248,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 248,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileMusic' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 249,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 249,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileOff' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 250,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 250,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilePhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 251,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 251,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilePlus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 252,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 252,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileSearch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 253,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 253,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileShredder' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 254,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 254,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileStack' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 255,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 255,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileSymlink' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 256,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 256,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileTime' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 257,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 257,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileTypography' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 258,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 258,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileUnknown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 259,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 259,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileVector' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 260,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 260,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 261,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 261,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileZip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 262,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 262,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloud' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 263,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 263,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 264,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 264,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudDownload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 265,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 265,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudOff' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 266,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 266,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudRain' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 267,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 267,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudSnow' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 268,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 268,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudStorm' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 269,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 269,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 270,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 270,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'currentPatient' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 278,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 278,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedDate' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 283,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 283,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setSelectedDate' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 283,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 283,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedAppointment' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 287,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 287,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedPrescription' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 288,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 288,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedTestResult' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 289,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 289,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedMedicalRecord' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 290,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 290,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'prescriptions' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 295,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 295,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'labResults' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 296,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 296,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'medicalRecords' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 297,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 297,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'loading' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 298,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 298,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 299,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 299,
        "endColumn": 15
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.",
        "line": 303,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 303,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAllData]",
            "fix": { "range": [6306, 6308], "text": "[fetchAllData]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'appointmentDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 368,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 368,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeAppointmentDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 368,
        "column": 73,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 368,
        "endColumn": 95
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'prescriptionDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 370,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 370,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closePrescriptionDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 370,
        "column": 75,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 370,
        "endColumn": 98
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'testResultDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 371,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 371,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeTestResultDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 371,
        "column": 71,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 371,
        "endColumn": 92
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'medicalRecordDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 372,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 372,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeMedicalRecordDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 372,
        "column": 77,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 372,
        "endColumn": 101
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'profileSettingsOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 373,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 373,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeProfileSettings' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 373,
        "column": 69,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 373,
        "endColumn": 89
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useMemo has a missing dependency: 'appointments'. Either include it or remove the dependency array.",
        "line": 389,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 389,
        "endColumn": 76,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [appointments, searchQuery, selectedAppointmentType, selectedStatus, selectedDoctor]",
            "fix": {
              "range": [9857, 9927],
              "text": "[appointments, searchQuery, selectedAppointmentType, selectedStatus, selectedDoctor]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 1040,
        "column": 59,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1040,
        "endColumn": 64
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 243,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Alert,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Timeline,\r\n  Stepper,\r\n  RingProgress,\r\n  Tooltip,\r\n  List,\r\n  Notification,\r\n  Indicator,\r\n  UnstyledButton,\r\n  rem,\r\n  SimpleGrid\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { Calendar, DatePickerInput } from '@mantine/dates';\r\nimport patientPortalService from '../../../services/patient-portal.service';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconCalendar,\r\n  IconUsers,\r\n  IconChartBar,\r\n  IconPhone,\r\n  IconMail,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconReportMedical,\r\n  IconClock,\r\n  IconClipboardList,\r\n  IconFileText,\r\n  IconDownload,\r\n  IconPrinter,\r\n  IconShare,\r\n  IconActivity,\r\n  IconExclamationMark,\r\n  IconClockHour4,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconCalculator,\r\n  IconSettings,\r\n  IconRefresh,\r\n  IconFilter,\r\n  IconBarcode,\r\n  IconTemperature,\r\n  IconShieldCheck,\r\n  IconAlertTriangle,\r\n  IconCircleCheck,\r\n  IconClipboard,\r\n  IconLungs,\r\n  IconHeart,\r\n  IconBrain,\r\n  IconBone,\r\n  IconStethoscope,\r\n  IconMedicalCross,\r\n  IconPackage,\r\n  IconTruck,\r\n  IconCash,\r\n  IconReceipt,\r\n  IconNotes,\r\n  IconTag,\r\n  IconAlarm,\r\n  IconInfoCircle,\r\n  IconBed,\r\n  IconAmbulance,\r\n  IconFlask,\r\n  IconDroplet,\r\n  IconNurse,\r\n  IconBandage,\r\n  IconPill,\r\n  IconMask,\r\n  IconBolt,\r\n  IconZoom,\r\n  IconCut,\r\n  IconTool,\r\n  IconPhoto,\r\n  IconScan,\r\n  IconDeviceDesktop,\r\n  IconCamera,\r\n  IconUpload,\r\n  IconTarget,\r\n  IconFocus,\r\n  IconColorPicker,\r\n  IconRuler,\r\n  IconRotate,\r\n  IconContrast,\r\n  IconBrightness,\r\n  IconAdjustments,\r\n  IconMaximize,\r\n  IconMinimize,\r\n  IconPlayerPlay,\r\n  IconPlayerPause,\r\n  IconVolume,\r\n  IconFileUpload,\r\n  IconCloudUpload,\r\n  IconDna,\r\n  IconVirus,\r\n  IconTestPipe,\r\n  IconAtom,\r\n  IconDna2,\r\n  IconCellSignal4,\r\n  IconCertificate,\r\n  IconReport,\r\n  IconCopy,\r\n  IconFileReport,\r\n  IconDatabase,\r\n  IconFlask2,\r\n  IconMicroscope,\r\n  IconScale,\r\n  IconUser,\r\n  IconUserPlus,\r\n  IconUserCheck,\r\n  IconUserX,\r\n  IconBriefcase,\r\n  IconSchool,\r\n  IconAward,\r\n  IconStar,\r\n  IconCalendarEvent,\r\n  IconCalendarTime,\r\n  IconCurrencyDollar,\r\n  IconWallet,\r\n  IconPigMoney,\r\n  IconReceiptTax,\r\n  IconCreditCard,\r\n  IconBuildingBank,\r\n  IconHome,\r\n  IconMapPin,\r\n  IconIdBadge,\r\n  IconLicense,\r\n  IconCertificate2,\r\n  IconTrophy,\r\n  IconMedal,\r\n  IconRocket,\r\n  IconChecklist,\r\n  IconClipboardCheck,\r\n  IconUserCircle,\r\n  IconAt,\r\n  IconBuilding,\r\n  IconHierarchy,\r\n  IconLogin,\r\n  IconLogout,\r\n  IconTimelineEvent,\r\n  IconMoneybag,\r\n  IconCoins,\r\n  IconCreditCardPay,\r\n  IconTransfer,\r\n  IconChartPie,\r\n  IconChartLine,\r\n  IconPercentage,\r\n  IconSum,\r\n  IconMinus,\r\n  IconArrowUp,\r\n  IconArrowDown,\r\n  IconBusinessplan,\r\n  IconReportAnalytics,\r\n  IconFileInvoice,\r\n  IconFileSpreadsheet,\r\n  IconZoomMoney,\r\n  IconCashBanknote,\r\n  IconShoppingCart,\r\n  IconBuildingStore,\r\n  IconCurrency,\r\n  IconTax,\r\n  IconDiscount2,\r\n  IconBooks,\r\n  IconBookmark,\r\n  IconFileDescription,\r\n  IconMessage,\r\n  IconMessageCircle,\r\n  IconSend,\r\n  IconBell,\r\n  IconBellRinging,\r\n  IconCalendarStats,\r\n  IconClipboardData,\r\n  IconHealthRecognition,\r\n  IconStethoscopeOff,\r\n  IconFirstAidKit,\r\n  IconEmergencyBed,\r\n  IconHeartHandshake,\r\n  IconHeartRateMonitor,\r\n  IconMoodHappy,\r\n  IconMoodSad,\r\n  IconPrescription,\r\n  IconReportSearch,\r\n  IconTestPipe2,\r\n  IconVaccine, // IconSyringe not available, using IconVaccine\r\n  IconWheelchair,\r\n  IconZodiacCancer,\r\n  IconBrandZoom,\r\n  IconVideo,\r\n  IconVideoOff,\r\n  IconMicrophone,\r\n  IconMicrophoneOff,\r\n  IconDeviceMobile,\r\n  IconDeviceTablet,\r\n  IconDeviceLaptop,\r\n  IconWifi,\r\n  IconWifiOff,\r\n  IconShield,\r\n  IconLock,\r\n  IconKey,\r\n  IconFingerprint,\r\n  IconHistory,\r\n  IconArchive,\r\n  IconFolder,\r\n  IconFolderOpen,\r\n  IconFiles,\r\n  IconFile,\r\n  IconFileCertificate,\r\n  IconFileCheck,\r\n  IconFileDigit,\r\n  IconFileDots,\r\n  IconFileExport,\r\n  IconFileImport,\r\n  IconFileLike,\r\n  IconFileMinus,\r\n  IconFileMusic,\r\n  IconFileOff,\r\n  IconFilePhone,\r\n  IconFilePlus,\r\n  IconFileSearch,\r\n  IconFileShredder,\r\n  IconFileStack,\r\n  IconFileSymlink,\r\n  IconFileTime,\r\n  IconFileTypography,\r\n  IconFileUnknown,\r\n  IconFileVector,\r\n  IconFileX,\r\n  IconFileZip,\r\n  IconCloud,\r\n  IconCloudCheck,\r\n  IconCloudDownload,\r\n  IconCloudOff,\r\n  IconCloudRain,\r\n  IconCloudSnow,\r\n  IconCloudStorm,\r\n  IconCloudUp\r\n} from '@tabler/icons-react';\r\n\r\n// Import types and mock data\r\n// Types are inferred from mock data\r\n// Mock data imports removed\r\nconst PatientPortal = () => {\r\n  // Current logged-in patient (mock data)\r\n  const currentPatient = []; // TODO: Fetch from API\r\n  \r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('dashboard');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());\r\n  const [selectedAppointmentType, setSelectedAppointmentType] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedDoctor, setSelectedDoctor] = useState<string>('');\r\n  const [selectedAppointment, setSelectedAppointment] = useState<any | null>(null);\r\n  const [selectedPrescription, setSelectedPrescription] = useState<any | null>(null);\r\n  const [selectedTestResult, setSelectedTestResult] = useState<any | null>(null);\r\n  const [selectedMedicalRecord, setSelectedMedicalRecord] = useState<any | null>(null);\r\n  const [newMessage, setNewMessage] = useState('');\r\n\r\n  // API data state\r\n  const [appointments, setAppointments] = useState<any[]>([]);\r\n  const [prescriptions, setPrescriptions] = useState<any[]>([]);\r\n  const [labResults, setLabResults] = useState<any[]>([]);\r\n  const [medicalRecords, setMedicalRecords] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  const fetchAllData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      await Promise.all([\r\n        fetchAppointments(),\r\n        fetchPrescriptions(),\r\n        fetchLabResults(),\r\n        fetchMedicalRecords()\r\n      ]);\r\n    } catch (err: any) {\r\n      console.error('Error loading patient portal data:', err);\r\n      setError(err.response?.data?.message || 'Failed to load data');\r\n      setAppointments([] /* TODO: Fetch from API */);\r\n      setPrescriptions([] /* TODO: Fetch from API */);\r\n      setLabResults([] /* TODO: Fetch from API */);\r\n      setMedicalRecords([] /* TODO: Fetch from API */);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchAppointments = async () => {\r\n    try {\r\n      const response = await patientPortalService.getAppointments();\r\n      setAppointments(response.data || []);\r\n    } catch (err) {\r\n      console.error('Error fetching appointments:', err);\r\n      setAppointments([] /* TODO: Fetch from API */);\r\n    }\r\n  };\r\n\r\n  const fetchPrescriptions = async () => {\r\n    try {\r\n      const response = await patientPortalService.getPrescriptions();\r\n      setPrescriptions(response.data || []);\r\n    } catch (err) {\r\n      console.error('Error fetching prescriptions:', err);\r\n      setPrescriptions([] /* TODO: Fetch from API */);\r\n    }\r\n  };\r\n\r\n  const fetchLabResults = async () => {\r\n    try {\r\n      const response = await patientPortalService.getLabResults();\r\n      setLabResults(response.data || []);\r\n    } catch (err) {\r\n      console.error('Error fetching lab results:', err);\r\n      setLabResults([] /* TODO: Fetch from API */);\r\n    }\r\n  };\r\n\r\n  const fetchMedicalRecords = async () => {\r\n    try {\r\n      const response = await patientPortalService.getMedicalRecords();\r\n      setMedicalRecords(response.data || []);\r\n    } catch (err) {\r\n      console.error('Error fetching medical records:', err);\r\n      setMedicalRecords([] /* TODO: Fetch from API */);\r\n    }\r\n  };\r\n\r\n  // Modal states\r\n  const [appointmentDetailOpened, { open: openAppointmentDetail, close: closeAppointmentDetail }] = useDisclosure(false);\r\n  const [bookAppointmentOpened, { open: openBookAppointment, close: closeBookAppointment }] = useDisclosure(false);\r\n  const [prescriptionDetailOpened, { open: openPrescriptionDetail, close: closePrescriptionDetail }] = useDisclosure(false);\r\n  const [testResultDetailOpened, { open: openTestResultDetail, close: closeTestResultDetail }] = useDisclosure(false);\r\n  const [medicalRecordDetailOpened, { open: openMedicalRecordDetail, close: closeMedicalRecordDetail }] = useDisclosure(false);\r\n  const [profileSettingsOpened, { open: openProfileSettings, close: closeProfileSettings }] = useDisclosure(false);\r\n\r\n  // Filter appointments\r\n  const filteredAppointments = useMemo(() => {\r\n    return appointments.filter((appointment) => {\r\n      const matchesSearch = \r\n        (appointment.doctor?.toLowerCase().includes(searchQuery.toLowerCase()) || false) ||\r\n        (appointment.department?.toLowerCase().includes(searchQuery.toLowerCase()) || false) ||\r\n        (appointment.type?.toLowerCase().includes(searchQuery.toLowerCase()) || false);\r\n      \r\n      const matchesType = !selectedAppointmentType || appointment.type === selectedAppointmentType;\r\n      const matchesStatus = !selectedStatus || appointment.status === selectedStatus;\r\n      const matchesDoctor = !selectedDoctor || appointment.doctor === selectedDoctor;\r\n\r\n      return matchesSearch && matchesType && matchesStatus && matchesDoctor;\r\n    });\r\n  }, [searchQuery, selectedAppointmentType, selectedStatus, selectedDoctor]);\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'scheduled': return 'blue';\r\n      case 'confirmed': return 'green';\r\n      case 'in_progress': return 'orange';\r\n      case 'completed': return 'teal';\r\n      case 'cancelled': return 'red';\r\n      case 'no_show': return 'gray';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getAppointmentTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'consultation': return 'blue';\r\n      case 'follow_up': return 'green';\r\n      case 'emergency': return 'red';\r\n      case 'procedure': return 'purple';\r\n      case 'diagnostic': return 'orange';\r\n      case 'vaccination': return 'teal';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'urgent': return 'red';\r\n      case 'high': return 'orange';\r\n      case 'normal': return 'blue';\r\n      case 'low': return 'gray';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const handleViewAppointment = (appointment: any) => {\r\n    setSelectedAppointment(appointment);\r\n    openAppointmentDetail();\r\n  };\r\n\r\n  const handleViewPrescription = (prescription: any) => {\r\n    setSelectedPrescription(prescription);\r\n    openPrescriptionDetail();\r\n  };\r\n\r\n  const handleViewTestResult = (testResult: any) => {\r\n    setSelectedTestResult(testResult);\r\n    openTestResultDetail();\r\n  };\r\n\r\n  const handleViewMedicalRecord = (record: any) => {\r\n    setSelectedMedicalRecord(record);\r\n    openMedicalRecordDetail();\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (newMessage.trim()) {\r\n      notifications.show({\r\n        title: 'Message Sent',\r\n        message: 'Your message has been sent to your healthcare provider',\r\n        color: 'green',\r\n      });\r\n      setNewMessage('');\r\n    }\r\n  };\r\n\r\n  const formatDate = (date: string | Date) => {\r\n    const d = new Date(date);\r\n    const year = d.getFullYear();\r\n    const month = String(d.getMonth() + 1).padStart(2, '0');\r\n    const day = String(d.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  const formatDateTime = (date: string | Date) => {\r\n    const d = new Date(date);\r\n    const year = d.getFullYear();\r\n    const month = String(d.getMonth() + 1).padStart(2, '0');\r\n    const day = String(d.getDate()).padStart(2, '0');\r\n    const hours = String(d.getHours()).padStart(2, '0');\r\n    const minutes = String(d.getMinutes()).padStart(2, '0');\r\n    return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n  };\r\n\r\n  // Quick stats for dashboard\r\n  const quickStats = [\r\n    {\r\n      title: 'Upcoming Appointments',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconCalendarEvent,\r\n      color: 'blue'\r\n    },\r\n    {\r\n      title: 'Active Prescriptions',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconPill,\r\n      color: 'green'\r\n    },\r\n    {\r\n      title: 'Test Results',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconFlask,\r\n      color: 'orange'\r\n    },\r\n    {\r\n      title: 'Medical Records',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconMessage,\r\n      color: 'red'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Group>\r\n            <Avatar \r\n              size=\"lg\" \r\n              color=\"blue\"\r\n            >\r\n              PT\r\n            </Avatar>\r\n            <div>\r\n              <Title order={1}>Welcome, Patient!</Title>\r\n              <Text c=\"dimmed\" size=\"sm\">\r\n                Patient Portal Dashboard\r\n              </Text>\r\n            </div>\r\n          </Group>\r\n        </div>\r\n        <Group>\r\n          <Indicator inline processing color=\"red\" size={12} disabled={false}>\r\n            <ActionIcon variant=\"light\" size=\"lg\" color=\"blue\">\r\n              <IconBell size={20} />\r\n            </ActionIcon>\r\n          </Indicator>\r\n          <Button\r\n            leftSection={<IconCalendarEvent size={16} />}\r\n            onClick={openBookAppointment}\r\n            color=\"blue\"\r\n          >\r\n            Book Appointment\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconSettings size={16} />}\r\n            onClick={openProfileSettings}\r\n          >\r\n            Profile Settings\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Quick Stats */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {quickStats.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"dashboard\" leftSection={<IconChartBar size={16} />}>\r\n            Dashboard\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"appointments\" leftSection={<IconCalendar size={16} />}>\r\n            Appointments\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"prescriptions\" leftSection={<IconPill size={16} />}>\r\n            Prescriptions\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"test-results\" leftSection={<IconFlask size={16} />}>\r\n            Test Results\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"medical-records\" leftSection={<IconFileText size={16} />}>\r\n            Medical Records\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"messages\" leftSection={<IconMessage size={16} />}>\r\n            <Group gap=\"xs\">\r\n              Messages\r\n            </Group>\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Dashboard Tab */}\r\n        <Tabs.Panel value=\"dashboard\">\r\n          <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\" mt=\"md\">\r\n            {/* Recent Notifications */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Recent Notifications</Title>\r\n              <Stack gap=\"sm\">\r\n                {0 /* TODO: Fetch from API */(0, 5).map((notification) => (\r\n                  <Alert\r\n                    key={notification.id}\r\n                    variant=\"light\"\r\n                    color={getPriorityColor(notification.priority)}\r\n                    icon={\r\n                      notification.type === 'appointment' ? <IconCalendar size={16} /> :\r\n                      notification.type === 'test_result' ? <IconFlask size={16} /> :\r\n                      notification.type === 'prescription' ? <IconPill size={16} /> :\r\n                      <IconBell size={16} />\r\n                    }\r\n                  >\r\n                    <Group justify=\"space-between\">\r\n                      <div>\r\n                        <Text size=\"sm\" fw={500}>{notification.title}</Text>\r\n                        <Text size=\"xs\" c=\"dimmed\">{notification.message}</Text>\r\n                      </div>\r\n                      <Text size=\"xs\" c=\"dimmed\">\r\n                        {formatDate(notification.createdDate)}\r\n                      </Text>\r\n                    </Group>\r\n                  </Alert>\r\n                ))}\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* Upcoming Appointments */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Upcoming Appointments</Title>\r\n              <Stack gap=\"sm\">\r\n                {mockAppointments\r\n                  .filter(apt => apt.status === 'scheduled' || apt.status === 'confirmed')\r\n                  .slice(0, 3)\r\n                  .map((appointment) => (\r\n                    <Card key={appointment.id} padding=\"sm\" withBorder>\r\n                      <Group justify=\"space-between\">\r\n                        <div>\r\n                          <Text fw={500}>{appointment.doctor}</Text>\r\n                          <Text size=\"sm\" c=\"dimmed\">{appointment.department}</Text>\r\n                          <Group gap=\"xs\" mt=\"xs\">\r\n                            <Badge size=\"xs\" color={getAppointmentTypeColor(appointment.type)}>\r\n                              {appointment.type}\r\n                            </Badge>\r\n                            <Badge size=\"xs\" color={getStatusColor(appointment.status)}>\r\n                              {appointment.status}\r\n                            </Badge>\r\n                          </Group>\r\n                        </div>\r\n                        <div style={{ textAlign: 'right' }}>\r\n                          <Text size=\"sm\" fw={500}>\r\n                            {formatDate(appointment.date)}\r\n                          </Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">\r\n                            {appointment.time}\r\n                          </Text>\r\n                        </div>\r\n                      </Group>\r\n                    </Card>\r\n                  ))}\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* Health Overview */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Health Overview</Title>\r\n              <SimpleGrid cols={2}>\r\n                <div>\r\n                  <Text size=\"sm\" c=\"dimmed\">Blood Pressure</Text>\r\n                  <Text fw={600} c=\"blue\">120/80 mmHg</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" c=\"dimmed\">Heart Rate</Text>\r\n                  <Text fw={600} c=\"green\">72 bpm</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" c=\"dimmed\">Weight</Text>\r\n                  <Text fw={600} c=\"purple\">68 kg</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" c=\"dimmed\">Temperature</Text>\r\n                  <Text fw={600} c=\"orange\">98.6°F</Text>\r\n                </div>\r\n              </SimpleGrid>\r\n              <Text size=\"xs\" c=\"dimmed\" mt=\"md\">\r\n                Last updated: {formatDate('2024-01-15')}\r\n              </Text>\r\n            </Card>\r\n\r\n            {/* Recent Test Results */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Recent Test Results</Title>\r\n              <Stack gap=\"sm\">\r\n                {0 /* TODO: Fetch from API */(0, 3).map((result) => (\r\n                  <Card key={result.id} padding=\"sm\" withBorder>\r\n                    <Group justify=\"space-between\">\r\n                      <div>\r\n                        <Text fw={500}>{result.testName}</Text>\r\n                        <Text size=\"sm\" c=\"dimmed\">\r\n                          Ordered by: Dr. {result.orderedBy}\r\n                        </Text>\r\n                      </div>\r\n                      <Badge \r\n                        color={\r\n                          result.status === 'completed' ? 'green' : \r\n                          result.status === 'pending' ? 'orange' : 'blue'\r\n                        }\r\n                        variant=\"light\"\r\n                      >\r\n                        {result.status.replace('_', ' ').toUpperCase()}\r\n                      </Badge>\r\n                    </Group>\r\n                  </Card>\r\n                ))}\r\n              </Stack>\r\n            </Card>\r\n          </SimpleGrid>\r\n        </Tabs.Panel>\r\n\r\n        {/* Appointments Tab */}\r\n        <Tabs.Panel value=\"appointments\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search appointments...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Type\"\r\n                data={[\r\n                  { value: 'consultation', label: 'Consultation' },\r\n                  { value: 'follow_up', label: 'Follow-up' },\r\n                  { value: 'emergency', label: 'Emergency' },\r\n                  { value: 'procedure', label: 'Procedure' },\r\n                  { value: 'diagnostic', label: 'Diagnostic' },\r\n                  { value: 'vaccination', label: 'Vaccination' }\r\n                ]}\r\n                value={selectedAppointmentType}\r\n                onChange={setSelectedAppointmentType}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'scheduled', label: 'Scheduled' },\r\n                  { value: 'confirmed', label: 'Confirmed' },\r\n                  { value: 'in_progress', label: 'In Progress' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'cancelled', label: 'Cancelled' },\r\n                  { value: 'no_show', label: 'No Show' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Doctor\"\r\n                data={[].map /* TODO: Fetch from API */(doctor => ({\r\n                  value: doctor.id,\r\n                  label: doctor.name\r\n                }))}\r\n                value={selectedDoctor}\r\n                onChange={setSelectedDoctor}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Appointments Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {filteredAppointments.length === 0 ? (\r\n                <div style={{ gridColumn: '1 / -1' }}>\r\n                  <EmptyState\r\n                    icon={<IconUserCircle size={48} />}\r\n                    title=\"No portal activity\"\r\n                    description=\"Patient portal activity will appear here\"\r\n                    size=\"sm\"\r\n                  />\r\n                </div>\r\n              ) : (\r\n                filteredAppointments.map((appointment) => (\r\n                  <Card key={appointment.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                    <Group justify=\"space-between\" mb=\"md\">\r\n                      <div>\r\n                        <Text fw={600} size=\"lg\">{appointment.doctor}</Text>\r\n                        <Text size=\"sm\" c=\"dimmed\">{appointment.department}</Text>\r\n                      </div>\r\n                      <Badge color={getStatusColor(appointment.status)} variant=\"light\">\r\n                        {appointment.status.replace('_', ' ').toUpperCase()}\r\n                      </Badge>\r\n                    </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Date & Time</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {formatDate(appointment.date)} at {appointment.time}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Type</Text>\r\n                      <Badge color={getAppointmentTypeColor(appointment.type)} variant=\"light\" size=\"sm\">\r\n                        {appointment.type.replace('_', ' ')}\r\n                      </Badge>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      {appointment.department}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewAppointment(appointment)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      {appointment.status === 'scheduled' && (\r\n                        <ActionIcon variant=\"subtle\" color=\"green\">\r\n                          <IconEdit size={16} />\r\n                        </ActionIcon>\r\n                      )}\r\n                      {(appointment.status === 'scheduled' || appointment.status === 'confirmed') && (\r\n                        <ActionIcon variant=\"subtle\" color=\"red\">\r\n                          <IconX size={16} />\r\n                        </ActionIcon>\r\n                      )}\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              )))\r\n              }\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Prescriptions Tab */}\r\n        <Tabs.Panel value=\"prescriptions\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>My Prescriptions</Title>\r\n              <Button leftSection={<IconDownload size={16} />} variant=\"light\">\r\n                Download All\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Prescriptions Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((prescription) => (\r\n                <Card key={prescription.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{prescription.medicationName}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        Prescribed by: Dr. {prescription.doctorName}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge \r\n                      color={prescription.isActive ? 'green' : 'gray'} \r\n                      variant=\"light\"\r\n                    >\r\n                      {prescription.isActive ? 'Active' : 'Inactive'}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Dosage</Text>\r\n                      <Text size=\"sm\" fw={500}>{prescription.dosage}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Frequency</Text>\r\n                      <Text size=\"sm\">{prescription.frequency}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Duration</Text>\r\n                      <Text size=\"sm\">{prescription.duration}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Refills Left</Text>\r\n                      <Text size=\"sm\" fw={500} c={prescription.refillsLeft === 0 ? 'red' : 'blue'}>\r\n                        {prescription.refillsLeft}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Prescribed Date</Text>\r\n                      <Text size=\"sm\">{formatDate(prescription.prescribedDate)}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {prescription.instructions && (\r\n                    <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"md\">\r\n                      Instructions: {prescription.instructions}\r\n                    </Text>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Pharmacy: {prescription.pharmacyName || 'Any Pharmacy'}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewPrescription(prescription)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                      {prescription.refillsLeft > 0 && prescription.isActive && (\r\n                        <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                          <IconRefresh size={16} />\r\n                        </ActionIcon>\r\n                      )}\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Test Results Tab */}\r\n        <Tabs.Panel value=\"test-results\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Test Results</Title>\r\n              <Button leftSection={<IconDownload size={16} />} variant=\"light\">\r\n                Download All\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Test Results Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((result) => (\r\n                <Card key={result.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{result.testName}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {result.category} - {result.testCode}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge \r\n                      color={\r\n                        result.status === 'completed' ? 'green' : \r\n                        result.status === 'pending' ? 'orange' : \r\n                        result.status === 'in_progress' ? 'blue' : 'gray'\r\n                      } \r\n                      variant=\"light\"\r\n                    >\r\n                      {result.status.replace('_', ' ').toUpperCase()}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Test Date</Text>\r\n                      <Text size=\"sm\" fw={500}>{formatDate(result.testDate)}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Ordered by</Text>\r\n                      <Text size=\"sm\">Dr. {result.orderedBy}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Lab/Facility</Text>\r\n                      <Text size=\"sm\">{result.labName}</Text>\r\n                    </Group>\r\n                    {result.status === 'completed' && result.resultDate && (\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\" c=\"dimmed\">Result Date</Text>\r\n                        <Text size=\"sm\">{formatDate(result.resultDate)}</Text>\r\n                      </Group>\r\n                    )}\r\n                    {result.priority && (\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\" c=\"dimmed\">Priority</Text>\r\n                        <Badge color={getPriorityColor(result.priority)} variant=\"light\" size=\"sm\">\r\n                          {result.priority.toUpperCase()}\r\n                        </Badge>\r\n                      </Group>\r\n                    )}\r\n                  </Stack>\r\n\r\n                  {result.notes && (\r\n                    <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"md\">\r\n                      Notes: {result.notes}\r\n                    </Text>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Reference ID: {result.id.slice(-8).toUpperCase()}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewTestResult(result)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      {result.status === 'completed' && (\r\n                        <>\r\n                          <ActionIcon variant=\"subtle\" color=\"green\">\r\n                            <IconDownload size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                            <IconShare size={16} />\r\n                          </ActionIcon>\r\n                        </>\r\n                      )}\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Medical Records Tab */}\r\n        <Tabs.Panel value=\"medical-records\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Medical Records</Title>\r\n              <Button leftSection={<IconDownload size={16} />} variant=\"light\">\r\n                Export Records\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Medical Records Timeline */}\r\n            <Timeline active={0 /* TODO: Fetch from API */} bulletSize={24} lineWidth={2}>\r\n              {[].map /* TODO: Fetch from API */((record, index) => (\r\n                <Timeline.Item\r\n                  key={record.id}\r\n                  bullet={\r\n                    <ThemeIcon\r\n                      size={24}\r\n                      variant=\"filled\"\r\n                      color={\r\n                        record.type === 'consultation' ? 'blue' :\r\n                        record.type === 'diagnosis' ? 'red' :\r\n                        record.type === 'treatment' ? 'green' :\r\n                        record.type === 'surgery' ? 'purple' :\r\n                        record.type === 'vaccination' ? 'teal' : 'gray'\r\n                      }\r\n                    >\r\n                      {record.type === 'consultation' ? <IconStethoscope size={14} /> :\r\n                       record.type === 'diagnosis' ? <IconReportMedical size={14} /> :\r\n                       record.type === 'treatment' ? <IconPill size={14} /> :\r\n                       record.type === 'surgery' ? <IconCut size={14} /> :\r\n                       record.type === 'vaccination' ? <IconPill size={14} /> :\r\n                       <IconFileText size={14} />}\r\n                    </ThemeIcon>\r\n                  }\r\n                  title={\r\n                    <Group justify=\"space-between\">\r\n                      <Text fw={500}>{record.title}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{formatDate(record.date)}</Text>\r\n                    </Group>\r\n                  }\r\n                >\r\n                  <Card withBorder p=\"md\" mb=\"md\">\r\n                    <Group justify=\"space-between\" mb=\"sm\">\r\n                      <div>\r\n                        <Text size=\"sm\" c=\"dimmed\">Provider: Dr. {record.providerName}</Text>\r\n                        <Text size=\"sm\" c=\"dimmed\">{record.department}</Text>\r\n                      </div>\r\n                      <Badge\r\n                        color={\r\n                          record.type === 'consultation' ? 'blue' :\r\n                          record.type === 'diagnosis' ? 'red' :\r\n                          record.type === 'treatment' ? 'green' :\r\n                          record.type === 'surgery' ? 'purple' :\r\n                          record.type === 'vaccination' ? 'teal' : 'gray'\r\n                        }\r\n                        variant=\"light\"\r\n                      >\r\n                        {record.type.toUpperCase()}\r\n                      </Badge>\r\n                    </Group>\r\n                    \r\n                    <Text size=\"sm\" lineClamp={3} mb=\"sm\">\r\n                      {record.description}\r\n                    </Text>\r\n                    \r\n                    {record.diagnosis && (\r\n                      <Text size=\"sm\" c=\"red\" mb=\"sm\">\r\n                        Diagnosis: {record.diagnosis}\r\n                      </Text>\r\n                    )}\r\n                    \r\n                    {record.treatment && (\r\n                      <Text size=\"sm\" c=\"green\" mb=\"sm\">\r\n                        Treatment: {record.treatment}\r\n                      </Text>\r\n                    )}\r\n                    \r\n                    <Group justify=\"space-between\" mt=\"sm\">\r\n                      <Text size=\"xs\" c=\"dimmed\">\r\n                        Visit ID: {record.id.slice(-8).toUpperCase()}\r\n                      </Text>\r\n                      <Group gap=\"xs\">\r\n                        <ActionIcon\r\n                          variant=\"subtle\"\r\n                          color=\"blue\"\r\n                          onClick={() => handleViewMedicalRecord(record)}\r\n                        >\r\n                          <IconEye size={16} />\r\n                        </ActionIcon>\r\n                        <ActionIcon variant=\"subtle\" color=\"green\">\r\n                          <IconDownload size={16} />\r\n                        </ActionIcon>\r\n                      </Group>\r\n                    </Group>\r\n                  </Card>\r\n                </Timeline.Item>\r\n              ))}\r\n            </Timeline>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Messages Tab */}\r\n        <Tabs.Panel value=\"messages\">\r\n          <SimpleGrid cols={{ base: 1, lg: 3 }} spacing=\"lg\" mt=\"md\">\r\n            {/* Message List */}\r\n            <div style={{ gridColumn: 'span 2' }}>\r\n              <Paper p=\"md\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Messages</Title>\r\n                <Stack gap=\"sm\">\r\n                  {[].map /* TODO: Fetch from API */((communication) => (\r\n                    <Card key={communication.id} padding=\"md\" withBorder>\r\n                      <Group justify=\"space-between\" mb=\"sm\">\r\n                        <Group>\r\n                          <Avatar size=\"sm\" color=\"blue\">\r\n                            {communication.senderType === 'doctor' ? 'DR' : 'ME'}\r\n                          </Avatar>\r\n                          <div>\r\n                            <Text fw={500} size=\"sm\">\r\n                              {communication.senderType === 'doctor' \r\n                                ? `Dr. ${communication.senderName}` \r\n                                : 'You'}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              {communication.subject}\r\n                            </Text>\r\n                          </div>\r\n                        </Group>\r\n                        <div style={{ textAlign: 'right' }}>\r\n                          <Text size=\"xs\" c=\"dimmed\">\r\n                            {formatDateTime(communication.sentDate)}\r\n                          </Text>\r\n                          {!communication.isRead && communication.senderType === 'doctor' && (\r\n                            <Badge size=\"xs\" color=\"red\">New</Badge>\r\n                          )}\r\n                        </div>\r\n                      </Group>\r\n                      \r\n                      <Text size=\"sm\" lineClamp={2} mb=\"sm\">\r\n                        {communication.message}\r\n                      </Text>\r\n                      \r\n                      <Group justify=\"space-between\">\r\n                        <Badge \r\n                          variant=\"light\" \r\n                          color={\r\n                            communication.type === 'appointment' ? 'blue' :\r\n                            communication.type === 'prescription' ? 'green' :\r\n                            communication.type === 'test_result' ? 'orange' :\r\n                            communication.type === 'general' ? 'purple' : 'gray'\r\n                          }\r\n                          size=\"xs\"\r\n                        >\r\n                          {communication.type.replace('_', ' ')}\r\n                        </Badge>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon variant=\"subtle\" color=\"blue\" size=\"sm\">\r\n                            <IconEye size={14} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"green\" size=\"sm\">\r\n                            <IconMessage size={14} />\r\n                          </ActionIcon>\r\n                        </Group>\r\n                      </Group>\r\n                    </Card>\r\n                  ))}\r\n                </Stack>\r\n              </Paper>\r\n            </div>\r\n\r\n            {/* Compose Message */}\r\n            <Paper p=\"md\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Send Message</Title>\r\n              <Stack gap=\"md\">\r\n                <Select\r\n                  label=\"To\"\r\n                  placeholder=\"Select healthcare provider\"\r\n                  data={[].map /* TODO: Fetch from API */(doctor => ({\r\n                    value: doctor.id,\r\n                    label: `${doctor.name} - ${doctor.specialization}`\r\n                  }))}\r\n                />\r\n                \r\n                <TextInput\r\n                  label=\"Subject\"\r\n                  placeholder=\"Enter subject\"\r\n                />\r\n                \r\n                <Textarea\r\n                  label=\"Message\"\r\n                  placeholder=\"Type your message here...\"\r\n                  rows={6}\r\n                  value={newMessage}\r\n                  onChange={(event) => setNewMessage(event.currentTarget.value)}\r\n                />\r\n                \r\n                <Button \r\n                  leftSection={<IconSend size={16} />}\r\n                  onClick={handleSendMessage}\r\n                  disabled={!newMessage.trim()}\r\n                >\r\n                  Send Message\r\n                </Button>\r\n              </Stack>\r\n            </Paper>\r\n          </SimpleGrid>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Book Appointment Modal */}\r\n      <Modal\r\n        opened={bookAppointmentOpened}\r\n        onClose={closeBookAppointment}\r\n        title=\"Book New Appointment\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Doctor\"\r\n              placeholder=\"Select doctor\"\r\n              data={[].map /* TODO: Fetch from API */(doctor => ({\r\n                value: doctor.id,\r\n                label: `${doctor.name} - ${doctor.specialization}`\r\n              }))}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Appointment Type\"\r\n              placeholder=\"Select type\"\r\n              data={[\r\n                { value: 'consultation', label: 'Consultation' },\r\n                { value: 'follow_up', label: 'Follow-up' },\r\n                { value: 'emergency', label: 'Emergency' },\r\n                { value: 'procedure', label: 'Procedure' },\r\n                { value: 'diagnostic', label: 'Diagnostic' },\r\n                { value: 'vaccination', label: 'Vaccination' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <DatePickerInput\r\n              label=\"Preferred Date\"\r\n              placeholder=\"Select date\"\r\n              minDate={new Date()}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Time Slot\"\r\n              placeholder=\"Select time\"\r\n              data={[\r\n                { value: '09:00', label: '9:00 AM' },\r\n                { value: '10:00', label: '10:00 AM' },\r\n                { value: '11:00', label: '11:00 AM' },\r\n                { value: '14:00', label: '2:00 PM' },\r\n                { value: '15:00', label: '3:00 PM' },\r\n                { value: '16:00', label: '4:00 PM' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Reason for Visit\"\r\n            placeholder=\"Describe your symptoms or reason for appointment\"\r\n            rows={3}\r\n            required\r\n          />\r\n          \r\n          <Textarea\r\n            label=\"Additional Notes\"\r\n            placeholder=\"Any additional information (optional)\"\r\n            rows={2}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeBookAppointment}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Appointment Requested',\r\n                message: 'Your appointment request has been submitted for approval',\r\n                color: 'green',\r\n              });\r\n              closeBookAppointment();\r\n            }}>\r\n              Book Appointment\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PatientPortal;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\patients\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Status' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 41,
        "column": 53,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 59
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PatientStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 42,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'InsuranceInfo' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 42,
        "column": 107,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 120
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockUser' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 48,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 298,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 298,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleOpenHistory' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 473,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 473,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Text,\r\n  Group,\r\n  Badge,\r\n  SimpleGrid,\r\n  Stack,\r\n  Button,\r\n  Card,\r\n  Avatar,\r\n  Title,\r\n  Alert\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport {\r\n  IconUsers,\r\n  IconPhone,\r\n  IconCalendar,\r\n  IconHeart,\r\n  IconAlertCircle,\r\n  IconShield,\r\n  IconUserPlus,\r\n  IconSearch,\r\n  IconChartBar,\r\n  IconFileExport,\r\n  IconUser\r\n} from '@tabler/icons-react';\r\nimport DataTable from '../../../components/shared/DataTable';\r\nimport PatientForm from '../../../components/patients/PatientForm';\r\nimport PatientDetails from '../../../components/patients/PatientDetails';\r\nimport MedicalHistoryManager from '../../../components/patients/MedicalHistoryManager';\r\nimport DocumentManager from '../../../components/patients/DocumentManager';\r\nimport PatientSearch from '../../../components/patients/PatientSearch';\r\nimport PatientAnalytics from '../../../components/patients/PatientAnalytics';\r\nimport PatientExportReport from '../../../components/patients/PatientExportReport';\r\nimport PatientPortalAccess from '../../../components/patients/PatientPortalAccess';\r\nimport { useAppStore } from '../../../stores/appStore';\r\nimport { User, UserRole, TableColumn, FilterOption, Status } from '../../../types/common';\r\nimport { Patient, PatientStats, PatientListItem, CreatePatientDto, UpdatePatientDto, PatientSearchParams, InsuranceInfo } from '../../../types/patient';\r\nimport { formatDate, formatPhoneNumber } from '../../../lib/utils';\r\nimport { notifications } from '@mantine/notifications';\r\nimport patientsService from '../../../services/patients.service';\r\n\r\n// Mock user\r\nconst mockUser: User = {\r\n  id: '1',\r\n  username: 'sjohnson',\r\n  email: 'sarah.johnson@hospital.com',\r\n  firstName: 'Sarah',\r\n  lastName: 'Johnson',\r\n  role: UserRole.DOCTOR,\r\n  permissions: [],\r\n  isActive: true,\r\n  tenantInfo: {\r\n    tenantId: 'T001',\r\n    tenantName: 'Main Hospital',\r\n  },\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nexport default function PatientManagement() {\r\n  const { user, setUser } = useAppStore();\r\n  const [patients, setPatients] = useState<Patient[]>([]);\r\n  const [patientStats, setPatientStats] = useState<any>(null);\r\n  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [, setSearchQuery] = useState('');\r\n  const [, setFilters] = useState<Record<string, unknown>>({});\r\n  const [opened, { open, close }] = useDisclosure(false);\r\n  const [viewModalOpened, { open: openView, close: closeView }] = useDisclosure(false);\r\n  const [historyModalOpened, { open: openHistory, close: closeHistory }] = useDisclosure(false);\r\n  const [documentsModalOpened, { open: openDocuments, close: closeDocuments }] = useDisclosure(false);\r\n  const [searchModalOpened, { open: openSearch, close: closeSearch }] = useDisclosure(false);\r\n  const [analyticsModalOpened, { open: openAnalytics, close: closeAnalytics }] = useDisclosure(false);\r\n  const [exportModalOpened, { open: openExport, close: closeExport }] = useDisclosure(false);\r\n  const [portalModalOpened, { open: openPortal, close: closePortal }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setUser([] /* TODO: Fetch from API */);\r\n    }\r\n    fetchPatients();\r\n    fetchStats();\r\n  }, [user, setUser]);\r\n\r\n  const fetchPatients = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await patientsService.getPatients();\r\n      console.log('Patients API response:', response);\r\n      setPatients(response.data?.patients || []);\r\n      setError(null);\r\n    } catch (err: any) {\r\n      const errorMsg = err.response?.data?.message || err.message || 'Failed to fetch patients';\r\n      console.warn('Error fetching patients (using empty data):', errorMsg);\r\n      // Don't show error to user if backend is not ready, just use empty data\r\n      setError(null);\r\n      setPatients([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await patientsService.getPatientStats();\r\n      console.log('Patient stats API response:', response);\r\n      setPatientStats(response.data);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching patient stats (using default values):', err.response?.data?.message || err.message);\r\n      // Set default stats when backend is unavailable\r\n      setPatientStats({ \r\n        totalPatients: 0, \r\n        activePatients: 0, \r\n        todaysPatients: 0, \r\n        weekPatients: 0,\r\n        averageAge: 0,\r\n        genderDistribution: { male: 0, female: 0, other: 0 },\r\n        insuranceDistribution: { insured: 0, uninsured: 0 }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Convert patients to list items for table\r\n  const patientListItems: PatientListItem[] = patients.map(patient => ({\r\n    id: patient.id,\r\n    patientId: patient.patientId,\r\n    fullName: `${patient.firstName} ${patient.lastName}`,\r\n    age: patient.age,\r\n    gender: patient.gender,\r\n    phoneNumber: patient.contactInfo.phone,\r\n    lastVisitDate: patient.lastVisitDate,\r\n    totalVisits: patient.totalVisits,\r\n    status: patient.status,\r\n    hasInsurance: !!patient.insuranceInfo?.isActive,\r\n    emergencyFlag: patient.chronicDiseases.length > 0\r\n  }));\r\n\r\n  // Table columns configuration\r\n  const columns: TableColumn[] = [\r\n    {\r\n      key: 'patientId',\r\n      title: 'Patient ID',\r\n      sortable: true,\r\n      width: '120px',\r\n      render: (value) => (\r\n        <Text fw={500} c=\"blue\">\r\n          {value as string}\r\n        </Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'fullName',\r\n      title: 'Patient Name',\r\n      sortable: true,\r\n      render: (value, record) => (\r\n        <Group gap=\"sm\">\r\n          <Avatar size=\"sm\" name={value as string} color=\"blue\" />\r\n          <div>\r\n            <Text fw={500}>{value as string}</Text>\r\n            <Text size=\"xs\" c=\"dimmed\">\r\n              {record.age as string} years • {record.gender as string}\r\n            </Text>\r\n          </div>\r\n        </Group>\r\n      )\r\n    },\r\n    {\r\n      key: 'phoneNumber',\r\n      title: 'Contact',\r\n      render: (value) => (\r\n        <div>\r\n          <Group gap=\"xs\">\r\n            <IconPhone size=\"1rem\" />\r\n            <Text size=\"sm\">{formatPhoneNumber(value as string)}</Text>\r\n          </Group>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'lastVisitDate',\r\n      title: 'Last Visit',\r\n      sortable: true,\r\n      render: (value) => value ? formatDate(value as string | Date) : 'Never'\r\n    },\r\n    {\r\n      key: 'totalVisits',\r\n      title: 'Visits',\r\n      sortable: true,\r\n      width: '80px',\r\n      render: (value) => (\r\n        <Badge variant=\"light\" color=\"blue\">\r\n          {value as string}\r\n        </Badge>\r\n      )\r\n    },\r\n    {\r\n      key: 'status',\r\n      title: 'Status',\r\n      render: (value) => (\r\n        <Badge \r\n          color={value === 'active' ? 'green' : 'red'}\r\n          variant=\"light\"\r\n        >\r\n          {value as string}\r\n        </Badge>\r\n      )\r\n    },\r\n    {\r\n      key: 'hasInsurance',\r\n      title: 'Insurance',\r\n      render: (value, record) => (\r\n        <Group gap=\"xs\">\r\n          {value ? (\r\n            <Badge color=\"green\" variant=\"light\" leftSection={<IconShield size=\"0.8rem\" />}>\r\n              Insured\r\n            </Badge>\r\n          ) : (\r\n            <Badge color=\"gray\" variant=\"light\">\r\n              Self Pay\r\n            </Badge>\r\n          )}\r\n          {record.emergencyFlag && (\r\n            <IconAlertCircle size=\"1rem\" color=\"red\" />\r\n          )}\r\n        </Group>\r\n      )\r\n    }\r\n  ];\r\n\r\n  // Filter options\r\n  const filterOptions: FilterOption[] = [\r\n    {\r\n      key: 'status',\r\n      title: 'Status',\r\n      type: 'select',\r\n      options: [\r\n        { value: 'active', title: 'Active' },\r\n        { value: 'inactive', title: 'Inactive' }\r\n      ]\r\n    },\r\n    {\r\n      key: 'gender',\r\n      title: 'Gender',\r\n      type: 'select',\r\n      options: [\r\n        { value: 'male', title: 'Male' },\r\n        { value: 'female', title: 'Female' },\r\n        { value: 'other', title: 'Other' }\r\n      ]\r\n    },\r\n    {\r\n      key: 'hasInsurance',\r\n      title: 'Insurance',\r\n      type: 'select',\r\n      options: [\r\n        { value: 'true', title: 'Insured' },\r\n        { value: 'false', title: 'Self Pay' }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  // Handle patient actions\r\n  const handleViewPatient = (patient: PatientListItem) => {\r\n    const fullPatient = patients.find(p => p.id === patient.id);\r\n    if (fullPatient) {\r\n      setSelectedPatient(fullPatient);\r\n      openView();\r\n    }\r\n  };\r\n\r\n  const handleEditPatient = (patient: PatientListItem) => {\r\n    const fullPatient = patients.find(p => p.id === patient.id);\r\n    if (fullPatient) {\r\n      setSelectedPatient(fullPatient);\r\n      open();\r\n    }\r\n  };\r\n\r\n  const handleDeletePatient = async (patient: PatientListItem) => {\r\n    if (!window.confirm(`Are you sure you want to delete patient ${patient.fullName} (${patient.patientId})?`)) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await patientsService.deletePatient(patient.id);\r\n      notifications.show({\r\n        title: 'Success',\r\n        message: `Patient ${patient.fullName} deleted successfully!`,\r\n        color: 'green'\r\n      });\r\n      fetchPatients(); // Refresh the list\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: 'Failed to delete patient',\r\n        color: 'red'\r\n      });\r\n    }\r\n  };\r\n\r\n  // Patient CRUD operations\r\n  const handleCreatePatient = async (data: CreatePatientDto) => {\r\n    try {\r\n      // Convert Date to string for API\r\n      const apiData = {\r\n        ...data,\r\n        dateOfBirth: data.dateOfBirth instanceof Date \r\n          ? data.dateOfBirth.toISOString().split('T')[0] \r\n          : data.dateOfBirth\r\n      };\r\n      const response = await patientsService.createPatient(apiData as any);\r\n      const newPatient = response.data;\r\n      notifications.show({\r\n        title: 'Success',\r\n        message: `Patient ${newPatient.firstName} ${newPatient.lastName} registered successfully!`,\r\n        color: 'green'\r\n      });\r\n      \r\n      // Refresh the patients list and stats\r\n      await fetchPatients();\r\n      await fetchStats();\r\n    } catch (error: any) {\r\n      const errorMsg = error.response?.data?.message || error.message || 'Failed to create patient';\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: errorMsg,\r\n        color: 'red'\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleUpdatePatient = async (data: UpdatePatientDto) => {\r\n    try {\r\n      // Convert Date to string for API\r\n      const apiData = {\r\n        ...data,\r\n        dateOfBirth: data.dateOfBirth instanceof Date \r\n          ? data.dateOfBirth.toISOString().split('T')[0] \r\n          : data.dateOfBirth\r\n      };\r\n      const response = await patientsService.updatePatient(data.id!, apiData as any);\r\n      const updatedPatient = response.data;\r\n      \r\n      notifications.show({\r\n        title: 'Success',\r\n        message: `Patient ${updatedPatient.firstName} ${updatedPatient.lastName} updated successfully!`,\r\n        color: 'green'\r\n      });\r\n      \r\n      // Refresh the patients list\r\n      await fetchPatients();\r\n    } catch (error: any) {\r\n      const errorMsg = error.response?.data?.message || error.message || 'Failed to update patient';\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: errorMsg,\r\n        color: 'red'\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Medical history operations\r\n  const handleSaveMedicalHistory = async (history: any) => {\r\n    console.log('Saving medical history:', history);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleUpdateMedicalHistory = async (id: string, history: any) => {\r\n    console.log('Updating medical history:', id, history);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleDeleteMedicalHistory = async (id: string) => {\r\n    console.log('Deleting medical history:', id);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  // Document operations\r\n  const handleUploadDocument = async (document: any, file: File) => {\r\n    console.log('Uploading document:', document, file);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleUpdateDocument = async (id: string, document: any) => {\r\n    console.log('Updating document:', id, document);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleDeleteDocument = async (id: string) => {\r\n    console.log('Deleting document:', id);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleDownloadDocument = async (document: any) => {\r\n    console.log('Downloading document:', document);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleViewDocument = async (document: any) => {\r\n    console.log('Viewing document:', document);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  // Search operations\r\n  const handleSearch = (criteria: PatientSearchParams) => {\r\n    console.log('Searching patients:', criteria);\r\n    // In real implementation, filter patients based on criteria\r\n  };\r\n\r\n  const handleSaveSearch = (name: string, criteria: PatientSearchParams) => {\r\n    console.log('Saving search:', name, criteria);\r\n  };\r\n\r\n  // Export operations\r\n  const handleExportPatients = async (options: any) => {\r\n    console.log('Exporting patients:', options);\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n  };\r\n\r\n  const handleGenerateReport = async (reportType: string, patientIds?: string[]) => {\r\n    console.log('Generating report:', reportType, patientIds);\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    return {\r\n      reportType: reportType as 'demographics' | 'visit_summary' | 'medical_summary' | 'insurance_summary',\r\n      patientId: 'all',\r\n      generatedAt: new Date(),\r\n      generatedBy: 'current_user',\r\n      data: {},\r\n      format: 'pdf' as const\r\n    };\r\n  };\r\n\r\n  // Portal operations\r\n  const handleEnablePortalAccess = async (patientId: string, preferences: any) => {\r\n    console.log('Enabling portal access:', patientId, preferences);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleDisablePortalAccess = async (patientId: string) => {\r\n    console.log('Disabling portal access:', patientId);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleUpdatePortalPreferences = async (patientId: string, preferences: any) => {\r\n    console.log('Updating portal preferences:', patientId, preferences);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleResetPortalPassword = async (patientId: string) => {\r\n    console.log('Resetting portal password:', patientId);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleSendPortalCredentials = async (patientId: string, method: 'email' | 'sms') => {\r\n    console.log('Sending portal credentials:', patientId, method);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  // Additional handlers\r\n  const handleScheduleAppointment = (patientId: string) => {\r\n    console.log('Schedule appointment for patient:', patientId);\r\n    // Would navigate to appointment scheduling\r\n  };\r\n\r\n  const handleOpenHistory = (patient: PatientListItem) => {\r\n    const fullPatient = patients.find(p => p.id === patient.id);\r\n    if (fullPatient) {\r\n      setSelectedPatient(fullPatient);\r\n      openHistory();\r\n    }\r\n  };\r\n\r\n  const handleOpenDocuments = (patient: PatientListItem) => {\r\n    const fullPatient = patients.find(p => p.id === patient.id);\r\n    if (fullPatient) {\r\n      setSelectedPatient(fullPatient);\r\n      openDocuments();\r\n    }\r\n  };\r\n\r\n  const handleOpenPortal = (patient: PatientListItem) => {\r\n    const fullPatient = patients.find(p => p.id === patient.id);\r\n    if (fullPatient) {\r\n      setSelectedPatient(fullPatient);\r\n      openPortal();\r\n    }\r\n  };\r\n\r\n  const handleNewPatient = () => {\r\n    setSelectedPatient(null);\r\n    open();\r\n  };\r\n\r\n  const handleCloseForm = () => {\r\n    setSelectedPatient(null);\r\n    close();\r\n  };\r\n\r\n  // Wrapper function for PatientDetails onEdit prop\r\n  const handleEditFromDetails = (patient: Patient) => {\r\n    // Convert Patient to PatientListItem format for the existing handler\r\n    const patientListItem: PatientListItem = {\r\n      id: patient.id,\r\n      patientId: patient.patientId,\r\n      fullName: `${patient.firstName} ${patient.lastName}`,\r\n      age: patient.age,\r\n      gender: patient.gender,\r\n      phoneNumber: patient.contactInfo.phone,\r\n      lastVisitDate: patient.lastVisitDate,\r\n      totalVisits: patient.totalVisits,\r\n      status: patient.status,\r\n      hasInsurance: !!patient.insuranceInfo?.isActive,\r\n      emergencyFlag: patient.chronicDiseases.length > 0\r\n    };\r\n    handleEditPatient(patientListItem);\r\n  };\r\n\r\n  // Statistics cards\r\n  const StatCard = ({ title, value, icon, color, subtitle }: { title: string; value: string; icon: React.ReactNode; color: string; subtitle?: string }) => (\r\n    <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\r\n      <Group justify=\"space-between\" mb=\"md\">\r\n        <div style={{ color: `var(--mantine-color-${color}-6)` }}>\r\n          {icon}\r\n        </div>\r\n      </Group>\r\n      \r\n      <Text size=\"xl\" fw={700} mb=\"xs\">\r\n        {value}\r\n      </Text>\r\n      \r\n      <Text size=\"sm\" c=\"dimmed\" mb=\"sm\">\r\n        {title}\r\n      </Text>\r\n      \r\n      {subtitle && (\r\n        <Text size=\"xs\" c=\"dimmed\">\r\n          {subtitle}\r\n        </Text>\r\n      )}\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Stack gap=\"lg\">\r\n        {/* Header */}\r\n        <Group justify=\"space-between\">\r\n          <div>\r\n            <Title order={2}>Patient Management</Title>\r\n            <Text c=\"dimmed\">\r\n              Manage patient registration, medical records, and healthcare information\r\n            </Text>\r\n          </div>\r\n          <Group>\r\n            <Button\r\n              variant=\"outline\"\r\n              leftSection={<IconSearch size=\"1rem\" />}\r\n              onClick={openSearch}\r\n            >\r\n              Advanced Search\r\n            </Button>\r\n            <Button\r\n              variant=\"outline\"\r\n              leftSection={<IconChartBar size=\"1rem\" />}\r\n              onClick={openAnalytics}\r\n            >\r\n              Analytics\r\n            </Button>\r\n            <Button\r\n              variant=\"outline\"\r\n              leftSection={<IconFileExport size=\"1rem\" />}\r\n              onClick={openExport}\r\n            >\r\n              Export\r\n            </Button>\r\n            <Button\r\n              leftSection={<IconUserPlus size=\"1rem\" />}\r\n              onClick={handleNewPatient}\r\n            >\r\n              New Patient\r\n            </Button>\r\n          </Group>\r\n        </Group>\r\n\r\n        {/* Error Display */}\r\n        {error && (\r\n          <Alert icon={<IconAlertCircle size=\"1rem\" />} title=\"Error\" color=\"red\" variant=\"light\">\r\n            {error}\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Statistics Cards */}\r\n        {patientStats && (\r\n          <SimpleGrid cols={{ base: 1, sm: 2, lg: 4 }} spacing=\"lg\">\r\n            <StatCard\r\n              title=\"Total Patients\"\r\n              value={(patientStats.totalPatients || 0).toLocaleString()}\r\n              icon={<IconUsers size=\"2rem\" />}\r\n              color=\"blue\"\r\n              subtitle={patientStats.newPatientsThisMonth ? `+${patientStats.newPatientsThisMonth} this month` : undefined}\r\n            />\r\n            <StatCard\r\n              title=\"New Today\"\r\n              value={(patientStats.newPatientsToday || patientStats.todaysPatients || 0).toString()}\r\n              icon={<IconUserPlus size=\"2rem\" />}\r\n              color=\"green\"\r\n              subtitle=\"New registrations today\"\r\n            />\r\n            <StatCard\r\n              title=\"Active Patients\"\r\n              value={(patientStats.activePatients || 0).toLocaleString()}\r\n              icon={<IconHeart size=\"2rem\" />}\r\n              color=\"red\"\r\n              subtitle=\"Currently under care\"\r\n            />\r\n            <StatCard\r\n              title=\"Average Age\"\r\n              value={patientStats.averageAge ? `${patientStats.averageAge} years` : 'N/A'}\r\n              icon={<IconCalendar size=\"2rem\" />}\r\n              color=\"purple\"\r\n              subtitle=\"Patient demographics\"\r\n            />\r\n          </SimpleGrid>\r\n        )}\r\n\r\n        {/* Patient List Table */}\r\n        <DataTable\r\n          data={patientListItems}\r\n          columns={columns}\r\n          loading={loading}\r\n          searchable={true}\r\n          filterable={true}\r\n          sortable={true}\r\n          filters={filterOptions}\r\n          onSearch={(query) => setSearchQuery(query)}\r\n          onFilter={(filters) => setFilters(filters)}\r\n          pagination={{\r\n            page: 1,\r\n            limit: 10,\r\n            total: patientListItems.length,\r\n            onPageChange: (page) => console.log('Page:', page),\r\n            onLimitChange: (limit) => console.log('Limit:', limit)\r\n          }}\r\n          actions={{\r\n            view: handleViewPatient,\r\n            edit: handleEditPatient,\r\n            delete: handleDeletePatient,\r\n            custom: [\r\n              {\r\n                title: 'Documents',\r\n                icon: <IconFileExport size=\"1rem\" />,\r\n                action: (patient: PatientListItem) => handleOpenDocuments(patient)\r\n              },\r\n              {\r\n                title: 'Portal',\r\n                icon: <IconUser size=\"1rem\" />,\r\n                action: (patient: PatientListItem) => handleOpenPortal(patient)\r\n              }\r\n            ]\r\n          }}\r\n          emptyMessage=\"No patients found\"\r\n        />\r\n\r\n        {/* Enhanced Patient Details Modal */}\r\n        <PatientDetails\r\n          opened={viewModalOpened}\r\n          onClose={closeView}\r\n          patient={selectedPatient}\r\n          visits={[]}\r\n          documents={[]}\r\n          medicalHistory={[]}\r\n          appointments={[]}\r\n          onEdit={handleEditFromDetails}\r\n          onScheduleAppointment={handleScheduleAppointment}\r\n        />\r\n\r\n        {/* Enhanced Patient Form Modal */}\r\n        <PatientForm\r\n          opened={opened}\r\n          onClose={handleCloseForm}\r\n          patient={selectedPatient}\r\n          onSubmit={selectedPatient ? handleUpdatePatient : handleCreatePatient}\r\n        />\r\n\r\n        {/* Medical History Manager */}\r\n        {selectedPatient && (\r\n          <MedicalHistoryManager\r\n            opened={historyModalOpened}\r\n            onClose={closeHistory}\r\n            patientId={selectedPatient.patientId}\r\n            patientName={`${selectedPatient.firstName} ${selectedPatient.lastName}`}\r\n            medicalHistory={[]}\r\n            onSave={handleSaveMedicalHistory}\r\n            onUpdate={handleUpdateMedicalHistory}\r\n            onDelete={handleDeleteMedicalHistory}\r\n          />\r\n        )}\r\n\r\n        {/* Document Manager */}\r\n        {selectedPatient && (\r\n          <DocumentManager\r\n            opened={documentsModalOpened}\r\n            onClose={closeDocuments}\r\n            patientId={selectedPatient.patientId}\r\n            patientName={`${selectedPatient.firstName} ${selectedPatient.lastName}`}\r\n            documents={[]}\r\n            onUpload={handleUploadDocument}\r\n            onUpdate={handleUpdateDocument}\r\n            onDelete={handleDeleteDocument}\r\n            onDownload={handleDownloadDocument}\r\n            onView={handleViewDocument}\r\n          />\r\n        )}\r\n\r\n        {/* Patient Search */}\r\n        <PatientSearch\r\n          opened={searchModalOpened}\r\n          onClose={closeSearch}\r\n          onSearch={handleSearch}\r\n          onSaveSearch={handleSaveSearch}\r\n          currentCriteria={{}}\r\n        />\r\n\r\n        {/* Patient Analytics */}\r\n        <PatientAnalytics\r\n          opened={analyticsModalOpened}\r\n          onClose={closeAnalytics}\r\n          patients={patients}\r\n          stats={patientStats}\r\n        />\r\n\r\n        {/* Export & Reporting */}\r\n        <PatientExportReport\r\n          opened={exportModalOpened}\r\n          onClose={closeExport}\r\n          onExport={handleExportPatients}\r\n          onGenerateReport={handleGenerateReport}\r\n          patientCount={patients.length}\r\n        />\r\n\r\n        {/* Patient Portal Access */}\r\n        {selectedPatient && (\r\n          <PatientPortalAccess\r\n            opened={portalModalOpened}\r\n            onClose={closePortal}\r\n            patient={selectedPatient}\r\n            onEnableAccess={handleEnablePortalAccess}\r\n            onDisableAccess={handleDisablePortalAccess}\r\n            onUpdatePreferences={handleUpdatePortalPreferences}\r\n            onResetPassword={handleResetPortalPassword}\r\n            onSendCredentials={handleSendPortalCredentials}\r\n          />\r\n        )}\r\n      </Stack>\r\n    </Container>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\pharmacy-management\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Avatar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockMedications' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockPrescriptions' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 116,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'dispenseMedicationOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 168,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 168,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'openDispenseMedication' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 168,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 168,
        "endColumn": 66
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeDispenseMedication' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 168,
        "column": 75,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 168,
        "endColumn": 98
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { MantineDonutChart, SimpleBarChart, SimpleLineChart } from '../../../components/MantineChart';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconPill,\r\n  IconAlertTriangle,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconChartBar,\r\n  IconDownload,\r\n  IconBarcode,\r\n  IconBottle,\r\n  IconShieldCheck,\r\n  IconFileText,\r\n  IconPackage,\r\n  IconCash,\r\n  IconActivity\r\n} from '@tabler/icons-react';\r\n\r\n// Import types (simplified for now)\r\ninterface Medication {\r\n  id: string;\r\n  name: string;\r\n  genericName?: string;\r\n  manufacturer?: string;\r\n  category: string;\r\n  currentStock: number;\r\n  minimumStock: number;\r\n  unitPrice: number;\r\n  status: string;\r\n  batchNumber?: string;\r\n  expiryDate?: string;\r\n  location?: string;\r\n}\r\n\r\ninterface Prescription {\r\n  id: string;\r\n  prescriptionId: string;\r\n  patientName: string;\r\n  doctorName: string;\r\n  date: string;\r\n  status: string;\r\n  totalAmount: number;\r\n  medications: Array<{\r\n    name: string;\r\n    dosage: string;\r\n    frequency: string;\r\n    duration: string;\r\n    quantity: number;\r\n  }>;\r\n}\r\n\r\n// Mock data (simplified for now)\r\nconst mockMedications: Medication[] = [\r\n  {\r\n    id: '1',\r\n    name: 'Paracetamol',\r\n    genericName: 'Acetaminophen',\r\n    manufacturer: 'Abbott',\r\n    category: 'Analgesic',\r\n    currentStock: 500,\r\n    minimumStock: 50,\r\n    unitPrice: 2.5,\r\n    status: 'in_stock',\r\n    batchNumber: 'PAR001',\r\n    expiryDate: '2025-12-31',\r\n    location: 'A1-B2'\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Amoxicillin',\r\n    genericName: 'Amoxicillin',\r\n    manufacturer: 'GSK',\r\n    category: 'Antibiotic',\r\n    currentStock: 25,\r\n    minimumStock: 30,\r\n    unitPrice: 15.0,\r\n    status: 'low_stock',\r\n    batchNumber: 'AMX001',\r\n    expiryDate: '2025-08-15',\r\n    location: 'A2-B1'\r\n  }\r\n];\r\n\r\nconst mockPrescriptions: Prescription[] = [\r\n  {\r\n    id: '1',\r\n    prescriptionId: 'RX-001',\r\n    patientName: 'John Doe',\r\n    doctorName: 'Dr. Smith',\r\n    date: '2024-01-15',\r\n    status: 'pending',\r\n    totalAmount: 150.0,\r\n    medications: [\r\n      {\r\n        name: 'Paracetamol',\r\n        dosage: '500mg',\r\n        frequency: 'Twice daily',\r\n        duration: '5 days',\r\n        quantity: 10\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nconst mockPharmacyStats = {\r\n  totalMedications: 1500,\r\n  inStockItems: 1200,\r\n  lowStockItems: 50,\r\n  outOfStockItems: 25,\r\n  totalPrescriptions: 2500,\r\n  monthlyRevenue: 500000,\r\n  medicationsByCategory: [\r\n    { category: 'Analgesic', count: 300 },\r\n    { category: 'Antibiotic', count: 250 },\r\n    { category: 'Cardiovascular', count: 200 },\r\n    { category: 'Antidiabetic', count: 150 }\r\n  ],\r\n  expiringMedications: [\r\n    { name: 'Aspirin', expiryDate: '2024-02-15', quantity: 50 },\r\n    { name: 'Metformin', expiryDate: '2024-03-10', quantity: 30 }\r\n  ]\r\n};\r\n\r\nconst PharmacyManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<'overview' | 'medications' | 'prescriptions' | 'inventory' | 'dispensing' | 'interactions' | 'analytics'>('overview');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedMedication, setSelectedMedication] = useState<any>(null);\r\n  const [selectedPrescription, setSelectedPrescription] = useState<any>(null);\r\n\r\n  // Modal states\r\n  const [medicationDetailOpened, { open: openMedicationDetail, close: closeMedicationDetail }] = useDisclosure(false);\r\n  const [prescriptionDetailOpened, { open: openPrescriptionDetail, close: closePrescriptionDetail }] = useDisclosure(false);\r\n  const [dispenseMedicationOpened, { open: openDispenseMedication, close: closeDispenseMedication }] = useDisclosure(false);\r\n  const [addMedicationOpened, { open: openAddMedication, close: closeAddMedication }] = useDisclosure(false);\r\n  const [newPrescriptionOpened, { open: openNewPrescription, close: closeNewPrescription }] = useDisclosure(false);\r\n\r\n  // Filter medications\r\n  const filteredMedications = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((med) => {\r\n      const matchesSearch = med.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        med.genericName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        med.manufacturer?.toLowerCase().includes(searchQuery.toLowerCase());\r\n      const matchesCategory = !selectedCategory || med.category === selectedCategory;\r\n      const matchesStatus = !selectedStatus || med.status === selectedStatus;\r\n      return matchesSearch && matchesCategory && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedCategory, selectedStatus]);\r\n\r\n  // Filter prescriptions\r\n  const filteredPrescriptions = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((prescription) => {\r\n      const matchesSearch = prescription.prescriptionId.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        prescription.patientName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        prescription.doctorName.toLowerCase().includes(searchQuery.toLowerCase());\r\n      const matchesStatus = !selectedStatus || prescription.status === selectedStatus;\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedStatus]);\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'in_stock':\r\n      case 'dispensed':\r\n      case 'completed':\r\n      case 'paid':\r\n        return 'green';\r\n      case 'low_stock':\r\n      case 'pending':\r\n      case 'verified':\r\n        return 'orange';\r\n      case 'out_of_stock':\r\n      case 'cancelled':\r\n      case 'expired':\r\n        return 'red';\r\n      default:\r\n        return 'gray';\r\n    }\r\n  };\r\n\r\n  const getCategoryColor = (category: string) => {\r\n    const colors = {\r\n      'Analgesic': 'blue',\r\n      'Antibiotic': 'green',\r\n      'Cardiovascular': 'red',\r\n      'Antidiabetic': 'purple',\r\n      'Respiratory': 'cyan',\r\n      'Neurological': 'pink'\r\n    };\r\n    return colors[category as keyof typeof colors] || 'gray';\r\n  };\r\n\r\n  const handleViewMedication = (medication: any) => {\r\n    setSelectedMedication(medication);\r\n    openMedicationDetail();\r\n  };\r\n\r\n  const handleViewPrescription = (prescription: any) => {\r\n    setSelectedPrescription(prescription);\r\n    openPrescriptionDetail();\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchQuery('');\r\n    setSelectedCategory('');\r\n    setSelectedStatus('');\r\n  };\r\n\r\n  // Statistics cards data\r\n  const statsCards = [\r\n    {\r\n      title: 'Total Medications',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconPill,\r\n      color: 'blue',\r\n      trend: '+5.2%'\r\n    },\r\n    {\r\n      title: 'In Stock Items',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconPackage,\r\n      color: 'green',\r\n      trend: '+2.1%'\r\n    },\r\n    {\r\n      title: 'Low Stock Alerts',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconAlertTriangle,\r\n      color: 'orange',\r\n      trend: '-8.5%'\r\n    },\r\n    {\r\n      title: 'Out of Stock',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconX,\r\n      color: 'red',\r\n      trend: '-15.3%'\r\n    },\r\n    {\r\n      title: 'Total Prescriptions',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconFileText,\r\n      color: 'indigo',\r\n      trend: '+7.8%'\r\n    },\r\n    {\r\n      title: 'Monthly Revenue',\r\n      value: `₹${(0 /* TODO: Fetch from API */ / 100000).toFixed(1)}L`,\r\n      icon: IconCash,\r\n      color: 'teal',\r\n      trend: '+12.4%'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Pharmacy Management</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage medications, prescriptions, inventory, and dispensing operations\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button leftSection={<IconPlus size={16} />} onClick={openAddMedication}>\r\n            Add Medication\r\n          </Button>\r\n          <Button variant=\"light\" leftSection={<IconFileText size={16} />} onClick={openNewPrescription}>\r\n            New Prescription\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Statistics Cards */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 3, lg: 6 }} mb=\"lg\">\r\n        {statsCards.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n              <Group justify=\"space-between\" mt=\"sm\">\r\n                <Badge\r\n                  color={stat.trend.startsWith('+') ? 'green' : 'red'}\r\n                  variant=\"light\"\r\n                  size=\"sm\"\r\n                >\r\n                  {stat.trend}\r\n                </Badge>\r\n                <Text size=\"xs\" c=\"dimmed\">vs last month</Text>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Tabs */}\r\n      <Tabs value={activeTab} onChange={(value) => setActiveTab(value as typeof activeTab)}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"overview\" leftSection={<IconChartBar size={16} />}>\r\n            Overview\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"medications\" leftSection={<IconPill size={16} />}>\r\n            Medications\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"prescriptions\" leftSection={<IconFileText size={16} />}>\r\n            Prescriptions\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"inventory\" leftSection={<IconPackage size={16} />}>\r\n            Inventory\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"dispensing\" leftSection={<IconBottle size={16} />}>\r\n            Dispensing\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"interactions\" leftSection={<IconShieldCheck size={16} />}>\r\n            Drug Interactions\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconActivity size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Overview Tab */}\r\n        <Tabs.Panel value=\"overview\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Pharmacy Dashboard</Title>\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Medications by Category</Title>\r\n                <MantineDonutChart\r\n                  data={mockPharmacyStats.medicationsByCategory.map(item => ({\r\n                    name: item.category,\r\n                    value: item.count,\r\n                    color: getCategoryColor(item.category)\r\n                  }))}\r\n                  size={160}\r\n                  thickness={30}\r\n                  withLabels\r\n                />\r\n              </Card>\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Expiring Medications</Title>\r\n                <Stack gap=\"sm\">\r\n                  {mockPharmacyStats.expiringMedications.map((med, index) => (\r\n                    <Group key={index} justify=\"space-between\" p=\"sm\" style={{ backgroundColor: '#fff3cd', borderRadius: '6px' }}>\r\n                      <div>\r\n                        <Text size=\"sm\" fw={500}>{med.name}</Text>\r\n                        <Text size=\"xs\" c=\"dimmed\">Expires: {med.expiryDate}</Text>\r\n                      </div>\r\n                      <Badge color=\"orange\" size=\"sm\">{med.quantity} units</Badge>\r\n                    </Group>\r\n                  ))}\r\n                </Stack>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Medications Tab */}\r\n        <Tabs.Panel value=\"medications\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search medications...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Category\"\r\n                data={[\r\n                  { value: 'Analgesic', label: 'Analgesic' },\r\n                  { value: 'Antibiotic', label: 'Antibiotic' },\r\n                  { value: 'Cardiovascular', label: 'Cardiovascular' },\r\n                  { value: 'Antidiabetic', label: 'Antidiabetic' }\r\n                ]}\r\n                value={selectedCategory}\r\n                onChange={setSelectedCategory}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'in_stock', label: 'In Stock' },\r\n                  { value: 'low_stock', label: 'Low Stock' },\r\n                  { value: 'out_of_stock', label: 'Out of Stock' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Button variant=\"light\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Group>\r\n\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Medication</Table.Th>\r\n                    <Table.Th>Generic Name</Table.Th>\r\n                    <Table.Th>Category</Table.Th>\r\n                    <Table.Th>Stock</Table.Th>\r\n                    <Table.Th>Price</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredMedications.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={7}>\r\n                        <EmptyState\r\n                          icon={<IconPill size={48} />}\r\n                          title=\"No pharmacy records\"\r\n                          description=\"Manage pharmacy operations\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredMedications.map((medication) => (\r\n                      <Table.Tr key={medication.id}>\r\n                        <Table.Td>\r\n                          <Group>\r\n                            <ThemeIcon color={getCategoryColor(medication.category)} variant=\"light\">\r\n                              <IconPill size={16} />\r\n                            </ThemeIcon>\r\n                            <div>\r\n                              <Text fw={500}>{medication.name}</Text>\r\n                              <Text size=\"xs\" c=\"dimmed\">{medication.manufacturer}</Text>\r\n                            </div>\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>{medication.genericName || 'N/A'}</Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getCategoryColor(medication.category)} variant=\"light\">\r\n                            {medication.category}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text fw={medication.currentStock <= medication.minimumStock ? 700 : 500} \r\n                                c={medication.currentStock <= medication.minimumStock ? 'red' : undefined}>\r\n                            {medication.currentStock}\r\n                          </Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">Min: {medication.minimumStock}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>₹{medication.unitPrice}</Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getStatusColor(medication.status)} variant=\"light\">\r\n                            {medication.status.replace('_', ' ')}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon color=\"blue\" variant=\"subtle\" onClick={() => handleViewMedication(medication)}>\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon color=\"green\" variant=\"subtle\">\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                            <Menu>\r\n                              <Menu.Target>\r\n                                <ActionIcon color=\"gray\" variant=\"subtle\">\r\n                                  <IconDotsVertical size={16} />\r\n                                </ActionIcon>\r\n                              </Menu.Target>\r\n                              <Menu.Dropdown>\r\n                                <Menu.Item leftSection={<IconBarcode size={14} />}>Print Barcode</Menu.Item>\r\n                                <Menu.Item leftSection={<IconDownload size={14} />}>Export Details</Menu.Item>\r\n                                <Menu.Divider />\r\n                                <Menu.Item leftSection={<IconTrash size={14} />} color=\"red\">Delete</Menu.Item>\r\n                              </Menu.Dropdown>\r\n                            </Menu>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))\r\n                  )}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Analytics Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Pharmacy Analytics</Title>\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Revenue Trend</Title>\r\n                <SimpleLineChart\r\n                  data={[\r\n                    { month: 'Jan', revenue: 280000 },\r\n                    { month: 'Feb', revenue: 295000 },\r\n                    { month: 'Mar', revenue: 320000 },\r\n                    { month: 'Apr', revenue: 315000 },\r\n                    { month: 'May', revenue: 340000 },\r\n                    { month: 'Jun', revenue: 325000 }\r\n                  ]}\r\n                  dataKey=\"month\"\r\n                  series={[{ name: 'revenue', color: 'blue.6', label: 'Revenue' }]}\r\n                />\r\n              </Card>\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Top Selling Medications</Title>\r\n                <SimpleBarChart\r\n                  data={[\r\n                    { medication: 'Paracetamol', sales: 1500 },\r\n                    { medication: 'Amoxicillin', sales: 1200 },\r\n                    { medication: 'Metformin', sales: 800 },\r\n                    { medication: 'Amlodipine', sales: 600 },\r\n                    { medication: 'Omeprazole', sales: 500 }\r\n                  ]}\r\n                  dataKey=\"medication\"\r\n                  series={[{ name: 'sales', color: 'teal.6' }]}\r\n                />\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Prescriptions Tab */}\r\n        <Tabs.Panel value=\"prescriptions\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"md\">\r\n              <Title order={3}>Prescriptions</Title>\r\n              <Button leftSection={<IconPlus size={16} />} onClick={openNewPrescription}>\r\n                New Prescription\r\n              </Button>\r\n            </Group>\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Prescription ID</Table.Th>\r\n                    <Table.Th>Patient</Table.Th>\r\n                    <Table.Th>Doctor</Table.Th>\r\n                    <Table.Th>Date</Table.Th>\r\n                    <Table.Th>Medications</Table.Th>\r\n                    <Table.Th>Total</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredPrescriptions.map((prescription) => (\r\n                    <Table.Tr key={prescription.id}>\r\n                      <Table.Td>\r\n                        <Text fw={500}>{prescription.prescriptionId}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>{prescription.patientName}</Table.Td>\r\n                      <Table.Td>{prescription.doctorName}</Table.Td>\r\n                      <Table.Td>{prescription.date}</Table.Td>\r\n                      <Table.Td>{prescription.medications.length} items</Table.Td>\r\n                      <Table.Td>₹{prescription.totalAmount}</Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getStatusColor(prescription.status)} variant=\"light\">\r\n                          {prescription.status}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon color=\"blue\" variant=\"subtle\" onClick={() => handleViewPrescription(prescription)}>\r\n                            <IconEye size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon color=\"green\" variant=\"subtle\">\r\n                            <IconEdit size={16} />\r\n                          </ActionIcon>\r\n                        </Group>\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ))}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Inventory Tab */}\r\n        <Tabs.Panel value=\"inventory\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Inventory Management</Title>\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {filteredMedications.map((medication) => (\r\n                <Card key={medication.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <ThemeIcon color={getCategoryColor(medication.category)} variant=\"light\">\r\n                      <IconPill size={20} />\r\n                    </ThemeIcon>\r\n                    <Badge color={getStatusColor(medication.status)} variant=\"light\">\r\n                      {medication.status.replace('_', ' ')}\r\n                    </Badge>\r\n                  </Group>\r\n                  <Title order={5} mb=\"xs\">{medication.name}</Title>\r\n                  <Text size=\"sm\" c=\"dimmed\" mb=\"md\">{medication.genericName}</Text>\r\n                  <Stack gap=\"xs\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Current Stock</Text>\r\n                      <Text size=\"sm\" fw={600}>{medication.currentStock}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Min Stock</Text>\r\n                      <Text size=\"sm\" c=\"orange\">{medication.minimumStock}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Location</Text>\r\n                      <Text size=\"sm\">{medication.location}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Expiry</Text>\r\n                      <Text size=\"sm\">{medication.expiryDate}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n                  <Group justify=\"space-between\" mt=\"md\">\r\n                    <Button variant=\"light\" size=\"xs\" fullWidth>Adjust Stock</Button>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Dispensing Tab */}\r\n        <Tabs.Panel value=\"dispensing\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Medication Dispensing</Title>\r\n            <Stack gap=\"lg\">\r\n              {filteredPrescriptions.filter(p => p.status === 'pending').map((prescription) => (\r\n                <Card key={prescription.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{prescription.prescriptionId}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">Patient: {prescription.patientName}</Text>\r\n                    </div>\r\n                    <Badge color=\"orange\" variant=\"light\">Pending</Badge>\r\n                  </Group>\r\n                  <Stack gap=\"sm\">\r\n                    {prescription.medications.map((med, index) => (\r\n                      <Group key={index} justify=\"space-between\" p=\"sm\" style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>{med.name}</Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">{med.dosage} - {med.frequency}</Text>\r\n                        </div>\r\n                        <Text size=\"sm\" fw={600}>Qty: {med.quantity}</Text>\r\n                      </Group>\r\n                    ))}\r\n                  </Stack>\r\n                  <Group justify=\"flex-end\" mt=\"md\">\r\n                    <Button variant=\"light\">View Details</Button>\r\n                    <Button>Dispense</Button>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </Stack>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Drug Interactions Tab */}\r\n        <Tabs.Panel value=\"interactions\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Drug Interaction Checker</Title>\r\n            <Card padding=\"lg\" radius=\"md\" withBorder mb=\"lg\">\r\n              <Stack gap=\"md\">\r\n                <Select\r\n                  label=\"First Medication\"\r\n                  placeholder=\"Select medication\"\r\n                  data={[].map /* TODO: Fetch from API */(med => ({\r\n                    value: med.id,\r\n                    label: `${med.name} (${med.genericName || 'N/A'})`\r\n                  }))}\r\n                  searchable\r\n                />\r\n                <Select\r\n                  label=\"Second Medication\"\r\n                  placeholder=\"Select medication\"\r\n                  data={[].map /* TODO: Fetch from API */(med => ({\r\n                    value: med.id,\r\n                    label: `${med.name} (${med.genericName || 'N/A'})`\r\n                  }))}\r\n                  searchable\r\n                />\r\n                <Button fullWidth leftSection={<IconShieldCheck size={16} />}>\r\n                  Check Interactions\r\n                </Button>\r\n              </Stack>\r\n            </Card>\r\n            <Text c=\"dimmed\" ta=\"center\">\r\n              Select two medications to check for potential drug interactions\r\n            </Text>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Modals */}\r\n      {/* Medication Detail Modal */}\r\n      <Modal opened={medicationDetailOpened} onClose={closeMedicationDetail} title=\"Medication Details\" size=\"lg\">\r\n        {selectedMedication && (\r\n          <Stack gap=\"md\">\r\n            <Group>\r\n              <ThemeIcon color={getCategoryColor(selectedMedication.category)} size=\"xl\" variant=\"light\">\r\n                <IconPill size={24} />\r\n              </ThemeIcon>\r\n              <div>\r\n                <Title order={3}>{selectedMedication.name}</Title>\r\n                <Text c=\"dimmed\">{selectedMedication.genericName}</Text>\r\n                <Badge color={getStatusColor(selectedMedication.status)} variant=\"light\" mt=\"xs\">\r\n                  {selectedMedication.status.replace('_', ' ')}\r\n                </Badge>\r\n              </div>\r\n            </Group>\r\n            <Divider />\r\n            <SimpleGrid cols={2}>\r\n              <Text size=\"sm\"><strong>Manufacturer:</strong> {selectedMedication.manufacturer}</Text>\r\n              <Text size=\"sm\"><strong>Category:</strong> {selectedMedication.category}</Text>\r\n              <Text size=\"sm\"><strong>Unit Price:</strong> ₹{selectedMedication.unitPrice}</Text>\r\n              <Text size=\"sm\"><strong>Current Stock:</strong> {selectedMedication.currentStock}</Text>\r\n              <Text size=\"sm\"><strong>Min Stock:</strong> {selectedMedication.minimumStock}</Text>\r\n              <Text size=\"sm\"><strong>Batch:</strong> {selectedMedication.batchNumber}</Text>\r\n              <Text size=\"sm\"><strong>Expiry:</strong> {selectedMedication.expiryDate}</Text>\r\n              <Text size=\"sm\"><strong>Location:</strong> {selectedMedication.location}</Text>\r\n            </SimpleGrid>\r\n            <Group justify=\"flex-end\">\r\n              <Button variant=\"light\" onClick={closeMedicationDetail}>Close</Button>\r\n              <Button>Edit Medication</Button>\r\n            </Group>\r\n          </Stack>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Add Medication Modal */}\r\n      <Modal opened={addMedicationOpened} onClose={closeAddMedication} title=\"Add New Medication\" size=\"lg\">\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <TextInput label=\"Medication Name\" placeholder=\"Enter medication name\" required />\r\n            <TextInput label=\"Generic Name\" placeholder=\"Enter generic name\" />\r\n          </SimpleGrid>\r\n          <SimpleGrid cols={2}>\r\n            <TextInput label=\"Manufacturer\" placeholder=\"Enter manufacturer\" />\r\n            <Select\r\n              label=\"Category\"\r\n              placeholder=\"Select category\"\r\n              data={[\r\n                { value: 'Analgesic', label: 'Analgesic' },\r\n                { value: 'Antibiotic', label: 'Antibiotic' },\r\n                { value: 'Cardiovascular', label: 'Cardiovascular' },\r\n                { value: 'Antidiabetic', label: 'Antidiabetic' },\r\n                { value: 'Respiratory', label: 'Respiratory' },\r\n                { value: 'Neurological', label: 'Neurological' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          <SimpleGrid cols={3}>\r\n            <TextInput label=\"Unit Price (₹)\" placeholder=\"0.00\" type=\"number\" required />\r\n            <TextInput label=\"Current Stock\" placeholder=\"0\" type=\"number\" required />\r\n            <TextInput label=\"Minimum Stock\" placeholder=\"0\" type=\"number\" required />\r\n          </SimpleGrid>\r\n          <SimpleGrid cols={2}>\r\n            <TextInput label=\"Batch Number\" placeholder=\"Enter batch number\" />\r\n            <TextInput label=\"Expiry Date\" placeholder=\"YYYY-MM-DD\" type=\"date\" />\r\n          </SimpleGrid>\r\n          <TextInput label=\"Storage Location\" placeholder=\"e.g., A1-B2\" />\r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddMedication}>Cancel</Button>\r\n            <Button onClick={() => {\r\n              // Add medication logic here\r\n              closeAddMedication();\r\n            }}>Add Medication</Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* New Prescription Modal */}\r\n      <Modal opened={newPrescriptionOpened} onClose={closeNewPrescription} title=\"Create New Prescription\" size=\"xl\">\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <TextInput label=\"Patient Name\" placeholder=\"Search or enter patient name\" required />\r\n            <TextInput label=\"Doctor Name\" placeholder=\"Search or enter doctor name\" required />\r\n          </SimpleGrid>\r\n          <TextInput label=\"Prescription ID\" placeholder=\"Auto-generated\" disabled />\r\n          <Divider label=\"Medications\" labelPosition=\"center\" />\r\n          <Stack gap=\"sm\">\r\n            <Group>\r\n              <Select\r\n                label=\"Medication\"\r\n                placeholder=\"Select medication\"\r\n                data={[].map /* TODO: Fetch from API */(med => ({\r\n                  value: med.id,\r\n                  label: `${med.name} (${med.genericName || 'N/A'})`\r\n                }))}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Button variant=\"light\" leftSection={<IconPlus size={16} />} mt=\"xl\">\r\n                Add\r\n              </Button>\r\n            </Group>\r\n          </Stack>\r\n          <SimpleGrid cols={4}>\r\n            <TextInput label=\"Dosage\" placeholder=\"e.g., 500mg\" />\r\n            <TextInput label=\"Frequency\" placeholder=\"e.g., Twice daily\" />\r\n            <TextInput label=\"Duration\" placeholder=\"e.g., 5 days\" />\r\n            <TextInput label=\"Quantity\" placeholder=\"0\" type=\"number\" />\r\n          </SimpleGrid>\r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeNewPrescription}>Cancel</Button>\r\n            <Button onClick={() => {\r\n              // Create prescription logic here\r\n              closeNewPrescription();\r\n            }}>Create Prescription</Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* Prescription Detail Modal */}\r\n      <Modal opened={prescriptionDetailOpened} onClose={closePrescriptionDetail} title=\"Prescription Details\" size=\"lg\">\r\n        {selectedPrescription && (\r\n          <Stack gap=\"md\">\r\n            <Group justify=\"space-between\">\r\n              <div>\r\n                <Text fw={600} size=\"lg\">{selectedPrescription.prescriptionId}</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">Date: {selectedPrescription.date}</Text>\r\n              </div>\r\n              <Badge color={getStatusColor(selectedPrescription.status)} variant=\"light\" size=\"lg\">\r\n                {selectedPrescription.status}\r\n              </Badge>\r\n            </Group>\r\n            <Divider />\r\n            <SimpleGrid cols={2}>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Patient</Text>\r\n                <Text size=\"sm\">{selectedPrescription.patientName}</Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" fw={500}>Doctor</Text>\r\n                <Text size=\"sm\">{selectedPrescription.doctorName}</Text>\r\n              </div>\r\n            </SimpleGrid>\r\n            <Divider label=\"Medications\" labelPosition=\"center\" />\r\n            <Stack gap=\"sm\">\r\n              {selectedPrescription.medications.map((med: any, index: number) => (\r\n                <Card key={index} padding=\"sm\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\">\r\n                    <div>\r\n                      <Text fw={500}>{med.name}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">\r\n                        {med.dosage} • {med.frequency} • {med.duration}\r\n                      </Text>\r\n                    </div>\r\n                    <Text fw={600}>Qty: {med.quantity}</Text>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </Stack>\r\n            <Group justify=\"space-between\">\r\n              <Text fw={600}>Total Amount:</Text>\r\n              <Text fw={700} size=\"xl\">₹{selectedPrescription.totalAmount}</Text>\r\n            </Group>\r\n            <Group justify=\"flex-end\">\r\n              <Button variant=\"light\" onClick={closePrescriptionDetail}>Close</Button>\r\n              <Button>Print Prescription</Button>\r\n            </Group>\r\n          </Stack>\r\n        )}\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PharmacyManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\pharmacy\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 32,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 33,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Checkbox' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 34,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleBarChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 39,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 46,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 49,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 49,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 52,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedicineSyrup' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 55,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboardList' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 57,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShare' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 61,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFlask' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconExclamationMark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 63,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 63,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClockHour4' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 64,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUsers' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalculator' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSettings' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 69,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRefresh' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 71,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTemperature' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 73,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCircleCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 76,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReportMedical' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 78,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAtom' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 79,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHeartbeat' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 80,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrain' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 81,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 81,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 82,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconActivity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedicalCross' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 84,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStethoscope' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 89,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNotes' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 90,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 90,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 91,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 91,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTag' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 92,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlarm' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 93,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedSupplier' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 106,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 106,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedPrescription' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 108,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 108,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedDispensation' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 109,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 109,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'prescriptionDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 114,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 114,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closePrescriptionDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 114,
        "column": 75,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 114,
        "endColumn": 98
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'dispensationOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 115,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeDispensation' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 115,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 80
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.",
        "line": 127,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 127,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAllData]",
            "fix": { "range": [3415, 3417], "text": "[fetchAllData]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'fetchMedications' and 'loading'. Either include them or remove the dependency array.",
        "line": 204,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 204,
        "endColumn": 53,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [selectedCategory, selectedStatus, searchQuery, loading, fetchMedications]",
            "fix": {
              "range": [5971, 6018],
              "text": "[selectedCategory, selectedStatus, searchQuery, loading, fetchMedications]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'fetchOrders' and 'loading'. Either include them or remove the dependency array.",
        "line": 210,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 210,
        "endColumn": 46,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [activeTab, selectedStatus, searchQuery, loading, fetchOrders]",
            "fix": {
              "range": [6133, 6173],
              "text": "[activeTab, selectedStatus, searchQuery, loading, fetchOrders]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 48,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Alert,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Timeline,\r\n  List,\r\n  Tooltip,\r\n  Image,\r\n  Checkbox\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleLineChart, SimpleBarChart } from '../../../components/MantineChart';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconCalendar,\r\n  IconPill,\r\n  IconChartBar,\r\n  IconPhone,\r\n  IconMail,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconMedicineSyrup,\r\n  IconBottle,\r\n  IconClipboardList,\r\n  IconFileText,\r\n  IconDownload,\r\n  IconPrinter,\r\n  IconShare,\r\n  IconFlask,\r\n  IconExclamationMark,\r\n  IconClockHour4,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconUsers,\r\n  IconCalculator,\r\n  IconSettings,\r\n  IconRefresh,\r\n  IconFilter,\r\n  IconBarcode,\r\n  IconTemperature,\r\n  IconShieldCheck,\r\n  IconAlertTriangle,\r\n  IconCircleCheck,\r\n  IconClipboard,\r\n  IconReportMedical,\r\n  IconAtom,\r\n  IconHeartbeat,\r\n  IconBrain,\r\n  IconBone,\r\n  IconActivity,\r\n  IconMedicalCross,\r\n  IconPackage,\r\n  IconTruck,\r\n  IconCash,\r\n  IconReceipt,\r\n  IconStethoscope,\r\n  IconNotes,\r\n  IconClock,\r\n  IconTag,\r\n  IconAlarm,\r\n  IconInfoCircle\r\n} from '@tabler/icons-react';\r\n\r\n// Import types and services\r\nimport pharmacyService from '../../../services/pharmacy.service';\r\n// Mock data imports removed\r\nconst PharmacyManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('medications');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedSupplier, setSelectedSupplier] = useState<string>('');\r\n  const [selectedMedication, setSelectedMedication] = useState<any>(null);\r\n  const [selectedPrescription, setSelectedPrescription] = useState<any>(null);\r\n  const [selectedDispensation, setSelectedDispensation] = useState<any>(null);\r\n\r\n  // Modal states\r\n  const [medicationDetailOpened, { open: openMedicationDetail, close: closeMedicationDetail }] = useDisclosure(false);\r\n  const [addMedicationOpened, { open: openAddMedication, close: closeAddMedication }] = useDisclosure(false);\r\n  const [prescriptionDetailOpened, { open: openPrescriptionDetail, close: closePrescriptionDetail }] = useDisclosure(false);\r\n  const [dispensationOpened, { open: openDispensation, close: closeDispensation }] = useDisclosure(false);\r\n  const [interactionCheckOpened, { open: openInteractionCheck, close: closeInteractionCheck }] = useDisclosure(false);\r\n\r\n  // API data\r\n  const [pharmacyStats, setPharmacyStats] = useState<any>(null);\r\n  const [medications, setMedications] = useState<any>([]);\r\n  const [pharmacyOrders, setPharmacyOrders] = useState<any>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  const fetchAllData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      await Promise.all([\r\n        fetchStats(),\r\n        fetchMedications(),\r\n        fetchOrders()\r\n      ]);\r\n    } catch (err: any) {\r\n      console.error('Error loading pharmacy data:', err);\r\n      setError(err.response?.data?.message || err.message || 'Failed to load pharmacy data');\r\n      // Fallback to mock data\r\n      setPharmacyStats([] /* TODO: Fetch from API */);\r\n      setMedications([] /* TODO: Fetch from API */);\r\n      setPharmacyOrders([] /* TODO: Fetch from API */);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await pharmacyService.getPharmacyStats();\r\n      setPharmacyStats(response.data);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching pharmacy stats (using default values):', err.response?.data?.message || err.message);\r\n      // Set default stats when backend is unavailable\r\n      setPharmacyStats({\r\n        totalMedications: 0,\r\n        lowStockItems: 0,\r\n        expiringSoon: 0,\r\n        totalOrders: 0,\r\n        pendingOrders: 0,\r\n        completedOrders: 0\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchMedications = async () => {\r\n    try {\r\n      const filters = {\r\n        category: selectedCategory || undefined,\r\n        status: selectedStatus || undefined,\r\n        search: searchQuery || undefined\r\n      };\r\n      const response = await pharmacyService.getMedications(filters);\r\n      setMedications(response.data?.items || response.data || []);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching medications (using empty data):', err.response?.data?.message || err.message);\r\n      // Don't show error to user if backend is not ready, just use empty data\r\n      setMedications([]);\r\n    }\r\n  };\r\n\r\n  const fetchOrders = async () => {\r\n    try {\r\n      const filters = {\r\n        status: selectedStatus || undefined,\r\n        search: searchQuery || undefined\r\n      };\r\n      const response = await pharmacyService.getPharmacyOrders(filters);\r\n      setPharmacyOrders(response.data?.items || response.data || []);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching pharmacy orders (using empty data):', err.response?.data?.message || err.message);\r\n      // Don't show error to user if backend is not ready, just use empty data\r\n      setPharmacyOrders([]);\r\n    }\r\n  };\r\n\r\n  // Refetch when filters change\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      fetchMedications();\r\n    }\r\n  }, [selectedCategory, selectedStatus, searchQuery]);\r\n\r\n  useEffect(() => {\r\n    if (!loading && activeTab === 'prescriptions') {\r\n      fetchOrders();\r\n    }\r\n  }, [activeTab, selectedStatus, searchQuery]);\r\n\r\n  // Filter medications\r\n  const filteredMedications = useMemo(() => {\r\n    // Ensure medications is an array before filtering\r\n    if (!Array.isArray(medications)) return [];\r\n    return medications.filter((medication: any) => {\r\n      const matchesSearch =\r\n        medication.genericName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        medication.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        medication.brandName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        medication.drugCode?.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n      const matchesCategory = !selectedCategory || medication.category === selectedCategory;\r\n      const matchesStatus = !selectedStatus || medication.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesCategory && matchesStatus;\r\n    });\r\n  }, [medications, searchQuery, selectedCategory, selectedStatus]);\r\n\r\n  // Filter prescriptions\r\n  const filteredPrescriptions = useMemo(() => {\r\n    // Ensure pharmacyOrders is an array before filtering\r\n    if (!Array.isArray(pharmacyOrders)) return [];\r\n    return pharmacyOrders.filter((prescription: any) => {\r\n      const matchesSearch =\r\n        prescription.prescriptionNumber?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        prescription.prescriptionId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        prescription.patientName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        prescription.patient?.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        prescription.patient?.lastName?.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n      const matchesStatus = !selectedStatus || prescription.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [pharmacyOrders, searchQuery, selectedStatus]);\r\n\r\n  // Filter dispensations\r\n  const filteredDispensations = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((dispensation: any) => {\r\n      const matchesSearch =\r\n        dispensation.dispensationId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        dispensation.id?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        dispensation.prescriptionNumber?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        dispensation.prescriptionId?.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n      return matchesSearch;\r\n    });\r\n  }, [searchQuery]);\r\n\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'available':\r\n      case 'dispensed':\r\n      case 'completed': return 'green';\r\n      case 'low_stock':\r\n      case 'pending':\r\n      case 'partial': return 'orange';\r\n      case 'out_of_stock':\r\n      case 'cancelled':\r\n      case 'rejected': return 'red';\r\n      case 'expired':\r\n      case 'on_hold': return 'yellow';\r\n      case 'discontinued': return 'dark';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getCategoryColor = (category: string) => {\r\n    switch (category) {\r\n      case 'antibiotic': return 'green';\r\n      case 'analgesic': return 'blue';\r\n      case 'cardiovascular': return 'red';\r\n      case 'diabetes': return 'purple';\r\n      case 'respiratory': return 'cyan';\r\n      case 'gastrointestinal': return 'orange';\r\n      case 'neurological': return 'pink';\r\n      case 'dermatological': return 'yellow';\r\n      case 'hormonal': return 'indigo';\r\n      case 'oncology': return 'dark';\r\n      case 'psychiatric': return 'teal';\r\n      case 'ophthalmology': return 'lime';\r\n      case 'immunosuppressant': return 'violet';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getSeverityColor = (severity: string) => {\r\n    switch (severity) {\r\n      case 'mild': return 'green';\r\n      case 'moderate': return 'yellow';\r\n      case 'severe': return 'orange';\r\n      case 'contraindicated': return 'red';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const handleViewMedication = (medication: any) => {\r\n    setSelectedMedication(medication);\r\n    openMedicationDetail();\r\n  };\r\n\r\n  const handleViewPrescription = (prescription: any) => {\r\n    setSelectedPrescription(prescription);\r\n    openPrescriptionDetail();\r\n  };\r\n\r\n  const handleDispenseMedication = (dispensation: any) => {\r\n    setSelectedDispensation(dispensation);\r\n    openDispensation();\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchQuery('');\r\n    setSelectedCategory('');\r\n    setSelectedStatus('');\r\n    setSelectedSupplier('');\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-IN', {\r\n      style: 'currency',\r\n      currency: 'INR'\r\n    }).format(amount);\r\n  };\r\n\r\n  const getStockLevel = (current: number, minimum: number) => {\r\n    if (current === 0) return { level: 'Out of Stock', color: 'red', percentage: 0 };\r\n    if (current <= minimum) return { level: 'Low Stock', color: 'orange', percentage: 30 };\r\n    if (current <= minimum * 2) return { level: 'Normal', color: 'blue', percentage: 70 };\r\n    return { level: 'Well Stocked', color: 'green', percentage: 100 };\r\n  };\r\n  // Statistics cards\r\n  const statsCards = [\r\n    {\r\n      title: 'Total Medications',\r\n      value: pharmacyStats?.totalMedications || 0,\r\n      icon: IconPill,\r\n      color: 'blue',\r\n      trend: '+3.2%'\r\n    },\r\n    {\r\n      title: 'Low Stock Items',\r\n      value: pharmacyStats?.lowStockMedications || 0,\r\n      icon: IconAlertCircle,\r\n      color: 'orange',\r\n      trend: '-8%'\r\n    },\r\n    {\r\n      title: 'Pending Orders',\r\n      value: pharmacyStats?.pendingOrders || 0,\r\n      icon: IconReceipt,\r\n      color: 'green',\r\n      trend: '+12.5%'\r\n    },\r\n    {\r\n      title: 'Revenue Today',\r\n      value: formatCurrency(pharmacyStats?.totalRevenue || 0),\r\n      icon: IconCash,\r\n      color: 'purple',\r\n      trend: '+18.3%'\r\n    }\r\n  ];\r\n\r\n  // Chart data\r\n  const categoryDistribution = pharmacyStats?.medicationsByCategory\r\n    ? Array.isArray(pharmacyStats.medicationsByCategory)\r\n      ? pharmacyStats.medicationsByCategory.map((item: any) => ({\r\n          name: item.category?.replace('_', ' ').toUpperCase() || 'Unknown',\r\n          value: item.count || 0,\r\n          color: getCategoryColor(item.category || '')\r\n        }))\r\n      : Object.entries(pharmacyStats.medicationsByCategory).map(([category, count]) => ({\r\n          name: category.replace('_', ' ').toUpperCase(),\r\n          value: typeof count === 'number' ? count : (count as any).count || 0,\r\n          color: getCategoryColor(category)\r\n        }))\r\n    : [];\r\n\r\n  const prescriptionTrends = pharmacyStats?.prescriptionTrends || [];\r\n  const revenueData = pharmacyStats?.revenueData || [];\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Pharmacy Management</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage medications, prescriptions, dispensing, and drug interactions\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={openAddMedication}\r\n          >\r\n            Add Medication\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconShieldCheck size={16} />}\r\n            onClick={openInteractionCheck}\r\n          >\r\n            Check Interactions\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Alert icon={<IconAlertCircle size=\"1rem\" />} title=\"Error\" color=\"red\" variant=\"light\" mb=\"lg\">\r\n          {error} - Using cached data\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Statistics Cards */}\r\n      {loading ? (\r\n        <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n          {[1, 2, 3, 4].map((i) => (\r\n            <Card key={i} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <div style={{ height: '1rem', width: '100px', backgroundColor: '#e9ecef', borderRadius: '4px', marginBottom: '8px' }} />\r\n                  <div style={{ height: '2rem', width: '80px', backgroundColor: '#e9ecef', borderRadius: '4px' }} />\r\n                </div>\r\n                <div style={{ width: '40px', height: '40px', backgroundColor: '#e9ecef', borderRadius: '8px' }} />\r\n              </Group>\r\n              <Group justify=\"space-between\" mt=\"sm\">\r\n                <div style={{ height: '1rem', width: '50px', backgroundColor: '#e9ecef', borderRadius: '4px' }} />\r\n                <div style={{ height: '0.75rem', width: '80px', backgroundColor: '#e9ecef', borderRadius: '4px' }} />\r\n              </Group>\r\n            </Card>\r\n          ))}\r\n        </SimpleGrid>\r\n      ) : (\r\n        <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n          {statsCards.map((stat) => {\r\n            const Icon = stat.icon;\r\n            return (\r\n              <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                      {stat.title}\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stat.value}\r\n                    </Text>\r\n                  </div>\r\n                  <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                    <Icon size={24} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n                <Group justify=\"space-between\" mt=\"sm\">\r\n                  <Badge\r\n                    color={stat.trend.startsWith('+') ? 'green' : 'red'}\r\n                    variant=\"light\"\r\n                    size=\"sm\"\r\n                  >\r\n                    {stat.trend}\r\n                  </Badge>\r\n                  <Text size=\"xs\" c=\"dimmed\">vs yesterday</Text>\r\n                </Group>\r\n              </Card>\r\n            );\r\n          })}\r\n        </SimpleGrid>\r\n      )}\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"medications\" leftSection={<IconPill size={16} />}>\r\n            Medications\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"prescriptions\" leftSection={<IconReceipt size={16} />}>\r\n            Prescriptions\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"dispensing\" leftSection={<IconBottle size={16} />}>\r\n            Dispensing\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"inventory\" leftSection={<IconPackage size={16} />}>\r\n            Inventory\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"interactions\" leftSection={<IconAlertTriangle size={16} />}>\r\n            Drug Interactions\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"reports\" leftSection={<IconChartBar size={16} />}>\r\n            Reports\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Medications Tab */}\r\n        <Tabs.Panel value=\"medications\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search medications...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Category\"\r\n                data={[\r\n                  { value: 'antibiotic', label: 'Antibiotic' },\r\n                  { value: 'analgesic', label: 'Analgesic' },\r\n                  { value: 'cardiovascular', label: 'Cardiovascular' },\r\n                  { value: 'diabetes', label: 'Diabetes' },\r\n                  { value: 'respiratory', label: 'Respiratory' },\r\n                  { value: 'gastrointestinal', label: 'Gastrointestinal' },\r\n                  { value: 'neurological', label: 'Neurological' }\r\n                ]}\r\n                value={selectedCategory}\r\n                onChange={setSelectedCategory}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'available', label: 'Available' },\r\n                  { value: 'low_stock', label: 'Low Stock' },\r\n                  { value: 'out_of_stock', label: 'Out of Stock' },\r\n                  { value: 'expired', label: 'Expired' },\r\n                  { value: 'discontinued', label: 'Discontinued' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Button variant=\"light\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Loading State for Medications */}\r\n            {loading && medications.length === 0 ? (\r\n              <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '200px' }}>\r\n                <div>\r\n                  <div style={{ width: '40px', height: '40px', border: '3px solid #e9ecef', borderTop: '3px solid #228be6', borderRadius: '50%', animation: 'spin 1s linear infinite', margin: '0 auto 16px' }} />\r\n                  <Text c=\"dimmed\" ta=\"center\">Loading medications...</Text>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {/* Medications Grid */}\r\n                <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n                  {filteredMedications.map((medication: any) => {\r\n                    const stockInfo = getStockLevel(medication.quantityInStock || medication.currentStock || 0, medication.minimumStockLevel || medication.minimumStock || 0);\r\n\r\n                    return (\r\n                      <Card key={medication.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                        <Group justify=\"space-between\" mb=\"md\">\r\n                          <div style={{ flex: 1 }}>\r\n                            <Group>\r\n                              <ThemeIcon\r\n                                color={getCategoryColor(medication.category)}\r\n                                variant=\"light\"\r\n                                size=\"lg\"\r\n                              >\r\n                                <IconPill size={20} />\r\n                              </ThemeIcon>\r\n                              <div>\r\n                                <Text fw={600} size=\"sm\" lineClamp={1}>\r\n                                  {medication.brandName || medication.name || medication.genericName || 'N/A'}\r\n                                </Text>\r\n                                <Text size=\"xs\" c=\"dimmed\">\r\n                                  {medication.genericName || medication.name || 'N/A'}\r\n                                </Text>\r\n                              </div>\r\n                            </Group>\r\n                          </div>\r\n                          <Badge color={getStatusColor(medication.status)} variant=\"light\" size=\"sm\">\r\n                            {medication.status?.replace('_', ' ') || 'N/A'}\r\n                          </Badge>\r\n                        </Group>\r\n\r\n                        <Stack gap=\"sm\" mb=\"md\">\r\n                          <Group justify=\"space-between\">\r\n                            <Text size=\"sm\" c=\"dimmed\">Drug Code</Text>\r\n                            <Text size=\"sm\" fw={500}>{medication.drugCode || medication.batchNumber || 'N/A'}</Text>\r\n                          </Group>\r\n\r\n                          <Group justify=\"space-between\">\r\n                            <Text size=\"sm\" c=\"dimmed\">Strength</Text>\r\n                            <Text size=\"sm\" fw={500}>{medication.strength || 'N/A'}</Text>\r\n                          </Group>\r\n\r\n                          <Group justify=\"space-between\">\r\n                            <Text size=\"sm\" c=\"dimmed\">Form</Text>\r\n                            <Text size=\"sm\">{medication.dosageForm || 'N/A'}</Text>\r\n                          </Group>\r\n\r\n                          <Group justify=\"space-between\">\r\n                            <Text size=\"sm\" c=\"dimmed\">Price</Text>\r\n                            <Text size=\"sm\" fw={600}>{formatCurrency(medication.unitPrice || 0)}</Text>\r\n                          </Group>\r\n\r\n                          <div>\r\n                            <Group justify=\"space-between\" mb=\"xs\">\r\n                              <Text size=\"sm\" c=\"dimmed\">Stock Level</Text>\r\n                              <Text size=\"xs\" c={stockInfo.color} fw={500}>\r\n                                {stockInfo.level}\r\n                              </Text>\r\n                            </Group>\r\n                            <Group justify=\"space-between\" mb=\"xs\">\r\n                              <Text size=\"xs\" c=\"dimmed\">Available: {medication.quantityInStock}</Text>\r\n                              <Text size=\"xs\" c=\"dimmed\">Min: {medication.minimumStockLevel}</Text>\r\n                            </Group>\r\n                            <Progress value={stockInfo.percentage} color={stockInfo.color} size=\"sm\" />\r\n                          </div>\r\n\r\n                          {medication.expiryDate && (\r\n                            <Group justify=\"space-between\">\r\n                              <Text size=\"sm\" c=\"dimmed\">Expires</Text>\r\n                              <Text\r\n                                size=\"sm\"\r\n                                c={new Date(medication.expiryDate) < new Date() ? 'red' : 'dimmed'}\r\n                              >\r\n                                {medication.expiryDate ? (typeof medication.expiryDate === 'string' ? medication.expiryDate : new Date(medication.expiryDate).toISOString().split('T')[0]) : 'N/A'}\r\n                              </Text>\r\n                            </Group>\r\n                          )}\r\n                        </Stack>\r\n\r\n                        <Group justify=\"space-between\">\r\n                          <Badge color={getCategoryColor(medication.category)} variant=\"light\" size=\"xs\">\r\n                            {medication.category.replace('_', ' ')}\r\n                          </Badge>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon\r\n                              variant=\"subtle\"\r\n                              color=\"blue\"\r\n                              onClick={() => handleViewMedication(medication)}\r\n                            >\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"green\">\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                            <Menu>\r\n                              <Menu.Target>\r\n                                <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                                  <IconDotsVertical size={16} />\r\n                                </ActionIcon>\r\n                              </Menu.Target>\r\n                              <Menu.Dropdown>\r\n                                <Menu.Item leftSection={<IconBarcode size={14} />}>\r\n                                  Print Barcode\r\n                                </Menu.Item>\r\n                                <Menu.Item leftSection={<IconPackage size={14} />}>\r\n                                  Restock\r\n                                </Menu.Item>\r\n                                <Menu.Item leftSection={<IconShieldCheck size={14} />}>\r\n                                  Check Interactions\r\n                                </Menu.Item>\r\n                                <Menu.Divider />\r\n                                <Menu.Item\r\n                                  leftSection={<IconTrash size={14} />}\r\n                                  color=\"red\"\r\n                                >\r\n                                  Delete\r\n                                </Menu.Item>\r\n                              </Menu.Dropdown>\r\n                            </Menu>\r\n                          </Group>\r\n                        </Group>\r\n                      </Card>\r\n                    );\r\n                  })}\r\n                </SimpleGrid>\r\n              </>\r\n            )}\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Prescriptions Tab */}\r\n        <Tabs.Panel value=\"prescriptions\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Prescriptions</Title>\r\n              <Group>\r\n                <Button leftSection={<IconBarcode size={16} />} variant=\"light\">\r\n                  Scan Prescription\r\n                </Button>\r\n                <Button leftSection={<IconPlus size={16} />}>\r\n                  Manual Entry\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Prescription Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search prescriptions...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'pending', label: 'Pending' },\r\n                  { value: 'partial', label: 'Partial' },\r\n                  { value: 'dispensed', label: 'Dispensed' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'cancelled', label: 'Cancelled' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Prescriptions Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Prescription #</Table.Th>\r\n                    <Table.Th>Patient</Table.Th>\r\n                    <Table.Th>Doctor</Table.Th>\r\n                    <Table.Th>Date</Table.Th>\r\n                    <Table.Th>Medications</Table.Th>\r\n                    <Table.Th>Total</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredPrescriptions.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={8}>\r\n                        <EmptyState\r\n                          icon={<IconPill size={48} />}\r\n                          title=\"No prescriptions\"\r\n                          description=\"Prescriptions will appear here once created\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredPrescriptions.map((prescription) => (\r\n                    <Table.Tr key={prescription.id}>\r\n                      <Table.Td>\r\n                        <Text fw={500}>{(prescription as any).prescriptionNumber || prescription.prescriptionId || 'N/A'}</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group>\r\n                          <Avatar color=\"blue\" radius=\"xl\" size=\"sm\">\r\n                            {(prescription as any).patient?.firstName?.[0] || prescription.patientName?.[0] || 'P'}{(prescription as any).patient?.lastName?.[0] || 'S'}\r\n                          </Avatar>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>\r\n                              {(prescription as any).patient?.firstName || prescription.patientName || 'N/A'} {(prescription as any).patient?.lastName || ''}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              {(prescription as any).patient?.patientId || (prescription as any).patient?.id || 'N/A'}\r\n                            </Text>\r\n                          </div>\r\n                        </Group>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>\r\n                            {(prescription as any).prescribingDoctor?.firstName || prescription.doctorName || 'N/A'} {(prescription as any).prescribingDoctor?.lastName || ''}\r\n                          </Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">\r\n                            {(prescription as any).prescribingDoctor?.department?.name || 'N/A'}\r\n                          </Text>\r\n                        </div>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">\r\n                          {(prescription as any).prescriptionDate || prescription.date ? (typeof ((prescription as any).prescriptionDate || prescription.date) === 'string' ? ((prescription as any).prescriptionDate || prescription.date) : new Date((prescription as any).prescriptionDate || prescription.date).toISOString().split('T')[0]) : 'N/A'}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text size=\"sm\">{prescription.medications?.length || 0} items</Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Text fw={600}>\r\n                          {formatCurrency(prescription.medications?.reduce((sum: number, med: any) => sum + (med.cost || med.unitPrice || 0), 0) || prescription.totalAmount || 0)}\r\n                        </Text>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getStatusColor(prescription.status)} variant=\"light\">\r\n                          {prescription.status}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon\r\n                            variant=\"subtle\"\r\n                            color=\"blue\"\r\n                            onClick={() => handleViewPrescription(prescription)}\r\n                          >\r\n                            <IconEye size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"green\">\r\n                            <IconBottle size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                            <IconPrinter size={16} />\r\n                          </ActionIcon>\r\n                        </Group>\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  )))}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Dispensing Tab */}\r\n        <Tabs.Panel value=\"dispensing\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Medication Dispensing</Title>\r\n              <Button leftSection={<IconBottle size={16} />}>\r\n                New Dispensation\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Dispensing Queue */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {filteredDispensations.map((dispensation: any) => (\r\n                <Card key={dispensation.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{dispensation.dispensationId || dispensation.id || 'N/A'}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        Prescription: {dispensation.prescriptionNumber || dispensation.prescriptionId || 'N/A'}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge \r\n                      color={dispensation.isCompleted || dispensation.status === 'completed' ? 'green' : 'orange'} \r\n                      variant=\"light\"\r\n                    >\r\n                      {dispensation.isCompleted || dispensation.status === 'completed' ? 'Completed' : 'Pending'}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Patient</Text>\r\n                      <Text size=\"sm\" fw={500}>{dispensation.patientName}</Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Dispensed By</Text>\r\n                      <Text size=\"sm\">{dispensation.dispensedBy || 'N/A'}</Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {(dispensation.dispensationDate || dispensation.date) ? (typeof (dispensation.dispensationDate || dispensation.date) === 'string' ? (dispensation.dispensationDate || dispensation.date) : new Date(dispensation.dispensationDate || dispensation.date).toISOString().split('T')[0]) : 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Total Amount</Text>\r\n                      <Text size=\"sm\" fw={600}>{formatCurrency(dispensation.totalAmount)}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500} mb=\"sm\">Medications</Text>\r\n                    <Stack gap=\"xs\">\r\n                      {dispensation.medications.slice(0, 3).map((med, index) => (\r\n                        <Group key={index} justify=\"space-between\" p=\"xs\" \r\n                               style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                          <Text size=\"sm\">{med.medicationName || med.name || 'N/A'}</Text>\r\n                          <Text size=\"sm\" fw={500}>Qty: {med.quantityDispensed || med.quantity || 0}</Text>\r\n                        </Group>\r\n                      ))}\r\n                      {dispensation.medications.length > 3 && (\r\n                        <Text size=\"xs\" c=\"dimmed\" ta=\"center\">\r\n                          +{dispensation.medications.length - 3} more medications\r\n                        </Text>\r\n                      )}\r\n                    </Stack>\r\n                  </div>\r\n\r\n                  {(dispensation.notes || dispensation.specialInstructions) && (\r\n                    <Alert variant=\"light\" color=\"blue\" mt=\"md\">\r\n                      <Text size=\"sm\">{dispensation.notes || dispensation.specialInstructions}</Text>\r\n                    </Alert>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\" mt=\"md\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Payment: {dispensation.paymentMethod || 'N/A'}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleDispenseMedication(dispensation)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconReceipt size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconPrinter size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Inventory Tab */}\r\n        <Tabs.Panel value=\"inventory\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Pharmacy Inventory</Title>\r\n              <Group>\r\n                <Button leftSection={<IconTruck size={16} />} variant=\"light\">\r\n                  Stock Arrival\r\n                </Button>\r\n                <Button leftSection={<IconPackage size={16} />}>\r\n                  Stock Adjustment\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Inventory Overview */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((item: any) => {\r\n                const stockInfo = getStockLevel(item.currentStock, item.minimumStock);\r\n                \r\n                return (\r\n                  <Card key={item.id} padding=\"md\" radius=\"md\" withBorder>\r\n                    <Group justify=\"space-between\" mb=\"sm\">\r\n                      <Text fw={600} size=\"sm\" lineClamp={1}>\r\n                        {item.medicationName || item.name || item.genericName || 'N/A'}\r\n                      </Text>\r\n                      <Badge color={stockInfo.color} variant=\"light\" size=\"xs\">\r\n                        {stockInfo.level}\r\n                      </Badge>\r\n                    </Group>\r\n\r\n                    <Stack gap=\"xs\" mb=\"sm\">\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"xs\" c=\"dimmed\">Current Stock</Text>\r\n                        <Text size=\"xs\" fw={500}>{item.currentStock} {item.unit || 'units'}</Text>\r\n                      </Group>\r\n                      \r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"xs\" c=\"dimmed\">Min Stock</Text>\r\n                        <Text size=\"xs\" c=\"orange\">{item.minimumStock}</Text>\r\n                      </Group>\r\n                      \r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"xs\" c=\"dimmed\">Max Stock</Text>\r\n                        <Text size=\"xs\" c=\"green\">{item.maximumStock || item.minimumStock * 3 || 0}</Text>\r\n                      </Group>\r\n\r\n                      <Progress value={stockInfo.percentage} color={stockInfo.color} size=\"sm\" />\r\n                    </Stack>\r\n\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"xs\" c=\"dimmed\">{item.location}</Text>\r\n                      <Group gap=\"xs\">\r\n                        <ActionIcon variant=\"subtle\" color=\"blue\" size=\"sm\">\r\n                          <IconEye size={12} />\r\n                        </ActionIcon>\r\n                        <ActionIcon variant=\"subtle\" color=\"green\" size=\"sm\">\r\n                          <IconPackage size={12} />\r\n                        </ActionIcon>\r\n                      </Group>\r\n                    </Group>\r\n                  </Card>\r\n                );\r\n              })}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Drug Interactions Tab */}\r\n        <Tabs.Panel value=\"interactions\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Drug Interactions</Title>\r\n              <Button leftSection={<IconShieldCheck size={16} />} onClick={openInteractionCheck}>\r\n                Check Interaction\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Critical Interactions Alert */}\r\n            <Alert \r\n              variant=\"light\" \r\n              color=\"red\" \r\n              title=\"Critical Drug Interactions\" \r\n              icon={<IconAlertTriangle size={16} />}\r\n              mb=\"lg\"\r\n            >\r\n              <Text size=\"sm\">\r\n                {[].filter /* TODO: Fetch from API */(i => i.severity === 'contraindicated').length} contraindicated interactions found in current prescriptions.\r\n              </Text>\r\n            </Alert>\r\n\r\n            {/* Interactions List */}\r\n            <Stack gap=\"md\">\r\n              {[].map /* TODO: Fetch from API */((interaction: any) => (\r\n                <Card key={interaction.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">\r\n                        {interaction.drug1 || interaction.drugA || 'Drug A'} + {interaction.drug2 || interaction.drugB || 'Drug B'}\r\n                      </Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        Interaction Type: {interaction.interactionType || 'Drug Interaction'}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge color={getSeverityColor(interaction.severity)} variant=\"light\" size=\"lg\">\r\n                      {interaction.severity.toUpperCase()}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Text size=\"sm\" mb=\"md\">\r\n                    <strong>Description:</strong> {interaction.description}\r\n                  </Text>\r\n\r\n                  {interaction.clinicalSignificance && (\r\n                    <Alert variant=\"light\" color=\"orange\" mb=\"md\">\r\n                      <Text size=\"sm\">\r\n                        <strong>Clinical Significance:</strong> {interaction.clinicalSignificance}\r\n                      </Text>\r\n                    </Alert>\r\n                  )}\r\n\r\n                  {interaction.management && (\r\n                    <div>\r\n                      <Text size=\"sm\" fw={500} mb=\"xs\">Management:</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        {interaction.management}\r\n                      </Text>\r\n                    </div>\r\n                  )}\r\n                </Card>\r\n              ))}\r\n            </Stack>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Reports Tab */}\r\n        <Tabs.Panel value=\"reports\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Pharmacy Reports & Analytics</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {/* Medication Distribution */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Medications by Category</Title>\r\n                <MantineDonutChart\r\n                  data={categoryDistribution}\r\n                  size={160}\r\n                  thickness={30}\r\n                  withLabels\r\n                />\r\n              </Card>\r\n              \r\n              {/* Prescription Trends */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Daily Prescription Volume</Title>\r\n                <SimpleAreaChart\r\n                  data={prescriptionTrends}\r\n                  dataKey=\"date\"\r\n                  series={[{ name: 'prescriptions', color: 'blue.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Monthly Revenue */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder style={{ gridColumn: '1 / -1' }}>\r\n                <Title order={4} mb=\"md\">Monthly Pharmacy Revenue</Title>\r\n                <SimpleLineChart\r\n                  data={revenueData}\r\n                  dataKey=\"month\"\r\n                  series={[\r\n                    { name: 'revenue', color: 'green.6', label: 'Revenue' },\r\n                    { name: 'profit', color: 'blue.6', label: 'Profit' }\r\n                  ]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Key Performance Indicators */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Key Performance Indicators</Title>\r\n                <Stack gap=\"md\">\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Dispensing Accuracy</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"green\">\r\n                      {pharmacyStats?.dispensingAccuracy || 99}%\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Average Wait Time</Text>\r\n                    <Text size=\"sm\" fw={600}>\r\n                      {pharmacyStats?.averageWaitTime || 5} min\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Inventory Turnover</Text>\r\n                    <Text size=\"sm\" fw={600}>\r\n                      {pharmacyStats?.inventoryTurnover || 12}x\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Customer Satisfaction</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"green\">\r\n                      {pharmacyStats?.customerSatisfaction || 95}%\r\n                    </Text>\r\n                  </Group>\r\n                </Stack>\r\n              </Card>\r\n              \r\n              {/* Quick Actions */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Quick Reports</Title>\r\n                <Stack gap=\"sm\">\r\n                  <Button fullWidth leftSection={<IconDownload size={16} />} variant=\"light\">\r\n                    Export Sales Report\r\n                  </Button>\r\n                  <Button fullWidth leftSection={<IconFileText size={16} />} variant=\"light\">\r\n                    Inventory Aging Report\r\n                  </Button>\r\n                  <Button fullWidth leftSection={<IconAlertTriangle size={16} />} variant=\"light\">\r\n                    Drug Interaction Report\r\n                  </Button>\r\n                  <Button fullWidth leftSection={<IconChartBar size={16} />} variant=\"light\">\r\n                    Performance Analytics\r\n                  </Button>\r\n                </Stack>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Medication Detail Modal */}\r\n      <Modal\r\n        opened={medicationDetailOpened}\r\n        onClose={closeMedicationDetail}\r\n        title=\"Medication Details\"\r\n        size=\"lg\"\r\n      >\r\n        {selectedMedication && (\r\n          <ScrollArea h={500}>\r\n            <Stack gap=\"md\">\r\n              <Group>\r\n                <ThemeIcon \r\n                  color={getCategoryColor(selectedMedication.category)} \r\n                  size=\"xl\" \r\n                  variant=\"light\"\r\n                >\r\n                  <IconPill size={24} />\r\n                </ThemeIcon>\r\n                <div>\r\n                  <Title order={3}>{selectedMedication.brandName || selectedMedication.name || selectedMedication.genericName}</Title>\r\n                  <Text c=\"dimmed\">{selectedMedication.genericName || selectedMedication.name}</Text>\r\n                  <Badge color={getStatusColor(selectedMedication.status)} variant=\"light\" mt=\"xs\">\r\n                    {selectedMedication.status?.replace('_', ' ') || 'N/A'}\r\n                  </Badge>\r\n                </div>\r\n              </Group>\r\n\r\n              <Divider />\r\n\r\n              <SimpleGrid cols={2}>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Drug Code</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedMedication.drugCode || selectedMedication.batchNumber || 'N/A'}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Category</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedMedication.category}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Strength</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedMedication.strength}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Form</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedMedication.dosageForm}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Unit Price</Text>\r\n                  <Text size=\"sm\" fw={600}>{formatCurrency(selectedMedication.unitPrice)}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Stock</Text>\r\n                  <Text size=\"sm\" fw={600}>{selectedMedication.quantityInStock}</Text>\r\n                </div>\r\n              </SimpleGrid>\r\n\r\n              <div>\r\n                <Text size=\"sm\" fw={500} mb=\"sm\">Description</Text>\r\n                <Text size=\"sm\">{selectedMedication.description}</Text>\r\n              </div>\r\n\r\n              {selectedMedication.sideEffects && selectedMedication.sideEffects.length > 0 && (\r\n                <div>\r\n                  <Text size=\"sm\" fw={500} mb=\"sm\">Side Effects</Text>\r\n                  <List size=\"sm\">\r\n                    {selectedMedication.sideEffects.map((effect, index) => (\r\n                      <List.Item key={index}>{effect}</List.Item>\r\n                    ))}\r\n                  </List>\r\n                </div>\r\n              )}\r\n\r\n              {selectedMedication.contraindications && selectedMedication.contraindications.length > 0 && (\r\n                <div>\r\n                  <Text size=\"sm\" fw={500} mb=\"sm\">Contraindications</Text>\r\n                  <List size=\"sm\">\r\n                    {selectedMedication.contraindications.map((contraindication, index) => (\r\n                      <List.Item key={index}>{contraindication}</List.Item>\r\n                    ))}\r\n                  </List>\r\n                </div>\r\n              )}\r\n\r\n              <Group justify=\"flex-end\">\r\n                <Button variant=\"light\" onClick={closeMedicationDetail}>\r\n                  Close\r\n                </Button>\r\n                <Button>\r\n                  Edit Medication\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </ScrollArea>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Add Medication Modal */}\r\n      <Modal\r\n        opened={addMedicationOpened}\r\n        onClose={closeAddMedication}\r\n        title=\"Add New Medication\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"Brand Name\"\r\n              placeholder=\"Enter brand name\"\r\n              required\r\n            />\r\n            <TextInput\r\n              label=\"Generic Name\"\r\n              placeholder=\"Enter generic name\"\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"Drug Code\"\r\n              placeholder=\"Enter drug code\"\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Category\"\r\n              placeholder=\"Select category\"\r\n              data={[\r\n                { value: 'antibiotic', label: 'Antibiotic' },\r\n                { value: 'analgesic', label: 'Analgesic' },\r\n                { value: 'cardiovascular', label: 'Cardiovascular' },\r\n                { value: 'diabetes', label: 'Diabetes' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={3}>\r\n            <TextInput\r\n              label=\"Strength\"\r\n              placeholder=\"e.g., 500mg\"\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Dosage Form\"\r\n              placeholder=\"Select form\"\r\n              data={[\r\n                { value: 'tablet', label: 'Tablet' },\r\n                { value: 'capsule', label: 'Capsule' },\r\n                { value: 'syrup', label: 'Syrup' },\r\n                { value: 'injection', label: 'Injection' }\r\n              ]}\r\n              required\r\n            />\r\n            <NumberInput\r\n              label=\"Unit Price\"\r\n              placeholder=\"Enter price\"\r\n              leftSection=\"₹\"\r\n              min={0}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <NumberInput\r\n              label=\"Initial Stock\"\r\n              placeholder=\"Enter quantity\"\r\n              min={0}\r\n              required\r\n            />\r\n            <NumberInput\r\n              label=\"Minimum Stock Level\"\r\n              placeholder=\"Min stock alert\"\r\n              min={0}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Description\"\r\n            placeholder=\"Enter medication description\"\r\n            rows={3}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddMedication}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Success',\r\n                message: 'Medication added successfully',\r\n                color: 'green',\r\n              });\r\n              closeAddMedication();\r\n            }}>\r\n              Add Medication\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* Interaction Check Modal */}\r\n      <Modal\r\n        opened={interactionCheckOpened}\r\n        onClose={closeInteractionCheck}\r\n        title=\"Drug Interaction Checker\"\r\n        size=\"md\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <Alert variant=\"light\" color=\"blue\" icon={<IconInfoCircle size={16} />}>\r\n            Select medications to check for potential interactions\r\n          </Alert>\r\n          \r\n          <Select\r\n            label=\"First Medication\"\r\n            placeholder=\"Select medication\"\r\n            data={[].map /* TODO: Fetch from API */((med: any) => ({ \r\n              value: med.id, \r\n              label: `${med.brandName || med.name || med.genericName} (${med.genericName || med.name})` \r\n            }))}\r\n            searchable\r\n          />\r\n          \r\n          <Select\r\n            label=\"Second Medication\"\r\n            placeholder=\"Select medication\"\r\n            data={[].map /* TODO: Fetch from API */((med: any) => ({ \r\n              value: med.id, \r\n              label: `${med.brandName || med.name || med.genericName} (${med.genericName || med.name})` \r\n            }))}\r\n            searchable\r\n          />\r\n          \r\n          <Button fullWidth>\r\n            Check Interactions\r\n          </Button>\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeInteractionCheck}>\r\n              Close\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PharmacyManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\quality\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Table' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Avatar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Menu' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Divider' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ScrollArea' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Stepper' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 32,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 33,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 34,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Loader' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 35,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Highlight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 36,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Accordion' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 37,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'FileButton' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 38,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ColorSwatch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 39,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Code' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 40,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Spoiler' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 41,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Mark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 42,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Rating' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 43,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 43,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Switch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 44,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Checkbox' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 45,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Radio' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 46,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PasswordInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 47,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Anchor' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 49,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 49,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Notification' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Indicator' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'UnstyledButton' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 52,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'rem' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Slider' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 54,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Box' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 56,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 56,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'FileInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 57,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'JsonInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 58,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 58,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SegmentedControl' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 59,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleAreaChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleBarChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 46,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 60
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleLineChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 62,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 73,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUsers' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 74,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 74,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 76,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 79,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 80,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDotsVertical' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 81,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 81,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReportMedical' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 82,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPrinter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 87,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShare' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 88,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 88,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconActivity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 89,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconExclamationMark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 90,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 90,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClockHour4' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 91,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 91,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 92,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 93,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalculator' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 94,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 94,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSettings' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 95,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRefresh' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 96,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 96,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 97,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBarcode' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 98,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 98,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTemperature' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 99,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 99,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCircleCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 102,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 102,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 103,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 103,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLungs' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 104,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHeart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 105,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrain' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 106,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 106,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 107,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 107,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStethoscope' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 108,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 108,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedicalCross' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 109,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 109,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPackage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 110,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 110,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTruck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 111,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 111,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 112,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 112,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReceipt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 113,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 113,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNotes' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 114,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 114,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTag' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 115,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlarm' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 116,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconInfoCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 117,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBed' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 118,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 118,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAmbulance' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 119,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 119,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFlask' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 120,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 120,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDroplet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 121,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 121,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNurse' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 122,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 122,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBandage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 123,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 123,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPill' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 124,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 124,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMask' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 125,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 125,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBolt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 126,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 126,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconZoom' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 127,
        "column": 17,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 127,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCut' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 128,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 128,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTool' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 129,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 129,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhoto' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 130,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 130,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconScan' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 131,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 131,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDeviceDesktop' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 132,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 132,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCamera' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 133,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 133,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 134,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 134,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFocus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 136,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 136,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconColorPicker' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 137,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 137,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRotate' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 138,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 138,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconContrast' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 139,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 139,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrightness' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 140,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 140,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAdjustments' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 141,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 141,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMaximize' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 142,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 142,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMinimize' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 143,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 143,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlayerPlay' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 144,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 144,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlayerPause' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 145,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 145,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVolume' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 146,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 146,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 147,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 147,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 148,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 148,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMessage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 149,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 149,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMessageCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 150,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 150,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSend' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 151,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 151,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBell' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 152,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 152,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBellRinging' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 153,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 153,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVideo' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 154,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 154,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVideoOff' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 155,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 155,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMicrophone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 156,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 156,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMicrophoneOff' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 157,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 157,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDatabase' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 158,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 158,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDna' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 159,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 159,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTestPipe' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 160,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 160,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMicroscope' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 161,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 161,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAtom' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 162,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 162,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFlask2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 163,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 163,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconScale' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 164,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 164,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReportAnalytics' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 165,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 165,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChartDots' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 166,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 166,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChartPie' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 168,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 168,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileDescription' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 169,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 169,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileReport' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 170,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 170,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileCertificate' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 172,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 172,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileExport' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 173,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 173,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileImport' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 174,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 174,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFiles' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 175,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 175,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFolder' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 176,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 176,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFolderOpen' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 177,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 177,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArchive' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 178,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 178,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHistory' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 179,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 179,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendarEvent' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 180,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 180,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendarTime' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 181,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 181,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClockHour9' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 182,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 182,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUserCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 183,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 183,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUserPlus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 184,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 184,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUserX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 185,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 185,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUsersGroup' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 186,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 186,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUser' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 187,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 187,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconIdBadge' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 188,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 188,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBriefcase' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 189,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 189,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAward' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 192,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 192,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrophy' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 193,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 193,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedal' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 194,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 194,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 195,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 195,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStarFilled' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 196,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 196,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRocket' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 197,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 197,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFlag' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 198,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 198,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFlag2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 199,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 199,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFlag3' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 200,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 200,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCheckbox' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 201,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 201,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSquareCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 202,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 202,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPoint' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 204,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 204,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDots' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 205,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 205,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMenu' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 206,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 206,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconList' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 207,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 207,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconListDetails' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 208,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 208,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTable' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 209,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 209,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCards' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 210,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 210,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLayoutGrid' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 211,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 211,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLayoutList' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 212,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 212,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLayoutColumns' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 213,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 213,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 214,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 214,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSortAscending' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 215,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 215,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSortDescending' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 216,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 216,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 217,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 217,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 218,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 218,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowLeft' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 219,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 219,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArrowRight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 220,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 220,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChevronUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 221,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 221,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChevronDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 222,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 222,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChevronLeft' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 223,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 223,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChevronRight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 224,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 224,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCaretUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 225,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 225,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCaretDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 226,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 226,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCaretLeft' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 227,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 227,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCaretRight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 228,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 228,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlaylistAdd' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 229,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 229,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlaylistX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 230,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 230,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlayerRecord' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 231,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 231,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlayerStop' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 232,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 232,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVolumeOff' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 233,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 233,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVolume2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 234,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 234,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 236,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 236,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconKey' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 237,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 237,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFingerprint' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 238,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 238,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLicense' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 239,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 239,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBuildingBank' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 240,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 240,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBuilding' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 241,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 241,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHome' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 242,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 242,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMapPin' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 243,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 243,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconGps' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 244,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 244,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMap' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 245,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 245,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCompass' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 246,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 246,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRoute' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 247,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 247,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRoad' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 248,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 248,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 249,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 249,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTruckDelivery' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 250,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 250,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlane' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 251,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 251,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 252,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 252,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrain' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 253,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 253,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 254,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 254,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBike' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 255,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 255,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconWalk' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 256,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 256,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRun' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 257,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 257,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSwimming' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 258,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 258,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconYoga' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 259,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 259,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStretching' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 260,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 260,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBarbell' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 261,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 261,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconWeight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 262,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 262,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBooks' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 263,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 263,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBook' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 264,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 264,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBookmark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 265,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 265,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNotebook' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 266,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 266,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNews' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 267,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 267,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconArticle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 268,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 268,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconWriting' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 269,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 269,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPencil' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 270,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 270,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHighlight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 271,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 271,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconEraser' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 272,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 272,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRuler2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 273,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 273,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRuler3' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 274,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 274,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTriangle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 275,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 275,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSquare' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 276,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 276,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 277,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 277,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDiamond' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 278,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 278,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHexagon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 279,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 279,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconOctagon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 280,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 280,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStars' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 281,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 281,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSparkles' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 282,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 282,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFlame' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 283,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 283,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSun' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 284,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 284,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMoon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 285,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 285,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloud' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 286,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 286,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 287,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 287,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudDownload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 288,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 288,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 289,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 289,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconWind' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 290,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 290,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTornado' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 291,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 291,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MetricStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 296,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 296,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MetricType' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 297,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 297,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AuditStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 299,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 299,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AuditType' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 300,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 300,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AccreditationStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 302,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 302,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PolicyStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 304,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 304,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ComplianceItem' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 305,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 305,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ComplianceStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 306,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 306,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CorrectiveAction' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 309,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 309,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ActionStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 310,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 310,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'QualityStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 311,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 311,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PolicyCategory' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 314,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 314,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AuditFinding' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 315,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 315,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'QualityIndicator' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 317,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 317,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedRiskLevel' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 328,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 328,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setSelectedRiskLevel' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 328,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 328,
        "endColumn": 49
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedMetric' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 329,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 329,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedAudit' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 330,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 330,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedPolicy' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 331,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 331,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedIncident' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 332,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 332,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedAccreditation' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 333,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 333,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedRisk' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 334,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 334,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'qualityMetrics' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 337,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 337,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'incidents' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 338,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 338,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'qualityStats' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 339,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 339,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'loading' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 340,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 340,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 341,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 341,
        "endColumn": 15
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.",
        "line": 346,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 346,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAllData]",
            "fix": { "range": [7049, 7051], "text": "[fetchAllData]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'metricDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 392,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 392,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeMetricDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 392,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 392,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'auditDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 393,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 393,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeAuditDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 393,
        "column": 61,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 393,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'policyDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 394,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 394,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closePolicyDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 394,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 394,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'incidentDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 395,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 395,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeIncidentDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 395,
        "column": 67,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 395,
        "endColumn": 86
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'accreditationDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 396,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 396,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeAccreditationDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 396,
        "column": 77,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 396,
        "endColumn": 101
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'riskDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 397,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 397,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeRiskDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 397,
        "column": 59,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 397,
        "endColumn": 74
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'formatDateTime' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 524,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 524,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 683,
        "column": 33,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 683,
        "endColumn": 38
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 283,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Alert,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Timeline,\r\n  Stepper,\r\n  RingProgress,\r\n  Tooltip,\r\n  List,\r\n  Image,\r\n  Loader,\r\n  Highlight,\r\n  Accordion,\r\n  FileButton,\r\n  ColorSwatch,\r\n  Code,\r\n  Spoiler,\r\n  Mark,\r\n  Rating,\r\n  Switch,\r\n  Checkbox,\r\n  Radio,\r\n  PasswordInput,\r\n  MultiSelect,\r\n  Anchor,\r\n  Notification,\r\n  Indicator,\r\n  UnstyledButton,\r\n  rem,\r\n  Slider,\r\n  Center,\r\n  Box,\r\n  FileInput,\r\n  JsonInput,\r\n  SegmentedControl,\r\n  SimpleGrid\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleBarChart, SimpleLineChart } from '../../../components/MantineChart';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconCalendar,\r\n  IconUsers,\r\n  IconChartBar,\r\n  IconPhone,\r\n  IconMail,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconReportMedical,\r\n  IconClock,\r\n  IconClipboardList,\r\n  IconFileText,\r\n  IconDownload,\r\n  IconPrinter,\r\n  IconShare,\r\n  IconActivity,\r\n  IconExclamationMark,\r\n  IconClockHour4,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconCalculator,\r\n  IconSettings,\r\n  IconRefresh,\r\n  IconFilter,\r\n  IconBarcode,\r\n  IconTemperature,\r\n  IconShieldCheck,\r\n  IconAlertTriangle,\r\n  IconCircleCheck,\r\n  IconClipboard,\r\n  IconLungs,\r\n  IconHeart,\r\n  IconBrain,\r\n  IconBone,\r\n  IconStethoscope,\r\n  IconMedicalCross,\r\n  IconPackage,\r\n  IconTruck,\r\n  IconCash,\r\n  IconReceipt,\r\n  IconNotes,\r\n  IconTag,\r\n  IconAlarm,\r\n  IconInfoCircle,\r\n  IconBed,\r\n  IconAmbulance,\r\n  IconFlask,\r\n  IconDroplet,\r\n  IconNurse,\r\n  IconBandage,\r\n  IconPill,\r\n  IconMask,\r\n  IconBolt,\r\n  IconZoomIn as IconZoom,\r\n  IconCut,\r\n  IconTool,\r\n  IconPhoto,\r\n  IconScan,\r\n  IconDeviceDesktop,\r\n  IconCamera,\r\n  IconUpload,\r\n  IconTarget,\r\n  IconFocus,\r\n  IconColorPicker,\r\n  IconRotate,\r\n  IconContrast,\r\n  IconBrightness,\r\n  IconAdjustments,\r\n  IconMaximize,\r\n  IconMinimize,\r\n  IconPlayerPlay,\r\n  IconPlayerPause,\r\n  IconVolume,\r\n  IconFileUpload,\r\n  IconCloudUpload,\r\n  IconMessage,\r\n  IconMessageCircle,\r\n  IconSend,\r\n  IconBell,\r\n  IconBellRinging,\r\n  IconVideo,\r\n  IconVideoOff,\r\n  IconMicrophone,\r\n  IconMicrophoneOff,\r\n  IconDatabase,\r\n  IconDna,\r\n  IconTestPipe,\r\n  IconMicroscope,\r\n  IconAtom,\r\n  IconFlask2,\r\n  IconScale,\r\n  IconReportAnalytics,\r\n  IconChartDots,\r\n  IconChartLine,\r\n  IconChartPie,\r\n  IconFileDescription,\r\n  IconFileReport,\r\n  IconFileCheck,\r\n  IconFileCertificate,\r\n  IconFileExport,\r\n  IconFileImport,\r\n  IconFiles,\r\n  IconFolder,\r\n  IconFolderOpen,\r\n  IconArchive,\r\n  IconHistory,\r\n  IconCalendarEvent,\r\n  IconCalendarTime,\r\n  IconClockHour9,\r\n  IconUserCheck,\r\n  IconUserPlus,\r\n  IconUserX,\r\n  IconUsersGroup,\r\n  IconUser,\r\n  IconIdBadge,\r\n  IconBriefcase,\r\n  IconSchool,\r\n  IconCertificate,\r\n  IconAward,\r\n  IconTrophy,\r\n  IconMedal,\r\n  IconStar,\r\n  IconStarFilled,\r\n  IconRocket,\r\n  IconFlag,\r\n  IconFlag2,\r\n  IconFlag3,\r\n  IconCheckbox,\r\n  IconSquareCheck,\r\n  IconCircleDot,\r\n  IconPoint,\r\n  IconDots,\r\n  IconMenu,\r\n  IconList,\r\n  IconListDetails,\r\n  IconTable,\r\n  IconCards,\r\n  IconLayoutGrid,\r\n  IconLayoutList,\r\n  IconLayoutColumns,\r\n  IconFilter2,\r\n  IconSortAscending,\r\n  IconSortDescending,\r\n  IconArrowUp,\r\n  IconArrowDown,\r\n  IconArrowLeft,\r\n  IconArrowRight,\r\n  IconChevronUp,\r\n  IconChevronDown,\r\n  IconChevronLeft,\r\n  IconChevronRight,\r\n  IconCaretUp,\r\n  IconCaretDown,\r\n  IconCaretLeft,\r\n  IconCaretRight,\r\n  IconPlaylistAdd,\r\n  IconPlaylistX,\r\n  IconPlayerRecord,\r\n  IconPlayerStop,\r\n  IconVolumeOff,\r\n  IconVolume2,\r\n  IconShield,\r\n  IconLock,\r\n  IconKey,\r\n  IconFingerprint,\r\n  IconLicense,\r\n  IconBuildingBank,\r\n  IconBuilding,\r\n  IconHome,\r\n  IconMapPin,\r\n  IconGps,\r\n  IconMap,\r\n  IconCompass,\r\n  IconRoute,\r\n  IconRoad,\r\n  IconCar,\r\n  IconTruckDelivery,\r\n  IconPlane,\r\n  IconShip,\r\n  IconTrain,\r\n  IconBus,\r\n  IconBike,\r\n  IconWalk,\r\n  IconRun,\r\n  IconSwimming,\r\n  IconYoga,\r\n  IconStretching,\r\n  IconBarbell,\r\n  IconWeight,\r\n  IconBooks,\r\n  IconBook,\r\n  IconBookmark,\r\n  IconNotebook,\r\n  IconNews,\r\n  IconArticle,\r\n  IconWriting,\r\n  IconPencil,\r\n  IconHighlight,\r\n  IconEraser,\r\n  IconRuler2,\r\n  IconRuler3,\r\n  IconTriangle,\r\n  IconSquare,\r\n  IconCircle,\r\n  IconDiamond,\r\n  IconHexagon,\r\n  IconOctagon,\r\n  IconStars,\r\n  IconSparkles,\r\n  IconFlame,\r\n  IconSun,\r\n  IconMoon,\r\n  IconCloud,\r\n  IconCloudCheck,\r\n  IconCloudDownload,\r\n  IconCloudUp,\r\n  IconWind,\r\n  IconTornado\r\n} from '@tabler/icons-react';\r\n\r\n// Import types and mock data (using any for now due to type mismatches)\r\ntype QualityMetric = any;\r\ntype MetricStatus = any;\r\ntype MetricType = any;\r\ntype Audit = any;\r\ntype AuditStatus = any;\r\ntype AuditType = any;\r\ntype Accreditation = any;\r\ntype AccreditationStatus = any;\r\ntype Policy = any;\r\ntype PolicyStatus = any;\r\ntype ComplianceItem = any;\r\ntype ComplianceStatus = any;\r\ntype QualityIncident = any;\r\ntype IncidentSeverity = any;\r\ntype CorrectiveAction = any;\r\ntype ActionStatus = any;\r\ntype QualityStats = any;\r\ntype RiskAssessment = any;\r\ntype RiskLevel = any;\r\ntype PolicyCategory = any;\r\ntype AuditFinding = any;\r\ntype FindingSeverity = any;\r\ntype QualityIndicator = any;\r\n// Mock data imports removed\r\nimport qualityService from '../../../services/quality.service';\r\n\r\nconst QualityAssurance = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('overview');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedMetricStatus, setSelectedMetricStatus] = useState<string>('');\r\n  const [selectedAuditStatus, setSelectedAuditStatus] = useState<string>('');\r\n  const [selectedPolicyCategory, setSelectedPolicyCategory] = useState<string>('');\r\n  const [selectedRiskLevel, setSelectedRiskLevel] = useState<string>('');\r\n  const [selectedMetric, setSelectedMetric] = useState<QualityMetric | null>(null);\r\n  const [selectedAudit, setSelectedAudit] = useState<Audit | null>(null);\r\n  const [selectedPolicy, setSelectedPolicy] = useState<Policy | null>(null);\r\n  const [selectedIncident, setSelectedIncident] = useState<QualityIncident | null>(null);\r\n  const [selectedAccreditation, setSelectedAccreditation] = useState<Accreditation | null>(null);\r\n  const [selectedRisk, setSelectedRisk] = useState<RiskAssessment | null>(null);\r\n\r\n  // API state\r\n  const [qualityMetrics, setQualityMetrics] = useState<any[]>([]);\r\n  const [incidents, setIncidents] = useState<any[]>([]);\r\n  const [qualityStats, setQualityStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Fetch data\r\n  useEffect(() => {\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  const fetchAllData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      await Promise.all([fetchMetrics(), fetchIncidents(), fetchStats()]);\r\n    } catch (err: any) {\r\n      console.error('Error loading quality data:', err);\r\n      setError(err.response?.data?.message || err.message || 'Failed to load quality data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchMetrics = async () => {\r\n    try {\r\n      const response = await qualityService.getMetrics();\r\n      setQualityMetrics(response.data || []);\r\n    } catch (err: any) {\r\n      console.error('Error fetching quality metrics:', err);\r\n      setQualityMetrics([] /* TODO: Fetch from API */);\r\n    }\r\n  };\r\n\r\n  const fetchIncidents = async () => {\r\n    try {\r\n      const response = await qualityService.getIncidents();\r\n      setIncidents(response.data || []);\r\n    } catch (err: any) {\r\n      console.error('Error fetching incidents:', err);\r\n      setIncidents([] /* TODO: Fetch from API */);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await qualityService.getStats();\r\n      setQualityStats(response.data);\r\n    } catch (err: any) {\r\n      console.error('Error fetching quality stats:', err);\r\n      setQualityStats([] /* TODO: Fetch from API */);\r\n    }\r\n  };\r\n\r\n  // Modal states\r\n  const [metricDetailOpened, { open: openMetricDetail, close: closeMetricDetail }] = useDisclosure(false);\r\n  const [auditDetailOpened, { open: openAuditDetail, close: closeAuditDetail }] = useDisclosure(false);\r\n  const [policyDetailOpened, { open: openPolicyDetail, close: closePolicyDetail }] = useDisclosure(false);\r\n  const [incidentDetailOpened, { open: openIncidentDetail, close: closeIncidentDetail }] = useDisclosure(false);\r\n  const [accreditationDetailOpened, { open: openAccreditationDetail, close: closeAccreditationDetail }] = useDisclosure(false);\r\n  const [riskDetailOpened, { open: openRiskDetail, close: closeRiskDetail }] = useDisclosure(false);\r\n  const [createAuditOpened, { open: openCreateAudit, close: closeCreateAudit }] = useDisclosure(false);\r\n  const [reportIncidentOpened, { open: openReportIncident, close: closeReportIncident }] = useDisclosure(false);\r\n  const [createPolicyOpened, { open: openCreatePolicy, close: closeCreatePolicy }] = useDisclosure(false);\r\n\r\n  // Filter functions\r\n  const filteredMetrics = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((metric) => {\r\n      const matchesSearch = \r\n        metric.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        metric.description.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesStatus = !selectedMetricStatus || metric.status === selectedMetricStatus;\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedMetricStatus]);\r\n\r\n  const filteredAudits = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((audit) => {\r\n      const matchesSearch = \r\n        ((audit as any).auditType || (audit as any).title || '').toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        ((audit as any).auditor || '').toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        ((audit as any).department || '').toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesStatus = !selectedAuditStatus || (audit as any).status === selectedAuditStatus;\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedAuditStatus]);\r\n\r\n  const filteredPolicies = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((policy) => {\r\n      const matchesSearch = \r\n        policy.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        policy.description.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesCategory = !selectedPolicyCategory || policy.category === selectedPolicyCategory;\r\n\r\n      return matchesSearch && matchesCategory;\r\n    });\r\n  }, [searchQuery, selectedPolicyCategory]);\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'compliant':\r\n      case 'approved':\r\n      case 'active':\r\n      case 'completed':\r\n      case 'closed': return 'green';\r\n      case 'non_compliant':\r\n      case 'rejected':\r\n      case 'expired':\r\n      case 'high':\r\n      case 'critical': return 'red';\r\n      case 'pending':\r\n      case 'in_progress':\r\n      case 'scheduled':\r\n      case 'medium':\r\n      case 'moderate': return 'orange';\r\n      case 'draft':\r\n      case 'planned':\r\n      case 'low':\r\n      case 'minor': return 'blue';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getRiskLevelColor = (level: RiskLevel) => {\r\n    switch (level) {\r\n      case 'critical': return 'red';\r\n      case 'high': return 'orange';\r\n      case 'medium': return 'yellow';\r\n      case 'low': return 'green';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getSeverityColor = (severity: IncidentSeverity | FindingSeverity) => {\r\n    switch (severity) {\r\n      case 'critical': return 'red';\r\n      case 'high': return 'orange';\r\n      case 'medium': return 'yellow';\r\n      case 'low': return 'green';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const handleViewMetric = (metric: QualityMetric) => {\r\n    setSelectedMetric(metric);\r\n    openMetricDetail();\r\n  };\r\n\r\n  const handleViewAudit = (audit: Audit) => {\r\n    setSelectedAudit(audit);\r\n    openAuditDetail();\r\n  };\r\n\r\n  const handleViewPolicy = (policy: Policy) => {\r\n    setSelectedPolicy(policy);\r\n    openPolicyDetail();\r\n  };\r\n\r\n  const handleViewIncident = (incident: QualityIncident) => {\r\n    setSelectedIncident(incident);\r\n    openIncidentDetail();\r\n  };\r\n\r\n  const handleViewAccreditation = (accreditation: Accreditation) => {\r\n    setSelectedAccreditation(accreditation);\r\n    openAccreditationDetail();\r\n  };\r\n\r\n  const handleViewRisk = (risk: RiskAssessment) => {\r\n    setSelectedRisk(risk);\r\n    openRiskDetail();\r\n  };\r\n\r\n  const formatDate = (date: string) => {\r\n    return new Date(date).toLocaleDateString('en-IN', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  const formatDateTime = (date: string) => {\r\n    return new Date(date).toLocaleString('en-IN');\r\n  };\r\n\r\n  // Quick stats for overview\r\n  const quickStats = [\r\n    {\r\n      title: 'Overall Compliance',\r\n      value: `${0 /* TODO: Fetch from API */}%`,\r\n      icon: IconShieldCheck,\r\n      color: 'green'\r\n    },\r\n    {\r\n      title: 'Active Audits',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconClipboardList,\r\n      color: 'blue'\r\n    },\r\n    {\r\n      title: 'Quality Incidents',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconAlertTriangle,\r\n      color: 'orange'\r\n    },\r\n    {\r\n      title: 'Policy Updates',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconFileText,\r\n      color: 'purple'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Quality Assurance & Compliance</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Monitor compliance, manage audits, track quality metrics, and ensure regulatory adherence\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={openCreateAudit}\r\n            color=\"blue\"\r\n          >\r\n            Schedule Audit\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconAlertTriangle size={16} />}\r\n            onClick={openReportIncident}\r\n          >\r\n            Report Incident\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconFileText size={16} />}\r\n            onClick={openCreatePolicy}\r\n          >\r\n            Create Policy\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Quick Stats */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {quickStats.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"overview\" leftSection={<IconChartBar size={16} />}>\r\n            Overview\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"metrics\" leftSection={<IconTarget size={16} />}>\r\n            Quality Metrics\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"audits\" leftSection={<IconClipboardList size={16} />}>\r\n            Audits\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"compliance\" leftSection={<IconShieldCheck size={16} />}>\r\n            Compliance\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"accreditation\" leftSection={<IconCertificate size={16} />}>\r\n            Accreditation\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"policies\" leftSection={<IconFileText size={16} />}>\r\n            Policies\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"incidents\" leftSection={<IconAlertTriangle size={16} />}>\r\n            Incidents\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"risk\" leftSection={<IconAlertCircle size={16} />}>\r\n            Risk Assessment\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Overview Tab */}\r\n        <Tabs.Panel value=\"overview\">\r\n          <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\" mt=\"md\">\r\n            {/* Compliance Score */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Compliance Dashboard</Title>\r\n              <Center>\r\n                <RingProgress\r\n                  size={180}\r\n                  thickness={16}\r\n                  sections={[\r\n                    { value: 0 /* TODO: Fetch from API */, color: 'green' }\r\n                  ]}\r\n                  label={\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <Text size=\"xl\" fw={700}>\r\n                        {0 /* TODO: Fetch from API */}%\r\n                      </Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">\r\n                        Overall Compliance\r\n                      </Text>\r\n                    </div>\r\n                  }\r\n                />\r\n              </Center>\r\n            </Card>\r\n\r\n            {/* Quality Metrics Performance */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Quality Metrics Performance</Title>\r\n              <MantineDonutChart\r\n                data={[]}\r\n              />\r\n            </Card>\r\n\r\n            {/* Audit Timeline */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Recent Audit Activity</Title>\r\n              <Timeline active={3} bulletSize={24} lineWidth={2}>\r\n                {[].map((audit, index) => (\r\n                  <Timeline.Item\r\n                    key={audit.id}\r\n                    bullet={\r\n                      <ThemeIcon color={getStatusColor(audit.status)} size={24} radius=\"xl\">\r\n                        <IconClipboardList size={12} />\r\n                      </ThemeIcon>\r\n                    }\r\n                    title={(audit as any).auditType || (audit as any).title || 'Audit'}\r\n                  >\r\n                    <Text size=\"sm\" c=\"dimmed\">\r\n                      Auditor: {audit.auditor}\r\n                    </Text>\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      {audit.status === 'completed' ? 'Completed' : 'Scheduled'}: {formatDate(audit.scheduledDate)}\r\n                    </Text>\r\n                  </Timeline.Item>\r\n                ))}\r\n              </Timeline>\r\n            </Card>\r\n\r\n            {/* Risk Assessment Overview */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Risk Assessment Status</Title>\r\n              <Stack gap=\"md\">\r\n                {['critical', 'high', 'medium', 'low'].map((level) => {\r\n                  const count = [].filter /* TODO: Fetch from API */(r => (r as any).level === level || (r as any).riskLevel === level).length;\r\n                  return (\r\n                    <Group key={level} justify=\"space-between\">\r\n                      <Group gap=\"xs\">\r\n                        <ThemeIcon color={getRiskLevelColor(level as RiskLevel)} size=\"sm\" radius=\"xl\">\r\n                          <IconCircleDot size={12} />\r\n                        </ThemeIcon>\r\n                        <Text size=\"sm\" fw={500} tt=\"capitalize\">\r\n                          {level} Risk\r\n                        </Text>\r\n                      </Group>\r\n                      <Badge color={getRiskLevelColor(level as RiskLevel)} variant=\"light\">\r\n                        {count}\r\n                      </Badge>\r\n                    </Group>\r\n                  );\r\n                })}\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* Accreditation Status */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Accreditation Status</Title>\r\n              <Stack gap=\"sm\">\r\n                {[].map((acc) => (\r\n                  <Group key={acc.id} justify=\"space-between\">\r\n                    <div>\r\n                      <Text size=\"sm\" fw={500}>{(acc as any).issuingBody || (acc as any).accreditingBody}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">\r\n                        Expires: {formatDate(acc.expiryDate)}\r\n                      </Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(acc.status)} variant=\"light\" size=\"sm\">\r\n                      {acc.status}\r\n                    </Badge>\r\n                  </Group>\r\n                ))}\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* Recent Incidents */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Recent Quality Incidents</Title>\r\n              <Stack gap=\"sm\">\r\n                {[].map((incident) => (\r\n                  <Alert\r\n                    key={incident.id}\r\n                    variant=\"light\"\r\n                    color={getSeverityColor(incident.severity)}\r\n                    icon={<IconAlertTriangle size={16} />}\r\n                  >\r\n                    <Group justify=\"space-between\">\r\n                      <div>\r\n                        <Text size=\"sm\" fw={500}>{(incident as any).incidentType || (incident as any).title}</Text>\r\n                        <Text size=\"xs\" c=\"dimmed\">\r\n                          {(incident as any).department} • {formatDate((incident as any).reportDate || (incident as any).dateReported)}\r\n                        </Text>\r\n                      </div>\r\n                      <Badge color={getSeverityColor(incident.severity)} variant=\"light\" size=\"sm\">\r\n                        {incident.severity}\r\n                      </Badge>\r\n                    </Group>\r\n                  </Alert>\r\n                ))}\r\n              </Stack>\r\n            </Card>\r\n          </SimpleGrid>\r\n        </Tabs.Panel>\r\n\r\n        {/* Quality Metrics Tab */}\r\n        <Tabs.Panel value=\"metrics\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search metrics...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'excellent', label: 'Excellent' },\r\n                  { value: 'good', label: 'Good' },\r\n                  { value: 'acceptable', label: 'Acceptable' },\r\n                  { value: 'poor', label: 'Poor' }\r\n                ]}\r\n                value={selectedMetricStatus}\r\n                onChange={setSelectedMetricStatus}\r\n                clearable\r\n              />\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Add Metric\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Quality Metrics Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {filteredMetrics.length === 0 ? (\r\n                <div style={{ gridColumn: '1 / -1' }}>\r\n                  <EmptyState\r\n                    icon={<IconChartBar size={48} />}\r\n                    title=\"No quality metrics\"\r\n                    description=\"Quality metrics will appear here\"\r\n                    size=\"sm\"\r\n                  />\r\n                </div>\r\n              ) : (\r\n                filteredMetrics.map((metric) => (\r\n                  <Card key={metric.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                    <Group justify=\"space-between\" mb=\"md\">\r\n                      <div>\r\n                        <Text fw={600} size=\"lg\">{metric.name}</Text>\r\n                        <Text size=\"sm\" c=\"dimmed\">{metric.category}</Text>\r\n                      </div>\r\n                      <Badge color={getStatusColor(metric.status)} variant=\"light\">\r\n                        {metric.status.toUpperCase()}\r\n                      </Badge>\r\n                    </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Current Value</Text>\r\n                      <Text size=\"lg\" fw={700} c={getStatusColor(metric.status)}>\r\n                        {(metric as any).current || (metric as any).currentValue}{(metric as any).unit || '%'}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Target</Text>\r\n                      <Text size=\"sm\" fw={500}>{(metric as any).target || (metric as any).targetValue}{(metric as any).unit || '%'}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Performance</Text>\r\n                      <Group gap=\"xs\">\r\n                        <Progress\r\n                          value={((metric as any).current || (metric as any).currentValue) / ((metric as any).target || (metric as any).targetValue) * 100}\r\n                          size=\"sm\"\r\n                          color={getStatusColor(metric.status)}\r\n                          style={{ width: '100px' }}\r\n                        />\r\n                        <Text size=\"sm\" fw={500}>\r\n                          {(((metric as any).current || (metric as any).currentValue) / ((metric as any).target || (metric as any).targetValue) * 100).toFixed(0)}%\r\n                        </Text>\r\n                      </Group>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Last Updated</Text>\r\n                      <Text size=\"sm\">{formatDate(metric.lastUpdated)}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"md\">\r\n                    {metric.description}\r\n                  </Text>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Category: {(metric as any).category}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewMetric(metric)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconChartLine size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))\r\n              )}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Audits Tab */}\r\n        <Tabs.Panel value=\"audits\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search audits...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'planned', label: 'Planned' },\r\n                  { value: 'in_progress', label: 'In Progress' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'cancelled', label: 'Cancelled' }\r\n                ]}\r\n                value={selectedAuditStatus}\r\n                onChange={setSelectedAuditStatus}\r\n                clearable\r\n              />\r\n              <Button leftSection={<IconPlus size={16} />} onClick={openCreateAudit}>\r\n                Schedule Audit\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Audits Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {filteredAudits.map((audit) => (\r\n                <Card key={audit.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\" lineClamp={1}>{(audit as any).auditType || (audit as any).title || 'Audit'}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{((audit as any).auditType || (audit as any).type || 'audit').replace('_', ' ').toUpperCase()}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(audit.status)} variant=\"light\">\r\n                      {audit.status.replace('_', ' ').toUpperCase()}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Auditor</Text>\r\n                      <Text size=\"sm\" fw={500}>{audit.auditor}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Department</Text>\r\n                      <Text size=\"sm\">{audit.department}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Scheduled Date</Text>\r\n                      <Text size=\"sm\">{formatDate(audit.scheduledDate)}</Text>\r\n                    </Group>\r\n                    {audit.completedDate && (\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\" c=\"dimmed\">Completed Date</Text>\r\n                        <Text size=\"sm\">{formatDate(audit.completedDate)}</Text>\r\n                      </Group>\r\n                    )}\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Score</Text>\r\n                      <Group gap=\"xs\">\r\n                        <Progress\r\n                          value={audit.score || 0}\r\n                          size=\"sm\"\r\n                          color={audit.score >= 80 ? 'green' : audit.score >= 60 ? 'orange' : 'red'}\r\n                          style={{ width: '80px' }}\r\n                        />\r\n                        <Text size=\"sm\" fw={500}>\r\n                          {audit.score || 0}%\r\n                        </Text>\r\n                      </Group>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {audit.scope && (\r\n                    <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"md\">\r\n                      Scope: {audit.scope}\r\n                    </Text>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Group gap=\"xs\">\r\n                      {audit.findings && (\r\n                        <Badge variant=\"outline\" size=\"xs\" color=\"orange\">\r\n                          {audit.findings.length} Finding{audit.findings.length !== 1 ? 's' : ''}\r\n                        </Badge>\r\n                      )}\r\n                      <Badge variant=\"outline\" size=\"xs\" color=\"blue\">\r\n                        {audit.duration} days\r\n                      </Badge>\r\n                    </Group>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewAudit(audit)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Compliance Tab */}\r\n        <Tabs.Panel value=\"compliance\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Compliance Monitoring</Title>\r\n              <Button leftSection={<IconDownload size={16} />} variant=\"light\">\r\n                Export Report\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Compliance Overview Cards */}\r\n            <SimpleGrid cols={{ base: 1, sm: 2, lg: 4 }} mb=\"lg\">\r\n              <Card padding=\"md\" radius=\"md\" withBorder>\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Regulatory Compliance</Text>\r\n                    <Text fw={700} size=\"lg\">95%</Text>\r\n                  </div>\r\n                  <ThemeIcon color=\"green\" variant=\"light\">\r\n                    <IconShieldCheck size={20} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n              </Card>\r\n              <Card padding=\"md\" radius=\"md\" withBorder>\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Safety Standards</Text>\r\n                    <Text fw={700} size=\"lg\">88%</Text>\r\n                  </div>\r\n                  <ThemeIcon color=\"orange\" variant=\"light\">\r\n                    <IconShield size={20} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n              </Card>\r\n              <Card padding=\"md\" radius=\"md\" withBorder>\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Documentation</Text>\r\n                    <Text fw={700} size=\"lg\">92%</Text>\r\n                  </div>\r\n                  <ThemeIcon color=\"blue\" variant=\"light\">\r\n                    <IconFileCheck size={20} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n              </Card>\r\n              <Card padding=\"md\" radius=\"md\" withBorder>\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\">Training Compliance</Text>\r\n                    <Text fw={700} size=\"lg\">97%</Text>\r\n                  </div>\r\n                  <ThemeIcon color=\"teal\" variant=\"light\">\r\n                    <IconSchool size={20} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n              </Card>\r\n            </SimpleGrid>\r\n\r\n            {/* Compliance Items */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((item) => (\r\n                <Card key={item.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{item.title}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{item.category}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(item.status)} variant=\"light\">\r\n                      {item.status.replace('_', ' ').toUpperCase()}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Compliance Score</Text>\r\n                      <Group gap=\"xs\">\r\n                        <Progress\r\n                          value={item.complianceScore}\r\n                          size=\"sm\"\r\n                          color={item.complianceScore >= 90 ? 'green' : item.complianceScore >= 70 ? 'orange' : 'red'}\r\n                          style={{ width: '100px' }}\r\n                        />\r\n                        <Text size=\"sm\" fw={500}>{item.complianceScore}%</Text>\r\n                      </Group>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Last Review</Text>\r\n                      <Text size=\"sm\">N/A</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Next Review</Text>\r\n                      <Text size=\"sm\" c={new Date(item.nextReviewDate) < new Date() ? 'red' : undefined}>\r\n                        {formatDate(item.nextReviewDate)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Responsible Person</Text>\r\n                      <Text size=\"sm\">{item.responsiblePerson}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"md\">\r\n                    {item.description}\r\n                  </Text>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Priority: {item.priority}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconFileCheck size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Accreditation Tab */}\r\n        <Tabs.Panel value=\"accreditation\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Accreditation Management</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Add Accreditation\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Accreditations Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((accreditation) => (\r\n                <Card key={accreditation.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{(accreditation as any).issuingBody || (accreditation as any).accreditingBody || accreditation.name}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{(accreditation as any).accreditationType || 'Accreditation'}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(accreditation.status)} variant=\"light\">\r\n                      {accreditation.status.toUpperCase()}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Certificate Number</Text>\r\n                      <Text size=\"sm\" fw={500}>{(accreditation as any).certificate || (accreditation as any).certificateNumber || 'N/A'}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Issue Date</Text>\r\n                      <Text size=\"sm\">{formatDate(accreditation.issueDate)}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Expiry Date</Text>\r\n                      <Text \r\n                        size=\"sm\" \r\n                        c={new Date(accreditation.expiryDate) < new Date() ? 'red' : undefined}\r\n                      >\r\n                        {formatDate(accreditation.expiryDate)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Scope</Text>\r\n                      <Text size=\"sm\">{accreditation.scope}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Next Assessment</Text>\r\n                      <Text size=\"sm\">\r\n                        {(accreditation as any).renewalDue ? formatDate((accreditation as any).renewalDue) : ((accreditation as any).nextAssessmentDate ? formatDate((accreditation as any).nextAssessmentDate) : 'TBD')}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {(accreditation as any).scope && (\r\n                    <>\r\n                      <Text size=\"sm\" c=\"dimmed\" mb=\"xs\">Scope:</Text>\r\n                      <Text size=\"sm\" mb=\"md\">{(accreditation as any).scope}</Text>\r\n                    </>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Accreditation ID: {accreditation.id}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewAccreditation(accreditation)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Policies Tab */}\r\n        <Tabs.Panel value=\"policies\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search policies...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Category\"\r\n                data={[\r\n                  { value: 'safety', label: 'Safety' },\r\n                  { value: 'quality', label: 'Quality' },\r\n                  { value: 'privacy', label: 'Privacy' },\r\n                  { value: 'clinical', label: 'Clinical' },\r\n                  { value: 'administrative', label: 'Administrative' }\r\n                ]}\r\n                value={selectedPolicyCategory}\r\n                onChange={setSelectedPolicyCategory}\r\n                clearable\r\n              />\r\n              <Button leftSection={<IconPlus size={16} />} onClick={openCreatePolicy}>\r\n                Create Policy\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Policies Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {filteredPolicies.map((policy) => (\r\n                <Card key={policy.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\" lineClamp={1}>{policy.title}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{(policy as any).category || 'Policy'}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(policy.status)} variant=\"light\">\r\n                      {policy.status.toUpperCase()}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Category</Text>\r\n                      <Badge variant=\"outline\" size=\"sm\">\r\n                        {policy.category.toUpperCase()}\r\n                      </Badge>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Effective Date</Text>\r\n                      <Text size=\"sm\">{formatDate((policy as any).lastReviewDate || new Date().toISOString())}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Review Date</Text>\r\n                      <Text size=\"sm\" c={new Date((policy as any).nextReviewDate) < new Date() ? 'red' : undefined}>\r\n                        {formatDate((policy as any).nextReviewDate)}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Owner</Text>\r\n                      <Text size=\"sm\">{(policy as any).responsiblePerson || 'N/A'}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Approver</Text>\r\n                      <Text size=\"sm\">{(policy as any).responsiblePerson || 'N/A'}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"md\">\r\n                    {policy.description}\r\n                  </Text>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Group gap=\"xs\">\r\n                      <Badge variant=\"outline\" size=\"xs\" color=\"blue\">\r\n                        {(policy as any).priority || 'Normal'}\r\n                      </Badge>\r\n                      <Badge variant=\"outline\" size=\"xs\" color=\"green\">\r\n                        Score: {(policy as any).complianceScore || 0}%\r\n                      </Badge>\r\n                    </Group>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewPolicy(policy)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Incidents Tab */}\r\n        <Tabs.Panel value=\"incidents\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Quality Incidents</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />} onClick={openReportIncident}>\r\n                  Report Incident\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconDownload size={16} />}>\r\n                  Export Report\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Incidents Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((incident) => (\r\n                <Card key={incident.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\" lineClamp={1}>{(incident as any).incidentType || (incident as any).title}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">ID: {incident.id}</Text>\r\n                    </div>\r\n                    <Group>\r\n                      <Badge color={getSeverityColor(incident.severity)} variant=\"light\">\r\n                        {incident.severity.toUpperCase()}\r\n                      </Badge>\r\n                      <Badge color={getStatusColor(incident.status)} variant=\"light\">\r\n                        {incident.status.replace('_', ' ').toUpperCase()}\r\n                      </Badge>\r\n                    </Group>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Department</Text>\r\n                      <Text size=\"sm\" fw={500}>{incident.department}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Reported By</Text>\r\n                      <Text size=\"sm\">{incident.reportedBy}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Date Reported</Text>\r\n                      <Text size=\"sm\">{formatDate((incident as any).reportDate || (incident as any).dateReported)}</Text>\r\n                    </Group>\r\n                    {(incident as any).status === 'resolved' && (\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\" c=\"dimmed\">Status</Text>\r\n                        <Text size=\"sm\">Resolved</Text>\r\n                      </Group>\r\n                    )}\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Assigned To</Text>\r\n                      <Text size=\"sm\">{incident.assignedTo}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"md\">\r\n                    {incident.description}\r\n                  </Text>\r\n\r\n                  {incident.correctiveActions && (\r\n                    <Alert variant=\"light\" color=\"blue\" icon={<IconClipboardList size={16} />} mb=\"md\">\r\n                      <Text size=\"sm\">\r\n                        {incident.correctiveActions.length} corrective action{incident.correctiveActions.length !== 1 ? 's' : ''} planned\r\n                      </Text>\r\n                    </Alert>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Type: {(incident as any).incidentType || 'Incident'}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewIncident(incident)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconClipboardList size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Risk Assessment Tab */}\r\n        <Tabs.Panel value=\"risk\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Risk Assessment</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />}>\r\n                  Add Risk Assessment\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconDownload size={16} />}>\r\n                  Risk Report\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Risk Assessments Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((risk) => (\r\n                <Card key={risk.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\" lineClamp={1}>{(risk as any).risk || (risk as any).riskTitle}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{(risk as any).area || (risk as any).category}</Text>\r\n                    </div>\r\n                    <Badge color={getRiskLevelColor((risk as any).level || (risk as any).riskLevel)} variant=\"light\">\r\n                      {((risk as any).level || (risk as any).riskLevel || 'unknown').toUpperCase()} RISK\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Risk Score</Text>\r\n                      <Group gap=\"xs\">\r\n                        <Progress\r\n                          value={50}\r\n                          size=\"sm\"\r\n                          color={getRiskLevelColor((risk as any).level || (risk as any).riskLevel)}\r\n                          style={{ width: '80px' }}\r\n                        />\r\n                        <Text size=\"sm\" fw={500}>N/A</Text>\r\n                      </Group>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Probability</Text>\r\n                      <Text size=\"sm\">N/A</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Impact</Text>\r\n                      <Text size=\"sm\">N/A</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Department</Text>\r\n                      <Text size=\"sm\">{(risk as any).area || 'N/A'}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Last Review</Text>\r\n                      <Text size=\"sm\">N/A</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Risk Owner</Text>\r\n                      <Text size=\"sm\">N/A</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"md\">\r\n                    Risk: {(risk as any).risk} in {(risk as any).area}\r\n                  </Text>\r\n\r\n                  <Text size=\"sm\" c=\"dimmed\" mb=\"xs\">Status:</Text>\r\n                  <Text size=\"sm\" mb=\"md\">{(risk as any).status}</Text>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Next Review: N/A\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewRisk(risk)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconAlertTriangle size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Create Audit Modal */}\r\n      <Modal\r\n        opened={createAuditOpened}\r\n        onClose={closeCreateAudit}\r\n        title=\"Schedule New Audit\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"Audit Title\"\r\n              placeholder=\"Enter audit title\"\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Audit Type\"\r\n              placeholder=\"Select type\"\r\n              data={[\r\n                { value: 'internal', label: 'Internal Audit' },\r\n                { value: 'external', label: 'External Audit' },\r\n                { value: 'compliance', label: 'Compliance Audit' },\r\n                { value: 'quality', label: 'Quality Audit' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Auditor\"\r\n              placeholder=\"Select auditor\"\r\n              data={[].map /* TODO: Fetch from API */(doctor => ({\r\n                value: doctor.id,\r\n                label: doctor.name || `Dr. ${(doctor as any).firstName || ''} ${(doctor as any).lastName || ''}`\r\n              }))}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Department\"\r\n              placeholder=\"Select department\"\r\n              data={[\r\n                { value: 'cardiology', label: 'Cardiology' },\r\n                { value: 'emergency', label: 'Emergency' },\r\n                { value: 'surgery', label: 'Surgery' },\r\n                { value: 'pediatrics', label: 'Pediatrics' },\r\n                { value: 'radiology', label: 'Radiology' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <DatePickerInput\r\n              label=\"Scheduled Date\"\r\n              placeholder=\"Select date\"\r\n              minDate={new Date()}\r\n              required\r\n            />\r\n            <NumberInput\r\n              label=\"Duration (days)\"\r\n              placeholder=\"Enter duration\"\r\n              min={1}\r\n              max={30}\r\n              defaultValue={3}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Audit Scope\"\r\n            placeholder=\"Describe the scope and objectives of this audit\"\r\n            rows={3}\r\n            required\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeCreateAudit}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Audit Scheduled',\r\n                message: 'Quality audit has been successfully scheduled',\r\n                color: 'green',\r\n              });\r\n              closeCreateAudit();\r\n            }}>\r\n              Schedule Audit\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* Report Incident Modal */}\r\n      <Modal\r\n        opened={reportIncidentOpened}\r\n        onClose={closeReportIncident}\r\n        title=\"Report Quality Incident\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"Incident Title\"\r\n              placeholder=\"Brief incident title\"\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Severity\"\r\n              placeholder=\"Select severity\"\r\n              data={[\r\n                { value: 'low', label: 'Low' },\r\n                { value: 'medium', label: 'Medium' },\r\n                { value: 'high', label: 'High' },\r\n                { value: 'critical', label: 'Critical' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Department\"\r\n              placeholder=\"Select department\"\r\n              data={[\r\n                { value: 'cardiology', label: 'Cardiology' },\r\n                { value: 'emergency', label: 'Emergency' },\r\n                { value: 'surgery', label: 'Surgery' },\r\n                { value: 'pediatrics', label: 'Pediatrics' },\r\n                { value: 'radiology', label: 'Radiology' }\r\n              ]}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Priority\"\r\n              placeholder=\"Select priority\"\r\n              data={[\r\n                { value: 'low', label: 'Low' },\r\n                { value: 'medium', label: 'Medium' },\r\n                { value: 'high', label: 'High' },\r\n                { value: 'urgent', label: 'Urgent' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Incident Description\"\r\n            placeholder=\"Provide detailed description of the quality incident\"\r\n            rows={4}\r\n            required\r\n          />\r\n          \r\n          <Textarea\r\n            label=\"Immediate Actions Taken\"\r\n            placeholder=\"Describe any immediate actions taken to address the incident\"\r\n            rows={3}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeReportIncident}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Incident Reported',\r\n                message: 'Quality incident has been successfully reported',\r\n                color: 'orange',\r\n              });\r\n              closeReportIncident();\r\n            }}>\r\n              Report Incident\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* Create Policy Modal */}\r\n      <Modal\r\n        opened={createPolicyOpened}\r\n        onClose={closeCreatePolicy}\r\n        title=\"Create New Policy\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"Policy Title\"\r\n              placeholder=\"Enter policy title\"\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Category\"\r\n              placeholder=\"Select category\"\r\n              data={[\r\n                { value: 'safety', label: 'Safety' },\r\n                { value: 'quality', label: 'Quality' },\r\n                { value: 'privacy', label: 'Privacy' },\r\n                { value: 'clinical', label: 'Clinical' },\r\n                { value: 'administrative', label: 'Administrative' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"Policy Owner\"\r\n              placeholder=\"Enter policy owner\"\r\n              required\r\n            />\r\n            <DatePickerInput\r\n              label=\"Effective Date\"\r\n              placeholder=\"Select effective date\"\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Policy Description\"\r\n            placeholder=\"Provide a brief description of the policy\"\r\n            rows={3}\r\n            required\r\n          />\r\n          \r\n          <MultiSelect\r\n            label=\"Applicable Departments\"\r\n            placeholder=\"Select departments\"\r\n            data={[\r\n              { value: 'all', label: 'All Departments' },\r\n              { value: 'cardiology', label: 'Cardiology' },\r\n              { value: 'emergency', label: 'Emergency' },\r\n              { value: 'surgery', label: 'Surgery' },\r\n              { value: 'pediatrics', label: 'Pediatrics' },\r\n              { value: 'radiology', label: 'Radiology' }\r\n            ]}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeCreatePolicy}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Policy Created',\r\n                message: 'New policy has been successfully created',\r\n                color: 'green',\r\n              });\r\n              closeCreatePolicy();\r\n            }}>\r\n              Create Policy\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default QualityAssurance;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\radiology\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'NumberInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Stepper' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 33,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 34,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 35,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Highlight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 37,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Accordion' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 38,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'FileButton' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 39,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleLineChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 44,
        "column": 46,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 61
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 57,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 61,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileText' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 63,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 63,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPrinter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconActivity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconExclamationMark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClockHour4' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 69,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 71,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalculator' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 73,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRefresh' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 75,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 76,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBarcode' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTemperature' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 78,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShieldCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 79,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlertTriangle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 80,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCircleCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 81,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 81,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 82,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLungs' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHeart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 84,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrain' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 86,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 86,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStethoscope' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 87,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMedicalCross' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 88,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 88,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPackage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 89,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTruck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 90,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 90,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 91,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 91,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReceipt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 92,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNotes' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 93,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTag' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 94,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 94,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlarm' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 95,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconInfoCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 96,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 96,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBed' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 97,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAmbulance' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 98,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 98,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFlask' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 99,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 99,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDroplet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 100,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 100,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNurse' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 101,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 101,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBandage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 102,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 102,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPill' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 103,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 103,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMask' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 104,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBolt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 105,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCut' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 107,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 107,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCamera' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 112,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 112,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMicroscope' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 114,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 114,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTarget' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 115,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFocus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 116,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconColorPicker' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 117,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMaximize' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 123,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 123,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMinimize' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 124,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 124,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconVolume' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 127,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 127,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 128,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 128,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCloudUpload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 129,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 129,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedReport' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 145,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 145,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedEquipment' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 146,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 146,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'studies' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 150,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 150,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'reports' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 151,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 151,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'orders' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 152,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 152,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'reportDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 242,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 242,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeReportDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 242,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 242,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'equipmentDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 243,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 243,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeEquipmentDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 243,
        "column": 69,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 243,
        "endColumn": 89
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'createReportOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 245,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 245,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeCreateReport' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 245,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 245,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'formatCurrency' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 355,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 355,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 75,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Alert,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Timeline,\r\n  Stepper,\r\n  RingProgress,\r\n  Tooltip,\r\n  List,\r\n  Image,\r\n  Loader,\r\n  Highlight,\r\n  Accordion,\r\n  FileButton\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleLineChart, SimpleBarChart } from '../../../components/MantineChart';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconCalendar,\r\n  IconRadioactive,\r\n  IconChartBar,\r\n  IconPhone,\r\n  IconMail,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconReportMedical,\r\n  IconClock,\r\n  IconClipboardList,\r\n  IconFileText,\r\n  IconDownload,\r\n  IconPrinter,\r\n  IconShare,\r\n  IconActivity,\r\n  IconExclamationMark,\r\n  IconClockHour4,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconUsers,\r\n  IconCalculator,\r\n  IconSettings,\r\n  IconRefresh,\r\n  IconFilter,\r\n  IconBarcode,\r\n  IconTemperature,\r\n  IconShieldCheck,\r\n  IconAlertTriangle,\r\n  IconCircleCheck,\r\n  IconClipboard,\r\n  IconLungs,\r\n  IconHeart,\r\n  IconBrain,\r\n  IconBone,\r\n  IconStethoscope,\r\n  IconMedicalCross,\r\n  IconPackage,\r\n  IconTruck,\r\n  IconCash,\r\n  IconReceipt,\r\n  IconNotes,\r\n  IconTag,\r\n  IconAlarm,\r\n  IconInfoCircle,\r\n  IconBed,\r\n  IconAmbulance,\r\n  IconFlask,\r\n  IconDroplet,\r\n  IconNurse,\r\n  IconBandage,\r\n  IconPill,\r\n  IconMask,\r\n  IconBolt,\r\n  IconZoom,\r\n  IconCut,\r\n  IconTool,\r\n  IconPhoto,\r\n  IconScan,\r\n  IconDeviceDesktop,\r\n  IconCamera,\r\n  IconUpload,\r\n  IconMicroscope,\r\n  IconTarget,\r\n  IconFocus,\r\n  IconColorPicker,\r\n  IconRuler,\r\n  IconRotate,\r\n  IconContrast,\r\n  IconBrightness,\r\n  IconAdjustments,\r\n  IconMaximize,\r\n  IconMinimize,\r\n  IconPlayerPlay,\r\n  IconPlayerPause,\r\n  IconVolume,\r\n  IconFileUpload,\r\n  IconCloudUpload\r\n} from '@tabler/icons-react';\r\n\r\n// Import types and mock data - using any for now due to type mismatches\r\n// Mock data imports removed\r\nimport radiologyService from '../../../services/radiology.service';\r\n\r\nconst RadiologyManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('requests');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedType, setSelectedType] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedPriority, setSelectedPriority] = useState<string>('');\r\n  const [selectedEquipmentStatus, setSelectedEquipmentStatus] = useState<string>('');\r\n  const [selectedRequest, setSelectedRequest] = useState<any>(null);\r\n  const [selectedReport, setSelectedReport] = useState<any>(null);\r\n  const [selectedEquipment, setSelectedEquipment] = useState<any>(null);\r\n  const [selectedStudy, setSelectedStudy] = useState<any>(null);\r\n\r\n  // API state\r\n  const [studies, setStudies] = useState<any[]>([]);\r\n  const [reports, setReports] = useState<any[]>([]);\r\n  const [orders, setOrders] = useState<any[]>([]);\r\n  const [radiologyStats, setRadiologyStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Fetch radiology studies\r\n  const fetchStudies = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await radiologyService.getStudies({ limit: 100 });\r\n      if (response.success) {\r\n        setStudies(response.data.items);\r\n      }\r\n    } catch (err: any) {\r\n      console.warn('Error fetching studies (using empty data):', err.response?.data?.message || err.message);\r\n      setError(null);\r\n      setStudies([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch radiology reports\r\n  const fetchReports = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await radiologyService.getReports({ limit: 100 });\r\n      if (response.success) {\r\n        setReports(response.data.items);\r\n      }\r\n    } catch (err: any) {\r\n      console.warn('Error fetching reports (using empty data):', err.response?.data?.message || err.message);\r\n      setError(null);\r\n      setReports([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch radiology orders\r\n  const fetchOrders = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await radiologyService.getOrders({ limit: 100 });\r\n      if (response.success) {\r\n        setOrders(response.data.items);\r\n      }\r\n    } catch (err: any) {\r\n      console.warn('Error fetching orders (using empty data):', err.response?.data?.message || err.message);\r\n      setError(null);\r\n      setOrders([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch radiology stats\r\n  const fetchRadiologyStats = async () => {\r\n    try {\r\n      const response = await radiologyService.getStats();\r\n      if (response.success) {\r\n        setRadiologyStats(response.data);\r\n      }\r\n    } catch (err: any) {\r\n      console.warn('Error fetching radiology stats (using default values):', err.response?.data?.message || err.message);\r\n      setRadiologyStats({\r\n        totalStudies: 0,\r\n        pendingStudies: 0,\r\n        completedStudies: 0,\r\n        totalReports: 0,\r\n        pendingReports: 0,\r\n        completedReports: 0\r\n      });\r\n    }\r\n  };\r\n\r\n  // Initial data fetch\r\n  useEffect(() => {\r\n    fetchStudies();\r\n    fetchReports();\r\n    fetchOrders();\r\n    fetchRadiologyStats();\r\n  }, []);\r\n\r\n  // Modal states\r\n  const [requestDetailOpened, { open: openRequestDetail, close: closeRequestDetail }] = useDisclosure(false);\r\n  const [addRequestOpened, { open: openAddRequest, close: closeAddRequest }] = useDisclosure(false);\r\n  const [reportDetailOpened, { open: openReportDetail, close: closeReportDetail }] = useDisclosure(false);\r\n  const [equipmentDetailOpened, { open: openEquipmentDetail, close: closeEquipmentDetail }] = useDisclosure(false);\r\n  const [studyViewerOpened, { open: openStudyViewer, close: closeStudyViewer }] = useDisclosure(false);\r\n  const [createReportOpened, { open: openCreateReport, close: closeCreateReport }] = useDisclosure(false);\r\n\r\n  // Filter imaging requests\r\n  const filteredRequests = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((request: any) => {\r\n      const matchesSearch = \r\n        request.patient?.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        request.patient?.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        request.requestId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        request.appointmentId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        request.examType?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        request.modality?.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesType = !selectedType || request.imagingType === selectedType || request.modality === selectedType;\r\n      const matchesStatus = !selectedStatus || request.status === selectedStatus;\r\n      const matchesPriority = !selectedPriority || request.priority === selectedPriority;\r\n\r\n      return matchesSearch && matchesType && matchesStatus && matchesPriority;\r\n    });\r\n  }, [searchQuery, selectedType, selectedStatus, selectedPriority]);\r\n\r\n  // Filter equipment\r\n  const filteredEquipment = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((equipment: any) => {\r\n      const matchesSearch = \r\n        equipment.equipmentName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        equipment.model.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        equipment.manufacturer.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesStatus = !selectedEquipmentStatus || equipment.status === selectedEquipmentStatus;\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedEquipmentStatus]);\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'pending':\r\n      case 'scheduled':\r\n      case 'draft':\r\n      case 'operational': return 'blue';\r\n      case 'in_progress':\r\n      case 'scanning':\r\n      case 'reviewing':\r\n      case 'in_use': return 'orange';\r\n      case 'completed':\r\n      case 'finalized':\r\n      case 'available': return 'green';\r\n      case 'cancelled':\r\n      case 'rejected':\r\n      case 'out_of_service': return 'red';\r\n      case 'on_hold':\r\n      case 'maintenance': return 'yellow';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'emergency': return 'red';\r\n      case 'urgent': return 'orange';\r\n      case 'routine': return 'blue';\r\n      case 'elective': return 'green';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getImagingTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'xray': return 'blue';\r\n      case 'ct': return 'green';\r\n      case 'mri': return 'purple';\r\n      case 'ultrasound': return 'cyan';\r\n      case 'mammography': return 'pink';\r\n      case 'nuclear_medicine': return 'orange';\r\n      case 'fluoroscopy': return 'indigo';\r\n      case 'pet': return 'red';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const handleViewRequest = (request: any) => {\r\n    setSelectedRequest(request);\r\n    openRequestDetail();\r\n  };\r\n\r\n  const handleViewReport = (report: any) => {\r\n    setSelectedReport(report);\r\n    openReportDetail();\r\n  };\r\n\r\n  const handleViewEquipment = (equipment: any) => {\r\n    setSelectedEquipment(equipment);\r\n    openEquipmentDetail();\r\n  };\r\n\r\n  const handleViewStudy = (study: any) => {\r\n    setSelectedStudy(study);\r\n    openStudyViewer();\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchQuery('');\r\n    setSelectedType('');\r\n    setSelectedStatus('');\r\n    setSelectedPriority('');\r\n    setSelectedEquipmentStatus('');\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-IN', {\r\n      style: 'currency',\r\n      currency: 'INR'\r\n    }).format(amount);\r\n  };\r\n\r\n  // Statistics cards\r\n  const statsCards = [\r\n    {\r\n      title: 'Total Studies',\r\n      value: radiologyStats?.totalStudies || 0,\r\n      icon: IconClipboardList,\r\n      color: 'blue',\r\n      trend: '+0%'\r\n    },\r\n    {\r\n      title: 'Completed Studies',\r\n      value: radiologyStats?.completedStudies || 0,\r\n      icon: IconScan,\r\n      color: 'green',\r\n      trend: '+0'\r\n    },\r\n    {\r\n      title: 'Pending Reports',\r\n      value: radiologyStats?.totalReports || 0,\r\n      icon: IconReportMedical,\r\n      color: 'orange',\r\n      trend: '0'\r\n    },\r\n    {\r\n      title: 'Pending Orders',\r\n      value: radiologyStats?.pendingOrders || 0,\r\n      icon: IconDeviceDesktop,\r\n      color: 'purple',\r\n      trend: '0% uptime'\r\n    }\r\n  ];\r\n\r\n  // Chart data\r\n  const imagingTypeData = [];\r\n\r\n  const monthlyVolume = [];\r\n  const equipmentUtilization = [];\r\n  const turnaroundTimes = [];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Radiology & Imaging</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage imaging requests, radiology reports, and imaging equipment\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={openAddRequest}\r\n            color=\"blue\"\r\n          >\r\n            New Request\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconRadioactive size={16} />}\r\n            color=\"red\"\r\n          >\r\n            Emergency Scan\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Statistics Cards */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {statsCards.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n              <Group justify=\"space-between\" mt=\"sm\">\r\n                <Badge \r\n                  color={stat.trend.includes('+') ? 'green' : stat.trend.includes('-') ? 'red' : 'blue'} \r\n                  variant=\"light\"\r\n                  size=\"sm\"\r\n                >\r\n                  {stat.trend}\r\n                </Badge>\r\n                <Text size=\"xs\" c=\"dimmed\">vs last month</Text>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"requests\" leftSection={<IconClipboardList size={16} />}>\r\n            Imaging Requests\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"reports\" leftSection={<IconReportMedical size={16} />}>\r\n            Radiology Reports\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"studies\" leftSection={<IconPhoto size={16} />}>\r\n            Image Studies\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"equipment\" leftSection={<IconDeviceDesktop size={16} />}>\r\n            Equipment\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"radiologists\" leftSection={<IconUsers size={16} />}>\r\n            Radiologists\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconChartBar size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Imaging Requests Tab */}\r\n        <Tabs.Panel value=\"requests\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {loading && (\r\n              <Group justify=\"center\" mb=\"md\">\r\n                <Loader size=\"sm\" />\r\n                <Text size=\"sm\" c=\"dimmed\">Loading radiology data...</Text>\r\n              </Group>\r\n            )}\r\n            {error && (\r\n              <Alert icon={<IconAlertCircle size={16} />} color=\"red\" mb=\"md\" onClose={() => setError(null)} withCloseButton>\r\n                {error}\r\n              </Alert>\r\n            )}\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search requests...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Imaging Type\"\r\n                data={[\r\n                  { value: 'xray', label: 'X-Ray' },\r\n                  { value: 'ct', label: 'CT Scan' },\r\n                  { value: 'mri', label: 'MRI' },\r\n                  { value: 'ultrasound', label: 'Ultrasound' },\r\n                  { value: 'mammography', label: 'Mammography' },\r\n                  { value: 'nuclear_medicine', label: 'Nuclear Medicine' },\r\n                  { value: 'fluoroscopy', label: 'Fluoroscopy' },\r\n                  { value: 'pet', label: 'PET Scan' }\r\n                ]}\r\n                value={selectedType}\r\n                onChange={setSelectedType}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'pending', label: 'Pending' },\r\n                  { value: 'scheduled', label: 'Scheduled' },\r\n                  { value: 'in_progress', label: 'In Progress' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'cancelled', label: 'Cancelled' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Priority\"\r\n                data={[\r\n                  { value: 'emergency', label: 'Emergency' },\r\n                  { value: 'urgent', label: 'Urgent' },\r\n                  { value: 'routine', label: 'Routine' },\r\n                  { value: 'elective', label: 'Elective' }\r\n                ]}\r\n                value={selectedPriority}\r\n                onChange={setSelectedPriority}\r\n                clearable\r\n              />\r\n              <Button variant=\"light\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Requests Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Request ID</Table.Th>\r\n                    <Table.Th>Patient</Table.Th>\r\n                    <Table.Th>Exam Type</Table.Th>\r\n                    <Table.Th>Imaging Type</Table.Th>\r\n                    <Table.Th>Ordered By</Table.Th>\r\n                    <Table.Th>Scheduled Date</Table.Th>\r\n                    <Table.Th>Priority</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredRequests.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={10}>\r\n                        <EmptyState\r\n                          icon={<IconRadioactive size={48} />}\r\n                          title=\"No radiology orders\"\r\n                          description=\"Order your first imaging study to get started\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredRequests.map((request) => (\r\n                      <Table.Tr key={request.id}>\r\n                        <Table.Td>\r\n                          <Text fw={500}>{(request as any).requestId || (request as any).appointmentId || 'N/A'}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group>\r\n                            <Avatar color=\"blue\" radius=\"xl\" size=\"sm\">\r\n                              {request.patient.firstName[0]}{request.patient.lastName[0]}\r\n                            </Avatar>\r\n                            <div>\r\n                              <Text size=\"sm\" fw={500}>\r\n                                {request.patient.firstName} {request.patient.lastName}\r\n                              </Text>\r\n                              <Text size=\"xs\" c=\"dimmed\">\r\n                                {(request.patient as any).medicalRecordNumber ? `MRN: ${(request.patient as any).medicalRecordNumber}` : request.patient.id}\r\n                              </Text>\r\n                            </div>\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500} lineClamp={1}>\r\n                              {(request as any).examType || (request as any).modality || 'N/A'}\r\n                            </Text>\r\n                            {(request as any).bodyPart && (\r\n                              <Text size=\"xs\" c=\"dimmed\">{(request as any).bodyPart}</Text>\r\n                            )}\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getImagingTypeColor((request as any).imagingType || (request as any).modality)} variant=\"light\">\r\n                            {((request as any).imagingType || (request as any).modality)?.replace('_', ' ').toUpperCase() || 'N/A'}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>\r\n                              {(request as any).orderingPhysician?.lastName ? `Dr. ${(request as any).orderingPhysician.lastName}` : 'N/A'}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              {(request as any).orderingPhysician?.department?.name || 'N/A'}\r\n                            </Text>\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>\r\n                              {request.scheduledDate ? (typeof request.scheduledDate === 'string' ? request.scheduledDate : new Date(request.scheduledDate).toISOString().split('T')[0]) : 'Not scheduled'}\r\n                            </Text>\r\n                            {request.scheduledDate && (\r\n                              <Text size=\"xs\" c=\"dimmed\">\r\n                                {typeof request.scheduledDate === 'string' ? '' : new Date(request.scheduledDate).toLocaleTimeString()}\r\n                              </Text>\r\n                            )}\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getPriorityColor((request as any).priority)} variant=\"light\">\r\n                            {(request as any).priority?.toUpperCase() || 'ROUTINE'}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getStatusColor(request.status)} variant=\"light\">\r\n                            {request.status.replace('_', ' ')}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon\r\n                              variant=\"subtle\"\r\n                              color=\"blue\"\r\n                              onClick={() => handleViewRequest(request)}\r\n                            >\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"green\">\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                            <Menu>\r\n                              <Menu.Target>\r\n                                <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                                  <IconDotsVertical size={16} />\r\n                                </ActionIcon>\r\n                              </Menu.Target>\r\n                              <Menu.Dropdown>\r\n                                <Menu.Item leftSection={<IconCalendar size={14} />}>\r\n                                  Schedule Exam\r\n                                </Menu.Item>\r\n                                <Menu.Item leftSection={<IconScan size={14} />}>\r\n                                  Start Scan\r\n                                </Menu.Item>\r\n                                <Menu.Item leftSection={<IconReportMedical size={14} />}>\r\n                                  Create Report\r\n                                </Menu.Item>\r\n                                <Menu.Divider />\r\n                                <Menu.Item \r\n                                  leftSection={<IconX size={14} />}\r\n                                  color=\"red\"\r\n                                >\r\n                                  Cancel Request\r\n                                </Menu.Item>\r\n                              </Menu.Dropdown>\r\n                            </Menu>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))\r\n                  )}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Radiology Reports Tab */}\r\n        <Tabs.Panel value=\"reports\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Radiology Reports</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />} onClick={openCreateReport}>\r\n                  Create Report\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconDownload size={16} />}>\r\n                  Export Reports\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Reports Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((report) => (\r\n                <Card key={report.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{report.reportId}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{(report as any).examType || report.modality || 'N/A'}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(report.status)} variant=\"light\">\r\n                      {report.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Patient</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {report.patient.firstName} {report.patient.lastName}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Radiologist</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {(report as any).radiologist?.lastName ? `Dr. ${(report as any).radiologist.lastName}` : 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Exam Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {(report as any).examDate ? (typeof (report as any).examDate === 'string' ? (report as any).examDate : new Date((report as any).examDate).toISOString().split('T')[0]) : 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Report Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {report.reportDate ? (typeof report.reportDate === 'string' ? report.reportDate : new Date(report.reportDate).toISOString().split('T')[0]) : 'Pending'}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {report.findings && (\r\n                    <div>\r\n                      <Text size=\"sm\" fw={500} mb=\"xs\">Findings</Text>\r\n                      <Text size=\"sm\" fw={500}>\r\n                        {(report as any).numberOfImages || 0}\r\n                      </Text>\r\n                    </div>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\" mt=\"md\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Priority: {(report as any).priority?.toUpperCase() || 'ROUTINE'}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewReport(report)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Image Studies Tab */}\r\n        <Tabs.Panel value=\"studies\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Image Studies</Title>\r\n              <Group>\r\n                <Button leftSection={<IconUpload size={16} />}>\r\n                  Upload Images\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconPhoto size={16} />}>\r\n                  Image Viewer\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Studies Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((study) => (\r\n                <Card key={study.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{(study as any).studyId || study.reportId || 'N/A'}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{(study as any).studyDescription || (study as any).modality || 'N/A'}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(study.status)} variant=\"light\">\r\n                      {study.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  {/* Study Thumbnail */}\r\n                  <div\r\n                    style={{\r\n                      height: '120px',\r\n                      backgroundColor: '#f1f3f4',\r\n                      borderRadius: '8px',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                      marginBottom: '1rem'\r\n                    }}\r\n                  >\r\n                    <IconPhoto size={48} color=\"#868e96\" />\r\n                  </div>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\">{(study as any).studySize || 'N/A'}</Text>\r\n                      <Text size=\"sm\" fw={500}>{(study as any).model || 'N/A'}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Location</Text>\r\n                      <Text size=\"sm\">{(study as any).location || 'N/A'}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Study Date</Text>\r\n                      <Text size=\"sm\">\r\n                        {(study as any).studyDate ? (typeof (study as any).studyDate === 'string' ? (study as any).studyDate : new Date((study as any).studyDate).toISOString().split('T')[0]) : 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Modality</Text>\r\n                      <Badge color={getImagingTypeColor((study as any).modality)} variant=\"light\" size=\"sm\">\r\n                        {((study as any).modality || 'N/A').toUpperCase()}\r\n                      </Badge>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Images</Text>\r\n                      <Text size=\"sm\" fw={500}>{(study as any).numberOfImages || 0}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Size: {((study as any).studySize ? ((study as any).studySize / (1024 * 1024)).toFixed(1) : '0')} MB\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewStudy(study)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconShare size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Equipment Tab */}\r\n        <Tabs.Panel value=\"equipment\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Imaging Equipment</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />}>\r\n                  Add Equipment\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconSettings size={16} />}>\r\n                  Maintenance Schedule\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Equipment Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search equipment...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'operational', label: 'Operational' },\r\n                  { value: 'maintenance', label: 'Maintenance' },\r\n                  { value: 'in_use', label: 'In Use' },\r\n                  { value: 'out_of_service', label: 'Out of Service' }\r\n                ]}\r\n                value={selectedEquipmentStatus}\r\n                onChange={setSelectedEquipmentStatus}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Equipment Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {filteredEquipment.map((equipment) => (\r\n                <Card key={equipment.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{equipment.equipmentName}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{equipment.manufacturer}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(equipment.status)} variant=\"light\">\r\n                      {equipment.status.replace('_', ' ')}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Model</Text>\r\n                      <Text size=\"sm\" fw={500}>{equipment.model}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Location</Text>\r\n                      <Text size=\"sm\">{(equipment as any).location || 'N/A'}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Installed</Text>\r\n                      <Text size=\"sm\">\r\n                        {(equipment as any).installationDate ? (typeof (equipment as any).installationDate === 'string' ? (equipment as any).installationDate : new Date((equipment as any).installationDate).toISOString().split('T')[0]) : 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Last Maintenance</Text>\r\n                      <Text size=\"sm\">\r\n                        {equipment.lastMaintenance || (equipment as any).lastMaintenanceDate || 'N/A'}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {(equipment as any).utilizationRate && (\r\n                    <div>\r\n                      <Group justify=\"space-between\" mb=\"xs\">\r\n                        <Text size=\"sm\" c=\"dimmed\">Utilization</Text>\r\n                        <Text size=\"sm\" fw={500}>{(equipment as any).utilizationRate}%</Text>\r\n                      </Group>\r\n                      <Progress \r\n                        value={(equipment as any).utilizationRate} \r\n                        size=\"sm\" \r\n                        color={(equipment as any).utilizationRate > 80 ? 'red' : (equipment as any).utilizationRate > 60 ? 'yellow' : 'green'}\r\n                      />\r\n                    </div>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\" mt=\"md\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Type: {equipment.equipmentType}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewEquipment(equipment)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconSettings size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconTool size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Radiologists Tab */}\r\n        <Tabs.Panel value=\"radiologists\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Radiologists</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Add Radiologist\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Radiologists Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((radiologist) => (\r\n                <Card key={radiologist.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group mb=\"md\">\r\n                    <Avatar size=\"lg\" color=\"blue\" radius=\"xl\">\r\n                      {((radiologist as any).firstName || radiologist.name || 'R')[0]}{((radiologist as any).lastName || '')[0] || 'R'}\r\n                    </Avatar>\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">\r\n                        {radiologist.name || `Dr. ${(radiologist as any).firstName || ''} ${(radiologist as any).lastName || ''}`}\r\n                      </Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{(radiologist as any).specialization || 'Radiology'}</Text>\r\n                      <Badge \r\n                        color={(radiologist as any).isAvailable ? 'green' : 'red'} \r\n                        variant=\"light\" \r\n                        size=\"sm\"\r\n                      >\r\n                        {(radiologist as any).isAvailable ? 'Available' : 'Busy'}\r\n                      </Badge>\r\n                    </div>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">License</Text>\r\n                      <Text size=\"sm\" fw={500}>{(radiologist as any).licenseNumber || 'N/A'}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Experience</Text>\r\n                      <Text size=\"sm\">{(radiologist as any).yearsOfExperience || 0} years</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Reports (Month)</Text>\r\n                      <Text size=\"sm\" fw={500}>{(radiologist as any).reportsThisMonth || 0}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500} mb=\"xs\">Specialties</Text>\r\n                    <Group gap=\"xs\">\r\n                      {((radiologist as any).subspecialties || []).slice(0, 3).map((specialty: string) => (\r\n                        <Badge key={specialty} size=\"xs\" variant=\"light\">\r\n                          {specialty}\r\n                        </Badge>\r\n                      ))}\r\n                      {((radiologist as any).subspecialties || []).length > 3 && (\r\n                        <Badge size=\"xs\" variant=\"light\" color=\"gray\">\r\n                          +{((radiologist as any).subspecialties || []).length - 3}\r\n                        </Badge>\r\n                      )}\r\n                    </Group>\r\n                  </div>\r\n\r\n                  <Group justify=\"space-between\" mt=\"md\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Avg Turnaround: {(radiologist as any).averageTurnaroundTime || 0}h\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconMail size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconPhone size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Analytics Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Radiology Analytics</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {/* Imaging Types Distribution */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Requests by Imaging Type</Title>\r\n                <MantineDonutChart\r\n                  data={imagingTypeData}\r\n                  size={160}\r\n                  thickness={30}\r\n                  withLabels\r\n                />\r\n              </Card>\r\n              \r\n              {/* Monthly Volume */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Monthly Imaging Volume</Title>\r\n                <SimpleAreaChart\r\n                  data={monthlyVolume}\r\n                  dataKey=\"month\"\r\n                  series={[{ name: 'volume', color: 'blue.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Turnaround Times */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Average Turnaround Times</Title>\r\n                <SimpleBarChart\r\n                  data={turnaroundTimes}\r\n                  dataKey=\"type\"\r\n                  series={[\r\n                    { name: 'hours', color: 'orange.6' }\r\n                  ]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Equipment Utilization */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Equipment Utilization</Title>\r\n                <SimpleBarChart\r\n                  data={equipmentUtilization}\r\n                  dataKey=\"equipment\"\r\n                  series={[\r\n                    { name: 'utilization', color: 'green.6' }\r\n                  ]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Key Metrics */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder style={{ gridColumn: '1 / -1' }}>\r\n                <Title order={4} mb=\"md\">Key Performance Indicators</Title>\r\n                <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }}>\r\n                  <div style={{ textAlign: 'center' }}>\r\n                    <RingProgress\r\n                      size={120}\r\n                      thickness={12}\r\n                      sections={[{ value: 0, color: 'green' }]}\r\n                      label={\r\n                        <Text size=\"lg\" fw={700} ta=\"center\">\r\n                          0%\r\n                        </Text>\r\n                      }\r\n                    />\r\n                    <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">Report Completion Rate</Text>\r\n                  </div>\r\n                  \r\n                  <div style={{ textAlign: 'center' }}>\r\n                    <RingProgress\r\n                      size={120}\r\n                      thickness={12}\r\n                      sections={[{ value: 0, color: 'blue' }]}\r\n                      label={\r\n                        <Text size=\"lg\" fw={700} ta=\"center\">\r\n                          0h\r\n                        </Text>\r\n                      }\r\n                    />\r\n                    <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">Avg Report Time</Text>\r\n                  </div>\r\n                  \r\n                  <div style={{ textAlign: 'center' }}>\r\n                    <RingProgress\r\n                      size={120}\r\n                      thickness={12}\r\n                      sections={[{ value: 0, color: 'orange' }]}\r\n                      label={\r\n                        <Text size=\"lg\" fw={700} ta=\"center\">\r\n                          0%\r\n                        </Text>\r\n                      }\r\n                    />\r\n                    <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">Equipment Uptime</Text>\r\n                  </div>\r\n                  \r\n                  <div style={{ textAlign: 'center' }}>\r\n                    <RingProgress\r\n                      size={120}\r\n                      thickness={12}\r\n                      sections={[{ value: 0, color: 'purple' }]}\r\n                      label={\r\n                        <Text size=\"lg\" fw={700} ta=\"center\">\r\n                          0%\r\n                        </Text>\r\n                      }\r\n                    />\r\n                    <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">Patient Satisfaction</Text>\r\n                  </div>\r\n                </SimpleGrid>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Request Detail Modal */}\r\n      <Modal\r\n        opened={requestDetailOpened}\r\n        onClose={closeRequestDetail}\r\n        title=\"Imaging Request Details\"\r\n        size=\"xl\"\r\n      >\r\n        {selectedRequest && (\r\n          <ScrollArea h={600}>\r\n            <Stack gap=\"md\">\r\n              <Group>\r\n                <ThemeIcon color=\"blue\" size=\"xl\" variant=\"light\">\r\n                  <IconClipboardList size={24} />\r\n                </ThemeIcon>\r\n                <div>\r\n                  <Title order={3}>{selectedRequest.examType}</Title>\r\n                  <Text c=\"dimmed\">Request ID: {selectedRequest.requestId}</Text>\r\n                  <Badge color={getStatusColor(selectedRequest.status)} variant=\"light\" mt=\"xs\">\r\n                    {selectedRequest.status.replace('_', ' ')}\r\n                  </Badge>\r\n                </div>\r\n              </Group>\r\n\r\n              <Divider />\r\n\r\n              <SimpleGrid cols={2}>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Patient</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {selectedRequest.patient.firstName} {selectedRequest.patient.lastName}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Medical Record Number</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedRequest.patient.medicalRecordNumber}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Imaging Type</Text>\r\n                  <Badge color={getImagingTypeColor(selectedRequest.imagingType)} variant=\"light\">\r\n                    {selectedRequest.imagingType.replace('_', ' ').toUpperCase()}\r\n                  </Badge>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Body Part</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedRequest.bodyPart || 'N/A'}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Ordering Physician</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    Dr. {selectedRequest.orderingPhysician.firstName} {selectedRequest.orderingPhysician.lastName}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Priority</Text>\r\n                  <Badge color={getPriorityColor(selectedRequest.priority)} variant=\"light\">\r\n                    {selectedRequest.priority.toUpperCase()}\r\n                  </Badge>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Request Date</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {new Date(selectedRequest.requestDate).toLocaleString()}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Scheduled Date</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {selectedRequest.scheduledDate ? \r\n                      new Date(selectedRequest.scheduledDate).toLocaleString() : \r\n                      'Not scheduled'\r\n                    }\r\n                  </Text>\r\n                </div>\r\n              </SimpleGrid>\r\n\r\n              {selectedRequest.clinicalHistory && (\r\n                <>\r\n                  <Divider />\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500} mb=\"sm\">Clinical History</Text>\r\n                    <Text size=\"sm\">{selectedRequest.clinicalHistory}</Text>\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              {selectedRequest.specialInstructions && (\r\n                <>\r\n                  <Divider />\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500} mb=\"sm\">Special Instructions</Text>\r\n                    <Text size=\"sm\">{selectedRequest.specialInstructions}</Text>\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              <Group justify=\"flex-end\">\r\n                <Button variant=\"light\" onClick={closeRequestDetail}>\r\n                  Close\r\n                </Button>\r\n                <Button leftSection={<IconCalendar size={16} />}>\r\n                  Schedule Exam\r\n                </Button>\r\n                <Button leftSection={<IconEdit size={16} />}>\r\n                  Edit Request\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </ScrollArea>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Add Request Modal */}\r\n      <Modal\r\n        opened={addRequestOpened}\r\n        onClose={closeAddRequest}\r\n        title=\"New Imaging Request\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Patient\"\r\n              placeholder=\"Select patient\"\r\n              data={[].map /* TODO: Fetch from API */(patient => ({ \r\n                value: patient.id, \r\n                label: `${patient.firstName} ${patient.lastName}` \r\n              }))}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Ordering Physician\"\r\n              placeholder=\"Select physician\"\r\n              data={[].filter /* TODO: Fetch from API */((staff: any) => staff.role === 'Doctor' || staff.role === 'doctor').map((doctor: any) => ({ \r\n                value: doctor.staffId, \r\n                label: `Dr. ${doctor.firstName} ${doctor.lastName}` \r\n              }))}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <TextInput\r\n            label=\"Exam Type\"\r\n            placeholder=\"Enter exam type\"\r\n            required\r\n          />\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Imaging Type\"\r\n              placeholder=\"Select imaging type\"\r\n              data={[\r\n                { value: 'xray', label: 'X-Ray' },\r\n                { value: 'ct', label: 'CT Scan' },\r\n                { value: 'mri', label: 'MRI' },\r\n                { value: 'ultrasound', label: 'Ultrasound' },\r\n                { value: 'mammography', label: 'Mammography' },\r\n                { value: 'nuclear_medicine', label: 'Nuclear Medicine' },\r\n                { value: 'fluoroscopy', label: 'Fluoroscopy' },\r\n                { value: 'pet', label: 'PET Scan' }\r\n              ]}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Priority\"\r\n              placeholder=\"Select priority\"\r\n              data={[\r\n                { value: 'emergency', label: 'Emergency' },\r\n                { value: 'urgent', label: 'Urgent' },\r\n                { value: 'routine', label: 'Routine' },\r\n                { value: 'elective', label: 'Elective' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <TextInput\r\n            label=\"Body Part\"\r\n            placeholder=\"Enter body part to be imaged\"\r\n          />\r\n          \r\n          <Textarea\r\n            label=\"Clinical History\"\r\n            placeholder=\"Enter clinical history\"\r\n            rows={3}\r\n            required\r\n          />\r\n          \r\n          <Textarea\r\n            label=\"Special Instructions\"\r\n            placeholder=\"Enter any special instructions\"\r\n            rows={2}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddRequest}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Request Created',\r\n                message: 'Imaging request has been successfully created',\r\n                color: 'green',\r\n              });\r\n              closeAddRequest();\r\n            }}>\r\n              Create Request\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* Study Viewer Modal */}\r\n      <Modal\r\n        opened={studyViewerOpened}\r\n        onClose={closeStudyViewer}\r\n        title=\"Image Study Viewer\"\r\n        size=\"xl\"\r\n        fullScreen\r\n      >\r\n        {selectedStudy && (\r\n          <div style={{ height: 'calc(100vh - 120px)' }}>\r\n            <Group justify=\"space-between\" mb=\"md\">\r\n              <div>\r\n                <Text fw={600} size=\"lg\">{selectedStudy.studyId}</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">\r\n                  {selectedStudy.patient.firstName} {selectedStudy.patient.lastName} - {selectedStudy.studyDescription}\r\n                </Text>\r\n              </div>\r\n              <Group>\r\n                <Button variant=\"light\" leftSection={<IconZoom size={16} />}>\r\n                  Zoom\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconAdjustments size={16} />}>\r\n                  Adjust\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconRuler size={16} />}>\r\n                  Measure\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconDownload size={16} />}>\r\n                  Download\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n            \r\n            <div\r\n              style={{\r\n                height: 'calc(100% - 60px)',\r\n                backgroundColor: '#1a1b1e',\r\n                borderRadius: '8px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                position: 'relative'\r\n              }}\r\n            >\r\n              <div style={{ textAlign: 'center', color: '#868e96' }}>\r\n                <IconPhoto size={120} />\r\n                <Text size=\"lg\" mt=\"md\">Medical Image Viewer</Text>\r\n                <Text size=\"sm\" c=\"dimmed\">\r\n                  {selectedStudy.numberOfImages} images available\r\n                </Text>\r\n              </div>\r\n              \r\n              {/* Image viewer controls */}\r\n              <div\r\n                style={{\r\n                  position: 'absolute',\r\n                  bottom: '20px',\r\n                  left: '50%',\r\n                  transform: 'translateX(-50%)',\r\n                  display: 'flex',\r\n                  gap: '10px'\r\n                }}\r\n              >\r\n                <ActionIcon color=\"white\" variant=\"filled\">\r\n                  <IconPlayerPlay size={16} />\r\n                </ActionIcon>\r\n                <ActionIcon color=\"white\" variant=\"filled\">\r\n                  <IconPlayerPause size={16} />\r\n                </ActionIcon>\r\n                <ActionIcon color=\"white\" variant=\"filled\">\r\n                  <IconRotate size={16} />\r\n                </ActionIcon>\r\n                <ActionIcon color=\"white\" variant=\"filled\">\r\n                  <IconContrast size={16} />\r\n                </ActionIcon>\r\n                <ActionIcon color=\"white\" variant=\"filled\">\r\n                  <IconBrightness size={16} />\r\n                </ActionIcon>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default RadiologyManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\reports\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Progress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Alert' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Switch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'NumberInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DatePickerInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 34,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MantineDonutChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 36,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleAreaChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 36,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 42,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReportAnalytics' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 45,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 48,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUsers' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 49,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 49,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBed' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 56,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 56,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPrinter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 57,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 59,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 63,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 63,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 64,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChartLine' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDatabase' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSettings' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 71,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockReports' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 121,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 121,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockAnalytics' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 208,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 208,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'scheduleReportOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 265,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 265,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeScheduleReport' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 265,
        "column": 67,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 265,
        "endColumn": 86
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 26,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  ActionIcon,\r\n  Stack,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Progress,\r\n  MultiSelect,\r\n  Divider,\r\n  Alert,\r\n  Timeline,\r\n  Switch,\r\n  NumberInput\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleBarChart, SimpleLineChart } from '../../../components/MantineChart';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconDownload,\r\n  IconChartBar,\r\n  IconReportAnalytics,\r\n  IconFileText,\r\n  IconFileReport,\r\n  IconCalendar,\r\n  IconUsers,\r\n  IconCurrencyDollar,\r\n  IconBed,\r\n  IconStethoscope,\r\n  IconActivity,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconClipboard,\r\n  IconPrinter,\r\n  IconShare,\r\n  IconFilter,\r\n  IconRefresh,\r\n  IconFileSpreadsheet,\r\n  IconFileTypePdf,\r\n  IconMail,\r\n  IconClock,\r\n  IconCheck,\r\n  IconX,\r\n  IconAlertCircle,\r\n  IconChartLine,\r\n  IconChartPie,\r\n  IconDatabase,\r\n  IconSettings,\r\n  IconCalendarEvent,\r\n  IconTarget,\r\n  IconDeviceAnalytics\r\n} from '@tabler/icons-react';\r\n\r\n// Types\r\ninterface Report {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  category: string;\r\n  type: 'financial' | 'operational' | 'clinical' | 'quality' | 'administrative';\r\n  format: 'PDF' | 'Excel' | 'CSV' | 'Dashboard';\r\n  frequency: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly' | 'on-demand';\r\n  status: 'active' | 'inactive' | 'scheduled' | 'running' | 'completed' | 'failed';\r\n  lastGenerated: string;\r\n  nextRun?: string;\r\n  createdBy: string;\r\n  createdAt: string;\r\n  parameters: Array<{\r\n    name: string;\r\n    type: string;\r\n    value: any;\r\n  }>;\r\n  recipients: string[];\r\n  size?: string;\r\n  executionTime?: number;\r\n}\r\n\r\ninterface Analytics {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  category: string;\r\n  metrics: Array<{\r\n    name: string;\r\n    value: number | string;\r\n    change?: {\r\n      value: number;\r\n      type: 'increase' | 'decrease';\r\n      period: string;\r\n    };\r\n  }>;\r\n  chartType: 'line' | 'bar' | 'pie' | 'area';\r\n  chartData: any[];\r\n  lastUpdated: string;\r\n}\r\n\r\n// Mock data\r\nconst mockReports: Report[] = [\r\n  {\r\n    id: '1',\r\n    name: 'Monthly Revenue Report',\r\n    description: 'Comprehensive revenue analysis for the month',\r\n    category: 'Financial Reports',\r\n    type: 'financial',\r\n    format: 'PDF',\r\n    frequency: 'monthly',\r\n    status: 'completed',\r\n    lastGenerated: '2024-01-01T09:00:00Z',\r\n    nextRun: '2024-02-01T09:00:00Z',\r\n    createdBy: 'Finance Team',\r\n    createdAt: '2023-12-01T10:00:00Z',\r\n    parameters: [\r\n      { name: 'month', type: 'date', value: '2024-01' },\r\n      { name: 'department', type: 'string', value: 'all' }\r\n    ],\r\n    recipients: ['finance@hospital.com', 'admin@hospital.com'],\r\n    size: '2.3 MB',\r\n    executionTime: 45\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Patient Satisfaction Survey',\r\n    description: 'Weekly patient feedback and satisfaction metrics',\r\n    category: 'Quality Reports',\r\n    type: 'quality',\r\n    format: 'Excel',\r\n    frequency: 'weekly',\r\n    status: 'active',\r\n    lastGenerated: '2024-01-08T10:00:00Z',\r\n    nextRun: '2024-01-15T10:00:00Z',\r\n    createdBy: 'Quality Team',\r\n    createdAt: '2023-11-15T14:30:00Z',\r\n    parameters: [\r\n      { name: 'week', type: 'date', value: '2024-W02' },\r\n      { name: 'rating_threshold', type: 'number', value: 4 }\r\n    ],\r\n    recipients: ['quality@hospital.com', 'nursing@hospital.com'],\r\n    size: '1.8 MB',\r\n    executionTime: 25\r\n  },\r\n  {\r\n    id: '3',\r\n    name: 'Daily Census Report',\r\n    description: 'Daily patient census and bed occupancy',\r\n    category: 'Operational Reports',\r\n    type: 'operational',\r\n    format: 'Dashboard',\r\n    frequency: 'daily',\r\n    status: 'running',\r\n    lastGenerated: '2024-01-15T06:00:00Z',\r\n    nextRun: '2024-01-16T06:00:00Z',\r\n    createdBy: 'Operations Team',\r\n    createdAt: '2023-10-01T08:00:00Z',\r\n    parameters: [\r\n      { name: 'date', type: 'date', value: '2024-01-15' },\r\n      { name: 'include_icu', type: 'boolean', value: true }\r\n    ],\r\n    recipients: ['operations@hospital.com', 'nursing@hospital.com'],\r\n    size: '0.5 MB',\r\n    executionTime: 10\r\n  },\r\n  {\r\n    id: '4',\r\n    name: 'Clinical Outcomes Report',\r\n    description: 'Monthly clinical performance and outcomes analysis',\r\n    category: 'Clinical Reports',\r\n    type: 'clinical',\r\n    format: 'PDF',\r\n    frequency: 'monthly',\r\n    status: 'scheduled',\r\n    lastGenerated: '2023-12-31T23:00:00Z',\r\n    nextRun: '2024-01-31T23:00:00Z',\r\n    createdBy: 'Clinical Team',\r\n    createdAt: '2023-09-15T11:00:00Z',\r\n    parameters: [\r\n      { name: 'month', type: 'date', value: '2024-01' },\r\n      { name: 'specialty', type: 'string', value: 'all' }\r\n    ],\r\n    recipients: ['clinical@hospital.com', 'doctors@hospital.com'],\r\n    size: '3.1 MB',\r\n    executionTime: 60\r\n  }\r\n];\r\n\r\nconst mockAnalytics: Analytics[] = [\r\n  {\r\n    id: '1',\r\n    title: 'Patient Flow Trends',\r\n    description: 'Daily patient admissions and discharges',\r\n    category: 'Operational Analytics',\r\n    metrics: [\r\n      { name: 'Admissions Today', value: 45, change: { value: 12, type: 'increase', period: 'vs yesterday' } },\r\n      { name: 'Discharges Today', value: 38, change: { value: 5, type: 'decrease', period: 'vs yesterday' } },\r\n      { name: 'Average LOS', value: '3.2 days', change: { value: 8, type: 'decrease', period: 'vs last month' } }\r\n    ],\r\n    chartType: 'line',\r\n    chartData: [\r\n      { date: 'Jan 10', admissions: 42, discharges: 35 },\r\n      { date: 'Jan 11', admissions: 38, discharges: 41 },\r\n      { date: 'Jan 12', admissions: 45, discharges: 39 },\r\n      { date: 'Jan 13', admissions: 41, discharges: 36 },\r\n      { date: 'Jan 14', admissions: 48, discharges: 42 },\r\n      { date: 'Jan 15', admissions: 45, discharges: 38 }\r\n    ],\r\n    lastUpdated: '2024-01-15T14:30:00Z'\r\n  },\r\n  {\r\n    id: '2',\r\n    title: 'Revenue Analysis',\r\n    description: 'Monthly revenue breakdown by department',\r\n    category: 'Financial Analytics',\r\n    metrics: [\r\n      { name: 'Total Revenue', value: '₹8,45,000', change: { value: 15, type: 'increase', period: 'vs last month' } },\r\n      { name: 'Insurance Claims', value: '₹5,20,000', change: { value: 8, type: 'increase', period: 'vs last month' } },\r\n      { name: 'Outstanding Amount', value: '₹1,25,000', change: { value: 5, type: 'decrease', period: 'vs last month' } }\r\n    ],\r\n    chartType: 'bar',\r\n    chartData: [\r\n      { department: 'Cardiology', revenue: 150000 },\r\n      { department: 'Orthopedics', revenue: 120000 },\r\n      { department: 'General Medicine', revenue: 100000 },\r\n      { department: 'Surgery', revenue: 180000 },\r\n      { department: 'Emergency', revenue: 90000 }\r\n    ],\r\n    lastUpdated: '2024-01-15T14:25:00Z'\r\n  }\r\n];\r\n\r\nconst ReportsAnalytics = () => {\r\n  const router = useRouter();\r\n  \r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('reports');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedReport, setSelectedReport] = useState<Report | null>(null);\r\n\r\n  // Modal states\r\n  const [reportDetailOpened, { open: openReportDetail, close: closeReportDetail }] = useDisclosure(false);\r\n  const [createReportOpened, { open: openCreateReport, close: closeCreateReport }] = useDisclosure(false);\r\n  const [scheduleReportOpened, { open: openScheduleReport, close: closeScheduleReport }] = useDisclosure(false);\r\n\r\n  // Filter reports\r\n  const filteredReports = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */((report) => {\r\n      const matchesSearch = \r\n        report.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        report.description.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesCategory = !selectedCategory || report.category === selectedCategory;\r\n      const matchesStatus = !selectedStatus || report.status === selectedStatus;\r\n\r\n      return matchesSearch && matchesCategory && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedCategory, selectedStatus]);\r\n\r\n  const handleViewReport = (report: Report) => {\r\n    setSelectedReport(report);\r\n    openReportDetail();\r\n  };\r\n\r\n  const formatDate = (date: string) => {\r\n    return new Date(date).toLocaleDateString('en-IN', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'green';\r\n      case 'active': return 'blue';\r\n      case 'running': return 'orange';\r\n      case 'scheduled': return 'cyan';\r\n      case 'failed': return 'red';\r\n      case 'inactive': return 'gray';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getFormatIcon = (format: string) => {\r\n    switch (format) {\r\n      case 'PDF': return <IconFileTypePdf size={16} />;\r\n      case 'Excel': return <IconFileSpreadsheet size={16} />;\r\n      case 'CSV': return <IconFileText size={16} />;\r\n      case 'Dashboard': return <IconChartBar size={16} />;\r\n      default: return <IconFileText size={16} />;\r\n    }\r\n  };\r\n\r\n  // Quick stats\r\n  const reportStats = {\r\n    total: 0 /* TODO: Fetch from API */,\r\n    active: [].filter /* TODO: Fetch from API */(r => r.status === 'active' || r.status === 'scheduled').length,\r\n    completed: [].filter /* TODO: Fetch from API */(r => r.status === 'completed').length,\r\n    failed: [].filter /* TODO: Fetch from API */(r => r.status === 'failed').length\r\n  };\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Reports & Analytics</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Comprehensive reporting and business intelligence dashboard\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button variant=\"light\" leftSection={<IconRefresh size={16} />}>\r\n            Refresh All\r\n          </Button>\r\n          <Button leftSection={<IconPlus size={16} />} onClick={openCreateReport}>\r\n            Create Report\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Quick Stats */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        <Card padding=\"lg\" radius=\"md\" withBorder>\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Text c=\"dimmed\" size=\"sm\" fw={500}>Total Reports</Text>\r\n              <Text fw={700} size=\"xl\">{reportStats.total}</Text>\r\n            </div>\r\n            <ThemeIcon color=\"blue\" size=\"xl\" radius=\"md\" variant=\"light\">\r\n              <IconFileText size={24} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"lg\" radius=\"md\" withBorder>\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Text c=\"dimmed\" size=\"sm\" fw={500}>Active Reports</Text>\r\n              <Text fw={700} size=\"xl\">{reportStats.active}</Text>\r\n            </div>\r\n            <ThemeIcon color=\"green\" size=\"xl\" radius=\"md\" variant=\"light\">\r\n              <IconActivity size={24} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"lg\" radius=\"md\" withBorder>\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Text c=\"dimmed\" size=\"sm\" fw={500}>Completed Today</Text>\r\n              <Text fw={700} size=\"xl\">{reportStats.completed}</Text>\r\n            </div>\r\n            <ThemeIcon color=\"cyan\" size=\"xl\" radius=\"md\" variant=\"light\">\r\n              <IconCheck size={24} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n\r\n        <Card padding=\"lg\" radius=\"md\" withBorder>\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Text c=\"dimmed\" size=\"sm\" fw={500}>Failed Reports</Text>\r\n              <Text fw={700} size=\"xl\">{reportStats.failed}</Text>\r\n            </div>\r\n            <ThemeIcon color=\"red\" size=\"xl\" radius=\"md\" variant=\"light\">\r\n              <IconAlertCircle size={24} />\r\n            </ThemeIcon>\r\n          </Group>\r\n        </Card>\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"reports\" leftSection={<IconFileText size={16} />}>\r\n            All Reports\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconChartBar size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"dashboards\" leftSection={<IconDeviceAnalytics size={16} />}>\r\n            Dashboards\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Reports Tab */}\r\n        <Tabs.Panel value=\"reports\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search reports...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Category\"\r\n                data={[\r\n                  { value: 'Financial Reports', label: 'Financial Reports' },\r\n                  { value: 'Operational Reports', label: 'Operational Reports' },\r\n                  { value: 'Clinical Reports', label: 'Clinical Reports' },\r\n                  { value: 'Quality Reports', label: 'Quality Reports' }\r\n                ]}\r\n                value={selectedCategory}\r\n                onChange={setSelectedCategory}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'active', label: 'Active' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'running', label: 'Running' },\r\n                  { value: 'scheduled', label: 'Scheduled' },\r\n                  { value: 'failed', label: 'Failed' },\r\n                  { value: 'inactive', label: 'Inactive' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Reports Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Report Name</Table.Th>\r\n                    <Table.Th>Category</Table.Th>\r\n                    <Table.Th>Format</Table.Th>\r\n                    <Table.Th>Frequency</Table.Th>\r\n                    <Table.Th>Last Generated</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredReports.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={7}>\r\n                        <EmptyState\r\n                          icon={<IconFileReport size={48} />}\r\n                          title=\"No reports generated\"\r\n                          description=\"Generate your first report\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredReports.map((report) => (\r\n                      <Table.Tr key={report.id}>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text fw={500} size=\"sm\">{report.name}</Text>\r\n                            <Text size=\"xs\" c=\"dimmed\" lineClamp={1}>{report.description}</Text>\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge variant=\"light\" size=\"sm\">\r\n                            {report.category}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            {getFormatIcon(report.format)}\r\n                            <Text size=\"sm\">{report.format}</Text>\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\" tt=\"capitalize\">{report.frequency}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{formatDate(report.lastGenerated)}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getStatusColor(report.status)} variant=\"light\">\r\n                            {report.status.toUpperCase()}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon\r\n                              variant=\"subtle\"\r\n                              color=\"blue\"\r\n                              onClick={() => handleViewReport(report)}\r\n                            >\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon \r\n                              variant=\"subtle\" \r\n                              color=\"green\"\r\n                              onClick={() => {\r\n                                notifications.show({\r\n                                  title: 'Downloading Report',\r\n                                  message: `${report.name} is being downloaded...`,\r\n                                  color: 'green',\r\n                                });\r\n                              }}\r\n                            >\r\n                              <IconDownload size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon \r\n                              variant=\"subtle\" \r\n                              color=\"orange\"\r\n                              onClick={() => {\r\n                                notifications.show({\r\n                                  title: 'Edit Report',\r\n                                  message: `Opening editor for ${report.name}...`,\r\n                                  color: 'orange',\r\n                                });\r\n                              }}\r\n                            >\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon \r\n                              variant=\"subtle\" \r\n                              color=\"purple\"\r\n                              onClick={() => {\r\n                                openScheduleReport();\r\n                                setSelectedReport(report);\r\n                              }}\r\n                            >\r\n                              <IconCalendarEvent size={16} />\r\n                            </ActionIcon>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))\r\n                  )}\r\n              </Table.Tbody>\r\n            </Table>\r\n          </ScrollArea>\r\n        </Paper>\r\n      </Tabs.Panel>\r\n\r\n        {/* Analytics Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\" mt=\"md\">\r\n            {[].map /* TODO: Fetch from API */((analytics) => (\r\n              <Card key={analytics.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                <Group justify=\"space-between\" mb=\"md\">\r\n                  <div>\r\n                    <Title order={4}>{analytics.title}</Title>\r\n                    <Text size=\"sm\" c=\"dimmed\">{analytics.description}</Text>\r\n                  </div>\r\n                  <Badge variant=\"light\">{analytics.category}</Badge>\r\n                </Group>\r\n\r\n                {/* Metrics */}\r\n                <SimpleGrid cols={3} spacing=\"md\" mb=\"md\">\r\n                  {analytics.metrics.map((metric, index) => (\r\n                    <div key={index} style={{ textAlign: 'center' }}>\r\n                      <Text size=\"xl\" fw={700} mb=\"xs\">{metric.value}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\" mb=\"xs\">{metric.name}</Text>\r\n                      {metric.change && (\r\n                        <Group justify=\"center\" gap=\"xs\">\r\n                          {metric.change.type === 'increase' ? \r\n                            <IconTrendingUp size={14} color=\"green\" /> : \r\n                            <IconTrendingDown size={14} color=\"red\" />\r\n                          }\r\n                          <Text \r\n                            size=\"xs\" \r\n                            c={metric.change.type === 'increase' ? 'green' : 'red'}\r\n                            fw={500}\r\n                          >\r\n                            {metric.change.value}%\r\n                          </Text>\r\n                        </Group>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </SimpleGrid>\r\n\r\n                {/* Chart */}\r\n                {analytics.chartType === 'line' && (\r\n                  <SimpleLineChart\r\n                    h={200}\r\n                    data={analytics.chartData}\r\n                    dataKey=\"date\"\r\n                    series={[\r\n                      { name: 'admissions', color: 'blue.6', label: 'Admissions' },\r\n                      { name: 'discharges', color: 'red.6', label: 'Discharges' }\r\n                    ]}\r\n                    curveType=\"linear\"\r\n                  />\r\n                )}\r\n\r\n                {analytics.chartType === 'bar' && (\r\n                  <SimpleBarChart\r\n                    h={200}\r\n                    data={analytics.chartData}\r\n                    dataKey=\"department\"\r\n                    series={[{ name: 'revenue', color: 'green.6' }]}\r\n                  />\r\n                )}\r\n\r\n                <Text size=\"xs\" c=\"dimmed\" ta=\"right\" mt=\"sm\">\r\n                  Last updated: {formatDate(analytics.lastUpdated)}\r\n                </Text>\r\n              </Card>\r\n            ))}\r\n          </SimpleGrid>\r\n        </Tabs.Panel>\r\n\r\n        {/* Dashboards Tab */}\r\n        <Tabs.Panel value=\"dashboards\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Interactive Dashboards</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {/* Executive Dashboard */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <ThemeIcon size=\"xl\" color=\"blue\" mb=\"md\">\r\n                  <IconChartPie size={24} />\r\n                </ThemeIcon>\r\n                <Title order={5} mb=\"xs\">Executive Dashboard</Title>\r\n                <Text size=\"sm\" c=\"dimmed\" mb=\"md\">\r\n                  High-level KPIs and strategic metrics for leadership\r\n                </Text>\r\n                <Group justify=\"space-between\">\r\n                  <Badge variant=\"light\" color=\"green\">Live</Badge>\r\n                  <Button size=\"xs\" variant=\"light\" onClick={() => {\r\n                    console.log('Executive Dashboard button clicked');\r\n                    notifications.show({\r\n                      title: 'Opening Dashboard',\r\n                      message: 'Executive Dashboard is loading...',\r\n                      color: 'blue',\r\n                    });\r\n                    // Navigate to main dashboard with executive view\r\n                    setTimeout(() => {\r\n                      console.log('Navigating to /dashboard');\r\n                      router.push('/dashboard');\r\n                    }, 1000);\r\n                  }}>Open Dashboard</Button>\r\n                </Group>\r\n              </Card>\r\n\r\n              {/* Operations Dashboard */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <ThemeIcon size=\"xl\" color=\"orange\" mb=\"md\">\r\n                  <IconActivity size={24} />\r\n                </ThemeIcon>\r\n                <Title order={5} mb=\"xs\">Operations Dashboard</Title>\r\n                <Text size=\"sm\" c=\"dimmed\" mb=\"md\">\r\n                  Real-time operational metrics and bed management\r\n                </Text>\r\n                <Group justify=\"space-between\">\r\n                  <Badge variant=\"light\" color=\"green\">Live</Badge>\r\n                  <Button size=\"xs\" variant=\"light\" onClick={() => {\r\n                    console.log('Operations Dashboard button clicked');\r\n                    notifications.show({\r\n                      title: 'Opening Dashboard',\r\n                      message: 'Operations Dashboard is loading...',\r\n                      color: 'orange',\r\n                    });\r\n                    // Navigate to IPD for operations metrics\r\n                    setTimeout(() => {\r\n                      console.log('Navigating to /dashboard/ipd');\r\n                      router.push('/dashboard/ipd');\r\n                    }, 1000);\r\n                  }}>Open Dashboard</Button>\r\n                </Group>\r\n              </Card>\r\n\r\n              {/* Financial Dashboard */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <ThemeIcon size=\"xl\" color=\"green\" mb=\"md\">\r\n                  <IconCurrencyDollar size={24} />\r\n                </ThemeIcon>\r\n                <Title order={5} mb=\"xs\">Financial Dashboard</Title>\r\n                <Text size=\"sm\" c=\"dimmed\" mb=\"md\">\r\n                  Revenue, billing, and financial performance tracking\r\n                </Text>\r\n                <Group justify=\"space-between\">\r\n                  <Badge variant=\"light\" color=\"green\">Live</Badge>\r\n                  <Button size=\"xs\" variant=\"light\" onClick={() => {\r\n                    console.log('Financial Dashboard button clicked');\r\n                    notifications.show({\r\n                      title: 'Opening Dashboard',\r\n                      message: 'Financial Dashboard is loading...',\r\n                      color: 'green',\r\n                    });\r\n                    // Navigate to finance dashboard\r\n                    setTimeout(() => {\r\n                      console.log('Navigating to /dashboard/finance');\r\n                      router.push('/dashboard/finance');\r\n                    }, 1000);\r\n                  }}>Open Dashboard</Button>\r\n                </Group>\r\n              </Card>\r\n\r\n              {/* Quality Dashboard */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <ThemeIcon size=\"xl\" color=\"purple\" mb=\"md\">\r\n                  <IconTarget size={24} />\r\n                </ThemeIcon>\r\n                <Title order={5} mb=\"xs\">Quality Dashboard</Title>\r\n                <Text size=\"sm\" c=\"dimmed\" mb=\"md\">\r\n                  Patient safety, satisfaction, and quality indicators\r\n                </Text>\r\n                <Group justify=\"space-between\">\r\n                  <Badge variant=\"light\" color=\"green\">Live</Badge>\r\n                  <Button size=\"xs\" variant=\"light\" onClick={() => {\r\n                    console.log('Quality Dashboard button clicked');\r\n                    notifications.show({\r\n                      title: 'Opening Dashboard',\r\n                      message: 'Quality Dashboard is loading...',\r\n                      color: 'purple',\r\n                    });\r\n                    // Navigate to quality management\r\n                    setTimeout(() => {\r\n                      console.log('Navigating to /dashboard/quality');\r\n                      router.push('/dashboard/quality');\r\n                    }, 1000);\r\n                  }}>Open Dashboard</Button>\r\n                </Group>\r\n              </Card>\r\n\r\n              {/* Clinical Dashboard */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <ThemeIcon size=\"xl\" color=\"red\" mb=\"md\">\r\n                  <IconStethoscope size={24} />\r\n                </ThemeIcon>\r\n                <Title order={5} mb=\"xs\">Clinical Dashboard</Title>\r\n                <Text size=\"sm\" c=\"dimmed\" mb=\"md\">\r\n                  Clinical outcomes, patient flow, and care metrics\r\n                </Text>\r\n                <Group justify=\"space-between\">\r\n                  <Badge variant=\"light\" color=\"green\">Live</Badge>\r\n                  <Button size=\"xs\" variant=\"light\" onClick={() => {\r\n                    console.log('Clinical Dashboard button clicked');\r\n                    notifications.show({\r\n                      title: 'Opening Dashboard',\r\n                      message: 'Clinical Dashboard is loading...',\r\n                      color: 'red',\r\n                    });\r\n                    // Navigate to EMR for clinical metrics\r\n                    setTimeout(() => {\r\n                      console.log('Navigating to /dashboard/emr');\r\n                      router.push('/dashboard/emr');\r\n                    }, 1000);\r\n                  }}>Open Dashboard</Button>\r\n                </Group>\r\n              </Card>\r\n\r\n              {/* Custom Dashboard */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder style={{ border: '2px dashed #e9ecef' }}>\r\n                <ThemeIcon size=\"xl\" color=\"gray\" mb=\"md\">\r\n                  <IconPlus size={24} />\r\n                </ThemeIcon>\r\n                <Title order={5} mb=\"xs\">Create Custom Dashboard</Title>\r\n                <Text size=\"sm\" c=\"dimmed\" mb=\"md\">\r\n                  Build your own dashboard with custom metrics\r\n                </Text>\r\n                <Button size=\"xs\" variant=\"outline\" fullWidth onClick={() => {\r\n                  console.log('Create Custom Dashboard button clicked');\r\n                  notifications.show({\r\n                    title: 'Create Dashboard',\r\n                    message: 'Custom dashboard builder coming soon!',\r\n                    color: 'blue',\r\n                  });\r\n                  // Future: Open custom dashboard builder modal\r\n                }}>\r\n                  Create Dashboard\r\n                </Button>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Report Detail Modal */}\r\n      <Modal\r\n        opened={reportDetailOpened}\r\n        onClose={closeReportDetail}\r\n        title=\"Report Details\"\r\n        size=\"lg\"\r\n      >\r\n        {selectedReport && (\r\n          <Stack gap=\"md\">\r\n            <Group justify=\"space-between\">\r\n              <div>\r\n                <Title order={3}>{selectedReport.name}</Title>\r\n                <Text c=\"dimmed\">{selectedReport.description}</Text>\r\n              </div>\r\n              <Badge color={getStatusColor(selectedReport.status)} variant=\"light\">\r\n                {selectedReport.status.toUpperCase()}\r\n              </Badge>\r\n            </Group>\r\n\r\n            <Divider />\r\n\r\n            <SimpleGrid cols={2} spacing=\"md\">\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" fw={500}>Category</Text>\r\n                <Text>{selectedReport.category}</Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" fw={500}>Format</Text>\r\n                <Text>{selectedReport.format}</Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" fw={500}>Frequency</Text>\r\n                <Text tt=\"capitalize\">{selectedReport.frequency}</Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" fw={500}>Created By</Text>\r\n                <Text>{selectedReport.createdBy}</Text>\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" fw={500}>Last Generated</Text>\r\n                <Text>{formatDate(selectedReport.lastGenerated)}</Text>\r\n              </div>\r\n              {selectedReport.nextRun && (\r\n                <div>\r\n                  <Text size=\"sm\" c=\"dimmed\" fw={500}>Next Run</Text>\r\n                  <Text>{formatDate(selectedReport.nextRun)}</Text>\r\n                </div>\r\n              )}\r\n            </SimpleGrid>\r\n\r\n            <div>\r\n              <Text size=\"sm\" c=\"dimmed\" fw={500} mb=\"xs\">Recipients</Text>\r\n              <Group gap=\"xs\">\r\n                {selectedReport.recipients.map((recipient, index) => (\r\n                  <Badge key={index} variant=\"outline\" size=\"sm\">\r\n                    {recipient}\r\n                  </Badge>\r\n                ))}\r\n              </Group>\r\n            </div>\r\n\r\n            <div>\r\n              <Text size=\"sm\" c=\"dimmed\" fw={500} mb=\"xs\">Parameters</Text>\r\n              <Stack gap=\"xs\">\r\n                {selectedReport.parameters.map((param, index) => (\r\n                  <Group key={index} justify=\"space-between\" p=\"xs\" style={{ backgroundColor: '#f8f9fa', borderRadius: '4px' }}>\r\n                    <Text size=\"sm\" fw={500}>{param.name}</Text>\r\n                    <Text size=\"sm\">{param.value}</Text>\r\n                  </Group>\r\n                ))}\r\n              </Stack>\r\n            </div>\r\n\r\n            <Group justify=\"flex-end\">\r\n              <Button variant=\"light\" onClick={closeReportDetail}>Close</Button>\r\n              <Button variant=\"light\" leftSection={<IconDownload size={16} />}>\r\n                Download\r\n              </Button>\r\n              <Button leftSection={<IconShare size={16} />}>\r\n                Share\r\n              </Button>\r\n            </Group>\r\n          </Stack>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Create Report Modal */}\r\n      <Modal\r\n        opened={createReportOpened}\r\n        onClose={closeCreateReport}\r\n        title=\"Create New Report\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2} spacing=\"md\">\r\n            <TextInput\r\n              label=\"Report Name\"\r\n              placeholder=\"Enter report name\"\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Category\"\r\n              placeholder=\"Select category\"\r\n              data={[\r\n                { value: 'financial', label: 'Financial' },\r\n                { value: 'operational', label: 'Operational' },\r\n                { value: 'clinical', label: 'Clinical' },\r\n                { value: 'quality', label: 'Quality' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n\r\n          <TextInput\r\n            label=\"Description\"\r\n            placeholder=\"Enter report description\"\r\n          />\r\n\r\n          <SimpleGrid cols={2} spacing=\"md\">\r\n            <Select\r\n              label=\"Format\"\r\n              placeholder=\"Select format\"\r\n              data={[\r\n                { value: 'PDF', label: 'PDF' },\r\n                { value: 'Excel', label: 'Excel' },\r\n                { value: 'CSV', label: 'CSV' },\r\n                { value: 'Dashboard', label: 'Dashboard' }\r\n              ]}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Frequency\"\r\n              placeholder=\"Select frequency\"\r\n              data={[\r\n                { value: 'daily', label: 'Daily' },\r\n                { value: 'weekly', label: 'Weekly' },\r\n                { value: 'monthly', label: 'Monthly' },\r\n                { value: 'quarterly', label: 'Quarterly' },\r\n                { value: 'yearly', label: 'Yearly' },\r\n                { value: 'on-demand', label: 'On Demand' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n\r\n          <MultiSelect\r\n            label=\"Recipients\"\r\n            placeholder=\"Select recipients\"\r\n            data={[\r\n              { value: 'finance@hospital.com', label: 'Finance Team' },\r\n              { value: 'operations@hospital.com', label: 'Operations Team' },\r\n              { value: 'clinical@hospital.com', label: 'Clinical Team' },\r\n              { value: 'admin@hospital.com', label: 'Administration' }\r\n            ]}\r\n            searchable\r\n          />\r\n\r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeCreateReport}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Report Created',\r\n                message: 'New report has been successfully created',\r\n                color: 'green',\r\n              });\r\n              closeCreateReport();\r\n            }}>\r\n              Create Report\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ReportsAnalytics;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\research\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Box' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Divider' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 42,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 43,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 43,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 46,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboardList' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 48,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconActivity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'projects' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'researchStats' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'loading' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 69,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 15
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.",
        "line": 74,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 74,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAllData]",
            "fix": { "range": [1800, 1802], "text": "[fetchAllData]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Stack,\r\n  SimpleGrid,\r\n  ThemeIcon,\r\n  Progress,\r\n  ActionIcon,\r\n  Menu,\r\n  ScrollArea,\r\n  Box,\r\n  Divider,\r\n  NumberInput,\r\n  Textarea\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconUsers,\r\n  IconFlask,\r\n  IconFileText,\r\n  IconCalendar,\r\n  IconTrendingUp,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconClipboardList,\r\n  IconBooks,\r\n  IconActivity,\r\n  IconDownload\r\n} from '@tabler/icons-react';\r\n// Mock data imports removed\r\nimport researchService from '../../../services/research.service';\r\n\r\nexport default function ResearchPage() {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string | null>('all');\r\n  const [activeTab, setActiveTab] = useState('trials');\r\n  const [selectedTrial, setSelectedTrial] = useState<any>(null);\r\n  \r\n  const [trialModalOpened, { open: openTrialModal, close: closeTrialModal }] = useDisclosure(false);\r\n  const [projectModalOpened, { open: openProjectModal, close: closeProjectModal }] = useDisclosure(false);\r\n\r\n  // API state\r\n  const [projects, setProjects] = useState<any[]>([]);\r\n  const [researchStats, setResearchStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Fetch data\r\n  useEffect(() => {\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  const fetchAllData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      await Promise.all([fetchProjects(), fetchStats()]);\r\n    } catch (err: any) {\r\n      console.error('Error loading research data:', err);\r\n      setError(err.response?.data?.message || err.message || 'Failed to load research data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchProjects = async () => {\r\n    try {\r\n      const response = await researchService.getProjects();\r\n      setProjects(response.data || []);\r\n    } catch (err: any) {\r\n      console.error('Error fetching research projects:', err);\r\n      setProjects([] /* TODO: Fetch from API */);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await researchService.getStats();\r\n      setResearchStats(response.data);\r\n    } catch (err: any) {\r\n      console.error('Error fetching research stats:', err);\r\n      setResearchStats([] /* TODO: Fetch from API */);\r\n    }\r\n  };\r\n\r\n  // Filter trials\r\n  const filteredTrials = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */(trial => {\r\n      const matchesSearch = trial.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n                          trial.trialId.toLowerCase().includes(searchQuery.toLowerCase());\r\n      const matchesStatus = statusFilter === 'all' || trial.status === statusFilter;\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [searchQuery, statusFilter]);\r\n\r\n  // Filter projects\r\n  const filteredProjects = useMemo(() => {\r\n    return [].filter /* TODO: Fetch from API */(project => {\r\n      const matchesSearch = project.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n                          project.projectId.toLowerCase().includes(searchQuery.toLowerCase());\r\n      const matchesStatus = statusFilter === 'all' || project.status === statusFilter;\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [searchQuery, statusFilter]);\r\n\r\n  const getStatusColor = (status: string) => {\r\n    const colors: Record<string, string> = {\r\n      recruiting: 'blue',\r\n      active: 'green',\r\n      completed: 'gray',\r\n      suspended: 'orange',\r\n      terminated: 'red',\r\n      planning: 'cyan',\r\n      on_hold: 'yellow',\r\n      cancelled: 'red'\r\n    };\r\n    return colors[status] || 'gray';\r\n  };\r\n\r\n  const getPhaseLabel = (phase: string) => {\r\n    const labels: Record<string, string> = {\r\n      phase_i: 'Phase I',\r\n      phase_ii: 'Phase II',\r\n      phase_iii: 'Phase III',\r\n      phase_iv: 'Phase IV',\r\n      na: 'N/A'\r\n    };\r\n    return labels[phase] || phase;\r\n  };\r\n\r\n  const quickStats = [\r\n    {\r\n      title: 'Active Trials',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconFlask,\r\n      color: 'blue'\r\n    },\r\n    {\r\n      title: 'Total Participants',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconUsers,\r\n      color: 'green'\r\n    },\r\n    {\r\n      title: 'Research Projects',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconBooks,\r\n      color: 'orange'\r\n    },\r\n    {\r\n      title: 'Adverse Events',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconAlertCircle,\r\n      color: 'red'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      <Stack gap=\"lg\">\r\n        {/* Header */}\r\n        <Group justify=\"space-between\">\r\n          <div>\r\n            <Title order={2}>Medical Research & Clinical Trials</Title>\r\n            <Text c=\"dimmed\" size=\"sm\">Manage clinical trials, research projects, and participant data</Text>\r\n          </div>\r\n          <Group>\r\n            <Button leftSection={<IconPlus size={16} />} onClick={openTrialModal}>\r\n              New Clinical Trial\r\n            </Button>\r\n            <Button leftSection={<IconPlus size={16} />} variant=\"light\" onClick={openProjectModal}>\r\n              New Research Project\r\n            </Button>\r\n          </Group>\r\n        </Group>\r\n\r\n        {/* Quick Stats */}\r\n        <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }}>\r\n          {quickStats.map((stat) => {\r\n            const Icon = stat.icon;\r\n            return (\r\n              <Card key={stat.title} shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>\r\n                      {stat.title}\r\n                    </Text>\r\n                    <Text size=\"xl\" fw={700} mt=\"xs\">\r\n                      {stat.value}\r\n                    </Text>\r\n                  </div>\r\n                  <ThemeIcon size=\"xl\" radius=\"md\" variant=\"light\" color={stat.color}>\r\n                    <Icon size={24} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n              </Card>\r\n            );\r\n          })}\r\n        </SimpleGrid>\r\n\r\n        {/* Main Content */}\r\n        <Paper shadow=\"sm\" p=\"md\" radius=\"md\" withBorder>\r\n          <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'trials')}>\r\n            <Tabs.List>\r\n              <Tabs.Tab value=\"trials\" leftSection={<IconFlask size={16} />}>\r\n                Clinical Trials\r\n              </Tabs.Tab>\r\n              <Tabs.Tab value=\"projects\" leftSection={<IconBooks size={16} />}>\r\n                Research Projects\r\n              </Tabs.Tab>\r\n              <Tabs.Tab value=\"participants\" leftSection={<IconUsers size={16} />}>\r\n                Participants\r\n              </Tabs.Tab>\r\n              <Tabs.Tab value=\"adverse\" leftSection={<IconAlertCircle size={16} />}>\r\n                Adverse Events\r\n              </Tabs.Tab>\r\n            </Tabs.List>\r\n\r\n            {/* Filters */}\r\n            <Group mt=\"md\" mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Filter by status\"\r\n                data={[\r\n                  { value: 'all', label: 'All Status' },\r\n                  { value: 'recruiting', label: 'Recruiting' },\r\n                  { value: 'active', label: 'Active' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'suspended', label: 'Suspended' }\r\n                ]}\r\n                value={statusFilter}\r\n                onChange={setStatusFilter}\r\n                clearable\r\n                style={{ width: 200 }}\r\n              />\r\n            </Group>\r\n\r\n            {/* Clinical Trials Tab */}\r\n            <Tabs.Panel value=\"trials\">\r\n              <ScrollArea>\r\n                <Table striped highlightOnHover>\r\n                  <Table.Thead>\r\n                    <Table.Tr>\r\n                      <Table.Th>Trial ID</Table.Th>\r\n                      <Table.Th>Title</Table.Th>\r\n                      <Table.Th>Phase</Table.Th>\r\n                      <Table.Th>Status</Table.Th>\r\n                      <Table.Th>Investigator</Table.Th>\r\n                      <Table.Th>Enrollment</Table.Th>\r\n                      <Table.Th>Actions</Table.Th>\r\n                    </Table.Tr>\r\n                  </Table.Thead>\r\n                  <Table.Tbody>\r\n                    {filteredTrials.map((trial) => (\r\n                      <Table.Tr key={trial.id}>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\" fw={500}>{trial.trialId}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{trial.title}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge variant=\"light\" size=\"sm\">\r\n                            {getPhaseLabel(trial.phase)}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getStatusColor(trial.status)} variant=\"light\" size=\"sm\">\r\n                            {trial.status}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{trial.investigator}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <Text size=\"sm\">\r\n                              {trial.currentEnrollment}/{trial.targetEnrollment}\r\n                            </Text>\r\n                            <Progress\r\n                              value={(trial.currentEnrollment / trial.targetEnrollment) * 100}\r\n                              size=\"sm\"\r\n                              style={{ width: 60 }}\r\n                            />\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon\r\n                              variant=\"subtle\"\r\n                              color=\"blue\"\r\n                              onClick={() => {\r\n                                setSelectedTrial(trial);\r\n                                openTrialModal();\r\n                              }}\r\n                            >\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                            <Menu position=\"bottom-end\">\r\n                              <Menu.Target>\r\n                                <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                                  <IconDotsVertical size={16} />\r\n                                </ActionIcon>\r\n                              </Menu.Target>\r\n                              <Menu.Dropdown>\r\n                                <Menu.Item leftSection={<IconDownload size={14} />}>\r\n                                  Export Data\r\n                                </Menu.Item>\r\n                                <Menu.Item leftSection={<IconFileText size={14} />}>\r\n                                  View Protocol\r\n                                </Menu.Item>\r\n                                <Menu.Divider />\r\n                                <Menu.Item color=\"red\" leftSection={<IconTrash size={14} />}>\r\n                                  Delete\r\n                                </Menu.Item>\r\n                              </Menu.Dropdown>\r\n                            </Menu>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))}\r\n                  </Table.Tbody>\r\n                </Table>\r\n              </ScrollArea>\r\n            </Tabs.Panel>\r\n\r\n            {/* Research Projects Tab */}\r\n            <Tabs.Panel value=\"projects\">\r\n              <ScrollArea>\r\n                <Table striped highlightOnHover>\r\n                  <Table.Thead>\r\n                    <Table.Tr>\r\n                      <Table.Th>Project ID</Table.Th>\r\n                      <Table.Th>Title</Table.Th>\r\n                      <Table.Th>Status</Table.Th>\r\n                      <Table.Th>Principal Investigator</Table.Th>\r\n                      <Table.Th>Department</Table.Th>\r\n                      <Table.Th>Budget</Table.Th>\r\n                      <Table.Th>Actions</Table.Th>\r\n                    </Table.Tr>\r\n                  </Table.Thead>\r\n                  <Table.Tbody>\r\n                    {filteredProjects.length === 0 ? (\r\n                      <Table.Tr>\r\n                        <Table.Td colSpan={7}>\r\n                          <EmptyState\r\n                            icon={<IconFlask size={48} />}\r\n                            title=\"No research projects\"\r\n                            description=\"Add your first research project\"\r\n                            size=\"sm\"\r\n                          />\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ) : (\r\n                      filteredProjects.map((project) => (\r\n                      <Table.Tr key={project.id}>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\" fw={500}>{project.projectId}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{project.title}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getStatusColor(project.status)} variant=\"light\" size=\"sm\">\r\n                            {project.status}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{project.principalInvestigator}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{project.department}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">₹{project.budget.toLocaleString()}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    )))}\r\n                  </Table.Tbody>\r\n                </Table>\r\n              </ScrollArea>\r\n            </Tabs.Panel>\r\n\r\n            {/* Participants Tab */}\r\n            <Tabs.Panel value=\"participants\">\r\n              <ScrollArea>\r\n                <Table striped highlightOnHover>\r\n                  <Table.Thead>\r\n                    <Table.Tr>\r\n                      <Table.Th>Participant ID</Table.Th>\r\n                      <Table.Th>Trial ID</Table.Th>\r\n                      <Table.Th>Name</Table.Th>\r\n                      <Table.Th>Status</Table.Th>\r\n                      <Table.Th>Study Arm</Table.Th>\r\n                      <Table.Th>Adherence</Table.Th>\r\n                      <Table.Th>Actions</Table.Th>\r\n                    </Table.Tr>\r\n                  </Table.Thead>\r\n                  <Table.Tbody>\r\n                    {[].map /* TODO: Fetch from API */((participant) => (\r\n                      <Table.Tr key={participant.id}>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\" fw={500}>{participant.participantId}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{participant.trialId}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{participant.patientName}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getStatusColor(participant.status)} variant=\"light\" size=\"sm\">\r\n                            {participant.status}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{participant.studyArm}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <Progress value={participant.adherenceRate} size=\"sm\" style={{ width: 60 }} />\r\n                            <Text size=\"sm\">{participant.adherenceRate}%</Text>\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))}\r\n                  </Table.Tbody>\r\n                </Table>\r\n              </ScrollArea>\r\n            </Tabs.Panel>\r\n\r\n            {/* Adverse Events Tab */}\r\n            <Tabs.Panel value=\"adverse\">\r\n              <ScrollArea>\r\n                <Table striped highlightOnHover>\r\n                  <Table.Thead>\r\n                    <Table.Tr>\r\n                      <Table.Th>Event ID</Table.Th>\r\n                      <Table.Th>Trial ID</Table.Th>\r\n                      <Table.Th>Participant</Table.Th>\r\n                      <Table.Th>Event Type</Table.Th>\r\n                      <Table.Th>Severity</Table.Th>\r\n                      <Table.Th>Status</Table.Th>\r\n                      <Table.Th>Actions</Table.Th>\r\n                    </Table.Tr>\r\n                  </Table.Thead>\r\n                  <Table.Tbody>\r\n                    {[].map /* TODO: Fetch from API */((event) => (\r\n                      <Table.Tr key={event.id}>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\" fw={500}>{event.eventId}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{event.trialId}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{event.participantId}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">{event.eventType.replace(/_/g, ' ')}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge\r\n                            color={event.severity === 'mild' ? 'yellow' : event.severity === 'moderate' ? 'orange' : 'red'}\r\n                            variant=\"light\"\r\n                            size=\"sm\"\r\n                          >\r\n                            {event.severity}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={event.ongoing ? 'orange' : 'green'} variant=\"light\" size=\"sm\">\r\n                            {event.ongoing ? 'Ongoing' : 'Resolved'}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))}\r\n                  </Table.Tbody>\r\n                </Table>\r\n              </ScrollArea>\r\n            </Tabs.Panel>\r\n          </Tabs>\r\n        </Paper>\r\n      </Stack>\r\n\r\n      {/* New Trial Modal */}\r\n      <Modal\r\n        opened={trialModalOpened}\r\n        onClose={closeTrialModal}\r\n        title={selectedTrial ? \"Trial Details\" : \"New Clinical Trial\"}\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <TextInput label=\"Trial ID\" placeholder=\"TRIAL-2024-XXX\" required />\r\n          <TextInput label=\"Title\" placeholder=\"Enter trial title\" required />\r\n          <Select\r\n            label=\"Phase\"\r\n            placeholder=\"Select phase\"\r\n            data={[\r\n              { value: 'phase_i', label: 'Phase I' },\r\n              { value: 'phase_ii', label: 'Phase II' },\r\n              { value: 'phase_iii', label: 'Phase III' },\r\n              { value: 'phase_iv', label: 'Phase IV' }\r\n            ]}\r\n            required\r\n          />\r\n          <Select\r\n            label=\"Status\"\r\n            placeholder=\"Select status\"\r\n            data={[\r\n              { value: 'recruiting', label: 'Recruiting' },\r\n              { value: 'active', label: 'Active' },\r\n              { value: 'suspended', label: 'Suspended' },\r\n              { value: 'completed', label: 'Completed' }\r\n            ]}\r\n            required\r\n          />\r\n          <TextInput label=\"Principal Investigator\" placeholder=\"Dr. Name\" required />\r\n          <NumberInput label=\"Target Enrollment\" placeholder=\"Enter number\" required />\r\n          <Textarea label=\"Description\" placeholder=\"Enter trial description\" rows={4} />\r\n          \r\n          <Group justify=\"flex-end\" mt=\"md\">\r\n            <Button variant=\"light\" onClick={closeTrialModal}>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                notifications.show({\r\n                  title: 'Success',\r\n                  message: 'Clinical trial saved successfully',\r\n                  color: 'green',\r\n                  icon: <IconCheck size={16} />\r\n                });\r\n                closeTrialModal();\r\n              }}\r\n            >\r\n              Save Trial\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* New Project Modal */}\r\n      <Modal\r\n        opened={projectModalOpened}\r\n        onClose={closeProjectModal}\r\n        title=\"New Research Project\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <TextInput label=\"Project ID\" placeholder=\"PROJ-2024-XXX\" required />\r\n          <TextInput label=\"Title\" placeholder=\"Enter project title\" required />\r\n          <Select\r\n            label=\"Status\"\r\n            placeholder=\"Select status\"\r\n            data={[\r\n              { value: 'planning', label: 'Planning' },\r\n              { value: 'active', label: 'Active' },\r\n              { value: 'on_hold', label: 'On Hold' },\r\n              { value: 'completed', label: 'Completed' }\r\n            ]}\r\n            required\r\n          />\r\n          <TextInput label=\"Principal Investigator\" placeholder=\"Dr. Name\" required />\r\n          <TextInput label=\"Department\" placeholder=\"Enter department\" required />\r\n          <NumberInput label=\"Budget\" placeholder=\"Enter budget\" required />\r\n          <TextInput label=\"Funding Source\" placeholder=\"Enter funding source\" required />\r\n          <Textarea label=\"Description\" placeholder=\"Enter project description\" rows={4} />\r\n          \r\n          <Group justify=\"flex-end\" mt=\"md\">\r\n            <Button variant=\"light\" onClick={closeProjectModal}>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                notifications.show({\r\n                  title: 'Success',\r\n                  message: 'Research project saved successfully',\r\n                  color: 'green',\r\n                  icon: <IconCheck size={16} />\r\n                });\r\n                closeProjectModal();\r\n              }}\r\n            >\r\n              Save Project\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\settings\\hospital\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Textarea' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { \r\n  Card, Title, Text, Stack, Group, Button, TextInput, \r\n  Select, Textarea, Tabs, Switch, ColorInput, FileInput,\r\n  NumberInput, Badge\r\n} from '@mantine/core';\r\nimport { \r\n  IconBuilding, IconPalette, IconUsers, IconBell, \r\n  IconShield, IconUpload, IconDeviceFloppy\r\n} from '@tabler/icons-react';\r\n\r\nexport default function HospitalSettingsPage() {\r\n  const [settings, setSettings] = useState({\r\n    // General Info\r\n    name: 'City General Hospital',\r\n    slug: 'city-general',\r\n    type: 'HOSPITAL',\r\n    email: 'admin@citygeneral.com',\r\n    phone: '+1 (555) 123-4567',\r\n    website: 'https://www.citygeneral.com',\r\n    \r\n    // Address\r\n    addressLine1: '123 Main Street',\r\n    addressLine2: 'Suite 100',\r\n    city: 'New York',\r\n    state: 'NY',\r\n    postalCode: '10001',\r\n    country: 'United States',\r\n    \r\n    // Branding\r\n    logoUrl: '',\r\n    primaryColor: '#667eea',\r\n    secondaryColor: '#764ba2',\r\n    \r\n    // Configuration\r\n    timezone: 'America/New_York',\r\n    dateFormat: 'MM/DD/YYYY',\r\n    timeFormat: '12h',\r\n    currency: 'USD',\r\n    language: 'en',\r\n    \r\n    // Features\r\n    appointmentsEnabled: true,\r\n    laboratoryEnabled: true,\r\n    pharmacyEnabled: true,\r\n    billingEnabled: true,\r\n    inventoryEnabled: true,\r\n    reportingEnabled: true,\r\n    \r\n    // Limits\r\n    maxUsers: 100,\r\n    maxPatients: 10000,\r\n    maxAppointments: 500,\r\n    storageGB: 100,\r\n    \r\n    // Notifications\r\n    emailNotifications: true,\r\n    smsNotifications: false,\r\n    appointmentReminders: true,\r\n    billingAlerts: true,\r\n  });\r\n\r\n  const [saved, setSaved] = useState(false);\r\n\r\n  const handleSave = () => {\r\n    console.log('Saving settings:', settings);\r\n    setSaved(true);\r\n    setTimeout(() => setSaved(false), 3000);\r\n  };\r\n\r\n  return (\r\n    <Stack gap=\"xl\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\">\r\n        <div>\r\n          <Title order={2} mb=\"xs\">Hospital Settings</Title>\r\n          <Text c=\"dimmed\">Manage your hospital configuration and preferences</Text>\r\n        </div>\r\n        <Button \r\n          leftSection={<IconDeviceFloppy size={16} />}\r\n          onClick={handleSave}\r\n          style={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }}\r\n        >\r\n          {saved ? 'Saved!' : 'Save Changes'}\r\n        </Button>\r\n      </Group>\r\n\r\n      {/* Settings Tabs */}\r\n      <Tabs defaultValue=\"general\">\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"general\" leftSection={<IconBuilding size={16} />}>\r\n            General\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"branding\" leftSection={<IconPalette size={16} />}>\r\n            Branding\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"features\" leftSection={<IconUsers size={16} />}>\r\n            Features & Limits\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"notifications\" leftSection={<IconBell size={16} />}>\r\n            Notifications\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"security\" leftSection={<IconShield size={16} />}>\r\n            Security\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* General Settings */}\r\n        <Tabs.Panel value=\"general\" pt=\"xl\">\r\n          <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\r\n            <Title order={4} mb=\"md\">Basic Information</Title>\r\n            <Stack gap=\"md\">\r\n              <TextInput\r\n                label=\"Hospital Name\"\r\n                placeholder=\"Enter hospital name\"\r\n                value={settings.name}\r\n                onChange={(e) => setSettings({ ...settings, name: e.target.value })}\r\n                required\r\n              />\r\n\r\n              <Group grow>\r\n                <TextInput\r\n                  label=\"Slug\"\r\n                  placeholder=\"hospital-slug\"\r\n                  value={settings.slug}\r\n                  onChange={(e) => setSettings({ ...settings, slug: e.target.value })}\r\n                  description=\"Used in URLs (e.g., citygeneral.hmssaas.com)\"\r\n                  required\r\n                />\r\n                <Select\r\n                  label=\"Facility Type\"\r\n                  value={settings.type}\r\n                  onChange={(value) => setSettings({ ...settings, type: value || '' })}\r\n                  data={[\r\n                    { value: 'HOSPITAL', label: 'Hospital' },\r\n                    { value: 'CLINIC', label: 'Clinic' },\r\n                    { value: 'DIAGNOSTIC_CENTER', label: 'Diagnostic Center' },\r\n                  ]}\r\n                />\r\n              </Group>\r\n\r\n              <Group grow>\r\n                <TextInput\r\n                  label=\"Email\"\r\n                  type=\"email\"\r\n                  placeholder=\"contact@hospital.com\"\r\n                  value={settings.email}\r\n                  onChange={(e) => setSettings({ ...settings, email: e.target.value })}\r\n                  required\r\n                />\r\n                <TextInput\r\n                  label=\"Phone\"\r\n                  placeholder=\"+1 (555) 123-4567\"\r\n                  value={settings.phone}\r\n                  onChange={(e) => setSettings({ ...settings, phone: e.target.value })}\r\n                  required\r\n                />\r\n              </Group>\r\n\r\n              <TextInput\r\n                label=\"Website\"\r\n                placeholder=\"https://www.hospital.com\"\r\n                value={settings.website}\r\n                onChange={(e) => setSettings({ ...settings, website: e.target.value })}\r\n              />\r\n            </Stack>\r\n          </Card>\r\n\r\n          <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder mt=\"xl\">\r\n            <Title order={4} mb=\"md\">Address</Title>\r\n            <Stack gap=\"md\">\r\n              <TextInput\r\n                label=\"Address Line 1\"\r\n                placeholder=\"Street address\"\r\n                value={settings.addressLine1}\r\n                onChange={(e) => setSettings({ ...settings, addressLine1: e.target.value })}\r\n              />\r\n              <TextInput\r\n                label=\"Address Line 2\"\r\n                placeholder=\"Apartment, suite, etc.\"\r\n                value={settings.addressLine2}\r\n                onChange={(e) => setSettings({ ...settings, addressLine2: e.target.value })}\r\n              />\r\n              <Group grow>\r\n                <TextInput\r\n                  label=\"City\"\r\n                  value={settings.city}\r\n                  onChange={(e) => setSettings({ ...settings, city: e.target.value })}\r\n                />\r\n                <TextInput\r\n                  label=\"State/Province\"\r\n                  value={settings.state}\r\n                  onChange={(e) => setSettings({ ...settings, state: e.target.value })}\r\n                />\r\n              </Group>\r\n              <Group grow>\r\n                <TextInput\r\n                  label=\"Postal Code\"\r\n                  value={settings.postalCode}\r\n                  onChange={(e) => setSettings({ ...settings, postalCode: e.target.value })}\r\n                />\r\n                <TextInput\r\n                  label=\"Country\"\r\n                  value={settings.country}\r\n                  onChange={(e) => setSettings({ ...settings, country: e.target.value })}\r\n                />\r\n              </Group>\r\n            </Stack>\r\n          </Card>\r\n\r\n          <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder mt=\"xl\">\r\n            <Title order={4} mb=\"md\">Regional Settings</Title>\r\n            <Stack gap=\"md\">\r\n              <Group grow>\r\n                <Select\r\n                  label=\"Timezone\"\r\n                  value={settings.timezone}\r\n                  onChange={(value) => setSettings({ ...settings, timezone: value || '' })}\r\n                  data={[\r\n                    { value: 'America/New_York', label: 'Eastern Time (ET)' },\r\n                    { value: 'America/Chicago', label: 'Central Time (CT)' },\r\n                    { value: 'America/Denver', label: 'Mountain Time (MT)' },\r\n                    { value: 'America/Los_Angeles', label: 'Pacific Time (PT)' },\r\n                  ]}\r\n                />\r\n                <Select\r\n                  label=\"Currency\"\r\n                  value={settings.currency}\r\n                  onChange={(value) => setSettings({ ...settings, currency: value || '' })}\r\n                  data={[\r\n                    { value: 'USD', label: 'US Dollar ($)' },\r\n                    { value: 'EUR', label: 'Euro (€)' },\r\n                    { value: 'GBP', label: 'British Pound (£)' },\r\n                    { value: 'INR', label: 'Indian Rupee (₹)' },\r\n                  ]}\r\n                />\r\n              </Group>\r\n              <Group grow>\r\n                <Select\r\n                  label=\"Date Format\"\r\n                  value={settings.dateFormat}\r\n                  onChange={(value) => setSettings({ ...settings, dateFormat: value || '' })}\r\n                  data={[\r\n                    { value: 'MM/DD/YYYY', label: 'MM/DD/YYYY' },\r\n                    { value: 'DD/MM/YYYY', label: 'DD/MM/YYYY' },\r\n                    { value: 'YYYY-MM-DD', label: 'YYYY-MM-DD' },\r\n                  ]}\r\n                />\r\n                <Select\r\n                  label=\"Time Format\"\r\n                  value={settings.timeFormat}\r\n                  onChange={(value) => setSettings({ ...settings, timeFormat: value || '' })}\r\n                  data={[\r\n                    { value: '12h', label: '12 Hour (AM/PM)' },\r\n                    { value: '24h', label: '24 Hour' },\r\n                  ]}\r\n                />\r\n              </Group>\r\n            </Stack>\r\n          </Card>\r\n        </Tabs.Panel>\r\n\r\n        {/* Branding */}\r\n        <Tabs.Panel value=\"branding\" pt=\"xl\">\r\n          <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\r\n            <Title order={4} mb=\"md\">Visual Identity</Title>\r\n            <Stack gap=\"md\">\r\n              <FileInput\r\n                label=\"Hospital Logo\"\r\n                placeholder=\"Upload logo\"\r\n                leftSection={<IconUpload size={16} />}\r\n                description=\"Recommended: 200x200px, PNG or JPG\"\r\n              />\r\n\r\n              <Group grow>\r\n                <ColorInput\r\n                  label=\"Primary Color\"\r\n                  value={settings.primaryColor}\r\n                  onChange={(value) => setSettings({ ...settings, primaryColor: value })}\r\n                  format=\"hex\"\r\n                />\r\n                <ColorInput\r\n                  label=\"Secondary Color\"\r\n                  value={settings.secondaryColor}\r\n                  onChange={(value) => setSettings({ ...settings, secondaryColor: value })}\r\n                  format=\"hex\"\r\n                />\r\n              </Group>\r\n\r\n              <Text size=\"sm\" c=\"dimmed\" mt=\"md\">\r\n                Preview your brand colors:\r\n              </Text>\r\n              <Group>\r\n                <div style={{\r\n                  width: '100px',\r\n                  height: '100px',\r\n                  background: settings.primaryColor,\r\n                  borderRadius: '8px',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  color: 'white',\r\n                  fontWeight: 600\r\n                }}>\r\n                  Primary\r\n                </div>\r\n                <div style={{\r\n                  width: '100px',\r\n                  height: '100px',\r\n                  background: settings.secondaryColor,\r\n                  borderRadius: '8px',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  color: 'white',\r\n                  fontWeight: 600\r\n                }}>\r\n                  Secondary\r\n                </div>\r\n              </Group>\r\n            </Stack>\r\n          </Card>\r\n        </Tabs.Panel>\r\n\r\n        {/* Features & Limits */}\r\n        <Tabs.Panel value=\"features\" pt=\"xl\">\r\n          <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\r\n            <Title order={4} mb=\"md\">Enabled Features</Title>\r\n            <Stack gap=\"md\">\r\n              <Switch\r\n                label=\"Appointments Module\"\r\n                description=\"Enable online appointment booking and scheduling\"\r\n                checked={settings.appointmentsEnabled}\r\n                onChange={(e) => setSettings({ ...settings, appointmentsEnabled: e.currentTarget.checked })}\r\n              />\r\n              <Switch\r\n                label=\"Laboratory Module\"\r\n                description=\"Lab tests, results, and management\"\r\n                checked={settings.laboratoryEnabled}\r\n                onChange={(e) => setSettings({ ...settings, laboratoryEnabled: e.currentTarget.checked })}\r\n              />\r\n              <Switch\r\n                label=\"Pharmacy Module\"\r\n                description=\"Medicine inventory and dispensing\"\r\n                checked={settings.pharmacyEnabled}\r\n                onChange={(e) => setSettings({ ...settings, pharmacyEnabled: e.currentTarget.checked })}\r\n              />\r\n              <Switch\r\n                label=\"Billing Module\"\r\n                description=\"Invoicing, payments, and financial tracking\"\r\n                checked={settings.billingEnabled}\r\n                onChange={(e) => setSettings({ ...settings, billingEnabled: e.currentTarget.checked })}\r\n              />\r\n              <Switch\r\n                label=\"Inventory Module\"\r\n                description=\"Medical supplies and equipment management\"\r\n                checked={settings.inventoryEnabled}\r\n                onChange={(e) => setSettings({ ...settings, inventoryEnabled: e.currentTarget.checked })}\r\n              />\r\n              <Switch\r\n                label=\"Reporting & Analytics\"\r\n                description=\"Advanced reports and data visualization\"\r\n                checked={settings.reportingEnabled}\r\n                onChange={(e) => setSettings({ ...settings, reportingEnabled: e.currentTarget.checked })}\r\n              />\r\n            </Stack>\r\n          </Card>\r\n\r\n          <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder mt=\"xl\">\r\n            <Group justify=\"space-between\" mb=\"md\">\r\n              <Title order={4}>Usage Limits</Title>\r\n              <Badge size=\"lg\" color=\"violet\">PROFESSIONAL PLAN</Badge>\r\n            </Group>\r\n            <Stack gap=\"md\">\r\n              <div>\r\n                <Text size=\"sm\" fw={500} mb=\"xs\">Maximum Users</Text>\r\n                <NumberInput\r\n                  value={settings.maxUsers}\r\n                  onChange={(value) => setSettings({ ...settings, maxUsers: value as number })}\r\n                  min={1}\r\n                  max={1000}\r\n                  disabled\r\n                  description=\"Upgrade plan to increase limit\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" fw={500} mb=\"xs\">Maximum Patients</Text>\r\n                <NumberInput\r\n                  value={settings.maxPatients}\r\n                  onChange={(value) => setSettings({ ...settings, maxPatients: value as number })}\r\n                  min={100}\r\n                  max={100000}\r\n                  disabled\r\n                  description=\"Upgrade plan to increase limit\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <Text size=\"sm\" fw={500} mb=\"xs\">Storage (GB)</Text>\r\n                <NumberInput\r\n                  value={settings.storageGB}\r\n                  onChange={(value) => setSettings({ ...settings, storageGB: value as number })}\r\n                  min={10}\r\n                  max={1000}\r\n                  disabled\r\n                  description=\"Upgrade plan to increase limit\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n          </Card>\r\n        </Tabs.Panel>\r\n\r\n        {/* Notifications */}\r\n        <Tabs.Panel value=\"notifications\" pt=\"xl\">\r\n          <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\r\n            <Title order={4} mb=\"md\">Notification Preferences</Title>\r\n            <Stack gap=\"md\">\r\n              <Switch\r\n                label=\"Email Notifications\"\r\n                description=\"Receive notifications via email\"\r\n                checked={settings.emailNotifications}\r\n                onChange={(e) => setSettings({ ...settings, emailNotifications: e.currentTarget.checked })}\r\n              />\r\n              <Switch\r\n                label=\"SMS Notifications\"\r\n                description=\"Receive notifications via SMS\"\r\n                checked={settings.smsNotifications}\r\n                onChange={(e) => setSettings({ ...settings, smsNotifications: e.currentTarget.checked })}\r\n              />\r\n              <Switch\r\n                label=\"Appointment Reminders\"\r\n                description=\"Send automatic appointment reminders to patients\"\r\n                checked={settings.appointmentReminders}\r\n                onChange={(e) => setSettings({ ...settings, appointmentReminders: e.currentTarget.checked })}\r\n              />\r\n              <Switch\r\n                label=\"Billing Alerts\"\r\n                description=\"Get notified about pending payments and invoices\"\r\n                checked={settings.billingAlerts}\r\n                onChange={(e) => setSettings({ ...settings, billingAlerts: e.currentTarget.checked })}\r\n              />\r\n            </Stack>\r\n          </Card>\r\n        </Tabs.Panel>\r\n\r\n        {/* Security */}\r\n        <Tabs.Panel value=\"security\" pt=\"xl\">\r\n          <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\r\n            <Title order={4} mb=\"md\">Security Settings</Title>\r\n            <Stack gap=\"md\">\r\n              <Text size=\"sm\" c=\"dimmed\">\r\n                Contact your system administrator to modify security settings\r\n              </Text>\r\n              <Button variant=\"light\" color=\"red\" disabled>\r\n                Two-Factor Authentication (Coming Soon)\r\n              </Button>\r\n              <Button variant=\"light\" disabled>\r\n                Session Timeout Settings (Coming Soon)\r\n              </Button>\r\n              <Button variant=\"light\" disabled>\r\n                IP Whitelist (Coming Soon)\r\n              </Button>\r\n            </Stack>\r\n          </Card>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n    </Stack>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\settings\\subscription\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 33,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 21,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { \r\n  Card, Title, Text, Stack, Group, Button, Badge, \r\n  Progress, Table, Tabs, Alert, Timeline\r\n} from '@mantine/core';\r\nimport { \r\n  IconCreditCard, IconReceipt, IconTrendingUp, IconAlertCircle,\r\n  IconCheck, IconX, IconClock, IconDownload\r\n} from '@tabler/icons-react';\r\n\r\nexport default function SubscriptionManagementPage() {\r\n  const [currentPlan] = useState({\r\n    name: 'PROFESSIONAL',\r\n    price: 299,\r\n    billingCycle: 'monthly',\r\n    startDate: '2024-01-01',\r\n    endDate: '2025-01-01',\r\n    status: 'ACTIVE',\r\n    autoRenew: true,\r\n  });\r\n\r\n  const [usage] = useState({\r\n    users: { current: 78, limit: 100 },\r\n    patients: { current: 4250, limit: 10000 },\r\n    storage: { current: 45, limit: 100 }, // GB\r\n    appointments: { current: 1250, limit: 5000 },\r\n  });\r\n\r\n  const [invoices] = useState([\r\n    {\r\n      id: 'INV-2024-003',\r\n      date: '2024-03-01',\r\n      amount: 299,\r\n      status: 'PAID',\r\n      description: 'Professional Plan - March 2024'\r\n    },\r\n    {\r\n      id: 'INV-2024-002',\r\n      date: '2024-02-01',\r\n      amount: 299,\r\n      status: 'PAID',\r\n      description: 'Professional Plan - February 2024'\r\n    },\r\n    {\r\n      id: 'INV-2024-001',\r\n      date: '2024-01-01',\r\n      amount: 299,\r\n      status: 'PAID',\r\n      description: 'Professional Plan - January 2024'\r\n    },\r\n  ]);\r\n\r\n  const plans = [\r\n    {\r\n      name: 'FREE',\r\n      price: 0,\r\n      features: [\r\n        '30 days trial',\r\n        'Up to 5 users',\r\n        '100 patients',\r\n        'Basic features',\r\n        'Email support'\r\n      ],\r\n      limits: {\r\n        users: 5,\r\n        patients: 100,\r\n        storage: 5,\r\n      }\r\n    },\r\n    {\r\n      name: 'BASIC',\r\n      price: 99,\r\n      popular: false,\r\n      features: [\r\n        'Up to 20 users',\r\n        '1,000 patients',\r\n        'Core HMS features',\r\n        'Email & Chat support',\r\n        '10 GB storage'\r\n      ],\r\n      limits: {\r\n        users: 20,\r\n        patients: 1000,\r\n        storage: 10,\r\n      }\r\n    },\r\n    {\r\n      name: 'PROFESSIONAL',\r\n      price: 299,\r\n      popular: true,\r\n      features: [\r\n        'Up to 100 users',\r\n        '10,000 patients',\r\n        'All advanced features',\r\n        'Priority support',\r\n        '100 GB storage',\r\n        'Custom branding',\r\n        'API access'\r\n      ],\r\n      limits: {\r\n        users: 100,\r\n        patients: 10000,\r\n        storage: 100,\r\n      }\r\n    },\r\n    {\r\n      name: 'ENTERPRISE',\r\n      price: null,\r\n      popular: false,\r\n      features: [\r\n        'Unlimited users',\r\n        'Unlimited patients',\r\n        'All features',\r\n        '24/7 Dedicated support',\r\n        'Unlimited storage',\r\n        'Custom integrations',\r\n        'SLA guarantee',\r\n        'On-premise option'\r\n      ],\r\n      limits: {\r\n        users: Infinity,\r\n        patients: Infinity,\r\n        storage: Infinity,\r\n      }\r\n    },\r\n  ];\r\n\r\n  const daysUntilRenewal = Math.ceil(\r\n    (new Date(currentPlan.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)\r\n  );\r\n\r\n  return (\r\n    <Stack gap=\"xl\">\r\n      {/* Header */}\r\n      <div>\r\n        <Title order={2} mb=\"xs\">Subscription & Billing</Title>\r\n        <Text c=\"dimmed\">Manage your subscription plan and billing information</Text>\r\n      </div>\r\n\r\n      {/* Current Plan Overview */}\r\n      <Card shadow=\"sm\" padding=\"xl\" radius=\"md\" withBorder>\r\n        <Group justify=\"space-between\" mb=\"xl\">\r\n          <div>\r\n            <Group gap=\"sm\" mb=\"xs\">\r\n              <Title order={3}>{currentPlan.name} Plan</Title>\r\n              <Badge \r\n                size=\"lg\" \r\n                color={currentPlan.status === 'ACTIVE' ? 'green' : 'orange'}\r\n                variant=\"light\"\r\n              >\r\n                {currentPlan.status}\r\n              </Badge>\r\n            </Group>\r\n            <Text c=\"dimmed\">\r\n              ${currentPlan.price}/{currentPlan.billingCycle} • Renews on{' '}\r\n              {new Date(currentPlan.endDate).toLocaleDateString()}\r\n            </Text>\r\n          </div>\r\n          <Button \r\n            size=\"lg\" \r\n            variant=\"light\"\r\n            style={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', color: 'white' }}\r\n          >\r\n            Upgrade Plan\r\n          </Button>\r\n        </Group>\r\n\r\n        {daysUntilRenewal < 30 && (\r\n          <Alert \r\n            icon={<IconAlertCircle size={16} />} \r\n            title=\"Renewal Notice\" \r\n            color=\"blue\"\r\n            mb=\"xl\"\r\n          >\r\n            Your subscription will auto-renew in {daysUntilRenewal} days\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Usage Stats */}\r\n        <Title order={4} mb=\"md\">Usage & Limits</Title>\r\n        <Stack gap=\"md\">\r\n          <div>\r\n            <Group justify=\"space-between\" mb=\"xs\">\r\n              <Text size=\"sm\" fw={500}>Users</Text>\r\n              <Text size=\"sm\" c=\"dimmed\">\r\n                {usage.users.current} / {usage.users.limit}\r\n              </Text>\r\n            </Group>\r\n            <Progress \r\n              value={(usage.users.current / usage.users.limit) * 100} \r\n              color={usage.users.current / usage.users.limit > 0.8 ? 'orange' : 'blue'}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Group justify=\"space-between\" mb=\"xs\">\r\n              <Text size=\"sm\" fw={500}>Patients</Text>\r\n              <Text size=\"sm\" c=\"dimmed\">\r\n                {usage.patients.current.toLocaleString()} / {usage.patients.limit.toLocaleString()}\r\n              </Text>\r\n            </Group>\r\n            <Progress \r\n              value={(usage.patients.current / usage.patients.limit) * 100} \r\n              color={usage.patients.current / usage.patients.limit > 0.8 ? 'orange' : 'green'}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Group justify=\"space-between\" mb=\"xs\">\r\n              <Text size=\"sm\" fw={500}>Storage</Text>\r\n              <Text size=\"sm\" c=\"dimmed\">\r\n                {usage.storage.current} GB / {usage.storage.limit} GB\r\n              </Text>\r\n            </Group>\r\n            <Progress \r\n              value={(usage.storage.current / usage.storage.limit) * 100} \r\n              color={usage.storage.current / usage.storage.limit > 0.8 ? 'orange' : 'violet'}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Group justify=\"space-between\" mb=\"xs\">\r\n              <Text size=\"sm\" fw={500}>Appointments (This Month)</Text>\r\n              <Text size=\"sm\" c=\"dimmed\">\r\n                {usage.appointments.current.toLocaleString()} / {usage.appointments.limit.toLocaleString()}\r\n              </Text>\r\n            </Group>\r\n            <Progress \r\n              value={(usage.appointments.current / usage.appointments.limit) * 100} \r\n              color=\"cyan\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </Card>\r\n\r\n      {/* Tabs */}\r\n      <Tabs defaultValue=\"plans\">\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"plans\" leftSection={<IconTrendingUp size={16} />}>\r\n            Available Plans\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"billing\" leftSection={<IconCreditCard size={16} />}>\r\n            Billing History\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"payment\" leftSection={<IconReceipt size={16} />}>\r\n            Payment Method\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Available Plans */}\r\n        <Tabs.Panel value=\"plans\" pt=\"xl\">\r\n          <div style={{\r\n            display: 'grid',\r\n            gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',\r\n            gap: '1.5rem'\r\n          }}>\r\n            {plans.map((plan) => (\r\n              <Card \r\n                key={plan.name}\r\n                shadow=\"sm\" \r\n                padding=\"lg\" \r\n                radius=\"md\" \r\n                withBorder\r\n                style={{\r\n                  border: plan.name === currentPlan.name ? '2px solid #667eea' : undefined,\r\n                  position: 'relative'\r\n                }}\r\n              >\r\n                {plan.popular && (\r\n                  <Badge \r\n                    color=\"violet\" \r\n                    variant=\"filled\"\r\n                    style={{ position: 'absolute', top: '1rem', right: '1rem' }}\r\n                  >\r\n                    POPULAR\r\n                  </Badge>\r\n                )}\r\n\r\n                <Stack gap=\"md\">\r\n                  <div>\r\n                    <Title order={4} mb=\"xs\">{plan.name}</Title>\r\n                    <Group gap=\"xs\" align=\"baseline\">\r\n                      <Title order={2}>\r\n                        {plan.price === null ? 'Custom' : `$${plan.price}`}\r\n                      </Title>\r\n                      {plan.price !== null && (\r\n                        <Text c=\"dimmed\" size=\"sm\">/month</Text>\r\n                      )}\r\n                    </Group>\r\n                  </div>\r\n\r\n                  <Stack gap=\"xs\">\r\n                    {plan.features.map((feature, idx) => (\r\n                      <Group key={idx} gap=\"xs\">\r\n                        <IconCheck size={16} color=\"#10b981\" />\r\n                        <Text size=\"sm\">{feature}</Text>\r\n                      </Group>\r\n                    ))}\r\n                  </Stack>\r\n\r\n                  {plan.name === currentPlan.name ? (\r\n                    <Button variant=\"light\" color=\"gray\" disabled fullWidth>\r\n                      Current Plan\r\n                    </Button>\r\n                  ) : (\r\n                    <Button \r\n                      fullWidth\r\n                      variant={plan.popular ? 'filled' : 'light'}\r\n                      style={plan.popular ? {\r\n                        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'\r\n                      } : undefined}\r\n                    >\r\n                      {plan.price === null ? 'Contact Sales' : 'Upgrade'}\r\n                    </Button>\r\n                  )}\r\n                </Stack>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </Tabs.Panel>\r\n\r\n        {/* Billing History */}\r\n        <Tabs.Panel value=\"billing\" pt=\"xl\">\r\n          <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\r\n            <Title order={4} mb=\"md\">Invoice History</Title>\r\n            <Table highlightOnHover>\r\n              <Table.Thead>\r\n                <Table.Tr>\r\n                  <Table.Th>Invoice</Table.Th>\r\n                  <Table.Th>Date</Table.Th>\r\n                  <Table.Th>Description</Table.Th>\r\n                  <Table.Th>Amount</Table.Th>\r\n                  <Table.Th>Status</Table.Th>\r\n                  <Table.Th>Action</Table.Th>\r\n                </Table.Tr>\r\n              </Table.Thead>\r\n              <Table.Tbody>\r\n                {invoices.map((invoice) => (\r\n                  <Table.Tr key={invoice.id}>\r\n                    <Table.Td>\r\n                      <Text fw={600} size=\"sm\">{invoice.id}</Text>\r\n                    </Table.Td>\r\n                    <Table.Td>\r\n                      {new Date(invoice.date).toLocaleDateString()}\r\n                    </Table.Td>\r\n                    <Table.Td>{invoice.description}</Table.Td>\r\n                    <Table.Td>\r\n                      <Text fw={600}>${invoice.amount}</Text>\r\n                    </Table.Td>\r\n                    <Table.Td>\r\n                      <Badge \r\n                        color={invoice.status === 'PAID' ? 'green' : 'orange'}\r\n                        variant=\"light\"\r\n                      >\r\n                        {invoice.status}\r\n                      </Badge>\r\n                    </Table.Td>\r\n                    <Table.Td>\r\n                      <Button \r\n                        size=\"xs\" \r\n                        variant=\"subtle\"\r\n                        leftSection={<IconDownload size={14} />}\r\n                      >\r\n                        Download\r\n                      </Button>\r\n                    </Table.Td>\r\n                  </Table.Tr>\r\n                ))}\r\n              </Table.Tbody>\r\n            </Table>\r\n          </Card>\r\n        </Tabs.Panel>\r\n\r\n        {/* Payment Method */}\r\n        <Tabs.Panel value=\"payment\" pt=\"xl\">\r\n          <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\r\n            <Title order={4} mb=\"md\">Payment Method</Title>\r\n            <Alert icon={<IconCreditCard size={16} />} title=\"Payment Integration\" color=\"blue\">\r\n              <Text size=\"sm\" mb=\"md\">\r\n                Payment method management will be integrated with Stripe. This allows you to:\r\n              </Text>\r\n              <Stack gap=\"xs\">\r\n                <Group gap=\"xs\">\r\n                  <IconCheck size={16} />\r\n                  <Text size=\"sm\">Add/update credit cards</Text>\r\n                </Group>\r\n                <Group gap=\"xs\">\r\n                  <IconCheck size={16} />\r\n                  <Text size=\"sm\">Set up automatic billing</Text>\r\n                </Group>\r\n                <Group gap=\"xs\">\r\n                  <IconCheck size={16} />\r\n                  <Text size=\"sm\">Manage billing address</Text>\r\n                </Group>\r\n              </Stack>\r\n            </Alert>\r\n\r\n            <Button mt=\"md\" variant=\"light\">\r\n              Update Payment Method (Coming Soon)\r\n            </Button>\r\n          </Card>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n    </Stack>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\staff\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Grid' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 17,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Textarea' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Switch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RingProgress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Flex' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 32,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 35,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Anchor' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 36,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 44,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 52,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMapPin' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 56,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 56,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCertificate' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 58,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 58,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSchool' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 59,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBriefcase' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 60,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconActivity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCurrencyRupee' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 74,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 74,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUserCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 76,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShieldCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Department' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 17,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Shift' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Attendance' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 46
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Gender' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 86,
        "column": 20,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 86,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockDepartments' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 89,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockShifts' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 90,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 90,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockAttendance' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 91,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 91,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockLeaveRequests' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 92,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockTraining' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 93,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'staffToEdit' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 110,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 110,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'editStaffOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 116,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeEditStaff' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 116,
        "column": 57,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 71
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchStaff'. Either include it or remove the dependency array.",
        "line": 122,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 122,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchStaff]",
            "fix": { "range": [3136, 3138], "text": "[fetchStaff]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 267,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 267,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 35,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Grid,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  NumberInput,\r\n  Textarea,\r\n  Switch,\r\n  Progress,\r\n  Alert,\r\n  Timeline,\r\n  SimpleGrid,\r\n  RingProgress,\r\n  Flex,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  List,\r\n  Anchor\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconFilter,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconUsers,\r\n  IconUserPlus,\r\n  IconCalendar,\r\n  IconClock,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconPhone,\r\n  IconMail,\r\n  IconMapPin,\r\n  IconStethoscope,\r\n  IconCertificate,\r\n  IconSchool,\r\n  IconBriefcase,\r\n  IconCalendarEvent,\r\n  IconClockHour3,\r\n  IconChartBar,\r\n  IconUserCheck,\r\n  IconUserX,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconBuilding,\r\n  IconMedicalCross,\r\n  IconActivity,\r\n  IconAward,\r\n  IconCurrencyRupee,\r\n  IconCalendarStats,\r\n  IconUserCircle,\r\n  IconShieldCheck\r\n} from '@tabler/icons-react';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleBarChart } from '../../../components/MantineChart';\r\n\r\n// Import API service\r\nimport staffService from '../../../services/staff.service';\r\n\r\n// Import types\r\nimport { Staff, Department, Shift, Attendance } from '../../../types/staff';\r\nimport { UserRole, Gender, Status } from '../../../types/common';\r\n\r\n// Fallback empty data\r\nconst mockDepartments: any[] = [];\r\nconst mockShifts: any[] = [];\r\nconst mockAttendance: any[] = [];\r\nconst mockLeaveRequests: any[] = [];\r\nconst mockTraining: any[] = [];\r\n\r\nconst StaffManagement = () => {\r\n  // API State\r\n  const [staff, setStaff] = useState<any[]>([]);\r\n  const [staffStats, setStaffStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // State management\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedDepartment, setSelectedDepartment] = useState<string>('');\r\n  const [selectedRole, setSelectedRole] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [sortBy, setSortBy] = useState<string>('name');\r\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\r\n  const [selectedStaff, setSelectedStaff] = useState<any>(null);\r\n  const [staffToEdit, setStaffToEdit] = useState<any>(null);\r\n  const [activeTab, setActiveTab] = useState<string>('list');\r\n\r\n  // Modal states\r\n  const [staffDetailOpened, { open: openStaffDetail, close: closeStaffDetail }] = useDisclosure(false);\r\n  const [addStaffOpened, { open: openAddStaff, close: closeAddStaff }] = useDisclosure(false);\r\n  const [editStaffOpened, { open: openEditStaff, close: closeEditStaff }] = useDisclosure(false);\r\n\r\n  // Fetch staff data\r\n  useEffect(() => {\r\n    fetchStaff();\r\n    fetchStats();\r\n  }, []);\r\n\r\n  const fetchStaff = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await staffService.getStaff({\r\n        search: searchQuery || undefined,\r\n        role: selectedRole || undefined,\r\n        status: selectedStatus as any || undefined,\r\n      });\r\n      console.log('Staff API response:', response);\r\n      setStaff(response.data?.staff || []);\r\n      setError(null);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching staff (using empty data):', err.response?.data?.message || err.message);\r\n      setError(null);\r\n      setStaff([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await staffService.getStaffStats();\r\n      console.log('Stats API response:', response);\r\n      setStaffStats(response.data);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching staff stats (using default values):', err.response?.data?.message || err.message);\r\n      setStaffStats({\r\n        totalStaff: 0,\r\n        activeStaff: 0,\r\n        inactiveStaff: 0,\r\n        byRole: {},\r\n        byDepartment: {}\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n\r\n  // Filter and search logic (client-side filtering after API fetch)\r\n  const filteredStaff = useMemo(() => {\r\n    if (!staff || staff.length === 0) return [];\r\n    \r\n    return staff.filter((s) => {\r\n      const firstName = s.user?.firstName || s.firstName || '';\r\n      const lastName = s.user?.lastName || s.lastName || '';\r\n      const email = s.user?.email || s.email || '';\r\n      const employeeId = s.employeeId || '';\r\n      \r\n      const matchesSearch = !searchQuery || \r\n        firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        email.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        employeeId.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesDepartment = !selectedDepartment || s.department?.name === selectedDepartment;\r\n      const matchesRole = !selectedRole || s.user?.role === selectedRole;\r\n      const matchesStatus = !selectedStatus || (s.isActive ? 'active' : 'inactive') === selectedStatus;\r\n\r\n      return matchesSearch && matchesDepartment && matchesRole && matchesStatus;\r\n    }).sort((a, b) => {\r\n      const aFirstName = a.user?.firstName || a.firstName || '';\r\n      const aLastName = a.user?.lastName || a.lastName || '';\r\n      const bFirstName = b.user?.firstName || b.firstName || '';\r\n      const bLastName = b.user?.lastName || b.lastName || '';\r\n      \r\n      let aVal: string | number;\r\n      let bVal: string | number;\r\n\r\n      switch (sortBy) {\r\n        case 'name':\r\n          aVal = `${aFirstName} ${aLastName}`;\r\n          bVal = `${bFirstName} ${bLastName}`;\r\n          break;\r\n        case 'department':\r\n          aVal = a.department?.name || '';\r\n          bVal = b.department?.name || '';\r\n          break;\r\n        case 'experience':\r\n          aVal = parseInt(a.experience) || 0;\r\n          bVal = parseInt(b.experience) || 0;\r\n          break;\r\n        case 'joiningDate':\r\n          aVal = new Date(a.joiningDate || 0).getTime();\r\n          bVal = new Date(b.joiningDate || 0).getTime();\r\n          break;\r\n        default:\r\n          aVal = `${aFirstName} ${aLastName}`;\r\n          bVal = `${bFirstName} ${bLastName}`;\r\n      }\r\n\r\n      if (sortOrder === 'asc') {\r\n        return aVal > bVal ? 1 : -1;\r\n      } else {\r\n        return aVal < bVal ? 1 : -1;\r\n      }\r\n    });\r\n  }, [staff, searchQuery, selectedDepartment, selectedRole, selectedStatus, sortBy, sortOrder]);\r\n\r\n  // Helper functions\r\n  const getRoleBadgeColor = (role: UserRole) => {\r\n    switch (role) {\r\n      case UserRole.DOCTOR: return 'blue';\r\n      case UserRole.NURSE: return 'green';\r\n      case 'TECHNICIAN' as any: return 'purple';\r\n      case UserRole.PHARMACIST: return 'purple';\r\n      case UserRole.ADMIN: return 'red';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getStatusBadgeColor = (status: Status) => {\r\n    switch (status) {\r\n      case Status.ACTIVE: return 'green';\r\n      case Status.INACTIVE: return 'red';\r\n      case Status.PENDING: return 'yellow';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const handleViewStaff = (staff: Staff) => {\r\n    setSelectedStaff(staff);\r\n    openStaffDetail();\r\n  };\r\n\r\n  const handleEditStaff = (staff: Staff) => {\r\n    setStaffToEdit(staff);\r\n    openEditStaff();\r\n  };\r\n\r\n  const handleDeleteStaff = async (staffMember: any) => {\r\n    if (!confirm(`Are you sure you want to delete ${staffMember.user?.firstName || staffMember.firstName} ${staffMember.user?.lastName || staffMember.lastName}?`)) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      await staffService.deleteStaff(staffMember.id);\r\n      notifications.show({\r\n        title: 'Success',\r\n        message: 'Staff member deleted successfully',\r\n        color: 'green',\r\n      });\r\n      fetchStaff(); // Refresh the list\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: 'Failed to delete staff member',\r\n        color: 'red',\r\n      });\r\n    }\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchQuery('');\r\n    setSelectedDepartment('');\r\n    setSelectedRole('');\r\n    setSelectedStatus('');\r\n    setSortBy('name');\r\n    setSortOrder('asc');\r\n  };\r\n\r\n  const formatDate = (date: string | Date) => {\r\n    const d = new Date(date);\r\n    const year = d.getFullYear();\r\n    const month = String(d.getMonth() + 1).padStart(2, '0');\r\n    const day = String(d.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  const formatTime = (date: string | Date) => {\r\n    const d = new Date(date);\r\n    const hours = String(d.getHours()).padStart(2, '0');\r\n    const minutes = String(d.getMinutes()).padStart(2, '0');\r\n    return `${hours}:${minutes}`;\r\n  };\r\n\r\n  // Statistics cards data\r\n  const statsCards = [\r\n    {\r\n      title: 'Total Staff',\r\n      value: staffStats?.totalStaff || 0,\r\n      icon: IconUsers,\r\n      color: 'blue',\r\n      trend: '+5%'\r\n    },\r\n    {\r\n      title: 'Active Staff',\r\n      value: staffStats?.activeStaff || 0,\r\n      icon: IconUserCheck,\r\n      color: 'green',\r\n      trend: '+2%'\r\n    },\r\n    {\r\n      title: 'Doctors',\r\n      value: staffStats?.byRole?.doctors || 0,\r\n      icon: IconStethoscope,\r\n      color: 'cyan',\r\n      trend: '+3%'\r\n    },\r\n    {\r\n      title: 'Nurses',\r\n      value: staffStats?.byRole?.nurses || 0,\r\n      icon: IconMedicalCross,\r\n      color: 'teal',\r\n      trend: '+2%'\r\n    }\r\n  ];\r\n\r\n  // Chart data\r\n  const roleDistributionData = staffStats?.byRole\r\n    ? [\r\n        { name: 'Doctors', value: staffStats.byRole.doctors || 0, color: '#0891b2' },\r\n        { name: 'Nurses', value: staffStats.byRole.nurses || 0, color: '#22c55e' },\r\n        { name: 'Lab Technicians', value: staffStats.byRole.labTechnicians || 0, color: '#14b8a6' },\r\n        { name: 'Pharmacists', value: staffStats.byRole.pharmacists || 0, color: '#8b5cf6' },\r\n      ].filter(item => item.value > 0)\r\n    : [];\r\n\r\n  const departmentDistributionData: any[] = []; // TODO: Implement when department stats are available\r\n  const hiringTrendsData: any[] = []; // TODO: Implement when hiring trends are available\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Staff Management</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage hospital staff, schedules, and performance\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconUserPlus size={16} />}\r\n            onClick={openAddStaff}\r\n          >\r\n            Add Staff\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Error Alert */}\r\n      {error && (\r\n        <Alert icon={<IconAlertCircle size={16} />} title=\"Error\" color=\"red\" mb=\"lg\">\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Loading State */}\r\n      {loading ? (\r\n        <Paper p=\"xl\" radius=\"md\" withBorder>\r\n          <Stack align=\"center\" gap=\"md\">\r\n            <Text>Loading staff data...</Text>\r\n          </Stack>\r\n        </Paper>\r\n      ) : (\r\n        <>\r\n      {/* Statistics Cards */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {statsCards.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n              <Group justify=\"space-between\" mt=\"sm\">\r\n                <Badge \r\n                  color={stat.trend.startsWith('+') ? 'green' : 'red'} \r\n                  variant=\"light\"\r\n                  size=\"sm\"\r\n                >\r\n                  {stat.trend}\r\n                </Badge>\r\n                <Text size=\"xs\" c=\"dimmed\">vs last month</Text>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"list\" leftSection={<IconUsers size={16} />}>\r\n            Staff List\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"departments\" leftSection={<IconBuilding size={16} />}>\r\n            Departments\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"shifts\" leftSection={<IconClock size={16} />}>\r\n            Shifts & Schedules\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"attendance\" leftSection={<IconCalendarStats size={16} />}>\r\n            Attendance\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"analytics\" leftSection={<IconChartBar size={16} />}>\r\n            Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Staff List Tab */}\r\n        <Tabs.Panel value=\"list\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search staff...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Department\"\r\n                data={[].map /* TODO: Fetch from API */(dept => ({ value: dept.name, label: dept.name }))}\r\n                value={selectedDepartment}\r\n                onChange={setSelectedDepartment}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Role\"\r\n                data={[\r\n                  { value: 'DOCTOR', label: 'Doctor' },\r\n                  { value: 'NURSE', label: 'Nurse' },\r\n                  { value: 'TECHNICIAN' as any, label: 'Technician' },\r\n                  { value: 'PHARMACIST', label: 'Pharmacist' },\r\n                  { value: 'ADMIN', label: 'Admin' }\r\n                ]}\r\n                value={selectedRole}\r\n                onChange={setSelectedRole}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'ACTIVE', label: 'Active' },\r\n                  { value: 'INACTIVE', label: 'Inactive' },\r\n                  { value: 'PENDING', label: 'Pending' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Button variant=\"light\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Sort Controls */}\r\n            <Group mb=\"md\">\r\n              <Select\r\n                label=\"Sort by\"\r\n                data={[\r\n                  { value: 'name', label: 'Name' },\r\n                  { value: 'department', label: 'Department' },\r\n                  { value: 'experience', label: 'Experience' },\r\n                  { value: 'joiningDate', label: 'Joining Date' }\r\n                ]}\r\n                value={sortBy}\r\n                onChange={(value) => setSortBy(value || 'name')}\r\n              />\r\n              <Select\r\n                label=\"Order\"\r\n                data={[\r\n                  { value: 'asc', label: 'Ascending' },\r\n                  { value: 'desc', label: 'Descending' }\r\n                ]}\r\n                value={sortOrder}\r\n                onChange={(value) => setSortOrder(value as 'asc' | 'desc' || 'asc')}\r\n              />\r\n            </Group>\r\n\r\n            {/* Staff Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Staff</Table.Th>\r\n                    <Table.Th>ID</Table.Th>\r\n                    <Table.Th>Role</Table.Th>\r\n                    <Table.Th>Department</Table.Th>\r\n                    <Table.Th>Experience</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredStaff.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={8}>\r\n                        <EmptyState\r\n                          icon={<IconUsers size={48} />}\r\n                          title=\"No staff members\"\r\n                          description=\"Add staff members to your hospital\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredStaff.map((staff) => (\r\n                    <Table.Tr key={staff.id}>\r\n                      <Table.Td>\r\n                        <Group>\r\n                          <Avatar color=\"blue\" radius=\"xl\">\r\n                            {staff.firstName[0]}{staff.lastName[0]}\r\n                          </Avatar>\r\n                          <div>\r\n                            <Text fw={500}>\r\n                              {staff.firstName} {staff.lastName}\r\n                            </Text>\r\n                            <Text size=\"sm\" c=\"dimmed\">\r\n                              {staff.contactInfo.email}\r\n                            </Text>\r\n                          </div>\r\n                        </Group>\r\n                      </Table.Td>\r\n                      <Table.Td>{staff.staffId}</Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getRoleBadgeColor(staff.role)} variant=\"light\">\r\n                          {staff.role ? staff.role.replace('_', ' ') : 'N/A'}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>{staff.department.name}</Table.Td>\r\n                      <Table.Td>{staff.experience} years</Table.Td>\r\n                      <Table.Td>\r\n                        <Badge color={getStatusBadgeColor(staff.status)} variant=\"light\">\r\n                          {staff.status}\r\n                        </Badge>\r\n                      </Table.Td>\r\n                      <Table.Td>\r\n                        <Group gap=\"xs\">\r\n                          <ActionIcon\r\n                            variant=\"subtle\"\r\n                            color=\"blue\"\r\n                            onClick={() => handleViewStaff(staff)}\r\n                          >\r\n                            <IconEye size={16} />\r\n                          </ActionIcon>\r\n                          <ActionIcon\r\n                            variant=\"subtle\"\r\n                            color=\"green\"\r\n                            onClick={() => handleEditStaff(staff)}\r\n                          >\r\n                            <IconEdit size={16} />\r\n                          </ActionIcon>\r\n                          <Menu>\r\n                            <Menu.Target>\r\n                              <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                                <IconDotsVertical size={16} />\r\n                              </ActionIcon>\r\n                            </Menu.Target>\r\n                            <Menu.Dropdown>\r\n                              <Menu.Item \r\n                                leftSection={<IconTrash size={14} />}\r\n                                color=\"red\"\r\n                                onClick={() => handleDeleteStaff(staff)}\r\n                              >\r\n                                Delete\r\n                              </Menu.Item>\r\n                            </Menu.Dropdown>\r\n                          </Menu>\r\n                        </Group>\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  )))}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Departments Tab */}\r\n        <Tabs.Panel value=\"departments\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Departments</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Add Department\r\n              </Button>\r\n            </Group>\r\n            \r\n            <SimpleGrid cols={{ base: 1, sm: 2, lg: 3 }}>\r\n              {[].map /* TODO: Fetch from API */((dept) => (\r\n                <Card key={dept.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{dept.name}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{dept.code}</Text>\r\n                    </div>\r\n                    <ThemeIcon size=\"lg\" color=\"blue\" variant=\"light\">\r\n                      <IconMedicalCross size={20} />\r\n                    </ThemeIcon>\r\n                  </Group>\r\n                  \r\n                  <Text size=\"sm\" mb=\"md\">{dept.description}</Text>\r\n                  \r\n                  <Stack gap=\"xs\">\r\n                    <Group>\r\n                      <Text size=\"sm\" fw={500}>Head:</Text>\r\n                      <Text size=\"sm\">{dept.headOfDepartment}</Text>\r\n                    </Group>\r\n                    <Group>\r\n                      <Text size=\"sm\" fw={500}>Location:</Text>\r\n                      <Text size=\"sm\">{dept.location}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n                  \r\n                  <Group justify=\"flex-end\" mt=\"md\">\r\n                    <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                      <IconEye size={16} />\r\n                    </ActionIcon>\r\n                    <ActionIcon variant=\"subtle\" color=\"green\">\r\n                      <IconEdit size={16} />\r\n                    </ActionIcon>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Shifts & Schedules Tab */}\r\n        <Tabs.Panel value=\"shifts\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Shifts & Schedules</Title>\r\n              <Button leftSection={<IconCalendar size={16} />}>\r\n                Schedule Shift\r\n              </Button>\r\n            </Group>\r\n            \r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} mb=\"lg\">\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Today&apos;s Shifts</Title>\r\n                <Stack gap=\"md\">\r\n                  {[].map /* TODO: Fetch from API */((shift) => {\r\n                    const staffMember = staff.find(s => s.id === shift.staffId || s.staffId === shift.staffId);\r\n                    return (\r\n                      <Group key={shift.id} justify=\"space-between\" p=\"sm\" style={{ border: '1px solid #e9ecef', borderRadius: '8px' }}>\r\n                        <div>\r\n                          <Text fw={500}>\r\n                            {staffMember ? `${staffMember.user?.firstName || staffMember.firstName} ${staffMember.user?.lastName || staffMember.lastName}` : 'Unknown Staff'}\r\n                          </Text>\r\n                          <Text size=\"sm\" c=\"dimmed\">\r\n                            {shift.startTime} - {shift.endTime} | {shift.department}\r\n                          </Text>\r\n                        </div>\r\n                        <Badge \r\n                          color={shift.status === 'scheduled' ? 'blue' : \r\n                                shift.status === 'in_progress' ? 'green' : 'gray'}\r\n                          variant=\"light\"\r\n                        >\r\n                          {shift.status.replace('_', ' ')}\r\n                        </Badge>\r\n                      </Group>\r\n                    );\r\n                  })}\r\n                </Stack>\r\n              </Card>\r\n              \r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Shift Statistics</Title>\r\n                <Stack gap=\"md\">\r\n                  <Group justify=\"space-between\">\r\n                    <Text>Scheduled Shifts</Text>\r\n                    <Badge color=\"blue\" variant=\"light\">8</Badge>\r\n                  </Group>\r\n                  <Group justify=\"space-between\">\r\n                    <Text>In Progress</Text>\r\n                    <Badge color=\"green\" variant=\"light\">3</Badge>\r\n                  </Group>\r\n                  <Group justify=\"space-between\">\r\n                    <Text>Completed</Text>\r\n                    <Badge color=\"gray\" variant=\"light\">12</Badge>\r\n                  </Group>\r\n                  <Group justify=\"space-between\">\r\n                    <Text>No Show</Text>\r\n                    <Badge color=\"red\" variant=\"light\">1</Badge>\r\n                  </Group>\r\n                </Stack>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Attendance Tab */}\r\n        <Tabs.Panel value=\"attendance\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Attendance Overview</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 4 }} mb=\"lg\">\r\n              <Card padding=\"md\" radius=\"md\" withBorder>\r\n                <Group justify=\"center\">\r\n                  <ThemeIcon size=\"xl\" color=\"green\" variant=\"light\">\r\n                    <IconUserCheck size={24} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n                <Text ta=\"center\" fw={600} size=\"lg\" mt=\"sm\">\r\n                  {staffStats?.attendanceMetrics?.presentToday || 0}\r\n                </Text>\r\n                <Text ta=\"center\" size=\"sm\" c=\"dimmed\">Present Today</Text>\r\n              </Card>\r\n              \r\n              <Card padding=\"md\" radius=\"md\" withBorder>\r\n                <Group justify=\"center\">\r\n                  <ThemeIcon size=\"xl\" color=\"red\" variant=\"light\">\r\n                    <IconUserX size={24} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n                <Text ta=\"center\" fw={600} size=\"lg\" mt=\"sm\">\r\n                  {staffStats?.attendanceMetrics?.absentToday || 0}\r\n                </Text>\r\n                <Text ta=\"center\" size=\"sm\" c=\"dimmed\">Absent Today</Text>\r\n              </Card>\r\n              \r\n              <Card padding=\"md\" radius=\"md\" withBorder>\r\n                <Group justify=\"center\">\r\n                  <ThemeIcon size=\"xl\" color=\"orange\" variant=\"light\">\r\n                    <IconClockHour3 size={24} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n                <Text ta=\"center\" fw={600} size=\"lg\" mt=\"sm\">\r\n                  {staffStats?.attendanceMetrics?.lateToday || 0}\r\n                </Text>\r\n                <Text ta=\"center\" size=\"sm\" c=\"dimmed\">Late Today</Text>\r\n              </Card>\r\n              \r\n              <Card padding=\"md\" radius=\"md\" withBorder>\r\n                <Group justify=\"center\">\r\n                  <ThemeIcon size=\"xl\" color=\"blue\" variant=\"light\">\r\n                    <IconCalendarEvent size={24} />\r\n                  </ThemeIcon>\r\n                </Group>\r\n                <Text ta=\"center\" fw={600} size=\"lg\" mt=\"sm\">\r\n                  {staffStats?.attendanceMetrics?.onLeaveToday || 0}\r\n                </Text>\r\n                <Text ta=\"center\" size=\"sm\" c=\"dimmed\">On Leave</Text>\r\n              </Card>\r\n            </SimpleGrid>\r\n            \r\n            {/* Recent Attendance */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Recent Attendance Records</Title>\r\n              <ScrollArea>\r\n                <Table>\r\n                  <Table.Thead>\r\n                    <Table.Tr>\r\n                      <Table.Th>Staff</Table.Th>\r\n                      <Table.Th>Date</Table.Th>\r\n                      <Table.Th>Clock In</Table.Th>\r\n                      <Table.Th>Clock Out</Table.Th>\r\n                      <Table.Th>Hours</Table.Th>\r\n                      <Table.Th>Status</Table.Th>\r\n                    </Table.Tr>\r\n                  </Table.Thead>\r\n                  <Table.Tbody>\r\n                    {[].map /* TODO: Fetch from API */((record) => {\r\n                      const staffMember = staff.find(s => s.id === record.staffId || s.staffId === record.staffId);\r\n                      return (\r\n                        <Table.Tr key={record.id}>\r\n                          <Table.Td>\r\n                            {staffMember ? `${staffMember.user?.firstName || staffMember.firstName} ${staffMember.user?.lastName || staffMember.lastName}` : 'Unknown'}\r\n                          </Table.Td>\r\n                          <Table.Td>\r\n                            {formatDate(record.date)}\r\n                          </Table.Td>\r\n                          <Table.Td>\r\n                            {record.clockIn ? formatTime(record.clockIn) : '-'}\r\n                          </Table.Td>\r\n                          <Table.Td>\r\n                            {record.clockOut ? formatTime(record.clockOut) : '-'}\r\n                          </Table.Td>\r\n                          <Table.Td>{record.totalHours || 0}h</Table.Td>\r\n                          <Table.Td>\r\n                            <Badge \r\n                              color={record.status === 'present' ? 'green' : \r\n                                    record.status === 'on_leave' ? 'orange' : 'red'}\r\n                              variant=\"light\"\r\n                            >\r\n                              {record.status.replace('_', ' ')}\r\n                            </Badge>\r\n                          </Table.Td>\r\n                        </Table.Tr>\r\n                      );\r\n                    })}\r\n                  </Table.Tbody>\r\n                </Table>\r\n              </ScrollArea>\r\n            </Card>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Analytics Tab */}\r\n        <Tabs.Panel value=\"analytics\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Staff Analytics</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {/* Role Distribution */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Staff by Role</Title>\r\n                <MantineDonutChart\r\n                  data={roleDistributionData}\r\n                  size={160}\r\n                  thickness={30}\r\n                  withLabels\r\n                />\r\n              </Card>\r\n              \r\n              {/* Department Distribution */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Staff by Department</Title>\r\n                <SimpleBarChart\r\n                  data={departmentDistributionData}\r\n                  dataKey=\"department\"\r\n                  series={[{ name: 'count', color: 'blue.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Hiring Trends */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder style={{ gridColumn: '1 / -1' }}>\r\n                <Title order={4} mb=\"md\">Hiring Trends</Title>\r\n                <SimpleAreaChart\r\n                  data={hiringTrendsData}\r\n                  dataKey=\"month\"\r\n                  series={[\r\n                    { name: 'hired', color: 'green.6' },\r\n                    { name: 'resigned', color: 'red.6' }\r\n                  ]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Performance Metrics */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Performance Overview</Title>\r\n                <Stack gap=\"md\">\r\n                  <div>\r\n                    <Group justify=\"space-between\" mb=\"xs\">\r\n                      <Text size=\"sm\">Average Rating</Text>\r\n                      <Text size=\"sm\" fw={500}>{staffStats?.performanceMetrics?.averageRating || 0}/5.0</Text>\r\n                    </Group>\r\n                    <Progress value={(staffStats?.performanceMetrics?.averageRating || 0) * 20} color=\"green\" />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <Group justify=\"space-between\" mb=\"xs\">\r\n                      <Text size=\"sm\">Training Completion</Text>\r\n                      <Text size=\"sm\" fw={500}>{staffStats?.performanceMetrics?.trainingCompletionRate || 0}%</Text>\r\n                    </Group>\r\n                    <Progress value={staffStats?.performanceMetrics?.trainingCompletionRate || 0} color=\"blue\" />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <Group justify=\"space-between\" mb=\"xs\">\r\n                      <Text size=\"sm\">Average Attendance</Text>\r\n                      <Text size=\"sm\" fw={500}>{staffStats?.attendanceMetrics?.averageAttendance || 0}%</Text>\r\n                    </Group>\r\n                    <Progress value={staffStats?.attendanceMetrics?.averageAttendance || 0} color=\"teal\" />\r\n                  </div>\r\n                </Stack>\r\n              </Card>\r\n              \r\n              {/* Top Performers */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Top Performers</Title>\r\n                <Stack gap=\"sm\">\r\n                  {(staffStats?.performanceMetrics?.topPerformers || []).map((performer, index) => (\r\n                    <Group key={performer} justify=\"space-between\" p=\"sm\" style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                      <Group>\r\n                        <ThemeIcon size=\"sm\" color=\"gold\" variant=\"light\">\r\n                          <IconAward size={14} />\r\n                        </ThemeIcon>\r\n                        <Text size=\"sm\" fw={500}>{performer}</Text>\r\n                      </Group>\r\n                      <Badge color=\"gold\" variant=\"light\" size=\"sm\">\r\n                        #{index + 1}\r\n                      </Badge>\r\n                    </Group>\r\n                  ))}\r\n                </Stack>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n        </>\r\n      )}\r\n\r\n      {/* Staff Detail Modal */}\r\n      <Modal\r\n        opened={staffDetailOpened}\r\n        onClose={closeStaffDetail}\r\n        title=\"Staff Details\"\r\n        size=\"lg\"\r\n      >\r\n        {selectedStaff && (\r\n          <Stack gap=\"md\">\r\n            {/* Basic Info */}\r\n            <Group>\r\n              <Avatar size=\"xl\" color=\"blue\" radius=\"xl\">\r\n                {selectedStaff.firstName[0]}{selectedStaff.lastName[0]}\r\n              </Avatar>\r\n              <div>\r\n                <Title order={3}>\r\n                  {selectedStaff.firstName} {selectedStaff.lastName}\r\n                </Title>\r\n                <Text c=\"dimmed\">{selectedStaff.staffId} • {selectedStaff.department.name}</Text>\r\n                <Badge color={getRoleBadgeColor(selectedStaff.role)} variant=\"light\" mt=\"xs\">\r\n                  {selectedStaff.role.replace('_', ' ')}\r\n                </Badge>\r\n              </div>\r\n            </Group>\r\n\r\n            <Divider />\r\n\r\n            {/* Contact Information */}\r\n            <div>\r\n              <Title order={4} mb=\"sm\">Contact Information</Title>\r\n              <SimpleGrid cols={2}>\r\n                <Group>\r\n                  <IconPhone size={16} />\r\n                  <Text size=\"sm\">{selectedStaff.contactInfo.phone}</Text>\r\n                </Group>\r\n                <Group>\r\n                  <IconMail size={16} />\r\n                  <Text size=\"sm\">{selectedStaff.contactInfo.email}</Text>\r\n                </Group>\r\n              </SimpleGrid>\r\n            </div>\r\n\r\n            {/* Professional Info */}\r\n            <div>\r\n              <Title order={4} mb=\"sm\">Professional Information</Title>\r\n              <SimpleGrid cols={2}>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Experience</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedStaff.experience} years</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Joining Date</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {formatDate(selectedStaff.joiningDate)}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Employment Type</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedStaff.employmentType?.replace('_', ' ')}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Status</Text>\r\n                  <Badge color={getStatusBadgeColor(selectedStaff.status)} variant=\"light\" size=\"sm\">\r\n                    {selectedStaff.status}\r\n                  </Badge>\r\n                </div>\r\n              </SimpleGrid>\r\n            </div>\r\n\r\n            {/* Performance Metrics */}\r\n            {selectedStaff.performanceMetrics && (\r\n              <div>\r\n                <Title order={4} mb=\"sm\">Performance Metrics</Title>\r\n                <SimpleGrid cols={2}>\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500}>Patient Rating</Text>\r\n                    <Text size=\"sm\" c=\"dimmed\">{selectedStaff.performanceMetrics.averagePatientRating}/5.0</Text>\r\n                  </div>\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500}>Patients Handled</Text>\r\n                    <Text size=\"sm\" c=\"dimmed\">{selectedStaff.performanceMetrics.totalPatientsHandled}</Text>\r\n                  </div>\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500}>Attendance</Text>\r\n                    <Text size=\"sm\" c=\"dimmed\">{selectedStaff.performanceMetrics.attendancePercentage}%</Text>\r\n                  </div>\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500}>Punctuality</Text>\r\n                    <Text size=\"sm\" c=\"dimmed\">{selectedStaff.performanceMetrics.punctualityScore}%</Text>\r\n                  </div>\r\n                </SimpleGrid>\r\n              </div>\r\n            )}\r\n\r\n            <Group justify=\"flex-end\">\r\n              <Button variant=\"light\" onClick={closeStaffDetail}>\r\n                Close\r\n              </Button>\r\n              <Button onClick={() => handleEditStaff(selectedStaff)}>\r\n                Edit Staff\r\n              </Button>\r\n            </Group>\r\n          </Stack>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Add Staff Modal */}\r\n      <Modal\r\n        opened={addStaffOpened}\r\n        onClose={closeAddStaff}\r\n        title=\"Add New Staff\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"First Name\"\r\n              placeholder=\"Enter first name\"\r\n              required\r\n            />\r\n            <TextInput\r\n              label=\"Last Name\"\r\n              placeholder=\"Enter last name\"\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <TextInput\r\n              label=\"Email\"\r\n              placeholder=\"Enter email\"\r\n              required\r\n            />\r\n            <TextInput\r\n              label=\"Phone\"\r\n              placeholder=\"Enter phone number\"\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Role\"\r\n              placeholder=\"Select role\"\r\n              data={[\r\n                { value: 'DOCTOR', label: 'Doctor' },\r\n                { value: 'NURSE', label: 'Nurse' },\r\n                { value: 'TECHNICIAN' as any, label: 'Technician' },\r\n                { value: 'PHARMACIST', label: 'Pharmacist' }\r\n              ]}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Department\"\r\n              placeholder=\"Select department\"\r\n              data={[].map /* TODO: Fetch from API */(dept => ({ value: dept.name, label: dept.name }))}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <NumberInput\r\n            label=\"Experience (years)\"\r\n            placeholder=\"Enter years of experience\"\r\n            min={0}\r\n            max={50}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddStaff}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Success',\r\n                message: 'New staff member added successfully',\r\n                color: 'green',\r\n              });\r\n              closeAddStaff();\r\n            }}>\r\n              Add Staff\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default StaffManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\surgery\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Stepper' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RingProgress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 32,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 33,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 34,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 34,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleLineChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 39,
        "column": 62,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 46,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPhone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlertCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 52,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPrinter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 61,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShare' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconExclamationMark' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 63,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 63,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClockHour4' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 64,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingDown' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalculator' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRefresh' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 71,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBarcode' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTemperature' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 73,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShieldCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 74,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 74,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlertTriangle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 75,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCircleCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 76,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClipboard' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconHeart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 79,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 79,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBrain' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 80,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBone' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 81,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 81,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconStethoscope' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 82,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPackage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 84,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTruck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 85,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 86,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 86,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconReceipt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 87,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNotes' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 88,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 88,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTag' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 89,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAlarm' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 90,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 90,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconInfoCircle' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 91,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 91,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconAmbulance' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 93,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFlask' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 94,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 94,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDroplet' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 95,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBandage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 96,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 96,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPill' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 97,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconBolt' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 98,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 98,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconZoom' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 99,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 99,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedOR' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 118,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 118,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'stats' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 122,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 122,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 125,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 125,
        "endColumn": 15
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.",
        "line": 129,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 129,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAllData]",
            "fix": { "range": [2953, 2955], "text": "[fetchAllData]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'fetchSurgeries' and 'loading'. Either include them or remove the dependency array.",
        "line": 198,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 198,
        "endColumn": 67,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [searchQuery, selectedType, selectedStatus, selectedPriority, loading, fetchSurgeries]",
            "fix": {
              "range": [5009, 5070],
              "text": "[searchQuery, selectedType, selectedStatus, selectedPriority, loading, fetchSurgeries]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'orDetailOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 203,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 203,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closeORDetail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 203,
        "column": 55,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 203,
        "endColumn": 68
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'preOpOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 204,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 204,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'openPreOp' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 204,
        "column": 31,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 204,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closePreOp' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 204,
        "column": 49,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 204,
        "endColumn": 59
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'postOpOpened' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 205,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 205,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'openPostOp' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 205,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 205,
        "endColumn": 42
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'closePostOp' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 205,
        "column": 51,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 205,
        "endColumn": 62
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useMemo has a missing dependency: 'surgeries'. Either include it or remove the dependency array.",
        "line": 223,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 223,
        "endColumn": 67,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [surgeries, searchQuery, selectedType, selectedStatus, selectedPriority]",
            "fix": {
              "range": [6434, 6495],
              "text": "[surgeries, searchQuery, selectedType, selectedStatus, selectedPriority]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useMemo has a missing dependency: 'theaters'. Either include it or remove the dependency array.",
        "line": 238,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 238,
        "endColumn": 37,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [searchQuery, selectedORStatus, theaters]",
            "fix": { "range": [7043, 7074], "text": "[searchQuery, selectedORStatus, theaters]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'formatDuration' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 302,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 302,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'formatCurrency' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 308,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 308,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 62,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Title,\r\n  Group,\r\n  Button,\r\n  TextInput,\r\n  Select,\r\n  Badge,\r\n  Table,\r\n  Modal,\r\n  Text,\r\n  Tabs,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu,\r\n  Stack,\r\n  Divider,\r\n  SimpleGrid,\r\n  ScrollArea,\r\n  ThemeIcon,\r\n  Alert,\r\n  Progress,\r\n  NumberInput,\r\n  Textarea,\r\n  Timeline,\r\n  Stepper,\r\n  RingProgress,\r\n  Tooltip,\r\n  List\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport EmptyState from '../../../components/EmptyState';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { MantineDonutChart, SimpleAreaChart, SimpleBarChart, SimpleLineChart } from '../../../components/MantineChart';\r\nimport surgeryService from '../../../services/surgery.service';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconCalendar,\r\n  IconScissors,\r\n  IconChartBar,\r\n  IconPhone,\r\n  IconMail,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconReportMedical,\r\n  IconClock,\r\n  IconClipboardList,\r\n  IconFileText,\r\n  IconDownload,\r\n  IconPrinter,\r\n  IconShare,\r\n  IconExclamationMark,\r\n  IconClockHour4,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconUsers,\r\n  IconCalculator,\r\n  IconSettings,\r\n  IconRefresh,\r\n  IconFilter,\r\n  IconBarcode,\r\n  IconTemperature,\r\n  IconShieldCheck,\r\n  IconAlertTriangle,\r\n  IconCircleCheck,\r\n  IconClipboard,\r\n  IconActivity,\r\n  IconHeart,\r\n  IconBrain,\r\n  IconBone,\r\n  IconStethoscope,\r\n  IconMedicalCross,\r\n  IconPackage,\r\n  IconTruck,\r\n  IconCash,\r\n  IconReceipt,\r\n  IconNotes,\r\n  IconTag,\r\n  IconAlarm,\r\n  IconInfoCircle,\r\n  IconBed,\r\n  IconAmbulance,\r\n  IconFlask,\r\n  IconDroplet,\r\n  IconBandage,\r\n  IconPill,\r\n  IconBolt,\r\n  IconZoom,\r\n  IconTools,\r\n  IconScale\r\n} from '@tabler/icons-react';\r\nimport { DatePickerInput } from '@mantine/dates';\r\n\r\n// Import types and mock data\r\n// Types will be defined inline since they don't exist yet\r\n// Mock data removed - using API data only\r\n\r\nconst SurgeryManagement = () => {\r\n  // State management\r\n  const [activeTab, setActiveTab] = useState<string>('schedule');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedType, setSelectedType] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n  const [selectedPriority, setSelectedPriority] = useState<string>('');\r\n  const [selectedORStatus, setSelectedORStatus] = useState<string>('');\r\n  const [selectedSurgery, setSelectedSurgery] = useState<any>(null);\r\n  const [selectedOR, setSelectedOR] = useState<any>(null);\r\n\r\n  // API data state\r\n  const [surgeries, setSurgeries] = useState<any[]>([]);\r\n  const [stats, setStats] = useState<any>(null);\r\n  const [theaters, setTheaters] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  const fetchAllData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      await Promise.all([\r\n        fetchSurgeries(),\r\n        fetchStats(),\r\n        fetchTheaters()\r\n      ]);\r\n    } catch (err: any) {\r\n      console.error('Error loading surgery data:', err);\r\n      setError(err.response?.data?.message || 'Failed to load surgery data');\r\n      setSurgeries([] /* TODO: Fetch from API */);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchSurgeries = async () => {\r\n    try {\r\n      const filters = {\r\n        status: selectedStatus || undefined,\r\n        priority: selectedPriority || undefined\r\n      };\r\n      const response = await surgeryService.getSurgeries(filters);\r\n      // Handle different response structures\r\n      const surgeriesData = Array.isArray(response.data) \r\n        ? response.data \r\n        : (response.data?.items || []);\r\n      setSurgeries(surgeriesData);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching surgeries (using empty data):', err.response?.data?.message || err.message);\r\n      setSurgeries([]);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await surgeryService.getStats();\r\n      setStats(response.data);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching surgery stats (using default values):', err.response?.data?.message || err.message);\r\n      setStats({\r\n        totalSurgeries: 0,\r\n        scheduledSurgeries: 0,\r\n        completedSurgeries: 0,\r\n        cancelledSurgeries: 0,\r\n        upcomingSurgeries: 0,\r\n        availableTheaters: 0\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchTheaters = async () => {\r\n    try {\r\n      const response = await surgeryService.getAvailableTheaters();\r\n      setTheaters(response.data || []);\r\n    } catch (err: any) {\r\n      console.warn('Error fetching theaters (using empty data):', err.response?.data?.message || err.message);\r\n      setTheaters([]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      fetchSurgeries();\r\n    }\r\n  }, [searchQuery, selectedType, selectedStatus, selectedPriority]);\r\n\r\n  // Modal states\r\n  const [surgeryDetailOpened, { open: openSurgeryDetail, close: closeSurgeryDetail }] = useDisclosure(false);\r\n  const [addSurgeryOpened, { open: openAddSurgery, close: closeAddSurgery }] = useDisclosure(false);\r\n  const [orDetailOpened, { open: openORDetail, close: closeORDetail }] = useDisclosure(false);\r\n  const [preOpOpened, { open: openPreOp, close: closePreOp }] = useDisclosure(false);\r\n  const [postOpOpened, { open: openPostOp, close: closePostOp }] = useDisclosure(false);\r\n\r\n  // Filter surgeries\r\n  const filteredSurgeries = useMemo(() => {\r\n    // Ensure surgeries is an array before filtering\r\n    if (!Array.isArray(surgeries)) return [];\r\n    return surgeries.filter((surgery: any) => {\r\n      const matchesSearch = \r\n        surgery.patientName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        surgery.surgeryId?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        surgery.procedure?.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesType = !selectedType || surgery.surgeryType === selectedType;\r\n      const matchesStatus = !selectedStatus || surgery.status === selectedStatus;\r\n      const matchesPriority = !selectedPriority || surgery.priority === selectedPriority;\r\n\r\n      return matchesSearch && matchesType && matchesStatus && matchesPriority;\r\n    });\r\n  }, [searchQuery, selectedType, selectedStatus, selectedPriority]);\r\n\r\n  // Filter operating rooms\r\n  const filteredORs = useMemo(() => {\r\n    // Ensure theaters is an array before filtering\r\n    if (!Array.isArray(theaters)) return [];\r\n    return theaters.filter((or: any) => {\r\n      const matchesSearch = \r\n        or.roomNumber?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        or.roomName?.toLowerCase().includes(searchQuery.toLowerCase());\r\n      \r\n      const matchesStatus = !selectedORStatus || or.status === selectedORStatus;\r\n\r\n      return matchesSearch && matchesStatus;\r\n    });\r\n  }, [searchQuery, selectedORStatus]);\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'scheduled':\r\n      case 'available':\r\n      case 'operational': return 'blue';\r\n      case 'in_progress':\r\n      case 'occupied':\r\n      case 'in_use': return 'orange';\r\n      case 'completed':\r\n      case 'cleaned': return 'green';\r\n      case 'cancelled':\r\n      case 'out_of_service': return 'red';\r\n      case 'delayed':\r\n      case 'maintenance': return 'yellow';\r\n      case 'recovery': return 'purple';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'emergency': return 'red';\r\n      case 'urgent': return 'orange';\r\n      case 'elective': return 'blue';\r\n      case 'routine': return 'green';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getSurgeryTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'cardiac': return 'red';\r\n      case 'neurological': return 'purple';\r\n      case 'orthopedic': return 'blue';\r\n      case 'general': return 'green';\r\n      case 'plastic': return 'pink';\r\n      case 'pediatric': return 'cyan';\r\n      case 'trauma': return 'orange';\r\n      case 'transplant': return 'indigo';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const handleViewSurgery = (surgery: any) => {\r\n    setSelectedSurgery(surgery);\r\n    openSurgeryDetail();\r\n  };\r\n\r\n  const handleViewOR = (or: any) => {\r\n    setSelectedOR(or);\r\n    openORDetail();\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setSearchQuery('');\r\n    setSelectedType('');\r\n    setSelectedStatus('');\r\n    setSelectedPriority('');\r\n    setSelectedORStatus('');\r\n  };\r\n\r\n  const formatDuration = (minutes: number) => {\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    return `${hours}h ${mins}m`;\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-IN', {\r\n      style: 'currency',\r\n      currency: 'INR'\r\n    }).format(amount);\r\n  };\r\n\r\n  // Statistics cards\r\n  const statsCards = [\r\n    {\r\n      title: 'Total Surgeries',\r\n      value: 0 /* TODO: Fetch from API */,\r\n      icon: IconScissors,\r\n      color: 'blue',\r\n      trend: '+0%'\r\n    },\r\n    {\r\n      title: 'Today\\'s Surgeries',\r\n      value: 0,\r\n      icon: IconCalendar,\r\n      color: 'green',\r\n      trend: '+0'\r\n    },\r\n    {\r\n      title: 'Active ORs',\r\n      value: `${0 /* TODO: Fetch from API */}/${0 /* TODO: Fetch from API */}`,\r\n      icon: IconBed,\r\n      color: 'orange',\r\n      trend: '0% utilization'\r\n    },\r\n    {\r\n      title: 'Average Duration',\r\n      value: `${0 /* TODO: Fetch from API */}min`,\r\n      icon: IconClock,\r\n      color: 'purple',\r\n      trend: '0min'\r\n    }\r\n  ];\r\n\r\n  // Chart data\r\n  const surgeryTypeData = Object.entries(0 /* TODO: Fetch from API */ || {})\r\n    .map(([type, count]) => ({\r\n      name: type.replace('_', ' ').toUpperCase(),\r\n      value: typeof count === 'number' ? count : 0,\r\n      color: getSurgeryTypeColor(type)\r\n    }));\r\n\r\n  const monthlyVolume = [];\r\n  const orUtilization = [];\r\n\r\n  return (\r\n    <Container size=\"xl\" py=\"md\">\r\n      {/* Header */}\r\n      <Group justify=\"space-between\" mb=\"lg\">\r\n        <div>\r\n          <Title order={1}>Surgery & Operation Theater</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">\r\n            Manage surgical procedures, operating rooms, and surgical teams\r\n          </Text>\r\n        </div>\r\n        <Group>\r\n          <Button\r\n            leftSection={<IconPlus size={16} />}\r\n            onClick={openAddSurgery}\r\n            color=\"blue\"\r\n          >\r\n            Schedule Surgery\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconMedicalCross size={16} />}\r\n            color=\"red\"\r\n          >\r\n            Emergency Surgery\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Statistics Cards */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {statsCards.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n              <Group justify=\"space-between\" mt=\"sm\">\r\n                <Badge \r\n                  color={stat.trend.includes('+') ? 'green' : stat.trend.includes('-') ? 'red' : 'blue'} \r\n                  variant=\"light\"\r\n                  size=\"sm\"\r\n                >\r\n                  {stat.trend}\r\n                </Badge>\r\n                <Text size=\"xs\" c=\"dimmed\">vs last month</Text>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"schedule\" leftSection={<IconCalendar size={16} />}>\r\n            Surgery Schedule\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"theaters\" leftSection={<IconBed size={16} />}>\r\n            Operating Theaters\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"equipment\" leftSection={<IconTools size={16} />}>\r\n            Equipment\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"teams\" leftSection={<IconUsers size={16} />}>\r\n            Surgical Teams\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"reports\" leftSection={<IconChartBar size={16} />}>\r\n            Reports & Analytics\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Surgery Schedule Tab */}\r\n        <Tabs.Panel value=\"schedule\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search surgeries...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Surgery Type\"\r\n                data={[\r\n                  { value: 'cardiac', label: 'Cardiac' },\r\n                  { value: 'neurological', label: 'Neurological' },\r\n                  { value: 'orthopedic', label: 'Orthopedic' },\r\n                  { value: 'general', label: 'General' },\r\n                  { value: 'plastic', label: 'Plastic' },\r\n                  { value: 'pediatric', label: 'Pediatric' },\r\n                  { value: 'trauma', label: 'Trauma' }\r\n                ]}\r\n                value={selectedType}\r\n                onChange={setSelectedType}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'scheduled', label: 'Scheduled' },\r\n                  { value: 'in_progress', label: 'In Progress' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'cancelled', label: 'Cancelled' },\r\n                  { value: 'delayed', label: 'Delayed' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Priority\"\r\n                data={[\r\n                  { value: 'emergency', label: 'Emergency' },\r\n                  { value: 'urgent', label: 'Urgent' },\r\n                  { value: 'elective', label: 'Elective' },\r\n                  { value: 'routine', label: 'Routine' }\r\n                ]}\r\n                value={selectedPriority}\r\n                onChange={setSelectedPriority}\r\n                clearable\r\n              />\r\n              <Button variant=\"light\" onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Surgery Schedule Table */}\r\n            <ScrollArea>\r\n              <Table striped highlightOnHover>\r\n                <Table.Thead>\r\n                  <Table.Tr>\r\n                    <Table.Th>Surgery ID</Table.Th>\r\n                    <Table.Th>Patient</Table.Th>\r\n                    <Table.Th>Procedure</Table.Th>\r\n                    <Table.Th>Surgeon</Table.Th>\r\n                    <Table.Th>Date & Time</Table.Th>\r\n                    <Table.Th>Duration</Table.Th>\r\n                    <Table.Th>OR</Table.Th>\r\n                    <Table.Th>Priority</Table.Th>\r\n                    <Table.Th>Status</Table.Th>\r\n                    <Table.Th>Actions</Table.Th>\r\n                  </Table.Tr>\r\n                </Table.Thead>\r\n                <Table.Tbody>\r\n                  {filteredSurgeries.length === 0 ? (\r\n                    <Table.Tr>\r\n                      <Table.Td colSpan={10}>\r\n                        <EmptyState\r\n                          icon={<IconScale size={48} />}\r\n                          title=\"No surgeries scheduled\"\r\n                          description=\"Schedule your first surgery\"\r\n                          size=\"sm\"\r\n                        />\r\n                      </Table.Td>\r\n                    </Table.Tr>\r\n                  ) : (\r\n                    filteredSurgeries.map((surgery: any) => (\r\n                      <Table.Tr key={surgery.id}>\r\n                        <Table.Td>\r\n                          <Text fw={500}>{surgery.surgeryId}</Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group>\r\n                            <Avatar color=\"blue\" radius=\"xl\" size=\"sm\">\r\n                              {surgery.patientName?.[0] || 'P'}\r\n                            </Avatar>\r\n                            <div>\r\n                              <Text size=\"sm\" fw={500}>\r\n                                {surgery.patientName || 'N/A'}\r\n                              </Text>\r\n                              <Text size=\"xs\" c=\"dimmed\">\r\n                                ID: {(surgery as any).patientId || 'N/A'}\r\n                              </Text>\r\n                            </div>\r\n                          </Group>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500} lineClamp={1}>\r\n                              {surgery.procedure}\r\n                            </Text>\r\n                            <Badge color={getSurgeryTypeColor((surgery as any).surgeryType || 'general')} variant=\"light\" size=\"xs\">\r\n                              {(surgery as any).surgeryType || 'General'}\r\n                            </Badge>\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>\r\n                              {surgery.surgeon || 'N/A'}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              {(surgery as any).department || 'N/A'}\r\n                            </Text>\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>\r\n                              {surgery.date || 'N/A'}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              {surgery.time || 'N/A'}\r\n                            </Text>\r\n                          </div>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Text size=\"sm\">\r\n                            {surgery.duration || 0} min\r\n                          </Text>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color=\"cyan\" variant=\"light\">\r\n                            {surgery.operatingRoom || 'N/A'}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getPriorityColor((surgery as any).priority || 'routine')} variant=\"light\" size=\"xs\">\r\n                            {((surgery as any).priority || 'routine').toUpperCase()}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Badge color={getStatusColor(surgery.status)} variant=\"light\">\r\n                            {surgery.status.replace('_', ' ')}\r\n                          </Badge>\r\n                        </Table.Td>\r\n                        <Table.Td>\r\n                          <Group gap=\"xs\">\r\n                            <ActionIcon\r\n                              variant=\"subtle\"\r\n                              color=\"blue\"\r\n                              onClick={() => handleViewSurgery(surgery)}\r\n                            >\r\n                              <IconEye size={16} />\r\n                            </ActionIcon>\r\n                            <ActionIcon variant=\"subtle\" color=\"green\">\r\n                              <IconEdit size={16} />\r\n                            </ActionIcon>\r\n                            <Menu>\r\n                              <Menu.Target>\r\n                                <ActionIcon variant=\"subtle\" color=\"gray\">\r\n                                  <IconDotsVertical size={16} />\r\n                                </ActionIcon>\r\n                              </Menu.Target>\r\n                              <Menu.Dropdown>\r\n                                <Menu.Item leftSection={<IconClipboardList size={14} />}>\r\n                                  Pre-Op Checklist\r\n                                </Menu.Item>\r\n                                <Menu.Item leftSection={<IconReportMedical size={14} />}>\r\n                                  Post-Op Notes\r\n                                </Menu.Item>\r\n                                <Menu.Item leftSection={<IconDownload size={14} />}>\r\n                                  Download Report\r\n                                </Menu.Item>\r\n                                <Menu.Divider />\r\n                                <Menu.Item \r\n                                  leftSection={<IconX size={14} />}\r\n                                  color=\"red\"\r\n                                >\r\n                                  Cancel Surgery\r\n                                </Menu.Item>\r\n                              </Menu.Dropdown>\r\n                            </Menu>\r\n                          </Group>\r\n                        </Table.Td>\r\n                      </Table.Tr>\r\n                    ))\r\n                  )}\r\n                </Table.Tbody>\r\n              </Table>\r\n            </ScrollArea>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Operating Theaters Tab */}\r\n        <Tabs.Panel value=\"theaters\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Operating Theaters</Title>\r\n              <Group>\r\n                <Button leftSection={<IconSettings size={16} />} variant=\"light\">\r\n                  OR Maintenance\r\n                </Button>\r\n                <Button leftSection={<IconActivity size={16} />}>\r\n                  Monitor Status\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* OR Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search ORs...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'available', label: 'Available' },\r\n                  { value: 'occupied', label: 'Occupied' },\r\n                  { value: 'cleaned', label: 'Cleaned' },\r\n                  { value: 'maintenance', label: 'Maintenance' }\r\n                ]}\r\n                value={selectedORStatus}\r\n                onChange={setSelectedORStatus}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Operating Rooms Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {filteredORs.map((or: any) => (\r\n                <Card key={or.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">OR {or.roomNumber}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{or.roomName}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(or.status)} variant=\"light\">\r\n                      {or.status}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Location</Text>\r\n                      <Text size=\"sm\" fw={500}>{or.location}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Capacity</Text>\r\n                      <Text size=\"sm\">{or.capacity} people</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Specialties</Text>\r\n                      <div>\r\n                        {or.specialties.slice(0, 2).map((specialty) => (\r\n                          <Badge key={specialty} size=\"xs\" variant=\"light\" mr=\"xs\">\r\n                            {specialty}\r\n                          </Badge>\r\n                        ))}\r\n                        {or.specialties.length > 2 && (\r\n                          <Badge size=\"xs\" variant=\"light\" color=\"gray\">\r\n                            +{or.specialties.length - 2}\r\n                          </Badge>\r\n                        )}\r\n                      </div>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {(or as any).currentSurgery && (\r\n                    <Alert variant=\"light\" color=\"blue\" mb=\"md\">\r\n                      <Text size=\"sm\" fw={500}>Current Surgery:</Text>\r\n                      <Text size=\"sm\">{(or as any).currentSurgery || 'N/A'}</Text>\r\n                    </Alert>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Equipment: {or.equipment.length} items\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewOR(or)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconSettings size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconActivity size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Equipment Tab */}\r\n        <Tabs.Panel value=\"equipment\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Surgical Equipment</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Add Equipment\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Equipment Grid */}\r\n            <SimpleGrid cols={{ base: 1, md: 2, lg: 3 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((equipment) => (\r\n                <Card key={equipment.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{equipment.equipmentName}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{equipment.manufacturer}</Text>\r\n                    </div>\r\n                    <Badge color={getStatusColor(equipment.status)} variant=\"light\">\r\n                      {equipment.status.replace('_', ' ')}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Model</Text>\r\n                      <Text size=\"sm\" fw={500}>{equipment.model}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Serial</Text>\r\n                      <Text size=\"sm\" fw={500}>{equipment.serialNumber}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Location</Text>\r\n                      <Text size=\"sm\">OR {equipment.assignedOR}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Last Calibrated</Text>\r\n                      <Text size=\"sm\">\r\n                        {new Date(equipment.lastCalibrationDate).toLocaleDateString()}\r\n                      </Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Next Due</Text>\r\n                      <Text \r\n                        size=\"sm\" \r\n                        c={new Date(equipment.nextCalibrationDate) < new Date() ? 'red' : 'dimmed'}\r\n                      >\r\n                        {new Date(equipment.nextCalibrationDate).toLocaleDateString()}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {equipment.usageHours && (\r\n                    <div>\r\n                      <Group justify=\"space-between\" mb=\"xs\">\r\n                        <Text size=\"sm\" c=\"dimmed\">Usage Hours</Text>\r\n                        <Text size=\"sm\" fw={500}>{equipment.usageHours}h</Text>\r\n                      </Group>\r\n                      <Progress \r\n                        value={(equipment.usageHours / 8760) * 100} \r\n                        size=\"sm\" \r\n                        color=\"blue\"\r\n                      />\r\n                    </div>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      {equipment.equipmentType}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconSettings size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconTools size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Surgical Teams Tab */}\r\n        <Tabs.Panel value=\"teams\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Surgical Teams</Title>\r\n              <Button leftSection={<IconPlus size={16} />}>\r\n                Create Team\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Surgical Teams Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((team) => (\r\n                <Card key={team.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{team.teamName}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">{team.specialization}</Text>\r\n                    </div>\r\n                    <Badge color={team.isActive ? 'green' : 'gray'} variant=\"light\">\r\n                      {team.isActive ? 'Active' : 'Inactive'}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"md\" mb=\"md\">\r\n                    <div>\r\n                      <Text size=\"sm\" fw={500} mb=\"sm\">Lead Surgeon</Text>\r\n                      <Group>\r\n                        <Avatar color=\"blue\" radius=\"xl\">\r\n                          {team.leadSurgeon.firstName[0]}{team.leadSurgeon.lastName[0]}\r\n                        </Avatar>\r\n                        <div>\r\n                          <Text size=\"sm\" fw={500}>\r\n                            Dr. {team.leadSurgeon.firstName} {team.leadSurgeon.lastName}\r\n                          </Text>\r\n                          <Text size=\"xs\" c=\"dimmed\">\r\n                            {team.leadSurgeon.department?.name}\r\n                          </Text>\r\n                        </div>\r\n                      </Group>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Text size=\"sm\" fw={500} mb=\"sm\">Team Members</Text>\r\n                      <Stack gap=\"xs\">\r\n                        {team.teamMembers.slice(0, 3).map((member) => (\r\n                          <Group key={member.id} gap=\"sm\">\r\n                            <Avatar size=\"sm\" color=\"cyan\" radius=\"xl\">\r\n                              {member.firstName[0]}{member.lastName[0]}\r\n                            </Avatar>\r\n                            <div>\r\n                              <Text size=\"sm\">{member.firstName} {member.lastName}</Text>\r\n                              <Text size=\"xs\" c=\"dimmed\">{member.role}</Text>\r\n                            </div>\r\n                          </Group>\r\n                        ))}\r\n                        {team.teamMembers.length > 3 && (\r\n                          <Text size=\"xs\" c=\"dimmed\">\r\n                            +{team.teamMembers.length - 3} more members\r\n                          </Text>\r\n                        )}\r\n                      </Stack>\r\n                    </div>\r\n                  </Stack>\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Created: {new Date(team.createdDate).toLocaleDateString()}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconEdit size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconUsers size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Reports & Analytics Tab */}\r\n        <Tabs.Panel value=\"reports\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Title order={3} mb=\"lg\">Surgery Reports & Analytics</Title>\r\n            \r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {/* Surgery Types Distribution */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Surgeries by Type</Title>\r\n                <MantineDonutChart\r\n                  data={surgeryTypeData}\r\n                  size={160}\r\n                  thickness={30}\r\n                  withLabels\r\n                />\r\n              </Card>\r\n              \r\n              {/* Monthly Surgery Volume */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Monthly Surgery Volume</Title>\r\n                <SimpleAreaChart\r\n                  data={monthlyVolume}\r\n                  dataKey=\"month\"\r\n                  series={[{ name: 'surgeries', color: 'blue.6' }]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* OR Utilization */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder style={{ gridColumn: '1 / -1' }}>\r\n                <Title order={4} mb=\"md\">Operating Room Utilization</Title>\r\n                <SimpleBarChart\r\n                  data={orUtilization}\r\n                  dataKey=\"or\"\r\n                  series={[\r\n                    { name: 'utilization', color: 'orange.6' }\r\n                  ]}\r\n                />\r\n              </Card>\r\n              \r\n              {/* Key Performance Indicators */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Key Performance Indicators</Title>\r\n                <Stack gap=\"md\">\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Surgery Success Rate</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"green\">\r\n                      {0 /* TODO: Fetch from API */}%\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Average Turnover Time</Text>\r\n                    <Text size=\"sm\" fw={600}>\r\n                      {0 /* TODO: Fetch from API */}min\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>On-Time Start Rate</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"green\">\r\n                      {0 /* TODO: Fetch from API */}%\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\" p=\"sm\" \r\n                         style={{ backgroundColor: '#f8f9fa', borderRadius: '6px' }}>\r\n                    <Text size=\"sm\" fw={500}>Complication Rate</Text>\r\n                    <Text size=\"sm\" fw={600} c=\"red\">\r\n                      {0 /* TODO: Fetch from API */}%\r\n                    </Text>\r\n                  </Group>\r\n                </Stack>\r\n              </Card>\r\n              \r\n              {/* Quick Actions */}\r\n              <Card padding=\"lg\" radius=\"md\" withBorder>\r\n                <Title order={4} mb=\"md\">Quick Reports</Title>\r\n                <Stack gap=\"sm\">\r\n                  <Button fullWidth leftSection={<IconDownload size={16} />} variant=\"light\">\r\n                    Export Surgery Log\r\n                  </Button>\r\n                  <Button fullWidth leftSection={<IconFileText size={16} />} variant=\"light\">\r\n                    OR Utilization Report\r\n                  </Button>\r\n                  <Button fullWidth leftSection={<IconChartBar size={16} />} variant=\"light\">\r\n                    Performance Analytics\r\n                  </Button>\r\n                  <Button fullWidth leftSection={<IconReportMedical size={16} />} variant=\"light\">\r\n                    Quality Metrics\r\n                  </Button>\r\n                </Stack>\r\n              </Card>\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Surgery Detail Modal */}\r\n      <Modal\r\n        opened={surgeryDetailOpened}\r\n        onClose={closeSurgeryDetail}\r\n        title=\"Surgery Details\"\r\n        size=\"xl\"\r\n      >\r\n        {selectedSurgery && (\r\n          <ScrollArea h={600}>\r\n            <Stack gap=\"md\">\r\n              <Group>\r\n                <ThemeIcon color=\"blue\" size=\"xl\" variant=\"light\">\r\n                  <IconScissors size={24} />\r\n                </ThemeIcon>\r\n                <div>\r\n                  <Title order={3}>{selectedSurgery.procedure}</Title>\r\n                  <Text c=\"dimmed\">Surgery ID: {selectedSurgery.surgeryId}</Text>\r\n                  <Badge color={getStatusColor(selectedSurgery.status)} variant=\"light\" mt=\"xs\">\r\n                    {selectedSurgery.status.replace('_', ' ')}\r\n                  </Badge>\r\n                </div>\r\n              </Group>\r\n\r\n              <Divider />\r\n\r\n              <SimpleGrid cols={2}>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Patient</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {selectedSurgery.patientName || 'N/A'}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Surgery Type</Text>\r\n                  <Badge color={getSurgeryTypeColor(selectedSurgery.surgeryType || 'general')} variant=\"light\">\r\n                    {selectedSurgery.surgeryType || 'General'}\r\n                  </Badge>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Primary Surgeon</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {selectedSurgery.surgeon || 'N/A'}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Operating Room</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedSurgery.operatingRoom || 'N/A'}</Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Scheduled Date</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {selectedSurgery.date || 'N/A'} {selectedSurgery.time || ''}\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Estimated Duration</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    {selectedSurgery.duration || 0} minutes\r\n                  </Text>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Priority</Text>\r\n                  <Badge color={getPriorityColor(selectedSurgery.priority || 'routine')} variant=\"light\">\r\n                    {(selectedSurgery.priority || 'routine').toUpperCase()}\r\n                  </Badge>\r\n                </div>\r\n                <div>\r\n                  <Text size=\"sm\" fw={500}>Anesthesiologist</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{selectedSurgery.anesthesiologist || 'N/A'}</Text>\r\n                </div>\r\n              </SimpleGrid>\r\n\r\n              {selectedSurgery.specialInstructions && (\r\n                <>\r\n                  <Divider />\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500} mb=\"sm\">Special Instructions</Text>\r\n                    <Text size=\"sm\">{selectedSurgery.specialInstructions}</Text>\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              {selectedSurgery.assistants && selectedSurgery.assistants.length > 0 && (\r\n                <>\r\n                  <Divider />\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500} mb=\"sm\">Assistants</Text>\r\n                    <Stack gap=\"xs\">\r\n                      {selectedSurgery.assistants.map((assistant: string, index: number) => (\r\n                        <Group key={index}>\r\n                          <Avatar size=\"sm\" color=\"blue\" radius=\"xl\">\r\n                            {assistant[0]}\r\n                          </Avatar>\r\n                          <Text size=\"sm\">{assistant}</Text>\r\n                        </Group>\r\n                      ))}\r\n                    </Stack>\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              <Group justify=\"flex-end\">\r\n                <Button variant=\"light\" onClick={closeSurgeryDetail}>\r\n                  Close\r\n                </Button>\r\n                <Button leftSection={<IconClipboardList size={16} />}>\r\n                  Pre-Op Checklist\r\n                </Button>\r\n                <Button leftSection={<IconEdit size={16} />}>\r\n                  Edit Surgery\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </ScrollArea>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Add Surgery Modal */}\r\n      <Modal\r\n        opened={addSurgeryOpened}\r\n        onClose={closeAddSurgery}\r\n        title=\"Schedule New Surgery\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Patient\"\r\n              placeholder=\"Select patient\"\r\n              data={[].map /* TODO: Fetch from API */(patient => ({ \r\n                value: patient.id, \r\n                label: `${patient.firstName} ${patient.lastName}` \r\n              }))}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Primary Surgeon\"\r\n              placeholder=\"Select surgeon\"\r\n              data={[].filter /* TODO: Fetch from API */((staff: any) => staff.role === 'Doctor' || staff.role === 'doctor').map((surgeon: any) => ({ \r\n                value: surgeon.staffId, \r\n                label: `Dr. ${surgeon.firstName} ${surgeon.lastName}` \r\n              }))}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <TextInput\r\n            label=\"Procedure\"\r\n            placeholder=\"Enter surgical procedure\"\r\n            required\r\n          />\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Surgery Type\"\r\n              placeholder=\"Select type\"\r\n              data={[\r\n                { value: 'cardiac', label: 'Cardiac' },\r\n                { value: 'neurological', label: 'Neurological' },\r\n                { value: 'orthopedic', label: 'Orthopedic' },\r\n                { value: 'general', label: 'General' },\r\n                { value: 'plastic', label: 'Plastic' },\r\n                { value: 'pediatric', label: 'Pediatric' }\r\n              ]}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Priority\"\r\n              placeholder=\"Select priority\"\r\n              data={[\r\n                { value: 'emergency', label: 'Emergency' },\r\n                { value: 'urgent', label: 'Urgent' },\r\n                { value: 'elective', label: 'Elective' },\r\n                { value: 'routine', label: 'Routine' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <DatePickerInput\r\n              label=\"Surgery Date\"\r\n              placeholder=\"Select date\"\r\n              required\r\n            />\r\n            <NumberInput\r\n              label=\"Estimated Duration (minutes)\"\r\n              placeholder=\"120\"\r\n              min={30}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Operating Room\"\r\n              placeholder=\"Select OR\"\r\n              data={[].map /* TODO: Fetch from API */(or => ({ \r\n                value: or.id, \r\n                label: `OR ${or.roomNumber} - ${or.roomName}` \r\n              }))}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Anesthesia Type\"\r\n              placeholder=\"Select anesthesia\"\r\n              data={[\r\n                { value: 'general', label: 'General' },\r\n                { value: 'local', label: 'Local' },\r\n                { value: 'regional', label: 'Regional' },\r\n                { value: 'spinal', label: 'Spinal' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Textarea\r\n            label=\"Special Instructions\"\r\n            placeholder=\"Enter any special instructions\"\r\n            rows={3}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeAddSurgery}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Surgery Scheduled',\r\n                message: 'Surgery has been successfully scheduled',\r\n                color: 'green',\r\n              });\r\n              closeAddSurgery();\r\n            }}>\r\n              Schedule Surgery\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SurgeryManagement;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\dashboard\\telemedicine\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ScrollArea' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Progress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SimpleBarChart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RemoteMonitoringData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 56,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 56,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'VitalSigns' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 57,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TelemedicineStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 59,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'VirtualConsultation' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 61,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 22
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useMemo has a missing dependency: 'consultations'. Either include it or remove the dependency array.",
        "line": 174,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 174,
        "endColumn": 72,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [consultations, searchQuery, selectedSessionType, selectedStatus, selectedDoctor]",
            "fix": {
              "range": [5995, 6061],
              "text": "[consultations, searchQuery, selectedSessionType, selectedStatus, selectedDoctor]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getPriorityColor' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 201,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 201,
        "endColumn": 25
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Avatar' is not defined.",
        "line": 644,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 644,
        "endColumn": 32
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Divider' is not defined.",
        "line": 686,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 686,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Alert' is not defined.",
        "line": 728,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 728,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Divider' is not defined.",
        "line": 813,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 813,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Avatar' is not defined.",
        "line": 881,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 881,
        "endColumn": 32
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'Alert' is not defined.",
        "line": 924,
        "column": 22,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 924,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconMessage' is not defined.",
        "line": 947,
        "column": 26,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 947,
        "endColumn": 37
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconVideoOff' is not defined.",
        "line": 1001,
        "column": 20,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1001,
        "endColumn": 32
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconUser' is not defined.",
        "line": 1043,
        "column": 18,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1043,
        "endColumn": 26
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconMicrophone' is not defined.",
        "line": 1082,
        "column": 34,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1082,
        "endColumn": 48
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconMicrophoneOff' is not defined.",
        "line": 1082,
        "column": 65,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1082,
        "endColumn": 82
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconVideoOff' is not defined.",
        "line": 1091,
        "column": 60,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1091,
        "endColumn": 72
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconScreenShareOff' is not defined.",
        "line": 1100,
        "column": 35,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1100,
        "endColumn": 53
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconScreenShare' is not defined.",
        "line": 1100,
        "column": 70,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1100,
        "endColumn": 85
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconX' is not defined.",
        "line": 1109,
        "column": 31,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1109,
        "endColumn": 36
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconCircleCheck' is not defined.",
        "line": 1109,
        "column": 53,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1109,
        "endColumn": 68
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconMessage' is not defined.",
        "line": 1117,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1117,
        "endColumn": 27
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'IconPhoneOff' is not defined.",
        "line": 1126,
        "column": 16,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1126,
        "endColumn": 28
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'NumberInput' is not defined.",
        "line": 1174,
        "column": 14,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1174,
        "endColumn": 25
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 2,
        "message": "'DatePickerInput' is not defined.",
        "line": 1185,
        "column": 14,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 1185,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.",
        "line": 93,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 93,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchAllData]",
            "fix": { "range": [2703, 2705], "text": "[fetchAllData]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 20,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useMemo, useEffect } from 'react';\nimport {\n  Container,\n  Paper,\n  Title,\n  Group,\n  Button,\n  TextInput,\n  Select,\n  Badge,\n  Modal,\n  Text,\n  Tabs,\n  Card,\n  ActionIcon,\n  Stack,\n  SimpleGrid,\n  ScrollArea,\n  ThemeIcon,\n  Progress,\n  Textarea\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport EmptyState from '../../../components/EmptyState';\nimport { notifications } from '@mantine/notifications';\nimport { MantineDonutChart, SimpleBarChart } from '../../../components/MantineChart';\nimport {\n  IconPlus,\n  IconSearch,\n  IconEye,\n  IconChartBar,\n  IconDownload,\n  IconShare,\n  IconActivity,\n  IconSettings,\n  IconAlertTriangle,\n  IconLungs,\n  IconHeart,\n  IconStethoscope,\n  IconVideo,\n  IconCalendarEvent,\n  IconChartLine,\n  IconThermometer,\n  IconBrandZoom,\n  IconPrescription,\n  IconDeviceHeartMonitor\n} from '@tabler/icons-react';\n\n// Import types and mock data\nimport {\n  TelemedicineSession,\n  SessionStatus,\n  SessionType,\n  RemoteMonitoringData,\n  VitalSigns,\n  DigitalPrescription,\n  TelemedicineStats,\n  PatientMonitoring,\n  VirtualConsultation,\n  ConsultationStatus\n} from '../../../types/telemedicine';\nimport telemedicineService from '../../../services/telemedicine.service';\n\nconst Telemedicine = () => {\n  // State management\n  const [activeTab, setActiveTab] = useState<string>('overview');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedSessionType, setSelectedSessionType] = useState<string>('');\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\n  const [selectedDoctor, setSelectedDoctor] = useState<string>('');\n  const [_selectedSession, setSelectedSession] = useState<TelemedicineSession | null>(null);\n  const [_selectedPrescription, setSelectedPrescription] = useState<DigitalPrescription | null>(null);\n  const [_selectedPatientMonitoring, setSelectedPatientMonitoring] = useState<PatientMonitoring | null>(null);\n  const [_isInCall, _setIsInCall] = useState(false);\n  const [_callDuration, _setCallDuration] = useState(0);\n  const [_isVideoEnabled, _setIsVideoEnabled] = useState(true);\n  const [_isAudioEnabled, _setIsAudioEnabled] = useState(true);\n  const [_isScreenSharing, _setIsScreenSharing] = useState(false);\n  const [_isRecording, _setIsRecording] = useState(false);\n\n  // API state\n  const [consultations, setConsultations] = useState<any[]>([]);\n  const [telemedicineStats, setTelemedicineStats] = useState<any>(null);\n  const [_loading, setLoading] = useState(true);\n  const [_error, setError] = useState<string | null>(null);\n\n  // Fetch data\n  useEffect(() => {\n    fetchAllData();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      await Promise.all([fetchConsultations(), fetchStats()]);\n    } catch (err: any) {\n      console.error('Error loading telemedicine data:', err);\n      setError(err.response?.data?.message || err.message || 'Failed to load telemedicine data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchConsultations = async () => {\n    try {\n      const response = await telemedicineService.getConsultations({ limit: 100 });\n      const consultationsData = Array.isArray(response.data) \n        ? response.data \n        : (response.data?.items || []);\n      setConsultations(consultationsData);\n    } catch (err: any) {\n      console.warn('Error fetching consultations (using empty data):', err.response?.data?.message || err.message);\n      setConsultations([]);\n    }\n  };\n\n  const fetchStats = async () => {\n    try {\n      const response = await telemedicineService.getStats();\n      setTelemedicineStats(response.data);\n    } catch (err: any) {\n      console.warn('Error fetching telemedicine stats (using default values):', err.response?.data?.message || err.message);\n      setTelemedicineStats({\n        totalSessions: 0,\n        activeSessions: 0,\n        completedSessions: 0,\n        scheduledSessions: 0,\n        cancelledSessions: 0,\n        totalPatients: 0,\n        averageSessionDuration: 0,\n        patientSatisfaction: 0\n      });\n    }\n  };\n\n  // Modal states\n  const [_sessionDetailOpened, { open: _openSessionDetail, close: _closeSessionDetail }] = useDisclosure(false);\n  const [_startSessionOpened, { open: openStartSession, close: _closeStartSession }] = useDisclosure(false);\n  const [_prescriptionDetailOpened, { open: _openPrescriptionDetail, close: _closePrescriptionDetail }] = useDisclosure(false);\n  const [_monitoringDetailOpened, { open: _openMonitoringDetail, close: _closeMonitoringDetail }] = useDisclosure(false);\n  const [_createPrescriptionOpened, { open: openCreatePrescription, close: _closeCreatePrescription }] = useDisclosure(false);\n  const [_videoCallOpened, { open: _openVideoCall, close: _closeVideoCall }] = useDisclosure(false);\n\n  // Timer effect for call duration\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (_isInCall) {\n      interval = setInterval(() => {\n        _setCallDuration(prev => prev + 1);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [_isInCall]);\n\n  // Filter sessions\n  const filteredSessions = useMemo(() => {\n    const sessionsList = consultations.length > 0 ? consultations : [];\n    return sessionsList.filter((session: any) => {\n      const matchesSearch = \n        session.patientName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        session.doctorName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        (session as any).sessionId?.toLowerCase().includes(searchQuery.toLowerCase());\n      \n      const matchesType = !selectedSessionType || session.type === selectedSessionType;\n      const matchesStatus = !selectedStatus || session.status === selectedStatus;\n      const matchesDoctor = !selectedDoctor || (session as any).doctorId === selectedDoctor;\n\n      return matchesSearch && matchesType && matchesStatus && matchesDoctor;\n    });\n  }, [searchQuery, selectedSessionType, selectedStatus, selectedDoctor]);\n\n  // Helper functions\n  const getStatusColor = (status: SessionStatus | ConsultationStatus) => {\n    switch (status) {\n      case 'scheduled': return 'blue';\n      case 'in_progress':\n      case 'active': return 'green';\n      case 'completed': return 'teal';\n      case 'cancelled': return 'red';\n      case 'no_show': return 'gray';\n      case 'waiting': return 'orange';\n      default: return 'gray';\n    }\n  };\n\n  const getSessionTypeColor = (type: SessionType) => {\n    switch (type) {\n      case 'consultation': return 'blue';\n      case 'follow_up': return 'green';\n      case 'emergency': return 'red';\n      case 'therapy': return 'purple';\n      case 'monitoring': return 'orange';\n      default: return 'gray';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'red';\n      case 'high': return 'orange';\n      case 'normal': return 'blue';\n      case 'low': return 'gray';\n      default: return 'gray';\n    }\n  };\n\n  const handleViewSession = (_session: TelemedicineSession) => {\n    setSelectedSession(_session);\n    _openSessionDetail();\n  };\n\n  const handleViewPrescription = (_prescription: DigitalPrescription) => {\n    setSelectedPrescription(_prescription);\n    _openPrescriptionDetail();\n  };\n\n  const handleViewMonitoring = (_monitoring: PatientMonitoring) => {\n    setSelectedPatientMonitoring(_monitoring);\n    _openMonitoringDetail();\n  };\n\n  const handleStartVideoCall = (_session?: TelemedicineSession) => {\n    _setIsInCall(true);\n    _setCallDuration(0);\n    _openVideoCall();\n    notifications.show({\n      title: 'Call Started',\n      message: 'Video consultation session has begun',\n      color: 'green',\n    });\n  };\n\n  const handleEndCall = () => {\n    _setIsInCall(false);\n    _setCallDuration(0);\n    _closeVideoCall();\n    notifications.show({\n      title: 'Call Ended',\n      message: 'Video consultation session has ended',\n      color: 'blue',\n    });\n  };\n\n  const toggleVideo = () => {\n    _setIsVideoEnabled(!_isVideoEnabled);\n    notifications.show({\n      title: _isVideoEnabled ? 'Video Off' : 'Video On',\n      message: `Camera has been turned ${_isVideoEnabled ? 'off' : 'on'}`,\n      color: 'blue',\n    });\n  };\n\n  const toggleAudio = () => {\n    _setIsAudioEnabled(!_isAudioEnabled);\n    notifications.show({\n      title: _isAudioEnabled ? 'Audio Off' : 'Audio On',\n      message: `Microphone has been turned ${_isAudioEnabled ? 'off' : 'on'}`,\n      color: 'blue',\n    });\n  };\n\n  const toggleScreenShare = () => {\n    _setIsScreenSharing(!_isScreenSharing);\n    notifications.show({\n      title: _isScreenSharing ? 'Screen Share Stopped' : 'Screen Share Started',\n      message: `Screen sharing has been ${_isScreenSharing ? 'stopped' : 'started'}`,\n      color: 'blue',\n    });\n  };\n\n  const toggleRecording = () => {\n    _setIsRecording(!_isRecording);\n    notifications.show({\n      title: _isRecording ? 'Recording Stopped' : 'Recording Started',\n      message: `Session recording has been ${_isRecording ? 'stopped' : 'started'}`,\n      color: _isRecording ? 'red' : 'green',\n    });\n  };\n\n  const formatDuration = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const formatDate = (date: string | Date) => {\n    const d = new Date(date);\n    const year = d.getFullYear();\n    const month = String(d.getMonth() + 1).padStart(2, '0');\n    const day = String(d.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  const formatDateTime = (date: string | Date) => {\n    const d = new Date(date);\n    const year = d.getFullYear();\n    const month = String(d.getMonth() + 1).padStart(2, '0');\n    const day = String(d.getDate()).padStart(2, '0');\n    const hours = String(d.getHours()).padStart(2, '0');\n    const minutes = String(d.getMinutes()).padStart(2, '0');\n    return `${year}-${month}-${day} ${hours}:${minutes}`;\n  };\n\n  // Quick stats for overview\n  const quickStats = [\n    {\n      title: 'Active Sessions',\n      value: (telemedicineStats as any)?.activeSessions || 0,\n      icon: IconVideo,\n      color: 'green'\n    },\n    {\n      title: 'Scheduled Sessions',\n      value: (telemedicineStats as any)?.scheduledSessions || 0,\n      icon: IconCalendarEvent,\n      color: 'blue'\n    },\n    {\n      title: 'Monitored Patients',\n      value: (telemedicineStats as any)?.monitoredPatients || 0,\n      icon: IconDeviceHeartMonitor,\n      color: 'purple'\n    },\n    {\n      title: 'Digital Prescriptions',\n      value: (telemedicineStats as any)?.digitalPrescriptions || 0,\n      icon: IconPrescription,\n      color: 'orange'\n    }\n  ];\n\n  return (\n    <Container size=\"xl\" py=\"md\">\n      {/* Header */}\n      <Group justify=\"space-between\" mb=\"lg\">\n        <div>\n          <Title order={1}>Telemedicine & Virtual Care</Title>\n          <Text c=\"dimmed\" size=\"sm\">\n            Manage virtual consultations, remote monitoring, and digital healthcare delivery\n          </Text>\n        </div>\n        <Group>\r\n          <Button\r\n            leftSection={<IconVideo size={16} />}\r\n            onClick={() => handleStartVideoCall()}\r\n            color=\"green\"\r\n          >\r\n            Start Session\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconCalendarEvent size={16} />}\r\n            onClick={openStartSession}\r\n          >\r\n            Schedule Session\r\n          </Button>\r\n          <Button\r\n            variant=\"light\"\r\n            leftSection={<IconPrescription size={16} />}\r\n            onClick={openCreatePrescription}\r\n          >\r\n            Digital Prescription\r\n          </Button>\r\n        </Group>\r\n      </Group>\r\n\r\n      {/* Quick Stats */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }} mb=\"lg\">\r\n        {quickStats.map((stat) => {\r\n          const Icon = stat.icon;\r\n          return (\r\n            <Card key={stat.title} padding=\"lg\" radius=\"md\" withBorder>\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"sm\" fw={500}>\r\n                    {stat.title}\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stat.value}\r\n                  </Text>\r\n                </div>\r\n                <ThemeIcon color={stat.color} size=\"xl\" radius=\"md\" variant=\"light\">\r\n                  <Icon size={24} />\r\n                </ThemeIcon>\r\n              </Group>\r\n            </Card>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs value={activeTab} onChange={setActiveTab}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"overview\" leftSection={<IconChartBar size={16} />}>\r\n            Overview\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"sessions\" leftSection={<IconVideo size={16} />}>\r\n            Sessions\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"monitoring\" leftSection={<IconDeviceHeartMonitor size={16} />}>\r\n            Remote Monitoring\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"prescriptions\" leftSection={<IconPrescription size={16} />}>\r\n            Digital Prescriptions\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"consultations\" leftSection={<IconStethoscope size={16} />}>\r\n            Virtual Consultations\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        {/* Overview Tab */}\r\n        <Tabs.Panel value=\"overview\">\r\n          <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\" mt=\"md\">\r\n            {/* Session Analytics */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Session Statistics</Title>\r\n              <MantineDonutChart\r\n                data={[]}\r\n                size={200}\r\n                thickness={40}\r\n                withLabels\r\n              />\r\n            </Card>\r\n\r\n            {/* Active Monitoring Alerts */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Monitoring Alerts</Title>\r\n              <Stack gap=\"sm\">\r\n                <Text size=\"sm\" c=\"dimmed\" ta=\"center\" py=\"xl\">\r\n                  No active alerts\r\n                </Text>\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* Today's Sessions */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">Today&apos;s Sessions</Title>\r\n              <Stack gap=\"sm\">\r\n                {[].map((session) => (\r\n                  <Card key={session.id} padding=\"sm\" withBorder>\r\n                    <Group justify=\"space-between\">\r\n                      <div>\r\n                        <Text fw={500} size=\"sm\">{session.patientName}</Text>\r\n                        <Text size=\"xs\" c=\"dimmed\">Dr. {session.doctorName}</Text>\r\n                      </div>\r\n                      <div style={{ textAlign: 'right' }}>\r\n                        <Badge color={getStatusColor((session as any).status)} size=\"sm\">\r\n                          {session.status}\r\n                        </Badge>\r\n                        <Text size=\"xs\" c=\"dimmed\" mt=\"xs\">\r\n                          {session.scheduledTime}\r\n                        </Text>\r\n                      </div>\r\n                    </Group>\r\n                  </Card>\r\n                ))}\r\n              </Stack>\r\n            </Card>\r\n\r\n            {/* Equipment Status */}\r\n            <Card padding=\"lg\" radius=\"md\" withBorder>\r\n              <Title order={4} mb=\"md\">System Status</Title>\r\n              <Stack gap=\"sm\">\r\n                <Text size=\"sm\" c=\"dimmed\" ta=\"center\" py=\"xl\">\r\n                  System status unavailable\r\n                </Text>\r\n              </Stack>\r\n            </Card>\r\n          </SimpleGrid>\r\n        </Tabs.Panel>\r\n\r\n        {/* Sessions Tab */}\r\n        <Tabs.Panel value=\"sessions\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            {/* Search and Filters */}\r\n            <Group mb=\"md\">\r\n              <TextInput\r\n                placeholder=\"Search sessions...\"\r\n                leftSection={<IconSearch size={16} />}\r\n                value={searchQuery}\r\n                onChange={(event) => setSearchQuery(event.currentTarget.value)}\r\n                style={{ flex: 1 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Type\"\r\n                data={[\r\n                  { value: 'consultation', label: 'Consultation' },\r\n                  { value: 'follow_up', label: 'Follow-up' },\r\n                  { value: 'emergency', label: 'Emergency' },\r\n                  { value: 'therapy', label: 'Therapy' },\r\n                  { value: 'monitoring', label: 'Monitoring' }\r\n                ]}\r\n                value={selectedSessionType}\r\n                onChange={setSelectedSessionType}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Status\"\r\n                data={[\r\n                  { value: 'scheduled', label: 'Scheduled' },\r\n                  { value: 'in_progress', label: 'In Progress' },\r\n                  { value: 'completed', label: 'Completed' },\r\n                  { value: 'cancelled', label: 'Cancelled' },\r\n                  { value: 'no_show', label: 'No Show' },\r\n                  { value: 'waiting', label: 'Waiting' }\r\n                ]}\r\n                value={selectedStatus}\r\n                onChange={setSelectedStatus}\r\n                clearable\r\n              />\r\n              <Select\r\n                placeholder=\"Doctor\"\r\n                data={[].map /* TODO: Fetch from API */(doctor => ({\r\n                  value: doctor.id,\r\n                  label: `Dr. ${(doctor as any).firstName || doctor.name.split(' ')[0]} ${(doctor as any).lastName || doctor.name.split(' ')[1] || ''}`\r\n                }))}\r\n                value={selectedDoctor}\r\n                onChange={setSelectedDoctor}\r\n                clearable\r\n              />\r\n            </Group>\r\n\r\n            {/* Sessions Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {filteredSessions.length === 0 ? (\r\n                <div style={{ gridColumn: '1 / -1' }}>\r\n                  <EmptyState\r\n                    icon={<IconVideo size={48} />}\r\n                    title=\"No telemedicine sessions\"\r\n                    description=\"Schedule your first virtual consultation\"\r\n                    size=\"sm\"\r\n                  />\r\n                </div>\r\n              ) : (\r\n                filteredSessions.map((session) => (\r\n                  <Card key={session.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                    <Group justify=\"space-between\" mb=\"md\">\r\n                      <div>\r\n                        <Text fw={600} size=\"lg\">{session.patientName}</Text>\r\n                        <Text size=\"sm\" c=\"dimmed\">Dr. {session.doctorName}</Text>\r\n                      </div>\r\n                      <Badge color={getStatusColor((session as any).status)} variant=\"light\">\r\n                        {session.status.replace('_', ' ').toUpperCase()}\r\n                      </Badge>\r\n                    </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Session ID</Text>\r\n                      <Text size=\"sm\" fw={500}>{(session as any).sessionId || (session as any).consultationId}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Type</Text>\r\n                      <Badge color={getSessionTypeColor((session as any).type)} variant=\"light\" size=\"sm\">\r\n                        {session.type}\r\n                      </Badge>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Scheduled</Text>\r\n                      <Text size=\"sm\">{formatDateTime((session as any).scheduledDate || new Date().toISOString())} at {session.scheduledTime}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Duration</Text>\r\n                      <Text size=\"sm\">{session.duration} minutes</Text>\r\n                    </Group>\r\n                    {(session as any).actualDuration && (\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\" c=\"dimmed\">Actual Duration</Text>\r\n                        <Text size=\"sm\">{(session as any).actualDuration} minutes</Text>\r\n                      </Group>\r\n                    )}\r\n                  </Stack>\r\n\r\n                  {(session as any).notes && (\r\n                    <Text size=\"sm\" c=\"dimmed\" lineClamp={2} mb=\"md\">\r\n                      Notes: {(session as any).notes}\r\n                    </Text>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Platform: {(session as any).platform || 'Web'}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewSession(session as any)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      {(session as any).status === 'scheduled' && (\r\n                        <ActionIcon\r\n                          variant=\"subtle\"\r\n                          color=\"green\"\r\n                          onClick={() => handleStartVideoCall(session as any)}\r\n                        >\r\n                          <IconVideo size={16} />\r\n                        </ActionIcon>\r\n                      )}\r\n                      {(session as any).status === 'in_progress' && (\r\n                        <ActionIcon\r\n                          variant=\"subtle\"\r\n                          color=\"orange\"\r\n                          onClick={() => openVideoCall()}\r\n                        >\r\n                          <IconBrandZoom size={16} />\r\n                        </ActionIcon>\r\n                      )}\r\n                      <ActionIcon variant=\"subtle\" color=\"teal\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              )))\r\n              }\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Remote Monitoring Tab */}\r\n        <Tabs.Panel value=\"monitoring\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Remote Patient Monitoring</Title>\r\n              <Button leftSection={<IconPlus size={16} />} variant=\"light\">\r\n                Add Patient\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Monitoring Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((monitoring) => (\r\n                <Card key={monitoring.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Group>\r\n                        <Avatar color=\"blue\" size=\"md\">\r\n                          {monitoring.patientName.split(' ').map(n => n[0]).join('')}\r\n                        </Avatar>\r\n                        <div>\r\n                          <Text fw={600} size=\"lg\">{monitoring.patientName}</Text>\r\n                          <Text size=\"sm\" c=\"dimmed\">ID: {(monitoring as any).patientId || monitoring.id}</Text>\r\n                        </div>\r\n                      </Group>\r\n                    </div>\r\n                    <Badge \r\n                      color={(monitoring as any).isActive ? 'green' : 'gray'} \r\n                      variant={(monitoring as any).isActive ? 'filled' : 'light'}\r\n                    >\r\n                      {(monitoring as any).isActive ? 'ACTIVE' : 'INACTIVE'}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Device</Text>\r\n                      <Group gap=\"xs\">\r\n                        <Text size=\"sm\">{(monitoring as any).deviceType || 'N/A'}</Text>\r\n                        <Badge \r\n                          color={(monitoring as any).deviceStatus === 'connected' ? 'green' : 'red'} \r\n                          variant=\"light\" \r\n                          size=\"xs\"\r\n                        >\r\n                          {(monitoring as any).deviceStatus || 'Unknown'}\r\n                        </Badge>\r\n                      </Group>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Last Reading</Text>\r\n                      <Text size=\"sm\">{formatDateTime((monitoring as any).lastReading || new Date().toISOString())}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Monitoring Since</Text>\r\n                      <Text size=\"sm\">{formatDate((monitoring as any).startDate || new Date().toISOString())}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {/* Vital Signs */}\r\n                  <Divider label=\"Current Vitals\" labelPosition=\"center\" mb=\"md\" />\r\n                  <SimpleGrid cols={2} spacing=\"sm\" mb=\"md\">\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <ThemeIcon color=\"red\" variant=\"light\" size=\"lg\" mx=\"auto\" mb=\"xs\">\r\n                        <IconHeart size={20} />\r\n                      </ThemeIcon>\r\n                      <Text size=\"lg\" fw={600} c=\"red\">\r\n                        {(monitoring as any).vitals?.heartRate || 'N/A'} bpm\r\n                      </Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">Heart Rate</Text>\r\n                    </div>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <ThemeIcon color=\"blue\" variant=\"light\" size=\"lg\" mx=\"auto\" mb=\"xs\">\r\n                        <IconActivity size={20} />\r\n                      </ThemeIcon>\r\n                      <Text size=\"lg\" fw={600} c=\"blue\">\r\n                        {(monitoring as any).vitals?.bloodPressure || 'N/A'}\r\n                      </Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">Blood Pressure</Text>\r\n                    </div>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <ThemeIcon color=\"orange\" variant=\"light\" size=\"lg\" mx=\"auto\" mb=\"xs\">\r\n                        <IconThermometer size={20} />\r\n                      </ThemeIcon>\r\n                      <Text size=\"lg\" fw={600} c=\"orange\">\r\n                        {(monitoring as any).vitals?.temperature || 'N/A'}°F\r\n                      </Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">Temperature</Text>\r\n                    </div>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                      <ThemeIcon color=\"cyan\" variant=\"light\" size=\"lg\" mx=\"auto\" mb=\"xs\">\r\n                        <IconLungs size={20} />\r\n                      </ThemeIcon>\r\n                      <Text size=\"lg\" fw={600} c=\"cyan\">\r\n                        {(monitoring as any).vitals?.oxygenSaturation || 'N/A'}%\r\n                      </Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">O2 Saturation</Text>\r\n                    </div>\r\n                  </SimpleGrid>\r\n\r\n                  {/* Alert Status */}\r\n                  {(monitoring as any).alerts && (monitoring as any).alerts.length > 0 && (\r\n                    <Alert variant=\"light\" color=\"red\" icon={<IconAlertTriangle size={16} />} mb=\"md\">\r\n                      <Text size=\"sm\" fw={500}>Active Alerts: {(monitoring as any).alerts.length}</Text>\r\n                      <Text size=\"xs\">Latest: {(monitoring as any).alerts[0]}</Text>\r\n                    </Alert>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Battery: {(monitoring as any).batteryLevel || 'N/A'}%\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewMonitoring(monitoring as any)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconChartLine size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconSettings size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Digital Prescriptions Tab */}\r\n        <Tabs.Panel value=\"prescriptions\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Digital Prescriptions</Title>\r\n              <Group>\r\n                <Button leftSection={<IconPlus size={16} />} onClick={openCreatePrescription}>\r\n                  New Prescription\r\n                </Button>\r\n                <Button variant=\"light\" leftSection={<IconDownload size={16} />}>\r\n                  Export All\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n\r\n            {/* Prescriptions Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((prescription) => (\r\n                <Card key={prescription.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Text fw={600} size=\"lg\">{prescription.patientName}</Text>\r\n                      <Text size=\"sm\" c=\"dimmed\">ID: {(prescription as any).prescriptionId || prescription.id}</Text>\r\n                    </div>\r\n                    <Badge \r\n                      color={\r\n                        (prescription as any).status === 'active' ? 'green' : \r\n                        (prescription as any).status === 'pending' ? 'orange' : \r\n                        (prescription as any).status === 'completed' ? 'blue' : 'red'\r\n                      } \r\n                      variant=\"light\"\r\n                    >\r\n                      {((prescription as any).status || 'pending').toUpperCase()}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Prescribed by</Text>\r\n                      <Text size=\"sm\">Dr. {(prescription as any).doctorName || 'N/A'}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Date Issued</Text>\r\n                      <Text size=\"sm\">{formatDate((prescription as any).issuedDate || (prescription as any).date || new Date().toISOString())}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Valid Until</Text>\r\n                      <Text size=\"sm\" c={(prescription as any).expiryDate && new Date((prescription as any).expiryDate) < new Date() ? 'red' : undefined}>\r\n                        {formatDate((prescription as any).expiryDate || new Date().toISOString())}\r\n                      </Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  <Divider label=\"Medications\" labelPosition=\"center\" mb=\"md\" />\r\n                  \r\n                  <Stack gap=\"xs\" mb=\"md\">\r\n                    {(Array.isArray((prescription as any).medications) ? (prescription as any).medications : []).map((med: any, index: number) => (\r\n                      <Card key={index} padding=\"xs\" withBorder>\r\n                        <Group justify=\"space-between\">\r\n                          <div>\r\n                            <Text size=\"sm\" fw={500}>{med.name}</Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">{med.dosage} - {med.frequency}</Text>\r\n                          </div>\r\n                          <Badge variant=\"light\" size=\"xs\">\r\n                            {med.duration}\r\n                          </Badge>\r\n                        </Group>\r\n                      </Card>\r\n                    ))}\r\n                  </Stack>\r\n\r\n                  {(prescription as any).pharmacyInfo && (\r\n                    <Group justify=\"space-between\" mb=\"md\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Pharmacy</Text>\r\n                      <Text size=\"sm\">{(prescription as any).pharmacyInfo}</Text>\r\n                    </Group>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Digital Signature: ✓ Verified\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon\r\n                        variant=\"subtle\"\r\n                        color=\"blue\"\r\n                        onClick={() => handleViewPrescription(prescription as any)}\r\n                      >\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"green\">\r\n                        <IconDownload size={16} />\r\n                      </ActionIcon>\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconShare size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n\r\n        {/* Virtual Consultations Tab */}\r\n        <Tabs.Panel value=\"consultations\">\r\n          <Paper p=\"md\" radius=\"md\" withBorder mt=\"md\">\r\n            <Group justify=\"space-between\" mb=\"lg\">\r\n              <Title order={3}>Virtual Consultations</Title>\r\n              <Button leftSection={<IconCalendarEvent size={16} />} variant=\"light\">\r\n                Schedule Consultation\r\n              </Button>\r\n            </Group>\r\n\r\n            {/* Consultations Grid */}\r\n            <SimpleGrid cols={{ base: 1, lg: 2 }} spacing=\"lg\">\r\n              {[].map /* TODO: Fetch from API */((consultation) => (\r\n                <Card key={consultation.id} padding=\"lg\" radius=\"md\" withBorder>\r\n                  <Group justify=\"space-between\" mb=\"md\">\r\n                    <div>\r\n                      <Group>\r\n                        <Avatar color=\"teal\" size=\"md\">\r\n                          {consultation.patientName.split(' ').map(n => n[0]).join('')}\r\n                        </Avatar>\r\n                        <div>\r\n                          <Text fw={600} size=\"lg\">{consultation.patientName}</Text>\r\n                          <Text size=\"sm\" c=\"dimmed\">with Dr. {consultation.doctorName}</Text>\r\n                        </div>\r\n                      </Group>\r\n                    </div>\r\n                    <Badge color={getStatusColor((consultation as any).status)} variant=\"light\">\r\n                      {consultation.status.replace('_', ' ').toUpperCase()}\r\n                    </Badge>\r\n                  </Group>\r\n\r\n                  <Stack gap=\"sm\" mb=\"md\">\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Specialty</Text>\r\n                      <Text size=\"sm\">{consultation.specialty}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Appointment</Text>\r\n                      <Text size=\"sm\">{formatDateTime((consultation as any).appointmentDate || new Date().toISOString())}</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Duration</Text>\r\n                      <Text size=\"sm\">{(consultation as any).estimatedDuration || consultation.duration} minutes</Text>\r\n                    </Group>\r\n                    <Group justify=\"space-between\">\r\n                      <Text size=\"sm\" c=\"dimmed\">Consultation Fee</Text>\r\n                      <Text size=\"sm\" fw={500}>₹{(consultation as any).consultationFee || 0}</Text>\r\n                    </Group>\r\n                  </Stack>\r\n\r\n                  {((consultation as any).symptoms || (consultation as any).reason) && (\r\n                    <>\r\n                      <Text size=\"sm\" c=\"dimmed\" mb=\"xs\">Chief Complaints:</Text>\r\n                      <Text size=\"sm\" lineClamp={2} mb=\"md\">\r\n                        {(consultation as any).symptoms || (consultation as any).reason}\r\n                      </Text>\r\n                    </>\r\n                  )}\r\n\r\n                  {(consultation as any).followUpRequired && (\r\n                    <Alert variant=\"light\" color=\"blue\" icon={<IconCalendarEvent size={16} />} mb=\"md\">\r\n                      <Text size=\"sm\">Follow-up consultation recommended</Text>\r\n                    </Alert>\r\n                  )}\r\n\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Session ID: {(consultation as any).sessionId || (consultation as any).consultationId}\r\n                    </Text>\r\n                    <Group gap=\"xs\">\r\n                      <ActionIcon variant=\"subtle\" color=\"blue\">\r\n                        <IconEye size={16} />\r\n                      </ActionIcon>\r\n                      {(consultation as any).status === 'active' && (\r\n                        <ActionIcon\r\n                          variant=\"subtle\"\r\n                          color=\"green\"\r\n                          onClick={() => handleStartVideoCall()}\r\n                        >\r\n                          <IconVideo size={16} />\r\n                        </ActionIcon>\r\n                      )}\r\n                      <ActionIcon variant=\"subtle\" color=\"orange\">\r\n                        <IconMessage size={16} />\r\n                      </ActionIcon>\r\n                    </Group>\r\n                  </Group>\r\n                </Card>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Paper>\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n\r\n      {/* Video Call Modal */}\r\n      <Modal\r\n        opened={videoCallOpened}\r\n        onClose={() => {\r\n          if (isInCall) {\r\n            handleEndCall();\r\n          } else {\r\n            closeVideoCall();\r\n          }\r\n        }}\r\n        title=\"Video Consultation\"\r\n        size=\"xl\"\r\n        fullScreen\r\n        withCloseButton={false}\r\n      >\r\n        <div style={{ position: 'relative', height: '100vh', backgroundColor: '#000' }}>\r\n          {/* Main Video Area */}\r\n          <div style={{ \r\n            display: 'flex', \r\n            justifyContent: 'center', \r\n            alignItems: 'center', \r\n            height: 'calc(100vh - 120px)',\r\n            position: 'relative'\r\n          }}>\r\n            {/* Doctor's Video (Main) */}\r\n            <div style={{ \r\n              width: '70%', \r\n              height: '80%', \r\n              backgroundColor: '#1a1a1a', \r\n              borderRadius: '12px',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              position: 'relative'\r\n            }}>\r\n              {isVideoEnabled ? (\r\n                <div style={{ textAlign: 'center', color: 'white' }}>\r\n                  <IconVideo size={80} />\r\n                  <Text size=\"xl\" mt=\"md\">Dr. Smith</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">Cardiology Consultation</Text>\r\n                </div>\r\n              ) : (\r\n                <div style={{ textAlign: 'center', color: 'white' }}>\r\n                  <IconVideoOff size={80} />\r\n                  <Text size=\"xl\" mt=\"md\">Camera Off</Text>\r\n                </div>\r\n              )}\r\n              \r\n              {/* Screen Share Indicator */}\r\n              {isScreenSharing && (\r\n                <Badge \r\n                  style={{ position: 'absolute', top: 10, left: 10 }}\r\n                  color=\"blue\"\r\n                  variant=\"filled\"\r\n                >\r\n                  Screen Sharing\r\n                </Badge>\r\n              )}\r\n              \r\n              {/* Recording Indicator */}\r\n              {isRecording && (\r\n                <Badge \r\n                  style={{ position: 'absolute', top: 10, right: 10 }}\r\n                  color=\"red\"\r\n                  variant=\"filled\"\r\n                >\r\n                  ● Recording\r\n                </Badge>\r\n              )}\r\n            </div>\r\n\r\n            {/* Patient's Video (Picture in Picture) */}\r\n            <div style={{ \r\n              position: 'absolute', \r\n              top: 20, \r\n              right: 20, \r\n              width: '200px', \r\n              height: '150px',\r\n              backgroundColor: '#2a2a2a', \r\n              borderRadius: '8px',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center'\r\n            }}>\r\n              <div style={{ textAlign: 'center', color: 'white' }}>\r\n                <IconUser size={40} />\r\n                <Text size=\"sm\" mt=\"xs\">You</Text>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Call Duration */}\r\n            <div style={{ \r\n              position: 'absolute', \r\n              top: 20, \r\n              left: 20,\r\n              backgroundColor: 'rgba(0,0,0,0.7)',\r\n              padding: '8px 16px',\r\n              borderRadius: '8px',\r\n              color: 'white'\r\n            }}>\r\n              <Text size=\"lg\" fw={600}>\r\n                {formatDuration(callDuration)}\r\n              </Text>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Control Bar */}\r\n          <div style={{ \r\n            position: 'absolute', \r\n            bottom: 0, \r\n            left: 0, \r\n            right: 0,\r\n            backgroundColor: 'rgba(0,0,0,0.8)',\r\n            padding: '20px',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            gap: '16px'\r\n          }}>\r\n            <ActionIcon\r\n              size=\"xl\"\r\n              variant={isAudioEnabled ? 'filled' : 'light'}\r\n              color={isAudioEnabled ? 'blue' : 'red'}\r\n              onClick={toggleAudio}\r\n            >\r\n              {isAudioEnabled ? <IconMicrophone size={24} /> : <IconMicrophoneOff size={24} />}\r\n            </ActionIcon>\r\n            \r\n            <ActionIcon\r\n              size=\"xl\"\r\n              variant={isVideoEnabled ? 'filled' : 'light'}\r\n              color={isVideoEnabled ? 'blue' : 'red'}\r\n              onClick={toggleVideo}\r\n            >\r\n              {isVideoEnabled ? <IconVideo size={24} /> : <IconVideoOff size={24} />}\r\n            </ActionIcon>\r\n            \r\n            <ActionIcon\r\n              size=\"xl\"\r\n              variant={isScreenSharing ? 'filled' : 'light'}\r\n              color=\"green\"\r\n              onClick={toggleScreenShare}\r\n            >\r\n              {isScreenSharing ? <IconScreenShareOff size={24} /> : <IconScreenShare size={24} />}\r\n            </ActionIcon>\r\n            \r\n            <ActionIcon\r\n              size=\"xl\"\r\n              variant={isRecording ? 'filled' : 'light'}\r\n              color=\"red\"\r\n              onClick={toggleRecording}\r\n            >\r\n              {isRecording ? <IconX size={24} /> : <IconCircleCheck size={24} />}\r\n            </ActionIcon>\r\n            \r\n            <ActionIcon\r\n              size=\"xl\"\r\n              variant=\"light\"\r\n              color=\"gray\"\r\n            >\r\n              <IconMessage size={24} />\r\n            </ActionIcon>\r\n            \r\n            <ActionIcon\r\n              size=\"xl\"\r\n              variant=\"filled\"\r\n              color=\"red\"\r\n              onClick={handleEndCall}\r\n            >\r\n              <IconPhoneOff size={24} />\r\n            </ActionIcon>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n\r\n      {/* Start Session Modal */}\r\n      <Modal\r\n        opened={startSessionOpened}\r\n        onClose={closeStartSession}\r\n        title=\"Schedule Telemedicine Session\"\r\n        size=\"lg\"\r\n      >\r\n        <Stack gap=\"md\">\r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Patient\"\r\n              placeholder=\"Select patient\"\r\n              data={[].map /* TODO: Fetch from API */(patient => ({\r\n                value: patient.id,\r\n                label: `${patient.firstName} ${patient.lastName}`\r\n              }))}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Doctor\"\r\n              placeholder=\"Select doctor\"\r\n              data={[].map /* TODO: Fetch from API */(doctor => ({\r\n                value: doctor.id,\r\n                label: `Dr. ${(doctor as any).firstName || doctor.name.split(' ')[0]} ${(doctor as any).lastName || doctor.name.split(' ')[1] || ''} - ${(doctor as any).specialty || doctor.specialization}`\r\n              }))}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <Select\r\n              label=\"Session Type\"\r\n              placeholder=\"Select type\"\r\n              data={[\r\n                { value: 'consultation', label: 'Consultation' },\r\n                { value: 'follow_up', label: 'Follow-up' },\r\n                { value: 'emergency', label: 'Emergency' },\r\n                { value: 'therapy', label: 'Therapy' },\r\n                { value: 'monitoring', label: 'Monitoring' }\r\n              ]}\r\n              required\r\n            />\r\n            <NumberInput\r\n              label=\"Duration (minutes)\"\r\n              placeholder=\"Enter duration\"\r\n              min={15}\r\n              max={120}\r\n              defaultValue={30}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <SimpleGrid cols={2}>\r\n            <DatePickerInput\r\n              label=\"Date\"\r\n              placeholder=\"Select date\"\r\n              minDate={new Date()}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Time\"\r\n              placeholder=\"Select time\"\r\n              data={[\r\n                { value: '09:00', label: '9:00 AM' },\r\n                { value: '10:00', label: '10:00 AM' },\r\n                { value: '11:00', label: '11:00 AM' },\r\n                { value: '14:00', label: '2:00 PM' },\r\n                { value: '15:00', label: '3:00 PM' },\r\n                { value: '16:00', label: '4:00 PM' }\r\n              ]}\r\n              required\r\n            />\r\n          </SimpleGrid>\r\n          \r\n          <Select\r\n            label=\"Platform\"\r\n            placeholder=\"Select platform\"\r\n            data={[\r\n              { value: 'zoom', label: 'Zoom' },\r\n              { value: 'teams', label: 'Microsoft Teams' },\r\n              { value: 'webex', label: 'Cisco Webex' },\r\n              { value: 'custom', label: 'Custom Platform' }\r\n            ]}\r\n            defaultValue=\"zoom\"\r\n            required\r\n          />\r\n          \r\n          <Textarea\r\n            label=\"Session Notes\"\r\n            placeholder=\"Enter any special instructions or notes\"\r\n            rows={3}\r\n          />\r\n          \r\n          <Group justify=\"flex-end\">\r\n            <Button variant=\"light\" onClick={closeStartSession}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={() => {\r\n              notifications.show({\r\n                title: 'Session Scheduled',\r\n                message: 'Telemedicine session has been scheduled successfully',\r\n                color: 'green',\r\n              });\r\n              closeStartSession();\r\n            }}>\r\n              Schedule Session\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Telemedicine;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\emergency-new\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Progress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 11
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchCases'. Either include it or remove the dependency array.",
        "line": 97,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 97,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [user, setUser, fetchCases]",
            "fix": { "range": [2894, 2909], "text": "[user, setUser, fetchCases]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Text,\r\n  Group,\r\n  Badge,\r\n  SimpleGrid,\r\n  Stack,\r\n  Button,\r\n  Title,\r\n  Card,\r\n  TextInput,\r\n  Select,\r\n  LoadingOverlay,\r\n  Alert,\r\n  Tabs,\r\n  ActionIcon,\r\n  Menu,\r\n  Avatar,\r\n  Progress\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport { notifications } from '@mantine/notifications';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconAlertTriangle,\r\n  IconClock,\r\n  IconActivity,\r\n  IconEdit,\r\n  IconEye,\r\n  IconDotsVertical,\r\n  IconAlertCircle,\r\n  IconUrgent,\r\n  IconStethoscope,\r\n  IconAmbulance\r\n} from '@tabler/icons-react';\r\nimport Layout from '../../components/shared/Layout';\r\nimport DataTable from '../../components/shared/DataTable';\r\nimport EmergencyCaseForm from '../../components/emergency/EmergencyCaseForm';\r\nimport TriageForm from '../../components/emergency/TriageForm';\r\nimport EmergencyCaseDetails from '../../components/emergency/EmergencyCaseDetails';\r\nimport { useAppStore } from '../../stores/appStore';\r\nimport { User, UserRole, TableColumn } from '../../types/common';\r\nimport emergencyService from '../../services/emergency.service';\r\nimport patientsService from '../../services/patients.service';\r\nimport type { CreateEmergencyCaseDto, UpdateEmergencyCaseDto, UpdateTriageDto, EmergencyFilters } from '../../services/emergency.service';\r\n\r\nconst mockUser: User = {\r\n  id: '1',\r\n  username: 'admin',\r\n  email: 'admin@hospital.com',\r\n  firstName: 'Admin',\r\n  lastName: 'User',\r\n  role: UserRole.ADMIN,\r\n  permissions: [],\r\n  isActive: true,\r\n  tenantInfo: {\r\n    tenantId: 'T001',\r\n    tenantName: 'Main Hospital',\r\n  },\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nfunction EmergencyPage() {\r\n  const { user, setUser } = useAppStore();\r\n  const [activeTab, setActiveTab] = useState('cases');\r\n  const [cases, setCases] = useState<any[]>([]);\r\n  const [queue, setQueue] = useState<any[]>([]);\r\n  const [patients, setPatients] = useState<any[]>([]);\r\n  const [doctors, setDoctors] = useState<any[]>([]);\r\n  const [stats, setStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedCase, setSelectedCase] = useState<any>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n  const [triageFilter, setTriageFilter] = useState('');\r\n\r\n  const [caseFormOpened, { open: openCaseForm, close: closeCaseForm }] = useDisclosure(false);\r\n  const [triageFormOpened, { open: openTriageForm, close: closeTriageForm }] = useDisclosure(false);\r\n  const [detailsOpened, { open: openDetails, close: closeDetails }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setUser(mockUser);\r\n    }\r\n    fetchCases();\r\n    fetchQueue();\r\n    fetchStats();\r\n    fetchPatients();\r\n    fetchDoctors();\r\n  }, [user, setUser]);\r\n\r\n  const fetchCases = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const filters: EmergencyFilters = {};\r\n      if (searchQuery) filters.search = searchQuery;\r\n      if (statusFilter) filters.status = statusFilter;\r\n      if (triageFilter) filters.triageLevel = triageFilter;\r\n\r\n      const response = await emergencyService.getCases(filters);\r\n      if (response.success && response.data) {\r\n        setCases(response.data.items || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching cases:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to fetch emergency cases',\r\n        color: 'red',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchQueue = async () => {\r\n    try {\r\n      const response = await emergencyService.getQueue();\r\n      if (response.success && response.data) {\r\n        setQueue(response.data || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching queue:', error);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await emergencyService.getStats();\r\n      if (response.success && response.data) {\r\n        setStats(response.data);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching stats:', error);\r\n    }\r\n  };\r\n\r\n  const fetchPatients = async () => {\r\n    try {\r\n      const response = await patientsService.getPatients();\r\n      if (response.success && response.data) {\r\n        setPatients(response.data.patients || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching patients:', error);\r\n    }\r\n  };\r\n\r\n  const fetchDoctors = async () => {\r\n    try {\r\n      // Mock doctors - in production, fetch from staff API\r\n      setDoctors([\r\n        { id: '1', firstName: 'John', lastName: 'Smith', specialization: 'Emergency Medicine' },\r\n        { id: '2', firstName: 'Sarah', lastName: 'Johnson', specialization: 'Trauma Surgery' },\r\n      ]);\r\n    } catch (error: any) {\r\n      console.error('Error fetching doctors:', error);\r\n    }\r\n  };\r\n\r\n  const handleCreateCase = async (data: CreateEmergencyCaseDto) => {\r\n    try {\r\n      const response = await emergencyService.createCase(data);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Emergency case registered successfully',\r\n          color: 'green',\r\n        });\r\n        fetchCases();\r\n        fetchQueue();\r\n        fetchStats();\r\n        closeCaseForm();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error creating case:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to register emergency case',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleUpdateCase = async (data: UpdateEmergencyCaseDto) => {\r\n    if (!selectedCase) return;\r\n\r\n    try {\r\n      const response = await emergencyService.updateCase(selectedCase.id, data);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Emergency case updated successfully',\r\n          color: 'green',\r\n        });\r\n        fetchCases();\r\n        fetchQueue();\r\n        fetchStats();\r\n        closeCaseForm();\r\n        setSelectedCase(null);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error updating case:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to update emergency case',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleUpdateTriage = async (data: UpdateTriageDto) => {\r\n    if (!selectedCase) return;\r\n\r\n    try {\r\n      const response = await emergencyService.updateTriage(selectedCase.id, data);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Triage level updated successfully',\r\n          color: 'green',\r\n        });\r\n        fetchCases();\r\n        fetchQueue();\r\n        fetchStats();\r\n        closeTriageForm();\r\n        setSelectedCase(null);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error updating triage:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to update triage level',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleViewCase = (emergencyCase: any) => {\r\n    setSelectedCase(emergencyCase);\r\n    openDetails();\r\n  };\r\n\r\n  const handleEditCase = (emergencyCase: any) => {\r\n    setSelectedCase(emergencyCase);\r\n    openCaseForm();\r\n  };\r\n\r\n  const handleUpdateTriageClick = (emergencyCase: any) => {\r\n    setSelectedCase(emergencyCase);\r\n    openTriageForm();\r\n  };\r\n\r\n  const handleNewCase = () => {\r\n    setSelectedCase(null);\r\n    openCaseForm();\r\n  };\r\n\r\n  const getTriageColor = (level: string) => {\r\n    const colors: Record<string, string> = {\r\n      CRITICAL: 'red',\r\n      URGENT: 'orange',\r\n      SEMI_URGENT: 'yellow',\r\n      NON_URGENT: 'green'\r\n    };\r\n    return colors[level] || 'gray';\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    const colors: Record<string, string> = {\r\n      WAITING: 'blue',\r\n      IN_TREATMENT: 'yellow',\r\n      DISCHARGED: 'green',\r\n      ADMITTED: 'cyan',\r\n      TRANSFERRED: 'grape'\r\n    };\r\n    return colors[status] || 'gray';\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleString();\r\n  };\r\n\r\n  const calculateWaitTime = (arrivalTime: string) => {\r\n    const arrival = new Date(arrivalTime);\r\n    const now = new Date();\r\n    const diff = now.getTime() - arrival.getTime();\r\n    const minutes = Math.floor(diff / 60000);\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\r\n  };\r\n\r\n  const caseColumns: TableColumn[] = [\r\n    {\r\n      key: 'triageLevel',\r\n      title: 'Triage',\r\n      sortable: true,\r\n      render: (emergencyCase: any) => (\r\n        <Badge color={getTriageColor(emergencyCase.triageLevel)} size=\"lg\">\r\n          {emergencyCase.triageLevel}\r\n        </Badge>\r\n      )\r\n    },\r\n    {\r\n      key: 'patient',\r\n      title: 'Patient',\r\n      sortable: true,\r\n      render: (emergencyCase: any) => (\r\n        <Group gap=\"xs\">\r\n          <Avatar size=\"sm\" radius=\"xl\" color=\"blue\">\r\n            {emergencyCase.patient?.firstName?.[0]}{emergencyCase.patient?.lastName?.[0]}\r\n          </Avatar>\r\n          <div>\r\n            <Text fw={500} size=\"sm\">\r\n              {emergencyCase.patient?.firstName} {emergencyCase.patient?.lastName}\r\n            </Text>\r\n            <Text size=\"xs\" c=\"dimmed\">\r\n              {emergencyCase.patient?.medicalRecordNumber || emergencyCase.patient?.id}\r\n            </Text>\r\n          </div>\r\n        </Group>\r\n      )\r\n    },\r\n    {\r\n      key: 'chiefComplaint',\r\n      title: 'Chief Complaint',\r\n      render: (emergencyCase: any) => (\r\n        <Text lineClamp={2}>{emergencyCase.chiefComplaint}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'status',\r\n      title: 'Status',\r\n      sortable: true,\r\n      render: (emergencyCase: any) => (\r\n        <Badge color={getStatusColor(emergencyCase.status)}>\r\n          {emergencyCase.status}\r\n        </Badge>\r\n      )\r\n    },\r\n    {\r\n      key: 'arrivalTime',\r\n      title: 'Arrival',\r\n      sortable: true,\r\n      render: (emergencyCase: any) => (\r\n        <div>\r\n          <Text size=\"sm\">{formatDate(emergencyCase.arrivalTime)}</Text>\r\n          <Text size=\"xs\" c=\"dimmed\">\r\n            Wait: {calculateWaitTime(emergencyCase.arrivalTime)}\r\n          </Text>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'assignedDoctor',\r\n      title: 'Doctor',\r\n      render: (emergencyCase: any) => (\r\n        emergencyCase.assignedDoctor ? (\r\n          <Text size=\"sm\">\r\n            Dr. {emergencyCase.assignedDoctor.firstName} {emergencyCase.assignedDoctor.lastName}\r\n          </Text>\r\n        ) : (\r\n          <Text size=\"sm\" c=\"dimmed\">Not assigned</Text>\r\n        )\r\n      )\r\n    },\r\n    {\r\n      key: 'actions',\r\n      title: 'Actions',\r\n      render: (emergencyCase: any) => (\r\n        <Group gap=\"xs\">\r\n          <ActionIcon\r\n            variant=\"subtle\"\r\n            onClick={() => handleViewCase(emergencyCase)}\r\n          >\r\n            <IconEye size={16} />\r\n          </ActionIcon>\r\n          <ActionIcon\r\n            variant=\"subtle\"\r\n            onClick={() => handleEditCase(emergencyCase)}\r\n          >\r\n            <IconEdit size={16} />\r\n          </ActionIcon>\r\n          <Menu position=\"bottom-end\">\r\n            <Menu.Target>\r\n              <ActionIcon variant=\"subtle\">\r\n                <IconDotsVertical size={16} />\r\n              </ActionIcon>\r\n            </Menu.Target>\r\n            <Menu.Dropdown>\r\n              <Menu.Item\r\n                leftSection={<IconEye size={14} />}\r\n                onClick={() => handleViewCase(emergencyCase)}\r\n              >\r\n                View Details\r\n              </Menu.Item>\r\n              <Menu.Item\r\n                leftSection={<IconEdit size={14} />}\r\n                onClick={() => handleEditCase(emergencyCase)}\r\n              >\r\n                Edit Case\r\n              </Menu.Item>\r\n              <Menu.Item\r\n                leftSection={<IconAlertTriangle size={14} />}\r\n                onClick={() => handleUpdateTriageClick(emergencyCase)}\r\n              >\r\n                Update Triage\r\n              </Menu.Item>\r\n            </Menu.Dropdown>\r\n          </Menu>\r\n        </Group>\r\n      )\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Layout user={user || mockUser} notifications={0} onLogout={() => {}}>\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <Stack gap=\"lg\">\r\n          {/* Header */}\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Title order={2}>Emergency Department</Title>\r\n              <Text c=\"dimmed\" size=\"sm\">\r\n                Manage emergency cases and triage\r\n              </Text>\r\n            </div>\r\n            <Button\r\n              leftSection={<IconPlus size={16} />}\r\n              onClick={handleNewCase}\r\n              color=\"red\"\r\n            >\r\n              Register Emergency Case\r\n            </Button>\r\n          </Group>\r\n\r\n          {/* Statistics Cards */}\r\n          {stats && (\r\n            <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }}>\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Critical Cases\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\" c=\"red\">\r\n                      {stats.criticalCases}\r\n                    </Text>\r\n                  </div>\r\n                  <IconUrgent size={32} color=\"#fa5252\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Waiting\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.waiting}\r\n                    </Text>\r\n                  </div>\r\n                  <IconClock size={32} color=\"#228be6\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      In Treatment\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.inTreatment}\r\n                    </Text>\r\n                  </div>\r\n                  <IconStethoscope size={32} color=\"#fab005\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Total Cases\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.total}\r\n                    </Text>\r\n                  </div>\r\n                  <IconAmbulance size={32} color=\"#40c057\" />\r\n                </Group>\r\n              </Card>\r\n            </SimpleGrid>\r\n          )}\r\n\r\n          {/* Tabs */}\r\n          <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'cases')}>\r\n            <Tabs.List>\r\n              <Tabs.Tab value=\"cases\" leftSection={<IconActivity size={16} />}>\r\n                All Cases\r\n              </Tabs.Tab>\r\n              <Tabs.Tab value=\"queue\" leftSection={<IconClock size={16} />}>\r\n                Emergency Queue\r\n              </Tabs.Tab>\r\n            </Tabs.List>\r\n\r\n            <Tabs.Panel value=\"cases\" pt=\"md\">\r\n              {/* Filters */}\r\n              <Paper withBorder p=\"md\" mb=\"md\">\r\n                <Grid>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                    <TextInput\r\n                      placeholder=\"Search cases...\"\r\n                      leftSection={<IconSearch size={16} />}\r\n                      value={searchQuery}\r\n                      onChange={(e) => setSearchQuery(e.target.value)}\r\n                    />\r\n                  </Grid.Col>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                    <Select\r\n                      placeholder=\"Filter by status\"\r\n                      data={[\r\n                        { value: '', title: 'All Statuses' },\r\n                        { value: 'WAITING', title: 'Waiting' },\r\n                        { value: 'IN_TREATMENT', title: 'In Treatment' },\r\n                        { value: 'DISCHARGED', title: 'Discharged' },\r\n                        { value: 'ADMITTED', title: 'Admitted' }\r\n                      ]}\r\n                      value={statusFilter}\r\n                      onChange={(value) => setStatusFilter(value || '')}\r\n                    />\r\n                  </Grid.Col>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                    <Select\r\n                      placeholder=\"Filter by triage\"\r\n                      data={[\r\n                        { value: '', title: 'All Levels' },\r\n                        { value: 'CRITICAL', title: 'Critical' },\r\n                        { value: 'URGENT', title: 'Urgent' },\r\n                        { value: 'SEMI_URGENT', title: 'Semi-Urgent' },\r\n                        { value: 'NON_URGENT', title: 'Non-Urgent' }\r\n                      ]}\r\n                      value={triageFilter}\r\n                      onChange={(value) => setTriageFilter(value || '')}\r\n                    />\r\n                  </Grid.Col>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                    <Button fullWidth onClick={fetchCases}>\r\n                      Apply Filters\r\n                    </Button>\r\n                  </Grid.Col>\r\n                </Grid>\r\n              </Paper>\r\n\r\n              {/* Cases Table */}\r\n              <Paper withBorder>\r\n                <LoadingOverlay visible={loading} />\r\n                {cases.length === 0 && !loading ? (\r\n                  <Alert icon={<IconAlertCircle size={16} />} title=\"No cases found\" color=\"blue\">\r\n                    No emergency cases match your current filters.\r\n                  </Alert>\r\n                ) : (\r\n                  <DataTable\r\n                    columns={caseColumns}\r\n                    data={cases}\r\n                    loading={loading}\r\n                  />\r\n                )}\r\n              </Paper>\r\n            </Tabs.Panel>\r\n\r\n            <Tabs.Panel value=\"queue\" pt=\"md\">\r\n              {/* Emergency Queue */}\r\n              <Stack gap=\"md\">\r\n                {queue.length === 0 ? (\r\n                  <Alert icon={<IconAlertCircle size={16} />} title=\"Queue is empty\" color=\"green\">\r\n                    No patients currently waiting in the emergency queue.\r\n                  </Alert>\r\n                ) : (\r\n                  queue.map((emergencyCase) => (\r\n                    <Card key={emergencyCase.id} withBorder padding=\"md\">\r\n                      <Group justify=\"space-between\" wrap=\"nowrap\">\r\n                        <Group>\r\n                          <Badge color={getTriageColor(emergencyCase.triageLevel)} size=\"xl\">\r\n                            {emergencyCase.triageLevel}\r\n                          </Badge>\r\n                          <div>\r\n                            <Text fw={600}>\r\n                              {emergencyCase.patient?.firstName} {emergencyCase.patient?.lastName}\r\n                            </Text>\r\n                            <Text size=\"sm\" c=\"dimmed\">\r\n                              {emergencyCase.chiefComplaint}\r\n                            </Text>\r\n                            <Text size=\"xs\" c=\"dimmed\">\r\n                              Waiting: {calculateWaitTime(emergencyCase.arrivalTime)}\r\n                            </Text>\r\n                          </div>\r\n                        </Group>\r\n                        <Group>\r\n                          <Badge color={getStatusColor(emergencyCase.status)}>\r\n                            {emergencyCase.status}\r\n                          </Badge>\r\n                          <Button\r\n                            size=\"xs\"\r\n                            onClick={() => handleViewCase(emergencyCase)}\r\n                          >\r\n                            View\r\n                          </Button>\r\n                        </Group>\r\n                      </Group>\r\n                    </Card>\r\n                  ))\r\n                )}\r\n              </Stack>\r\n            </Tabs.Panel>\r\n          </Tabs>\r\n        </Stack>\r\n      </Container>\r\n\r\n      {/* Emergency Case Form Modal */}\r\n      <EmergencyCaseForm\r\n        opened={caseFormOpened}\r\n        onClose={closeCaseForm}\r\n        emergencyCase={selectedCase}\r\n        onSubmit={selectedCase ? handleUpdateCase : handleCreateCase}\r\n        patients={patients}\r\n        doctors={doctors}\r\n      />\r\n\r\n      {/* Triage Form Modal */}\r\n      {selectedCase && (\r\n        <TriageForm\r\n          opened={triageFormOpened}\r\n          onClose={closeTriageForm}\r\n          emergencyCase={selectedCase}\r\n          onSubmit={handleUpdateTriage}\r\n        />\r\n      )}\r\n\r\n      {/* Emergency Case Details Modal */}\r\n      {selectedCase && (\r\n        <EmergencyCaseDetails\r\n          opened={detailsOpened}\r\n          onClose={closeDetails}\r\n          emergencyCase={selectedCase}\r\n          onEdit={handleEditCase}\r\n          onUpdateTriage={handleUpdateTriageClick}\r\n        />\r\n      )}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default EmergencyPage;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\emergency\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'bedFilter' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 117,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setBedFilter' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 117,
        "column": 21,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedPatient' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 119,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 119,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setSelectedPatient' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 119,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 119,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'showPatientModal' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 121,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 121,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setShowPatientModal' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 121,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 121,
        "endColumn": 47
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'showNewAlertModal' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 122,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 122,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockAlerts' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 124,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 124,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockBeds' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 183,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 183,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockContacts' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 236,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 236,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockCriticalPatients' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 288,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 288,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockTriageEntries' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 341,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 341,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getTriageLevelColor' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 421,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 421,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 13,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\nimport Layout from '../components/Layout';\r\nimport Card from '../components/ui/Card';\r\nimport Button from '../components/ui/Button';\r\nimport Input from '../components/ui/Input';\r\nimport React, { useState } from 'react';\r\n\r\ninterface EmergencyAlert {\r\n  id: string;\r\n  alertId: string;\r\n  type: 'CODE_BLUE' | 'CODE_RED' | 'CODE_GRAY' | 'MASS_CASUALTY' | 'SECURITY' | 'FIRE' | 'EVACUATION' | 'NATURAL_DISASTER';\r\n  severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';\r\n  title: string;\r\n  description: string;\r\n  location: string;\r\n  department: string;\r\n  reportedBy: string;\r\n  reportedAt: string;\r\n  status: 'ACTIVE' | 'RESPONDING' | 'RESOLVED' | 'CANCELLED';\r\n  responseTeam: string[];\r\n  estimatedArrival?: string;\r\n  resolvedAt?: string;\r\n  notes: string;\r\n  actionsTaken: string[];\r\n  affectedAreas: string[];\r\n  resourcesUsed: string[];\r\n}\r\n\r\ninterface BedAvailability {\r\n  id: string;\r\n  wardName: string;\r\n  location: string;\r\n  bedNumber: string;\r\n  bedType: 'ICU' | 'CCU' | 'EMERGENCY' | 'GENERAL' | 'PEDIATRIC' | 'MATERNITY' | 'ISOLATION';\r\n  status: 'AVAILABLE' | 'OCCUPIED' | 'RESERVED' | 'MAINTENANCE' | 'CLEANING';\r\n  patientId?: string;\r\n  patientName?: string;\r\n  admissionTime?: string;\r\n  estimatedDischarge?: string;\r\n  priority: 'HIGH' | 'MEDIUM' | 'LOW';\r\n  equipmentAvailable: string[];\r\n  lastCleaned: string;\r\n  nurseAssigned?: string;\r\n}\r\n\r\ninterface EmergencyContact {\r\n  id: string;\r\n  name: string;\r\n  role: string;\r\n  department: string;\r\n  phoneNumbers: {\r\n    primary: string;\r\n    mobile?: string;\r\n    emergency?: string;\r\n  };\r\n  email: string;\r\n  availability: '24/7' | 'BUSINESS_HOURS' | 'ON_CALL' | 'WEEKEND';\r\n  specialties: string[];\r\n  responseTime: number; // minutes\r\n  isOnDuty: boolean;\r\n  currentLocation?: string;\r\n}\r\n\r\ninterface CriticalPatient {\r\n  id: string;\r\n  patientId: string;\r\n  name: string;\r\n  age: number;\r\n  gender: 'M' | 'F';\r\n  condition: string;\r\n  severity: 'CRITICAL' | 'SERIOUS' | 'STABLE' | 'IMPROVING';\r\n  location: string;\r\n  bedNumber: string;\r\n  attendingPhysician: string;\r\n  nurseName: string;\r\n  vitalSigns: {\r\n    bloodPressure: string;\r\n    heartRate: number;\r\n    temperature: number;\r\n    respiratoryRate: number;\r\n    oxygenSaturation: number;\r\n  };\r\n  lastUpdated: string;\r\n  alerts: string[];\r\n  medications: string[];\r\n  procedures: string[];\r\n  familyNotified: boolean;\r\n}\r\n\r\ninterface TriageEntry {\r\n  id: string;\r\n  patientName: string;\r\n  age: number;\r\n  gender: 'M' | 'F';\r\n  arrivalTime: string;\r\n  chiefComplaint: string;\r\n  triageLevel: 1 | 2 | 3 | 4 | 5; // ESI levels\r\n  vitalSigns: {\r\n    bloodPressure?: string;\r\n    heartRate?: number;\r\n    temperature?: number;\r\n    respiratoryRate?: number;\r\n    oxygenSaturation?: number;\r\n    painScore?: number;\r\n  };\r\n  triageNurse: string;\r\n  status: 'WAITING' | 'IN_PROGRESS' | 'ADMITTED' | 'DISCHARGED';\r\n  assignedBed?: string;\r\n  estimatedWaitTime: number;\r\n  notes: string;\r\n}\r\n\r\nconst EmergencyPage = () => {\r\n  const [currentTab, setCurrentTab] = useState<'dashboard' | 'alerts' | 'beds' | 'contacts' | 'patients' | 'triage'>('dashboard');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [alertFilter, setAlertFilter] = useState('ALL');\r\n  const [bedFilter, setBedFilter] = useState('ALL');\r\n  const [selectedAlert, setSelectedAlert] = useState<EmergencyAlert | null>(null);\r\n  const [selectedPatient, setSelectedPatient] = useState<CriticalPatient | null>(null);\r\n  const [showAlertModal, setShowAlertModal] = useState(false);\r\n  const [showPatientModal, setShowPatientModal] = useState(false);\r\n  const [showNewAlertModal, setShowNewAlertModal] = useState(false);\r\n\r\n  const mockAlerts: EmergencyAlert[] = [\r\n    {\r\n      id: '1',\r\n      alertId: 'EA-2024-001',\r\n      type: 'CODE_BLUE',\r\n      severity: 'CRITICAL',\r\n      title: 'Cardiac Arrest - Room 302',\r\n      description: 'Patient in cardiac arrest, CPR in progress',\r\n      location: 'Medical Ward Room 302',\r\n      department: 'Internal Medicine',\r\n      reportedBy: 'Nurse Sarah Wilson',\r\n      reportedAt: '2024-12-05T14:35:00',\r\n      status: 'RESPONDING',\r\n      responseTeam: ['Dr. Emily Carter', 'Dr. Michael Rodriguez', 'Nurse Lisa Johnson', 'RT Mark Davis'],\r\n      estimatedArrival: '2024-12-05T14:38:00',\r\n      notes: 'CPR started immediately, crash cart deployed',\r\n      actionsTaken: ['CPR initiated', 'Intubation performed', 'IV access established', 'Medications administered'],\r\n      affectedAreas: ['Room 302', 'Medical Ward Corridor'],\r\n      resourcesUsed: ['Crash Cart', 'Defibrillator', 'Advanced Airway Kit']\r\n    },\r\n    {\r\n      id: '2',\r\n      alertId: 'EA-2024-002',\r\n      type: 'FIRE',\r\n      severity: 'HIGH',\r\n      title: 'Fire Alert - Kitchen Area',\r\n      description: 'Smoke detected in hospital kitchen, automatic sprinklers activated',\r\n      location: 'Hospital Kitchen - Basement Level',\r\n      department: 'Facilities',\r\n      reportedBy: 'Security Officer John Smith',\r\n      reportedAt: '2024-12-05T13:20:00',\r\n      status: 'RESOLVED',\r\n      responseTeam: ['Fire Department', 'Security Team', 'Facilities Manager'],\r\n      resolvedAt: '2024-12-05T13:45:00',\r\n      notes: 'Small grease fire quickly extinguished, no injuries',\r\n      actionsTaken: ['Fire extinguished', 'Area evacuated', 'Ventilation activated', 'Safety inspection completed'],\r\n      affectedAreas: ['Kitchen', 'Basement Corridors'],\r\n      resourcesUsed: ['Fire Extinguisher', 'Sprinkler System', 'Emergency Ventilation']\r\n    },\r\n    {\r\n      id: '3',\r\n      alertId: 'EA-2024-003',\r\n      type: 'SECURITY',\r\n      severity: 'MEDIUM',\r\n      title: 'Aggressive Patient - Emergency Department',\r\n      description: 'Patient displaying aggressive behavior towards staff',\r\n      location: 'Emergency Department - Bay 4',\r\n      department: 'Emergency Medicine',\r\n      reportedBy: 'Dr. Amanda Foster',\r\n      reportedAt: '2024-12-05T15:10:00',\r\n      status: 'ACTIVE',\r\n      responseTeam: ['Security Team', 'Psychiatric Consultant', 'Charge Nurse'],\r\n      notes: 'Patient agitated, verbal threats made. De-escalation attempts ongoing',\r\n      actionsTaken: ['Security called', 'Area cleared', 'De-escalation initiated'],\r\n      affectedAreas: ['ED Bay 4', 'Adjacent patient areas'],\r\n      resourcesUsed: ['Security Personnel', 'Psychiatric Consultation']\r\n    }\r\n  ];\r\n\r\n  const mockBeds: BedAvailability[] = [\r\n    {\r\n      id: '1',\r\n      wardName: 'ICU',\r\n      location: 'Floor 3 - North Wing',\r\n      bedNumber: 'ICU-301',\r\n      bedType: 'ICU',\r\n      status: 'OCCUPIED',\r\n      patientId: 'P001',\r\n      patientName: 'John Doe',\r\n      admissionTime: '2024-12-03T08:30:00',\r\n      priority: 'HIGH',\r\n      equipmentAvailable: ['Ventilator', 'Cardiac Monitor', 'Infusion Pumps'],\r\n      lastCleaned: '2024-12-05T06:00:00',\r\n      nurseAssigned: 'RN Mary Johnson'\r\n    },\r\n    {\r\n      id: '2',\r\n      wardName: 'ICU',\r\n      location: 'Floor 3 - North Wing',\r\n      bedNumber: 'ICU-302',\r\n      bedType: 'ICU',\r\n      status: 'AVAILABLE',\r\n      priority: 'HIGH',\r\n      equipmentAvailable: ['Ventilator', 'Cardiac Monitor', 'Infusion Pumps', 'CRRT Machine'],\r\n      lastCleaned: '2024-12-05T12:30:00',\r\n      nurseAssigned: 'RN Jennifer Lee'\r\n    },\r\n    {\r\n      id: '3',\r\n      wardName: 'Emergency Department',\r\n      location: 'Floor 1 - Emergency Wing',\r\n      bedNumber: 'ED-101',\r\n      bedType: 'EMERGENCY',\r\n      status: 'RESERVED',\r\n      priority: 'CRITICAL',\r\n      equipmentAvailable: ['Cardiac Monitor', 'Defibrillator', 'Oxygen'],\r\n      lastCleaned: '2024-12-05T14:00:00',\r\n      nurseAssigned: 'RN Patricia Davis'\r\n    },\r\n    {\r\n      id: '4',\r\n      wardName: 'General Medicine',\r\n      location: 'Floor 2 - East Wing',\r\n      bedNumber: 'GM-201',\r\n      bedType: 'GENERAL',\r\n      status: 'AVAILABLE',\r\n      priority: 'MEDIUM',\r\n      equipmentAvailable: ['Basic Monitor', 'Oxygen Outlet'],\r\n      lastCleaned: '2024-12-05T10:15:00'\r\n    }\r\n  ];\r\n\r\n  const mockContacts: EmergencyContact[] = [\r\n    {\r\n      id: '1',\r\n      name: 'Dr. Sarah Mitchell',\r\n      role: 'Chief Medical Officer',\r\n      department: 'Administration',\r\n      phoneNumbers: {\r\n        primary: '+1 (555) 123-4567',\r\n        mobile: '+1 (555) 987-6543',\r\n        emergency: '+1 (555) 911-1111'\r\n      },\r\n      email: 'sarah.mitchell@hospital.com',\r\n      availability: '24/7',\r\n      specialties: ['Emergency Medicine', 'Internal Medicine'],\r\n      responseTime: 5,\r\n      isOnDuty: true,\r\n      currentLocation: 'Administrative Office'\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Dr. Michael Rodriguez',\r\n      role: 'Emergency Department Director',\r\n      department: 'Emergency Medicine',\r\n      phoneNumbers: {\r\n        primary: '+1 (555) 234-5678',\r\n        mobile: '+1 (555) 876-5432'\r\n      },\r\n      email: 'michael.rodriguez@hospital.com',\r\n      availability: '24/7',\r\n      specialties: ['Emergency Medicine', 'Trauma Surgery'],\r\n      responseTime: 3,\r\n      isOnDuty: true,\r\n      currentLocation: 'Emergency Department'\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Security Chief Johnson',\r\n      role: 'Security Director',\r\n      department: 'Security',\r\n      phoneNumbers: {\r\n        primary: '+1 (555) 345-6789',\r\n        emergency: '+1 (555) 999-0000'\r\n      },\r\n      email: 'johnson.security@hospital.com',\r\n      availability: '24/7',\r\n      specialties: ['Security Response', 'Emergency Coordination'],\r\n      responseTime: 2,\r\n      isOnDuty: true,\r\n      currentLocation: 'Security Office'\r\n    }\r\n  ];\r\n\r\n  const mockCriticalPatients: CriticalPatient[] = [\r\n    {\r\n      id: '1',\r\n      patientId: 'P001',\r\n      name: 'John Doe',\r\n      age: 68,\r\n      gender: 'M',\r\n      condition: 'Acute Myocardial Infarction',\r\n      severity: 'CRITICAL',\r\n      location: 'ICU',\r\n      bedNumber: 'ICU-301',\r\n      attendingPhysician: 'Dr. Emily Carter',\r\n      nurseName: 'RN Mary Johnson',\r\n      vitalSigns: {\r\n        bloodPressure: '90/60',\r\n        heartRate: 110,\r\n        temperature: 98.6,\r\n        respiratoryRate: 22,\r\n        oxygenSaturation: 94\r\n      },\r\n      lastUpdated: '2024-12-05T15:30:00',\r\n      alerts: ['Low Blood Pressure', 'Elevated Heart Rate'],\r\n      medications: ['Aspirin', 'Metoprolol', 'Atorvastatin'],\r\n      procedures: ['Cardiac Catheterization', 'Angioplasty'],\r\n      familyNotified: true\r\n    },\r\n    {\r\n      id: '2',\r\n      patientId: 'P002',\r\n      name: 'Maria Santos',\r\n      age: 45,\r\n      gender: 'F',\r\n      condition: 'Severe Pneumonia',\r\n      severity: 'SERIOUS',\r\n      location: 'ICU',\r\n      bedNumber: 'ICU-303',\r\n      attendingPhysician: 'Dr. Robert Kumar',\r\n      nurseName: 'RN Jennifer Lee',\r\n      vitalSigns: {\r\n        bloodPressure: '110/70',\r\n        heartRate: 95,\r\n        temperature: 101.2,\r\n        respiratoryRate: 28,\r\n        oxygenSaturation: 89\r\n      },\r\n      lastUpdated: '2024-12-05T15:25:00',\r\n      alerts: ['High Fever', 'Low Oxygen Saturation'],\r\n      medications: ['Ceftriaxone', 'Azithromycin', 'Albuterol'],\r\n      procedures: ['Chest X-ray', 'Blood Culture', 'Arterial Blood Gas'],\r\n      familyNotified: true\r\n    }\r\n  ];\r\n\r\n  const mockTriageEntries: TriageEntry[] = [\r\n    {\r\n      id: '1',\r\n      patientName: 'Jane Smith',\r\n      age: 35,\r\n      gender: 'F',\r\n      arrivalTime: '2024-12-05T14:30:00',\r\n      chiefComplaint: 'Chest pain and shortness of breath',\r\n      triageLevel: 2,\r\n      vitalSigns: {\r\n        bloodPressure: '150/95',\r\n        heartRate: 105,\r\n        temperature: 98.8,\r\n        respiratoryRate: 20,\r\n        oxygenSaturation: 96,\r\n        painScore: 8\r\n      },\r\n      triageNurse: 'RN Patricia Davis',\r\n      status: 'WAITING',\r\n      estimatedWaitTime: 15,\r\n      notes: 'Possible cardiac event, EKG ordered'\r\n    },\r\n    {\r\n      id: '2',\r\n      patientName: 'Robert Wilson',\r\n      age: 52,\r\n      gender: 'M',\r\n      arrivalTime: '2024-12-05T15:00:00',\r\n      chiefComplaint: 'Severe abdominal pain',\r\n      triageLevel: 3,\r\n      vitalSigns: {\r\n        bloodPressure: '130/80',\r\n        heartRate: 88,\r\n        temperature: 99.1,\r\n        oxygenSaturation: 98,\r\n        painScore: 7\r\n      },\r\n      triageNurse: 'RN Lisa Rodriguez',\r\n      status: 'IN_PROGRESS',\r\n      assignedBed: 'ED-103',\r\n      estimatedWaitTime: 30,\r\n      notes: 'Possible appendicitis, surgical consult requested'\r\n    }\r\n  ];\r\n\r\n  const getAlertTypeColor = (type: string) => {\r\n    const colors = {\r\n      'CODE_BLUE': '#ef4444',\r\n      'CODE_RED': '#dc2626',\r\n      'CODE_GRAY': '#6b7280',\r\n      'MASS_CASUALTY': '#7c2d12',\r\n      'SECURITY': '#f59e0b',\r\n      'FIRE': '#ea580c',\r\n      'EVACUATION': '#8b5cf6',\r\n      'NATURAL_DISASTER': '#059669'\r\n    };\r\n    return colors[type as keyof typeof colors] || '#6b7280';\r\n  };\r\n\r\n  const getSeverityColor = (severity: string) => {\r\n    const colors = {\r\n      'CRITICAL': '#ef4444',\r\n      'HIGH': '#f59e0b',\r\n      'MEDIUM': '#3b82f6',\r\n      'LOW': '#10b981'\r\n    };\r\n    return colors[severity as keyof typeof colors] || '#6b7280';\r\n  };\r\n\r\n  const getBedStatusColor = (status: string) => {\r\n    const colors = {\r\n      'AVAILABLE': '#10b981',\r\n      'OCCUPIED': '#f59e0b',\r\n      'RESERVED': '#3b82f6',\r\n      'MAINTENANCE': '#ef4444',\r\n      'CLEANING': '#6b7280'\r\n    };\r\n    return colors[status as keyof typeof colors] || '#6b7280';\r\n  };\r\n\r\n  const getTriageLevelColor = (level: number) => {\r\n    const colors = {\r\n      1: '#dc2626', // Resuscitation - Red\r\n      2: '#ea580c', // Emergent - Orange  \r\n      3: '#facc15', // Urgent - Yellow\r\n      4: '#22c55e', // Less Urgent - Green\r\n      5: '#3b82f6'  // Non-urgent - Blue\r\n    };\r\n    return colors[level as keyof typeof colors] || '#6b7280';\r\n  };\r\n\r\n  const AlertModal = () => (\r\n    <div style={{\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      zIndex: 1000,\r\n      padding: '1rem'\r\n    }}>\r\n      <div style={{\r\n        backgroundColor: 'white',\r\n        borderRadius: '12px',\r\n        padding: '2rem',\r\n        maxWidth: '800px',\r\n        width: '100%',\r\n        maxHeight: '90vh',\r\n        overflowY: 'auto'\r\n      }}>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem' }}>\r\n          <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n            Emergency Alert Details\r\n          </h2>\r\n          <button\r\n            onClick={() => setShowAlertModal(false)}\r\n            style={{\r\n              background: 'none',\r\n              border: 'none',\r\n              fontSize: '1.5rem',\r\n              cursor: 'pointer',\r\n              color: '#6b7280'\r\n            }}\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n\r\n        {selectedAlert && (\r\n          <div style={{ display: 'grid', gap: '1.5rem' }}>\r\n            {/* Alert Header */}\r\n            <div>\r\n              <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', marginBottom: '1rem' }}>\r\n                <h3 style={{ fontSize: '1.5rem', fontWeight: '600', color: '#1f2937', margin: 0 }}>\r\n                  {selectedAlert.title}\r\n                </h3>\r\n                <span style={{\r\n                  padding: '0.5rem 1rem',\r\n                  borderRadius: '9999px',\r\n                  fontSize: '0.875rem',\r\n                  fontWeight: '600',\r\n                  color: 'white',\r\n                  backgroundColor: getAlertTypeColor(selectedAlert.type)\r\n                }}>\r\n                  {selectedAlert.type.replace('_', ' ')}\r\n                </span>\r\n                <span style={{\r\n                  padding: '0.5rem 1rem',\r\n                  borderRadius: '9999px',\r\n                  fontSize: '0.875rem',\r\n                  fontWeight: '600',\r\n                  color: 'white',\r\n                  backgroundColor: getSeverityColor(selectedAlert.severity)\r\n                }}>\r\n                  {selectedAlert.severity}\r\n                </span>\r\n              </div>\r\n              <p style={{ color: '#6b7280', fontSize: '1rem', margin: 0 }}>\r\n                {selectedAlert.description}\r\n              </p>\r\n            </div>\r\n\r\n            {/* Location & Details */}\r\n            <div>\r\n              <h4 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Location & Details\r\n              </h4>\r\n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '0.5rem' }}>\r\n                <div><span style={{ fontWeight: '600' }}>Location:</span> {selectedAlert.location}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Department:</span> {selectedAlert.department}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Reported By:</span> {selectedAlert.reportedBy}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Time:</span> {new Date(selectedAlert.reportedAt).toLocaleString()}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Alert ID:</span> {selectedAlert.alertId}</div>\r\n                <div>\r\n                  <span style={{ fontWeight: '600' }}>Status:</span>\r\n                  <span style={{\r\n                    marginLeft: '0.5rem',\r\n                    padding: '0.25rem 0.75rem',\r\n                    borderRadius: '9999px',\r\n                    fontSize: '0.75rem',\r\n                    fontWeight: '600',\r\n                    color: 'white',\r\n                    backgroundColor: selectedAlert.status === 'RESOLVED' ? '#10b981' : \r\n                                   selectedAlert.status === 'RESPONDING' ? '#f59e0b' : '#ef4444'\r\n                  }}>\r\n                    {selectedAlert.status}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Response Team */}\r\n            <div>\r\n              <h4 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Response Team\r\n              </h4>\r\n              <div style={{ display: 'grid', gap: '0.5rem' }}>\r\n                {selectedAlert.responseTeam.map((member, index) => (\r\n                  <div key={index} style={{\r\n                    padding: '0.5rem 1rem',\r\n                    backgroundColor: '#f3f4f6',\r\n                    borderRadius: '8px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center'\r\n                  }}>\r\n                    <span>{member}</span>\r\n                    <span style={{ fontSize: '0.75rem', color: '#10b981' }}>✓ Responding</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Actions Taken */}\r\n            <div>\r\n              <h4 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Actions Taken\r\n              </h4>\r\n              <div style={{ display: 'grid', gap: '0.25rem' }}>\r\n                {selectedAlert.actionsTaken.map((action, index) => (\r\n                  <div key={index} style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n                    <span style={{ color: '#10b981' }}>✓</span>\r\n                    <span>{action}</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Resources Used */}\r\n            <div>\r\n              <h4 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Resources Used\r\n              </h4>\r\n              <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\r\n                {selectedAlert.resourcesUsed.map((resource, index) => (\r\n                  <span\r\n                    key={index}\r\n                    style={{\r\n                      padding: '0.25rem 0.75rem',\r\n                      backgroundColor: '#e0f2fe',\r\n                      color: '#0e7490',\r\n                      borderRadius: '9999px',\r\n                      fontSize: '0.875rem',\r\n                      fontWeight: '500'\r\n                    }}\r\n                  >\r\n                    {resource}\r\n                  </span>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Notes */}\r\n            <div>\r\n              <h4 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Notes\r\n              </h4>\r\n              <p style={{\r\n                padding: '1rem',\r\n                backgroundColor: '#f9fafb',\r\n                borderRadius: '8px',\r\n                border: '1px solid #e5e7eb',\r\n                margin: 0,\r\n                lineHeight: '1.6'\r\n              }}>\r\n                {selectedAlert.notes}\r\n              </p>\r\n            </div>\r\n\r\n            <div style={{ display: 'flex', gap: '1rem', justifyContent: 'flex-end', paddingTop: '1rem', borderTop: '1px solid #e5e7eb' }}>\r\n              {selectedAlert.status === 'ACTIVE' && (\r\n                <Button variant=\"primary\">\r\n                  🚨 Update Status\r\n                </Button>\r\n              )}\r\n              <Button variant=\"outline\">\r\n                📋 Add Notes\r\n              </Button>\r\n              <Button variant=\"secondary\" onClick={() => setShowAlertModal(false)}>\r\n                Close\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Layout>\r\n      <div style={{ maxWidth: '1400px', margin: '0 auto' }}>\r\n        {/* Header */}\r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'space-between', \r\n          alignItems: 'center', \r\n          marginBottom: '2rem' \r\n        }}>\r\n          <div>\r\n            <h1 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n              Emergency Management\r\n            </h1>\r\n            <p style={{ color: '#6b7280', fontSize: '1rem' }}>\r\n              Monitor emergency alerts, bed availability, and critical patient status\r\n            </p>\r\n          </div>\r\n          <div style={{ display: 'flex', gap: '0.5rem' }}>\r\n            <Button variant=\"primary\" onClick={() => setShowNewAlertModal(true)}>\r\n              🚨 New Alert\r\n            </Button>\r\n            <Button variant=\"outline\">\r\n              📊 Reports\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Emergency Status Overview */}\r\n        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem', marginBottom: '2rem' }}>\r\n          <Card style={{ backgroundColor: '#fef2f2', border: '1px solid #fecaca' }}>\r\n            <div style={{ textAlign: 'center', padding: '1rem' }}>\r\n              <div style={{ fontSize: '2rem', color: '#ef4444', marginBottom: '0.5rem' }}>🚨</div>\r\n              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#dc2626' }}>\r\n                {[].filter /* TODO: API */(a => a.status === 'ACTIVE').length}\r\n              </div>\r\n              <div style={{ fontSize: '0.875rem', color: '#dc2626' }}>Active Alerts</div>\r\n            </div>\r\n          </Card>\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '1rem' }}>\r\n              <div style={{ fontSize: '2rem', color: '#10b981', marginBottom: '0.5rem' }}>🛏️</div>\r\n              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n                {[].filter /* TODO: API */(b => b.status === 'AVAILABLE').length}\r\n              </div>\r\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Available Beds</div>\r\n            </div>\r\n          </Card>\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '1rem' }}>\r\n              <div style={{ fontSize: '2rem', color: '#f59e0b', marginBottom: '0.5rem' }}>👥</div>\r\n              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n                {[].filter /* TODO: API */(p => p.severity === 'CRITICAL').length}\r\n              </div>\r\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Critical Patients</div>\r\n            </div>\r\n          </Card>\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '1rem' }}>\r\n              <div style={{ fontSize: '2rem', color: '#3b82f6', marginBottom: '0.5rem' }}>📞</div>\r\n              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n                {[].filter /* TODO: API */(c => c.isOnDuty).length}\r\n              </div>\r\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>On-Duty Staff</div>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Tab Navigation */}\r\n        <div style={{ marginBottom: '2rem' }}>\r\n          <div style={{ display: 'flex', gap: '0.5rem', borderBottom: '1px solid #e5e7eb' }}>\r\n            {[\r\n              { key: 'dashboard', label: '🏥 Dashboard', desc: 'Overview' },\r\n              { key: 'alerts', label: '🚨 Active Alerts', desc: 'Emergency Alerts' },\r\n              { key: 'beds', label: '🛏️ Bed Status', desc: 'Availability' },\r\n              { key: 'contacts', label: '📞 Contacts', desc: 'Emergency Staff' },\r\n              { key: 'patients', label: '👥 Critical Patients', desc: 'Monitoring' },\r\n              { key: 'triage', label: '⚡ Triage', desc: 'ED Queue' }\r\n            ].map(tab => (\r\n              <button\r\n                key={tab.key}\r\n                onClick={() => setCurrentTab(tab.key as string)}\r\n                style={{\r\n                  padding: '1rem 1.5rem',\r\n                  border: 'none',\r\n                  background: 'none',\r\n                  fontSize: '1rem',\r\n                  fontWeight: '500',\r\n                  color: currentTab === tab.key ? '#667eea' : '#6b7280',\r\n                  borderBottom: currentTab === tab.key ? '2px solid #667eea' : '2px solid transparent',\r\n                  cursor: 'pointer',\r\n                  transition: 'all 0.2s ease'\r\n                }}\r\n              >\r\n                <div>{tab.label}</div>\r\n                <div style={{ fontSize: '0.75rem', opacity: 0.8 }}>\r\n                  {tab.desc}\r\n                </div>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Dashboard Tab */}\r\n        {currentTab === 'dashboard' && (\r\n          <div style={{ display: 'grid', gap: '2rem' }}>\r\n            {/* Recent Alerts */}\r\n            <Card>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Recent Emergency Alerts\r\n              </h3>\r\n              <div style={{ display: 'grid', gap: '1rem' }}>\r\n                {[].slice /* TODO: API */(0, 3).map(alert => (\r\n                  <div key={alert.id} style={{\r\n                    padding: '1rem',\r\n                    border: '1px solid #e5e7eb',\r\n                    borderRadius: '8px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center'\r\n                  }}>\r\n                    <div style={{ flex: 1 }}>\r\n                      <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center', marginBottom: '0.5rem' }}>\r\n                        <span style={{\r\n                          padding: '0.25rem 0.5rem',\r\n                          borderRadius: '4px',\r\n                          fontSize: '0.75rem',\r\n                          fontWeight: '600',\r\n                          color: 'white',\r\n                          backgroundColor: getAlertTypeColor(alert.type)\r\n                        }}>\r\n                          {alert.type.replace('_', ' ')}\r\n                        </span>\r\n                        <span style={{\r\n                          padding: '0.25rem 0.5rem',\r\n                          borderRadius: '4px',\r\n                          fontSize: '0.75rem',\r\n                          fontWeight: '600',\r\n                          color: 'white',\r\n                          backgroundColor: getSeverityColor(alert.severity)\r\n                        }}>\r\n                          {alert.severity}\r\n                        </span>\r\n                        <span style={{ fontSize: '0.875rem', color: '#6b7280' }}>\r\n                          {alert.location}\r\n                        </span>\r\n                      </div>\r\n                      <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#1f2937', margin: 0 }}>\r\n                        {alert.title}\r\n                      </h4>\r\n                      <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>\r\n                        Reported {new Date(alert.reportedAt).toLocaleString()}\r\n                      </p>\r\n                    </div>\r\n                    <Button size=\"sm\" variant=\"outline\">\r\n                      View Details\r\n                    </Button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </Card>\r\n\r\n            {/* Critical Patients Summary */}\r\n            <Card>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Critical Patients\r\n              </h3>\r\n              <div style={{ display: 'grid', gap: '1rem' }}>\r\n                {[].map /* TODO: API */(patient => (\r\n                  <div key={patient.id} style={{\r\n                    padding: '1rem',\r\n                    border: '1px solid #e5e7eb',\r\n                    borderRadius: '8px'\r\n                  }}>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.5rem' }}>\r\n                      <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#1f2937', margin: 0 }}>\r\n                        {patient.name} ({patient.bedNumber})\r\n                      </h4>\r\n                      <span style={{\r\n                        padding: '0.25rem 0.75rem',\r\n                        borderRadius: '9999px',\r\n                        fontSize: '0.75rem',\r\n                        fontWeight: '600',\r\n                        color: 'white',\r\n                        backgroundColor: patient.severity === 'CRITICAL' ? '#ef4444' : '#f59e0b'\r\n                      }}>\r\n                        {patient.severity}\r\n                      </span>\r\n                    </div>\r\n                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', gap: '0.5rem', fontSize: '0.875rem', color: '#6b7280' }}>\r\n                      <div>BP: {patient.vitalSigns.bloodPressure}</div>\r\n                      <div>HR: {patient.vitalSigns.heartRate}</div>\r\n                      <div>Temp: {patient.vitalSigns.temperature}°F</div>\r\n                      <div>SpO2: {patient.vitalSigns.oxygenSaturation}%</div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        )}\r\n\r\n        {/* Alerts Tab */}\r\n        {currentTab === 'alerts' && (\r\n          <>\r\n            {/* Alert Filters */}\r\n            <Card style={{ marginBottom: '1.5rem' }}>\r\n              <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                <div style={{ flex: 1, minWidth: '250px' }}>\r\n                  <Input\r\n                    placeholder=\"Search alerts...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                  />\r\n                </div>\r\n                \r\n                <select\r\n                  value={alertFilter}\r\n                  onChange={(e) => setAlertFilter(e.target.value)}\r\n                  style={{\r\n                    padding: '0.75rem 1rem',\r\n                    border: '1px solid #d1d5db',\r\n                    borderRadius: '8px',\r\n                    fontSize: '1rem',\r\n                    backgroundColor: 'white',\r\n                    minWidth: '150px'\r\n                  }}\r\n                >\r\n                  <option value=\"ALL\">All Alerts</option>\r\n                  <option value=\"ACTIVE\">Active</option>\r\n                  <option value=\"RESPONDING\">Responding</option>\r\n                  <option value=\"RESOLVED\">Resolved</option>\r\n                </select>\r\n\r\n                <Button variant=\"outline\">\r\n                  🔄 Refresh\r\n                </Button>\r\n              </div>\r\n            </Card>\r\n\r\n            {/* Alerts List */}\r\n            <div style={{ display: 'grid', gap: '1rem' }}>\r\n              {[].map /* TODO: API */(alert => (\r\n                <Card key={alert.id} style={{\r\n                  cursor: 'pointer',\r\n                  border: alert.severity === 'CRITICAL' ? '2px solid #ef4444' : '1px solid #e5e7eb'\r\n                }}>\r\n                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n                    <div style={{ flex: 1 }}>\r\n                      <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center', marginBottom: '0.75rem' }}>\r\n                        <span style={{\r\n                          padding: '0.25rem 0.75rem',\r\n                          borderRadius: '9999px',\r\n                          fontSize: '0.75rem',\r\n                          fontWeight: '600',\r\n                          color: 'white',\r\n                          backgroundColor: getAlertTypeColor(alert.type)\r\n                        }}>\r\n                          {alert.type.replace('_', ' ')}\r\n                        </span>\r\n                        <span style={{\r\n                          padding: '0.25rem 0.75rem',\r\n                          borderRadius: '9999px',\r\n                          fontSize: '0.75rem',\r\n                          fontWeight: '600',\r\n                          color: 'white',\r\n                          backgroundColor: getSeverityColor(alert.severity)\r\n                        }}>\r\n                          {alert.severity}\r\n                        </span>\r\n                        <span style={{\r\n                          padding: '0.25rem 0.75rem',\r\n                          borderRadius: '9999px',\r\n                          fontSize: '0.75rem',\r\n                          fontWeight: '600',\r\n                          color: 'white',\r\n                          backgroundColor: alert.status === 'RESOLVED' ? '#10b981' : \r\n                                         alert.status === 'RESPONDING' ? '#f59e0b' : '#ef4444'\r\n                        }}>\r\n                          {alert.status}\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      <h3 style={{ fontSize: '1.125rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                        {alert.title}\r\n                      </h3>\r\n                      <p style={{ color: '#6b7280', fontSize: '0.875rem', marginBottom: '0.5rem' }}>\r\n                        {alert.description}\r\n                      </p>\r\n                      \r\n                      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: '0.5rem', fontSize: '0.875rem', color: '#6b7280' }}>\r\n                        <div><span style={{ fontWeight: '600' }}>Location:</span> {alert.location}</div>\r\n                        <div><span style={{ fontWeight: '600' }}>Reported:</span> {new Date(alert.reportedAt).toLocaleString()}</div>\r\n                        <div><span style={{ fontWeight: '600' }}>By:</span> {alert.reportedBy}</div>\r\n                        <div><span style={{ fontWeight: '600' }}>Response Team:</span> {alert.responseTeam.length} members</div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', gap: '0.5rem', marginLeft: '1rem' }}>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => {\r\n                          setSelectedAlert(alert);\r\n                          setShowAlertModal(true);\r\n                        }}\r\n                      >\r\n                        View Details\r\n                      </Button>\r\n                      {alert.status === 'ACTIVE' && (\r\n                        <Button size=\"sm\" variant=\"primary\">\r\n                          🚨 Respond\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* Bed Status Tab */}\r\n        {currentTab === 'beds' && (\r\n          <div style={{ display: 'grid', gap: '1rem' }}>\r\n            {[].map /* TODO: API */(bed => (\r\n              <Card key={bed.id}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n                  <div style={{ flex: 1 }}>\r\n                    <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', marginBottom: '0.75rem' }}>\r\n                      <h3 style={{ fontSize: '1.125rem', fontWeight: '600', color: '#1f2937', margin: 0 }}>\r\n                        {bed.bedNumber} - {bed.wardName}\r\n                      </h3>\r\n                      <span style={{\r\n                        padding: '0.25rem 0.75rem',\r\n                        borderRadius: '9999px',\r\n                        fontSize: '0.75rem',\r\n                        fontWeight: '600',\r\n                        color: 'white',\r\n                        backgroundColor: getBedStatusColor(bed.status)\r\n                      }}>\r\n                        {bed.status}\r\n                      </span>\r\n                      <span style={{\r\n                        padding: '0.125rem 0.5rem',\r\n                        borderRadius: '4px',\r\n                        fontSize: '0.625rem',\r\n                        fontWeight: '600',\r\n                        color: bed.priority === 'HIGH' ? '#dc2626' : bed.priority === 'MEDIUM' ? '#f59e0b' : '#10b981',\r\n                        backgroundColor: bed.priority === 'HIGH' ? '#fef2f2' : bed.priority === 'MEDIUM' ? '#fef3c7' : '#f0fdf4'\r\n                      }}>\r\n                        {bed.priority} PRIORITY\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '0.5rem', marginBottom: '0.75rem', fontSize: '0.875rem', color: '#6b7280' }}>\r\n                      <div><span style={{ fontWeight: '600' }}>Location:</span> {bed.location}</div>\r\n                      <div><span style={{ fontWeight: '600' }}>Type:</span> {bed.bedType}</div>\r\n                      {bed.patientName && (\r\n                        <div><span style={{ fontWeight: '600' }}>Patient:</span> {bed.patientName}</div>\r\n                      )}\r\n                      {bed.nurseAssigned && (\r\n                        <div><span style={{ fontWeight: '600' }}>Nurse:</span> {bed.nurseAssigned}</div>\r\n                      )}\r\n                      <div><span style={{ fontWeight: '600' }}>Last Cleaned:</span> {new Date(bed.lastCleaned).toLocaleString()}</div>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <span style={{ fontWeight: '600', fontSize: '0.875rem', color: '#6b7280' }}>Equipment:</span>\r\n                      <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', marginTop: '0.25rem' }}>\r\n                        {bed.equipmentAvailable.map((equipment, index) => (\r\n                          <span\r\n                            key={index}\r\n                            style={{\r\n                              padding: '0.125rem 0.5rem',\r\n                              backgroundColor: '#e0f2fe',\r\n                              color: '#0e7490',\r\n                              borderRadius: '4px',\r\n                              fontSize: '0.75rem',\r\n                              fontWeight: '500'\r\n                            }}\r\n                          >\r\n                            {equipment}\r\n                          </span>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div style={{ marginLeft: '1rem' }}>\r\n                    <Button size=\"sm\" variant=\"outline\">\r\n                      📋 Details\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        {/* Other tabs placeholder */}\r\n        {['contacts', 'patients', 'triage'].includes(currentTab) && (\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>\r\n                {currentTab === 'contacts' && '📞'}\r\n                {currentTab === 'patients' && '👥'}\r\n                {currentTab === 'triage' && '⚡'}\r\n              </div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                {currentTab === 'contacts' && 'Emergency Contacts Directory'}\r\n                {currentTab === 'patients' && 'Critical Patient Monitoring'}\r\n                {currentTab === 'triage' && 'Emergency Department Triage'}\r\n              </h3>\r\n              <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\r\n                {currentTab === 'contacts' && 'Access emergency contact information for key personnel and response teams.'}\r\n                {currentTab === 'patients' && 'Monitor critical patients with real-time vital signs and alerts.'}\r\n                {currentTab === 'triage' && 'Manage emergency department triage queue and patient prioritization.'}\r\n              </p>\r\n              <Button variant=\"primary\">\r\n                {currentTab === 'contacts' && '📞 View Contacts'}\r\n                {currentTab === 'patients' && '👥 Monitor Patients'}\r\n                {currentTab === 'triage' && '⚡ Manage Triage'}\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Alert Modal */}\r\n        {showAlertModal && <AlertModal />}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default EmergencyPage;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\emr\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFileText' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 15
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchRecords'. Either include it or remove the dependency array.",
        "line": 89,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 89,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [user, setUser, fetchRecords]",
            "fix": { "range": [2525, 2540], "text": "[user, setUser, fetchRecords]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Text,\r\n  Group,\r\n  Badge,\r\n  SimpleGrid,\r\n  Stack,\r\n  Button,\r\n  Title,\r\n  Card,\r\n  TextInput,\r\n  Select,\r\n  LoadingOverlay,\r\n  Alert,\r\n  ActionIcon,\r\n  Menu,\r\n  Avatar\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport { notifications } from '@mantine/notifications';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconFileText,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconDotsVertical,\r\n  IconAlertCircle,\r\n  IconFiles,\r\n  IconClipboardList,\r\n  IconActivity\r\n} from '@tabler/icons-react';\r\nimport Layout from '../../components/shared/Layout';\r\nimport DataTable from '../../components/shared/DataTable';\r\nimport MedicalRecordForm from '../../components/emr/MedicalRecordForm';\r\nimport MedicalRecordDetails from '../../components/emr/MedicalRecordDetails';\r\nimport { useAppStore } from '../../stores/appStore';\r\nimport { User, UserRole, TableColumn } from '../../types/common';\r\nimport emrService from '../../services/emr.service';\r\nimport patientsService from '../../services/patients.service';\r\nimport type { CreateMedicalRecordDto, UpdateMedicalRecordDto, EmrFilters } from '../../services/emr.service';\r\n\r\nconst mockUser: User = {\r\n  id: '1',\r\n  username: 'admin',\r\n  email: 'admin@hospital.com',\r\n  firstName: 'Admin',\r\n  lastName: 'User',\r\n  role: UserRole.ADMIN,\r\n  permissions: [],\r\n  isActive: true,\r\n  tenantInfo: {\r\n    tenantId: 'T001',\r\n    tenantName: 'Main Hospital',\r\n  },\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nfunction EmrPage() {\r\n  const { user, setUser } = useAppStore();\r\n  const [records, setRecords] = useState<any[]>([]);\r\n  const [patients, setPatients] = useState<any[]>([]);\r\n  const [doctors, setDoctors] = useState<any[]>([]);\r\n  const [stats, setStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedRecord, setSelectedRecord] = useState<any>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [patientFilter, setPatientFilter] = useState('');\r\n  const [recordTypeFilter, setRecordTypeFilter] = useState('');\r\n\r\n  const [recordFormOpened, { open: openRecordForm, close: closeRecordForm }] = useDisclosure(false);\r\n  const [detailsOpened, { open: openDetails, close: closeDetails }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setUser(mockUser);\r\n    }\r\n    fetchRecords();\r\n    fetchStats();\r\n    fetchPatients();\r\n    fetchDoctors();\r\n  }, [user, setUser]);\r\n\r\n  const fetchRecords = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const filters: EmrFilters = {};\r\n      if (patientFilter) filters.patientId = patientFilter;\r\n      if (recordTypeFilter) filters.recordType = recordTypeFilter;\r\n\r\n      const response = await emrService.getRecords(filters);\r\n      if (response.success && response.data) {\r\n        setRecords(response.data.records || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching records:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to fetch medical records',\r\n        color: 'red',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await emrService.getStats();\r\n      if (response.success && response.data) {\r\n        setStats(response.data);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching stats:', error);\r\n    }\r\n  };\r\n\r\n  const fetchPatients = async () => {\r\n    try {\r\n      const response = await patientsService.getPatients();\r\n      if (response.success && response.data) {\r\n        setPatients(response.data.patients || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching patients:', error);\r\n    }\r\n  };\r\n\r\n  const fetchDoctors = async () => {\r\n    try {\r\n      // Mock doctors - in production, fetch from staff API\r\n      setDoctors([\r\n        { id: '1', firstName: 'John', lastName: 'Smith', specialization: 'General Medicine' },\r\n        { id: '2', firstName: 'Sarah', lastName: 'Johnson', specialization: 'Cardiology' },\r\n      ]);\r\n    } catch (error: any) {\r\n      console.error('Error fetching doctors:', error);\r\n    }\r\n  };\r\n\r\n  const handleCreateRecord = async (data: CreateMedicalRecordDto) => {\r\n    try {\r\n      const response = await emrService.createRecord(data);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Medical record created successfully',\r\n          color: 'green',\r\n        });\r\n        fetchRecords();\r\n        fetchStats();\r\n        closeRecordForm();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error creating record:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to create medical record',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleUpdateRecord = async (data: UpdateMedicalRecordDto) => {\r\n    if (!selectedRecord) return;\r\n\r\n    try {\r\n      const response = await emrService.updateRecord(selectedRecord.id, data);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Medical record updated successfully',\r\n          color: 'green',\r\n        });\r\n        fetchRecords();\r\n        fetchStats();\r\n        closeRecordForm();\r\n        setSelectedRecord(null);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error updating record:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to update medical record',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleDeleteRecord = async (record: any) => {\r\n    if (!window.confirm('Are you sure you want to delete this medical record?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await emrService.deleteRecord(record.id);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Medical record deleted successfully',\r\n          color: 'green',\r\n        });\r\n        fetchRecords();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error deleting record:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to delete medical record',\r\n        color: 'red',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleViewRecord = (record: any) => {\r\n    setSelectedRecord(record);\r\n    openDetails();\r\n  };\r\n\r\n  const handleEditRecord = (record: any) => {\r\n    setSelectedRecord(record);\r\n    openRecordForm();\r\n  };\r\n\r\n  const handleNewRecord = () => {\r\n    setSelectedRecord(null);\r\n    openRecordForm();\r\n  };\r\n\r\n  const getRecordTypeColor = (type: string) => {\r\n    const colors: Record<string, string> = {\r\n      CONSULTATION: 'blue',\r\n      DIAGNOSIS: 'red',\r\n      PRESCRIPTION: 'green',\r\n      LAB_RESULT: 'cyan',\r\n      IMAGING: 'grape',\r\n      PROCEDURE: 'orange',\r\n      VACCINATION: 'teal',\r\n      ALLERGY: 'pink',\r\n      OTHER: 'gray'\r\n    };\r\n    return colors[type] || 'gray';\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString();\r\n  };\r\n\r\n  const recordColumns: TableColumn[] = [\r\n    {\r\n      key: 'recordType',\r\n      title: 'Type',\r\n      sortable: true,\r\n      render: (record: any) => (\r\n        <Badge color={getRecordTypeColor(record.recordType)}>\r\n          {record.recordType}\r\n        </Badge>\r\n      )\r\n    },\r\n    {\r\n      key: 'patient',\r\n      title: 'Patient',\r\n      sortable: true,\r\n      render: (record: any) => (\r\n        <Group gap=\"xs\">\r\n          <Avatar size=\"sm\" radius=\"xl\" color=\"blue\">\r\n            {record.patient?.firstName?.[0]}{record.patient?.lastName?.[0]}\r\n          </Avatar>\r\n          <div>\r\n            <Text fw={500} size=\"sm\">\r\n              {record.patient?.firstName} {record.patient?.lastName}\r\n            </Text>\r\n            <Text size=\"xs\" c=\"dimmed\">\r\n              {record.patient?.medicalRecordNumber || record.patient?.id}\r\n            </Text>\r\n          </div>\r\n        </Group>\r\n      )\r\n    },\r\n    {\r\n      key: 'title',\r\n      title: 'Title',\r\n      sortable: true,\r\n      render: (record: any) => (\r\n        <Text fw={500}>{record.title}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'description',\r\n      title: 'Description',\r\n      render: (record: any) => (\r\n        <Text lineClamp={2}>{record.description}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'doctor',\r\n      title: 'Doctor',\r\n      render: (record: any) => (\r\n        record.doctor ? (\r\n          <Text size=\"sm\">\r\n            Dr. {record.doctor.firstName} {record.doctor.lastName}\r\n          </Text>\r\n        ) : (\r\n          <Text size=\"sm\" c=\"dimmed\">Not assigned</Text>\r\n        )\r\n      )\r\n    },\r\n    {\r\n      key: 'date',\r\n      title: 'Date',\r\n      sortable: true,\r\n      render: (record: any) => (\r\n        <Text size=\"sm\">{formatDate(record.date)}</Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'actions',\r\n      title: 'Actions',\r\n      render: (record: any) => (\r\n        <Group gap=\"xs\">\r\n          <ActionIcon\r\n            variant=\"subtle\"\r\n            onClick={() => handleViewRecord(record)}\r\n          >\r\n            <IconEye size={16} />\r\n          </ActionIcon>\r\n          <ActionIcon\r\n            variant=\"subtle\"\r\n            onClick={() => handleEditRecord(record)}\r\n          >\r\n            <IconEdit size={16} />\r\n          </ActionIcon>\r\n          <Menu position=\"bottom-end\">\r\n            <Menu.Target>\r\n              <ActionIcon variant=\"subtle\">\r\n                <IconDotsVertical size={16} />\r\n              </ActionIcon>\r\n            </Menu.Target>\r\n            <Menu.Dropdown>\r\n              <Menu.Item\r\n                leftSection={<IconEye size={14} />}\r\n                onClick={() => handleViewRecord(record)}\r\n              >\r\n                View Details\r\n              </Menu.Item>\r\n              <Menu.Item\r\n                leftSection={<IconEdit size={14} />}\r\n                onClick={() => handleEditRecord(record)}\r\n              >\r\n                Edit Record\r\n              </Menu.Item>\r\n              <Menu.Divider />\r\n              <Menu.Item\r\n                leftSection={<IconTrash size={14} />}\r\n                color=\"red\"\r\n                onClick={() => handleDeleteRecord(record)}\r\n              >\r\n                Delete Record\r\n              </Menu.Item>\r\n            </Menu.Dropdown>\r\n          </Menu>\r\n        </Group>\r\n      )\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Layout user={user || mockUser} notifications={0} onLogout={() => {}}>\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <Stack gap=\"lg\">\r\n          {/* Header */}\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Title order={2}>Electronic Medical Records</Title>\r\n              <Text c=\"dimmed\" size=\"sm\">\r\n                Manage patient medical records and history\r\n              </Text>\r\n            </div>\r\n            <Button\r\n              leftSection={<IconPlus size={16} />}\r\n              onClick={handleNewRecord}\r\n            >\r\n              Create Medical Record\r\n            </Button>\r\n          </Group>\r\n\r\n          {/* Statistics Cards */}\r\n          {stats && (\r\n            <SimpleGrid cols={{ base: 1, sm: 2, md: 3 }}>\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Total Records\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.total}\r\n                    </Text>\r\n                  </div>\r\n                  <IconFiles size={32} color=\"#228be6\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Recent Records\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.recentRecords}\r\n                    </Text>\r\n                    <Text size=\"xs\" c=\"dimmed\">Last 30 days</Text>\r\n                  </div>\r\n                  <IconActivity size={32} color=\"#40c057\" />\r\n                </Group>\r\n              </Card>\r\n\r\n              <Card withBorder padding=\"lg\">\r\n                <Group justify=\"space-between\">\r\n                  <div>\r\n                    <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                      Record Types\r\n                    </Text>\r\n                    <Text fw={700} size=\"xl\">\r\n                      {stats.byType?.length || 0}\r\n                    </Text>\r\n                  </div>\r\n                  <IconClipboardList size={32} color=\"#fab005\" />\r\n                </Group>\r\n              </Card>\r\n            </SimpleGrid>\r\n          )}\r\n\r\n          {/* Filters */}\r\n          <Paper withBorder p=\"md\">\r\n            <Grid>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 4 }}>\r\n                <TextInput\r\n                  placeholder=\"Search records...\"\r\n                  leftSection={<IconSearch size={16} />}\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                />\r\n              </Grid.Col>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 4 }}>\r\n                <Select\r\n                  placeholder=\"Filter by patient\"\r\n                  data={[\r\n                    { value: '', title: 'All Patients' },\r\n                    ...patients.map(p => ({\r\n                      value: p.id,\r\n                      title: `${p.firstName} ${p.lastName}`\r\n                    }))\r\n                  ]}\r\n                  value={patientFilter}\r\n                  onChange={(value) => setPatientFilter(value || '')}\r\n                  searchable\r\n                  clearable\r\n                />\r\n              </Grid.Col>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 4 }}>\r\n                <Select\r\n                  placeholder=\"Filter by type\"\r\n                  data={[\r\n                    { value: '', title: 'All Types' },\r\n                    { value: 'CONSULTATION', title: 'Consultation' },\r\n                    { value: 'DIAGNOSIS', title: 'Diagnosis' },\r\n                    { value: 'PRESCRIPTION', title: 'Prescription' },\r\n                    { value: 'LAB_RESULT', title: 'Lab Result' },\r\n                    { value: 'IMAGING', title: 'Imaging' },\r\n                    { value: 'PROCEDURE', title: 'Procedure' },\r\n                    { value: 'VACCINATION', title: 'Vaccination' },\r\n                    { value: 'ALLERGY', title: 'Allergy' }\r\n                  ]}\r\n                  value={recordTypeFilter}\r\n                  onChange={(value) => setRecordTypeFilter(value || '')}\r\n                />\r\n              </Grid.Col>\r\n            </Grid>\r\n            <Group justify=\"flex-end\" mt=\"md\">\r\n              <Button onClick={fetchRecords}>\r\n                Apply Filters\r\n              </Button>\r\n            </Group>\r\n          </Paper>\r\n\r\n          {/* Records Table */}\r\n          <Paper withBorder>\r\n            <LoadingOverlay visible={loading} />\r\n            {records.length === 0 && !loading ? (\r\n              <Alert icon={<IconAlertCircle size={16} />} title=\"No records found\" color=\"blue\">\r\n                No medical records match your current filters.\r\n              </Alert>\r\n            ) : (\r\n              <DataTable\r\n                columns={recordColumns}\r\n                data={records}\r\n                loading={loading}\r\n              />\r\n            )}\r\n          </Paper>\r\n        </Stack>\r\n      </Container>\r\n\r\n      {/* Medical Record Form Modal */}\r\n      <MedicalRecordForm\r\n        opened={recordFormOpened}\r\n        onClose={closeRecordForm}\r\n        record={selectedRecord}\r\n        onSubmit={selectedRecord ? handleUpdateRecord : handleCreateRecord}\r\n        patients={patients}\r\n        doctors={doctors}\r\n      />\r\n\r\n      {/* Medical Record Details Modal */}\r\n      {selectedRecord && (\r\n        <MedicalRecordDetails\r\n          opened={detailsOpened}\r\n          onClose={closeDetails}\r\n          record={selectedRecord}\r\n          onEdit={handleEditRecord}\r\n          onDelete={handleDeleteRecord}\r\n        />\r\n      )}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default EmrPage;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\finance\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Progress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DatePickerInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 41,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'FinanceFilters' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 59,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 73
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'invoices' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 75,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'payments' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 76,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'dateRange' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setDateRange' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 83,
        "column": 21,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Text,\r\n  Group,\r\n  Badge,\r\n  SimpleGrid,\r\n  Stack,\r\n  Button,\r\n  Title,\r\n  Card,\r\n  TextInput,\r\n  Select,\r\n  LoadingOverlay,\r\n  Alert,\r\n  Tabs,\r\n  ActionIcon,\r\n  Menu,\r\n  Progress\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconCurrency,\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconDotsVertical,\r\n  IconAlertCircle,\r\n  IconReceipt,\r\n  IconCash,\r\n  IconCalendar,\r\n  IconReport\r\n} from '@tabler/icons-react';\r\nimport Layout from '../../components/shared/Layout';\r\nimport DataTable from '../../components/shared/DataTable';\r\nimport FinanceTransactionForm from '../../components/finance/FinanceTransactionForm';\r\nimport FinanceTransactionDetails from '../../components/finance/FinanceTransactionDetails';\r\nimport { useAppStore } from '../../stores/appStore';\r\nimport { User, UserRole, TableColumn } from '../../types/common';\r\nimport financeService from '../../services/finance.service';\r\nimport type { CreateTransactionDto, UpdateTransactionDto, FinanceFilters } from '../../services/finance.service';\r\n\r\nconst mockUser: User = {\r\n  id: '1',\r\n  name: 'Admin User',\r\n  username: 'admin',\r\n  email: 'admin@hospital.com',\r\n  firstName: 'Admin',\r\n  lastName: 'User',\r\n  role: UserRole.ADMIN,\r\n  permissions: [],\r\n  isActive: true,\r\n  tenantInfo: {\r\n    tenantId: 'T001',\r\n    tenantName: 'Main Hospital',\r\n  },\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nfunction FinancePage() {\r\n  const { user, setUser } = useAppStore();\r\n  const [activeTab, setActiveTab] = useState('transactions');\r\n  const [transactions, setTransactions] = useState<any[]>([]);\r\n  const [invoices, setInvoices] = useState<any[]>([]);\r\n  const [payments, setPayments] = useState<any[]>([]);\r\n  const [stats, setStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedTransaction, setSelectedTransaction] = useState<any>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [typeFilter, setTypeFilter] = useState('');\r\n  const [categoryFilter, setCategoryFilter] = useState('');\r\n  const [dateRange, setDateRange] = useState<[Date | null, Date | null]>([null, null]);\r\n\r\n  const [transactionFormOpened, { open: openTransactionForm, close: closeTransactionForm }] = useDisclosure(false);\r\n  const [detailsOpened, { open: openDetails, close: closeDetails }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setUser(mockUser);\r\n    }\r\n    fetchTransactions();\r\n    fetchInvoices();\r\n    fetchPayments();\r\n    fetchStats();\r\n  }, [user, setUser]);\r\n\r\n  const fetchTransactions = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Since backend doesn't have transaction endpoints yet, we'll use payments data\r\n      // to simulate transactions and show real data from the API\r\n      const response = await financeService.getPayments();\r\n      \r\n      if (response.success && response.data) {\r\n        // Transform payments into transaction-like format\r\n        const transformedTransactions = response.data.items.map((payment: any) => ({\r\n          id: payment.id,\r\n          type: 'INCOME', // Payments are income\r\n          category: 'PAYMENT_RECEIVED',\r\n          amount: payment.amount,\r\n          description: `Payment for Invoice ${payment.invoice?.invoiceNumber || 'N/A'}`,\r\n          date: payment.paymentDate || payment.createdAt,\r\n          paymentMethod: payment.paymentMethod,\r\n          referenceNumber: payment.paymentNumber,\r\n          createdAt: payment.createdAt,\r\n          updatedAt: payment.updatedAt,\r\n          relatedType: 'INVOICE',\r\n          relatedId: payment.invoiceId\r\n        }));\r\n\r\n        setTransactions(transformedTransactions);\r\n      } else {\r\n        // Fallback to mock data if no real payments exist\r\n        const mockTransactions = [\r\n          {\r\n            id: '1',\r\n            type: 'INCOME',\r\n            category: 'CONSULTATION_FEES',\r\n            amount: 1500,\r\n            description: 'Consultation fee for patient John Doe',\r\n            date: new Date().toISOString(),\r\n            paymentMethod: 'CASH',\r\n            referenceNumber: 'REF001',\r\n            createdAt: new Date().toISOString(),\r\n            updatedAt: new Date().toISOString()\r\n          },\r\n          {\r\n            id: '2',\r\n            type: 'EXPENSE',\r\n            category: 'MEDICAL_SUPPLIES',\r\n            amount: 5000,\r\n            description: 'Purchase of medical supplies',\r\n            date: new Date(Date.now() - 86400000).toISOString(),\r\n            paymentMethod: 'BANK_TRANSFER',\r\n            referenceNumber: 'REF002',\r\n            createdAt: new Date().toISOString(),\r\n            updatedAt: new Date().toISOString()\r\n          }\r\n        ];\r\n        setTransactions(mockTransactions);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching transactions:', error);\r\n      \r\n      // Show user-friendly error message\r\n      notifications.show({\r\n        title: 'Error Loading Transactions',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to fetch financial transactions. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n\r\n      // Fallback to mock data on error\r\n      const mockTransactions = [\r\n        {\r\n          id: '1',\r\n          type: 'INCOME',\r\n          category: 'CONSULTATION_FEES',\r\n          amount: 1500,\r\n          description: 'Consultation fee for patient John Doe',\r\n          date: new Date().toISOString(),\r\n          paymentMethod: 'CASH',\r\n          referenceNumber: 'REF001',\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString()\r\n        }\r\n      ];\r\n      setTransactions(mockTransactions);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchInvoices = async () => {\r\n    try {\r\n      const response = await financeService.getInvoices();\r\n      if (response.success && response.data) {\r\n        setInvoices(response.data.items || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching invoices:', error);\r\n      notifications.show({\r\n        title: 'Error Loading Invoices',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to fetch invoices. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchPayments = async () => {\r\n    try {\r\n      const response = await financeService.getPayments();\r\n      if (response.success && response.data) {\r\n        setPayments(response.data.items || []);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching payments:', error);\r\n      notifications.show({\r\n        title: 'Error Loading Payments',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to fetch payments. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await financeService.getStats();\r\n      if (response.success && response.data) {\r\n        setStats(response.data);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching stats:', error);\r\n      notifications.show({\r\n        title: 'Error Loading Statistics',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to fetch financial statistics. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCreateTransaction = async (data: CreateTransactionDto) => {\r\n    try {\r\n      // Mock creation since backend doesn't have transaction endpoints yet\r\n      const newTransaction = {\r\n        id: Date.now().toString(),\r\n        ...data,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      setTransactions(prev => [newTransaction, ...prev]);\r\n      \r\n      notifications.show({\r\n        title: 'Success',\r\n        message: 'Transaction created successfully',\r\n        color: 'green',\r\n      });\r\n      \r\n      closeTransactionForm();\r\n    } catch (error: any) {\r\n      console.error('Error creating transaction:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to create transaction',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleUpdateTransaction = async (data: UpdateTransactionDto) => {\r\n    if (!selectedTransaction) return;\r\n\r\n    try {\r\n      const updatedTransaction = {\r\n        ...selectedTransaction,\r\n        ...data,\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      setTransactions(prev => \r\n        prev.map(t => t.id === selectedTransaction.id ? updatedTransaction : t)\r\n      );\r\n\r\n      notifications.show({\r\n        title: 'Success',\r\n        message: 'Transaction updated successfully',\r\n        color: 'green',\r\n      });\r\n      \r\n      closeTransactionForm();\r\n      setSelectedTransaction(null);\r\n    } catch (error: any) {\r\n      console.error('Error updating transaction:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to update transaction',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleDeleteTransaction = async (transaction: any) => {\r\n    if (!window.confirm('Are you sure you want to delete this transaction?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setTransactions(prev => prev.filter(t => t.id !== transaction.id));\r\n      \r\n      notifications.show({\r\n        title: 'Success',\r\n        message: 'Transaction deleted successfully',\r\n        color: 'green',\r\n      });\r\n    } catch (error: any) {\r\n      console.error('Error deleting transaction:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to delete transaction',\r\n        color: 'red',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleViewTransaction = (transaction: any) => {\r\n    setSelectedTransaction(transaction);\r\n    openDetails();\r\n  };\r\n\r\n  const handleEditTransaction = (transaction: any) => {\r\n    setSelectedTransaction(transaction);\r\n    openTransactionForm();\r\n  };\r\n\r\n  const handleNewTransaction = () => {\r\n    setSelectedTransaction(null);\r\n    openTransactionForm();\r\n  };\r\n\r\n  const getTypeColor = (type: string) => {\r\n    return type === 'INCOME' ? 'green' : 'red';\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return `₹${amount.toFixed(2)}`;\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString();\r\n  };\r\n\r\n  const formatCategory = (category: string) => {\r\n    return category.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\r\n  };\r\n\r\n  const transactionColumns: TableColumn[] = [\r\n    {\r\n      key: 'type',\r\n      title: 'Type',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const transaction = record as any;\r\n        return (\r\n          <Badge color={getTypeColor(transaction.type)}>\r\n            {transaction.type}\r\n          </Badge>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'category',\r\n      title: 'Category',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const transaction = record as any;\r\n        return (\r\n          <Text fw={500}>{formatCategory(transaction.category)}</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'amount',\r\n      title: 'Amount',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const transaction = record as any;\r\n        return (\r\n          <Text fw={600} c={getTypeColor(transaction.type)}>\r\n            {transaction.type === 'EXPENSE' ? '-' : '+'}{formatCurrency(transaction.amount)}\r\n          </Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'description',\r\n      title: 'Description',\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const transaction = record as any;\r\n        return (\r\n          <Text lineClamp={2}>{transaction.description}</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'paymentMethod',\r\n      title: 'Method',\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const transaction = record as any;\r\n        return (\r\n          <Badge variant=\"light\">\r\n            {transaction.paymentMethod?.replace(/_/g, ' ')}\r\n          </Badge>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'date',\r\n      title: 'Date',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const transaction = record as any;\r\n        return (\r\n          <Text size=\"sm\">{formatDate(transaction.date)}</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'actions',\r\n      title: 'Actions',\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const transaction = record as any;\r\n        return (\r\n          <Group gap=\"xs\">\r\n            <ActionIcon\r\n              variant=\"subtle\"\r\n              onClick={() => handleViewTransaction(transaction)}\r\n            >\r\n              <IconEye size={16} />\r\n            </ActionIcon>\r\n            <ActionIcon\r\n              variant=\"subtle\"\r\n              onClick={() => handleEditTransaction(transaction)}\r\n            >\r\n              <IconEdit size={16} />\r\n            </ActionIcon>\r\n            <Menu position=\"bottom-end\">\r\n              <Menu.Target>\r\n                <ActionIcon variant=\"subtle\">\r\n                  <IconDotsVertical size={16} />\r\n                </ActionIcon>\r\n              </Menu.Target>\r\n              <Menu.Dropdown>\r\n                <Menu.Item\r\n                  leftSection={<IconEye size={14} />}\r\n                  onClick={() => handleViewTransaction(transaction)}\r\n                >\r\n                  View Details\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                  leftSection={<IconEdit size={14} />}\r\n                  onClick={() => handleEditTransaction(transaction)}\r\n                >\r\n                  Edit Transaction\r\n                </Menu.Item>\r\n                <Menu.Divider />\r\n                <Menu.Item\r\n                  leftSection={<IconTrash size={14} />}\r\n                  color=\"red\"\r\n                  onClick={() => handleDeleteTransaction(transaction)}\r\n                >\r\n                  Delete Transaction\r\n                </Menu.Item>\r\n              </Menu.Dropdown>\r\n            </Menu>\r\n          </Group>\r\n        );\r\n      }\r\n    }\r\n  ];\r\n\r\n  // Calculate mock stats from transactions\r\n  const totalIncome = transactions.filter(t => t.type === 'INCOME').reduce((sum, t) => sum + t.amount, 0);\r\n  const totalExpenses = transactions.filter(t => t.type === 'EXPENSE').reduce((sum, t) => sum + t.amount, 0);\r\n  const netProfit = totalIncome - totalExpenses;\r\n\r\n  return (\r\n    <Layout user={user || mockUser} notifications={0} onLogout={() => {}}>\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <Stack gap=\"lg\">\r\n          {/* Header */}\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Title order={2}>Finance Management</Title>\r\n              <Text c=\"dimmed\" size=\"sm\">\r\n                Manage financial transactions, invoices, and reports\r\n              </Text>\r\n            </div>\r\n            <Button\r\n              leftSection={<IconPlus size={16} />}\r\n              onClick={handleNewTransaction}\r\n            >\r\n              Add Transaction\r\n            </Button>\r\n          </Group>\r\n\r\n          {/* Statistics Cards */}\r\n          <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }}>\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Total Income\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\" c=\"green\">\r\n                    {formatCurrency(totalIncome)}\r\n                  </Text>\r\n                </div>\r\n                <IconTrendingUp size={32} color=\"#40c057\" />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Total Expenses\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\" c=\"red\">\r\n                    {formatCurrency(totalExpenses)}\r\n                  </Text>\r\n                </div>\r\n                <IconTrendingDown size={32} color=\"#fa5252\" />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Net Profit\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\" c={netProfit >= 0 ? 'green' : 'red'}>\r\n                    {formatCurrency(netProfit)}\r\n                  </Text>\r\n                </div>\r\n                <IconReport size={32} color={netProfit >= 0 ? '#40c057' : '#fa5252'} />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Outstanding\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {formatCurrency(stats?.revenue?.outstanding || 0)}\r\n                  </Text>\r\n                </div>\r\n                <IconCash size={32} color=\"#fab005\" />\r\n              </Group>\r\n            </Card>\r\n          </SimpleGrid>\r\n\r\n          {/* Tabs */}\r\n          <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'transactions')}>\r\n            <Tabs.List>\r\n              <Tabs.Tab value=\"transactions\" leftSection={<IconCurrency size={16} />}>\r\n                Transactions\r\n              </Tabs.Tab>\r\n              <Tabs.Tab value=\"invoices\" leftSection={<IconReceipt size={16} />}>\r\n                Invoices\r\n              </Tabs.Tab>\r\n              <Tabs.Tab value=\"payments\" leftSection={<IconCash size={16} />}>\r\n                Payments\r\n              </Tabs.Tab>\r\n            </Tabs.List>\r\n\r\n            <Tabs.Panel value=\"transactions\" pt=\"md\">\r\n              {/* Filters */}\r\n              <Paper withBorder p=\"md\" mb=\"md\">\r\n                <Grid>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                    <TextInput\r\n                      placeholder=\"Search transactions...\"\r\n                      leftSection={<IconSearch size={16} />}\r\n                      value={searchQuery}\r\n                      onChange={(e) => setSearchQuery(e.target.value)}\r\n                    />\r\n                  </Grid.Col>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                    <Select\r\n                      placeholder=\"Filter by type\"\r\n                      data={[\r\n                        { value: '', label: 'All Types' },\r\n                        { value: 'INCOME', label: 'Income' },\r\n                        { value: 'EXPENSE', label: 'Expense' }\r\n                      ]}\r\n                      value={typeFilter}\r\n                      onChange={(value) => setTypeFilter(value || '')}\r\n                    />\r\n                  </Grid.Col>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                    <Select\r\n                      placeholder=\"Filter by category\"\r\n                      data={[\r\n                        { value: '', label: 'All Categories' },\r\n                        { value: 'CONSULTATION_FEES', label: 'Consultation Fees' },\r\n                        { value: 'MEDICAL_SUPPLIES', label: 'Medical Supplies' },\r\n                        { value: 'STAFF_SALARIES', label: 'Staff Salaries' }\r\n                      ]}\r\n                      value={categoryFilter}\r\n                      onChange={(value) => setCategoryFilter(value || '')}\r\n                    />\r\n                  </Grid.Col>\r\n                  <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                    <Button fullWidth onClick={fetchTransactions}>\r\n                      Apply Filters\r\n                    </Button>\r\n                  </Grid.Col>\r\n                </Grid>\r\n              </Paper>\r\n\r\n              {/* Transactions Table */}\r\n              <Paper withBorder>\r\n                <LoadingOverlay visible={loading} />\r\n                {transactions.length === 0 && !loading ? (\r\n                  <Alert icon={<IconAlertCircle size={16} />} title=\"No transactions found\" color=\"blue\">\r\n                    No financial transactions match your current filters.\r\n                  </Alert>\r\n                ) : (\r\n                  <DataTable\r\n                    columns={transactionColumns}\r\n                    data={transactions}\r\n                    loading={loading}\r\n                  />\r\n                )}\r\n              </Paper>\r\n            </Tabs.Panel>\r\n\r\n            <Tabs.Panel value=\"invoices\" pt=\"md\">\r\n              <Alert color=\"blue\" title=\"Invoices\">\r\n                Invoice management is handled in the Billing module. This section shows financial overview of invoices.\r\n              </Alert>\r\n            </Tabs.Panel>\r\n\r\n            <Tabs.Panel value=\"payments\" pt=\"md\">\r\n              <Alert color=\"blue\" title=\"Payments\">\r\n                Payment management is handled in the Billing module. This section shows financial overview of payments.\r\n              </Alert>\r\n            </Tabs.Panel>\r\n          </Tabs>\r\n        </Stack>\r\n      </Container>\r\n\r\n      {/* Transaction Form Modal */}\r\n      <FinanceTransactionForm\r\n        opened={transactionFormOpened}\r\n        onClose={closeTransactionForm}\r\n        transaction={selectedTransaction}\r\n        onSubmit={selectedTransaction ? handleUpdateTransaction : handleCreateTransaction}\r\n      />\r\n\r\n      {/* Transaction Details Modal */}\r\n      {selectedTransaction && (\r\n        <FinanceTransactionDetails\r\n          opened={detailsOpened}\r\n          onClose={closeDetails}\r\n          transaction={selectedTransaction}\r\n          onEdit={handleEditTransaction}\r\n          onDelete={handleDeleteTransaction}\r\n        />\r\n      )}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default FinancePage;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\forgot-password\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\hr\\page.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchStaff'. Either include it or remove the dependency array.",
        "line": 87,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 87,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [user, setUser, fetchStaff]",
            "fix": { "range": [2401, 2416], "text": "[user, setUser, fetchStaff]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Text,\r\n  Group,\r\n  Badge,\r\n  SimpleGrid,\r\n  Stack,\r\n  Button,\r\n  Title,\r\n  Card,\r\n  TextInput,\r\n  Select,\r\n  LoadingOverlay,\r\n  Alert,\r\n  ActionIcon,\r\n  Menu,\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport { notifications } from '@mantine/notifications';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconUsers,\r\n  IconUserCheck,\r\n  IconUserX,\r\n  IconBuilding,\r\n  IconEdit,\r\n  IconEye,\r\n  IconTrash,\r\n  IconDotsVertical,\r\n  IconAlertCircle,\r\n} from '@tabler/icons-react';\r\nimport Layout from '../../components/shared/Layout';\r\nimport DataTable from '../../components/shared/DataTable';\r\nimport StaffForm from '../../components/hr/StaffForm';\r\nimport StaffDetails from '../../components/hr/StaffDetails';\r\nimport { useAppStore } from '../../stores/appStore';\r\nimport { User, UserRole, TableColumn } from '../../types/common';\r\nimport hrService from '../../services/hr.service';\r\nimport type { CreateStaffDto, UpdateStaffDto, HrFilters } from '../../services/hr.service';\r\n\r\nconst mockUser: User = {\r\n  id: '1',\r\n  name: 'Admin User',\r\n  username: 'admin',\r\n  email: 'admin@hospital.com',\r\n  firstName: 'Admin',\r\n  lastName: 'User',\r\n  role: UserRole.ADMIN,\r\n  permissions: [],\r\n  isActive: true,\r\n  tenantInfo: {\r\n    tenantId: 'T001',\r\n    tenantName: 'Main Hospital',\r\n  },\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nfunction HrPage() {\r\n  const { user, setUser } = useAppStore();\r\n  const [staff, setStaff] = useState<any[]>([]);\r\n  const [stats, setStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedStaff, setSelectedStaff] = useState<any>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [departmentFilter, setDepartmentFilter] = useState('');\r\n  const [designationFilter, setDesignationFilter] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n  const [departments, setDepartments] = useState<any[]>([]);\r\n\r\n  const [staffFormOpened, { open: openStaffForm, close: closeStaffForm }] = useDisclosure(false);\r\n  const [detailsOpened, { open: openDetails, close: closeDetails }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setUser(mockUser);\r\n    }\r\n    fetchStaff();\r\n    fetchStats();\r\n    fetchDepartments();\r\n  }, [user, setUser]);\r\n\r\n  const fetchStaff = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const filters: HrFilters = {\r\n        page: 1,\r\n        limit: 100,\r\n      };\r\n      if (departmentFilter) filters.departmentId = departmentFilter;\r\n      if (designationFilter) filters.designation = designationFilter;\r\n      if (statusFilter) filters.isActive = statusFilter;\r\n\r\n      const response = await hrService.getStaff(filters);\r\n      if (response.success && response.data) {\r\n        let filteredStaff = response.data.items;\r\n\r\n        // Apply search filter\r\n        if (searchQuery) {\r\n          filteredStaff = filteredStaff.filter(s =>\r\n            `${s.firstName} ${s.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n            s.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n            s.phone.includes(searchQuery) ||\r\n            (s.employeeId && s.employeeId.toLowerCase().includes(searchQuery.toLowerCase()))\r\n          );\r\n        }\r\n\r\n        setStaff(filteredStaff);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching staff:', error);\r\n      notifications.show({\r\n        title: 'Error Loading Staff',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to fetch staff members. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await hrService.getStats();\r\n      if (response.success && response.data) {\r\n        setStats(response.data);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching stats:', error);\r\n      notifications.show({\r\n        title: 'Error Loading Statistics',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to fetch HR statistics. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchDepartments = async () => {\r\n    try {\r\n      const response = await hrService.getDepartments({ limit: 100 });\r\n      if (response.success && response.data) {\r\n        setDepartments(response.data.items);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching departments:', error);\r\n    }\r\n  };\r\n\r\n  const handleCreateStaff = async (data: CreateStaffDto) => {\r\n    try {\r\n      const response = await hrService.createStaff(data);\r\n      \r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Staff member added successfully',\r\n          color: 'green',\r\n          autoClose: 3000,\r\n        });\r\n        \r\n        closeStaffForm();\r\n        fetchStaff();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error creating staff:', error);\r\n      notifications.show({\r\n        title: 'Error Creating Staff',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to create staff member. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleUpdateStaff = async (data: UpdateStaffDto) => {\r\n    if (!selectedStaff) return;\r\n\r\n    try {\r\n      const response = await hrService.updateStaff(selectedStaff.id, data);\r\n      \r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Staff member updated successfully',\r\n          color: 'green',\r\n          autoClose: 3000,\r\n        });\r\n        \r\n        closeStaffForm();\r\n        setSelectedStaff(null);\r\n        fetchStaff();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error updating staff:', error);\r\n      notifications.show({\r\n        title: 'Error Updating Staff',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to update staff member. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleDeleteStaff = async (staffMember: any) => {\r\n    if (!window.confirm(`Are you sure you want to deactivate ${staffMember.firstName} ${staffMember.lastName}?`)) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await hrService.deleteStaff(staffMember.id);\r\n      \r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Staff member deactivated successfully',\r\n          color: 'green',\r\n          autoClose: 3000,\r\n        });\r\n        \r\n        fetchStaff();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error deleting staff:', error);\r\n      notifications.show({\r\n        title: 'Error Deactivating Staff',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to deactivate staff member. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleViewStaff = (staffMember: any) => {\r\n    setSelectedStaff(staffMember);\r\n    openDetails();\r\n  };\r\n\r\n  const handleEditStaff = (staffMember: any) => {\r\n    setSelectedStaff(staffMember);\r\n    openStaffForm();\r\n  };\r\n\r\n  const handleNewStaff = () => {\r\n    setSelectedStaff(null);\r\n    openStaffForm();\r\n  };\r\n\r\n  const formatDesignation = (designation: string) => {\r\n    return designation.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\r\n  };\r\n\r\n  const staffColumns: TableColumn[] = [\r\n    {\r\n      key: 'employeeId',\r\n      title: 'Employee ID',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const staffMember = record as any;\r\n        return (\r\n          <Text fw={500}>{staffMember.employeeId || 'N/A'}</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'name',\r\n      title: 'Name',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const staffMember = record as any;\r\n        return (\r\n          <div>\r\n            <Text fw={600}>{staffMember.firstName} {staffMember.lastName}</Text>\r\n            <Text size=\"xs\" c=\"dimmed\">{staffMember.email}</Text>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'department',\r\n      title: 'Department',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const staffMember = record as any;\r\n        return (\r\n          <Text>{staffMember.department?.name || 'N/A'}</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'designation',\r\n      title: 'Designation',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const staffMember = record as any;\r\n        return (\r\n          <Badge variant=\"light\">\r\n            {formatDesignation(staffMember.designation)}\r\n          </Badge>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'phone',\r\n      title: 'Contact',\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const staffMember = record as any;\r\n        return (\r\n          <Text size=\"sm\">{staffMember.phone}</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'isActive',\r\n      title: 'Status',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const staffMember = record as any;\r\n        return (\r\n          <Badge color={staffMember.isActive ? 'green' : 'red'}>\r\n            {staffMember.isActive ? 'Active' : 'Inactive'}\r\n          </Badge>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'actions',\r\n      title: 'Actions',\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const staffMember = record as any;\r\n        return (\r\n          <Group gap=\"xs\">\r\n            <ActionIcon\r\n              variant=\"subtle\"\r\n              onClick={() => handleViewStaff(staffMember)}\r\n            >\r\n              <IconEye size={16} />\r\n            </ActionIcon>\r\n            <ActionIcon\r\n              variant=\"subtle\"\r\n              onClick={() => handleEditStaff(staffMember)}\r\n            >\r\n              <IconEdit size={16} />\r\n            </ActionIcon>\r\n            <Menu position=\"bottom-end\">\r\n              <Menu.Target>\r\n                <ActionIcon variant=\"subtle\">\r\n                  <IconDotsVertical size={16} />\r\n                </ActionIcon>\r\n              </Menu.Target>\r\n              <Menu.Dropdown>\r\n                <Menu.Item\r\n                  leftSection={<IconEye size={14} />}\r\n                  onClick={() => handleViewStaff(staffMember)}\r\n                >\r\n                  View Details\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                  leftSection={<IconEdit size={14} />}\r\n                  onClick={() => handleEditStaff(staffMember)}\r\n                >\r\n                  Edit Staff\r\n                </Menu.Item>\r\n                <Menu.Divider />\r\n                <Menu.Item\r\n                  leftSection={<IconTrash size={14} />}\r\n                  color=\"red\"\r\n                  onClick={() => handleDeleteStaff(staffMember)}\r\n                >\r\n                  Deactivate Staff\r\n                </Menu.Item>\r\n              </Menu.Dropdown>\r\n            </Menu>\r\n          </Group>\r\n        );\r\n      }\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Layout user={user || mockUser} notifications={0} onLogout={() => {}}>\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <Stack gap=\"lg\">\r\n          {/* Header */}\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Title order={2}>Human Resources Management</Title>\r\n              <Text c=\"dimmed\" size=\"sm\">\r\n                Manage staff members, departments, and HR operations\r\n              </Text>\r\n            </div>\r\n            <Button\r\n              leftSection={<IconPlus size={16} />}\r\n              onClick={handleNewStaff}\r\n            >\r\n              Add Staff Member\r\n            </Button>\r\n          </Group>\r\n\r\n          {/* Statistics Cards */}\r\n          <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }}>\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Total Staff\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stats?.staff?.total || 0}\r\n                  </Text>\r\n                </div>\r\n                <IconUsers size={32} color=\"#228be6\" />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Active Staff\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\" c=\"green\">\r\n                    {stats?.staff?.active || 0}\r\n                  </Text>\r\n                </div>\r\n                <IconUserCheck size={32} color=\"#40c057\" />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Inactive Staff\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\" c=\"red\">\r\n                    {stats?.staff?.inactive || 0}\r\n                  </Text>\r\n                </div>\r\n                <IconUserX size={32} color=\"#fa5252\" />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Departments\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stats?.departments?.total || 0}\r\n                  </Text>\r\n                </div>\r\n                <IconBuilding size={32} color=\"#fab005\" />\r\n              </Group>\r\n            </Card>\r\n          </SimpleGrid>\r\n\r\n          {/* Filters */}\r\n          <Paper withBorder p=\"md\">\r\n            <Grid>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                <TextInput\r\n                  placeholder=\"Search staff...\"\r\n                  leftSection={<IconSearch size={16} />}\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                />\r\n              </Grid.Col>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                <Select\r\n                  placeholder=\"Filter by department\"\r\n                  data={[\r\n                    { value: '', label: 'All Departments' },\r\n                    ...departments.map(dept => ({\r\n                      value: dept.id,\r\n                      label: dept.name,\r\n                    })),\r\n                  ]}\r\n                  value={departmentFilter}\r\n                  onChange={(value) => setDepartmentFilter(value || '')}\r\n                  clearable\r\n                />\r\n              </Grid.Col>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                <Select\r\n                  placeholder=\"Filter by designation\"\r\n                  data={[\r\n                    { value: '', label: 'All Designations' },\r\n                    { value: 'DOCTOR', label: 'Doctor' },\r\n                    { value: 'NURSE', label: 'Nurse' },\r\n                    { value: 'RECEPTIONIST', label: 'Receptionist' },\r\n                    { value: 'PHARMACIST', label: 'Pharmacist' },\r\n                    { value: 'LAB_TECHNICIAN', label: 'Lab Technician' },\r\n                    { value: 'RADIOLOGIST', label: 'Radiologist' },\r\n                    { value: 'ACCOUNTANT', label: 'Accountant' },\r\n                    { value: 'MANAGER', label: 'Manager' },\r\n                    { value: 'ADMIN', label: 'Admin' },\r\n                    { value: 'OTHER', label: 'Other' },\r\n                  ]}\r\n                  value={designationFilter}\r\n                  onChange={(value) => setDesignationFilter(value || '')}\r\n                  clearable\r\n                />\r\n              </Grid.Col>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                <Select\r\n                  placeholder=\"Filter by status\"\r\n                  data={[\r\n                    { value: '', label: 'All Status' },\r\n                    { value: 'true', label: 'Active' },\r\n                    { value: 'false', label: 'Inactive' },\r\n                  ]}\r\n                  value={statusFilter}\r\n                  onChange={(value) => setStatusFilter(value || '')}\r\n                  clearable\r\n                />\r\n              </Grid.Col>\r\n            </Grid>\r\n            <Group justify=\"flex-end\" mt=\"md\">\r\n              <Button onClick={fetchStaff}>\r\n                Apply Filters\r\n              </Button>\r\n            </Group>\r\n          </Paper>\r\n\r\n          {/* Staff Table */}\r\n          <Paper withBorder>\r\n            <LoadingOverlay visible={loading} />\r\n            {staff.length === 0 && !loading ? (\r\n              <Alert icon={<IconAlertCircle size={16} />} title=\"No staff members found\" color=\"blue\">\r\n                No staff members match your current filters. Try adjusting your search criteria.\r\n              </Alert>\r\n            ) : (\r\n              <DataTable\r\n                columns={staffColumns}\r\n                data={staff}\r\n                loading={loading}\r\n              />\r\n            )}\r\n          </Paper>\r\n        </Stack>\r\n      </Container>\r\n\r\n      {/* Staff Form Modal */}\r\n      <StaffForm\r\n        opened={staffFormOpened}\r\n        onClose={closeStaffForm}\r\n        staff={selectedStaff}\r\n        onSubmit={selectedStaff ? handleUpdateStaff : handleCreateStaff}\r\n      />\r\n\r\n      {/* Staff Details Modal */}\r\n      {selectedStaff && (\r\n        <StaffDetails\r\n          opened={detailsOpened}\r\n          onClose={closeDetails}\r\n          staff={selectedStaff}\r\n          onEdit={handleEditStaff}\r\n          onDelete={handleDeleteStaff}\r\n        />\r\n      )}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default HrPage;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\insurance\\page.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchClaims'. Either include it or remove the dependency array.",
        "line": 81,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 81,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [user, setUser, fetchClaims]",
            "fix": { "range": [2250, 2265], "text": "[user, setUser, fetchClaims]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Text,\r\n  Group,\r\n  Badge,\r\n  SimpleGrid,\r\n  Stack,\r\n  Button,\r\n  Title,\r\n  Card,\r\n  TextInput,\r\n  Select,\r\n  LoadingOverlay,\r\n  Alert,\r\n  ActionIcon,\r\n  Menu,\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport { notifications } from '@mantine/notifications';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconFileText,\r\n  IconCheck,\r\n  IconClock,\r\n  IconCurrency,\r\n  IconEdit,\r\n  IconEye,\r\n  IconDotsVertical,\r\n  IconAlertCircle,\r\n} from '@tabler/icons-react';\r\nimport Layout from '../../components/shared/Layout';\r\nimport DataTable from '../../components/shared/DataTable';\r\nimport InsuranceClaimForm from '../../components/insurance/InsuranceClaimForm';\r\nimport InsuranceClaimDetails from '../../components/insurance/InsuranceClaimDetails';\r\nimport { useAppStore } from '../../stores/appStore';\r\nimport { User, UserRole, TableColumn } from '../../types/common';\r\nimport insuranceService from '../../services/insurance.service';\r\nimport type { CreateInsuranceClaimDto, UpdateInsuranceClaimDto, InsuranceFilters } from '../../services/insurance.service';\r\n\r\nconst mockUser: User = {\r\n  id: '1',\r\n  username: 'admin',\r\n  email: 'admin@hospital.com',\r\n  firstName: 'Admin',\r\n  lastName: 'User',\r\n  role: UserRole.ADMIN,\r\n  permissions: [],\r\n  isActive: true,\r\n  tenantInfo: {\r\n    tenantId: 'T001',\r\n    tenantName: 'Main Hospital',\r\n  },\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nfunction InsurancePage() {\r\n  const { user, setUser } = useAppStore();\r\n  const [claims, setClaims] = useState<any[]>([]);\r\n  const [stats, setStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedClaim, setSelectedClaim] = useState<any>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n\r\n  const [claimFormOpened, { open: openClaimForm, close: closeClaimForm }] = useDisclosure(false);\r\n  const [detailsOpened, { open: openDetails, close: closeDetails }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setUser(mockUser);\r\n    }\r\n    fetchClaims();\r\n    fetchStats();\r\n  }, [user, setUser]);\r\n\r\n  const fetchClaims = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const filters: InsuranceFilters = {\r\n        page: 1,\r\n        limit: 100,\r\n      };\r\n      if (statusFilter) filters.status = statusFilter;\r\n\r\n      const response = await insuranceService.getClaims(filters);\r\n      if (response.success && response.data) {\r\n        let filteredClaims = response.data.items;\r\n\r\n        // Apply search filter\r\n        if (searchQuery) {\r\n          filteredClaims = filteredClaims.filter(c =>\r\n            `${c.patient?.firstName} ${c.patient?.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n            c.policyNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n            (c.claimNumber && c.claimNumber.toLowerCase().includes(searchQuery.toLowerCase())) ||\r\n            c.insuranceProvider.toLowerCase().includes(searchQuery.toLowerCase())\r\n          );\r\n        }\r\n\r\n        setClaims(filteredClaims);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching claims:', error);\r\n      notifications.show({\r\n        title: 'Error Loading Claims',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to fetch insurance claims. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await insuranceService.getStats();\r\n      if (response.success && response.data) {\r\n        setStats(response.data);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching stats:', error);\r\n      notifications.show({\r\n        title: 'Error Loading Statistics',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to fetch insurance statistics. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCreateClaim = async (data: CreateInsuranceClaimDto) => {\r\n    try {\r\n      const response = await insuranceService.createClaim(data);\r\n      \r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Insurance claim created successfully',\r\n          color: 'green',\r\n          autoClose: 3000,\r\n        });\r\n        \r\n        closeClaimForm();\r\n        fetchClaims();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error creating claim:', error);\r\n      notifications.show({\r\n        title: 'Error Creating Claim',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to create insurance claim. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleUpdateClaim = async (data: UpdateInsuranceClaimDto) => {\r\n    if (!selectedClaim) return;\r\n\r\n    try {\r\n      const response = await insuranceService.updateClaim(selectedClaim.id, data);\r\n      \r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Insurance claim updated successfully',\r\n          color: 'green',\r\n          autoClose: 3000,\r\n        });\r\n        \r\n        closeClaimForm();\r\n        setSelectedClaim(null);\r\n        fetchClaims();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error updating claim:', error);\r\n      notifications.show({\r\n        title: 'Error Updating Claim',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to update insurance claim. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = async (claim: any, status: string) => {\r\n    try {\r\n      const response = await insuranceService.updateClaimStatus(claim.id, status as any);\r\n      \r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Claim status updated successfully',\r\n          color: 'green',\r\n          autoClose: 3000,\r\n        });\r\n        \r\n        fetchClaims();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error updating status:', error);\r\n      notifications.show({\r\n        title: 'Error Updating Status',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to update claim status. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleViewClaim = (claim: any) => {\r\n    setSelectedClaim(claim);\r\n    openDetails();\r\n  };\r\n\r\n  const handleEditClaim = (claim: any) => {\r\n    setSelectedClaim(claim);\r\n    openClaimForm();\r\n  };\r\n\r\n  const handleNewClaim = () => {\r\n    setSelectedClaim(null);\r\n    openClaimForm();\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'SUBMITTED':\r\n        return 'blue';\r\n      case 'UNDER_REVIEW':\r\n        return 'yellow';\r\n      case 'APPROVED':\r\n        return 'green';\r\n      case 'REJECTED':\r\n        return 'red';\r\n      case 'PAID':\r\n        return 'teal';\r\n      default:\r\n        return 'gray';\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return `₹${amount.toLocaleString('en-IN')}`;\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString();\r\n  };\r\n\r\n  const formatProvider = (provider: string) => {\r\n    return provider.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\r\n  };\r\n\r\n  const claimColumns: TableColumn[] = [\r\n    {\r\n      key: 'claimNumber',\r\n      title: 'Claim #',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const claim = record as any;\r\n        return (\r\n          <Text fw={500}>{claim.claimNumber || 'N/A'}</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'patient',\r\n      title: 'Patient',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const claim = record as any;\r\n        return (\r\n          <div>\r\n            <Text fw={600}>{claim.patient?.firstName} {claim.patient?.lastName}</Text>\r\n            <Text size=\"xs\" c=\"dimmed\">{claim.policyNumber}</Text>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'insuranceProvider',\r\n      title: 'Provider',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const claim = record as any;\r\n        return (\r\n          <Text>{formatProvider(claim.insuranceProvider)}</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'amount',\r\n      title: 'Amount',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const claim = record as any;\r\n        return (\r\n          <Text fw={600} c=\"blue\">\r\n            {formatCurrency(claim.amount)}\r\n          </Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'status',\r\n      title: 'Status',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const claim = record as any;\r\n        return (\r\n          <Badge color={getStatusColor(claim.status)}>\r\n            {claim.status.replace(/_/g, ' ')}\r\n          </Badge>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'submittedAt',\r\n      title: 'Submitted',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const claim = record as any;\r\n        return (\r\n          <Text size=\"sm\">{formatDate(claim.submittedAt)}</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'actions',\r\n      title: 'Actions',\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const claim = record as any;\r\n        return (\r\n          <Group gap=\"xs\">\r\n            <ActionIcon\r\n              variant=\"subtle\"\r\n              onClick={() => handleViewClaim(claim)}\r\n            >\r\n              <IconEye size={16} />\r\n            </ActionIcon>\r\n            <ActionIcon\r\n              variant=\"subtle\"\r\n              onClick={() => handleEditClaim(claim)}\r\n            >\r\n              <IconEdit size={16} />\r\n            </ActionIcon>\r\n            <Menu position=\"bottom-end\">\r\n              <Menu.Target>\r\n                <ActionIcon variant=\"subtle\">\r\n                  <IconDotsVertical size={16} />\r\n                </ActionIcon>\r\n              </Menu.Target>\r\n              <Menu.Dropdown>\r\n                <Menu.Item\r\n                  leftSection={<IconEye size={14} />}\r\n                  onClick={() => handleViewClaim(claim)}\r\n                >\r\n                  View Details\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                  leftSection={<IconEdit size={14} />}\r\n                  onClick={() => handleEditClaim(claim)}\r\n                >\r\n                  Edit Claim\r\n                </Menu.Item>\r\n              </Menu.Dropdown>\r\n            </Menu>\r\n          </Group>\r\n        );\r\n      }\r\n    }\r\n  ];\r\n\r\n  const layoutUser = user || [];\r\n  const userForLayout = {\r\n    id: layoutUser.id,\r\n    name: `${layoutUser.firstName} ${layoutUser.lastName}`,\r\n    email: layoutUser.email,\r\n    role: layoutUser.role,\r\n  };\r\n\r\n  return (\r\n    <Layout user={userForLayout} notifications={0} onLogout={() => {}}>\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <Stack gap=\"lg\">\r\n          {/* Header */}\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Title order={2}>Insurance Management</Title>\r\n              <Text c=\"dimmed\" size=\"sm\">\r\n                Manage insurance claims and track reimbursements\r\n              </Text>\r\n            </div>\r\n            <Button\r\n              leftSection={<IconPlus size={16} />}\r\n              onClick={handleNewClaim}\r\n            >\r\n              New Claim\r\n            </Button>\r\n          </Group>\r\n\r\n          {/* Statistics Cards */}\r\n          <SimpleGrid cols={{ base: 1, sm: 2, md: 5 }}>\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Total Claims\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stats?.total || 0}\r\n                  </Text>\r\n                </div>\r\n                <IconFileText size={32} color=\"#228be6\" />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Submitted\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\" c=\"blue\">\r\n                    {stats?.submitted || 0}\r\n                  </Text>\r\n                </div>\r\n                <IconClock size={32} color=\"#228be6\" />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Approved\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\" c=\"green\">\r\n                    {stats?.approved || 0}\r\n                  </Text>\r\n                </div>\r\n                <IconCheck size={32} color=\"#40c057\" />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Paid\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\" c=\"teal\">\r\n                    {stats?.paid || 0}\r\n                  </Text>\r\n                </div>\r\n                <IconCheck size={32} color=\"#20c997\" />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Total Paid\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\" c=\"teal\">\r\n                    {formatCurrency(stats?.totalAmount || 0)}\r\n                  </Text>\r\n                </div>\r\n                <IconCurrency size={32} color=\"#20c997\" />\r\n              </Group>\r\n            </Card>\r\n          </SimpleGrid>\r\n\r\n          {/* Filters */}\r\n          <Paper withBorder p=\"md\">\r\n            <Grid>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 4 }}>\r\n                <TextInput\r\n                  placeholder=\"Search claims...\"\r\n                  leftSection={<IconSearch size={16} />}\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                />\r\n              </Grid.Col>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 4 }}>\r\n                <Select\r\n                  placeholder=\"Filter by status\"\r\n                  data={[\r\n                    { value: '', label: 'All Status' },\r\n                    { value: 'SUBMITTED', label: 'Submitted' },\r\n                    { value: 'UNDER_REVIEW', label: 'Under Review' },\r\n                    { value: 'APPROVED', label: 'Approved' },\r\n                    { value: 'REJECTED', label: 'Rejected' },\r\n                    { value: 'PAID', label: 'Paid' },\r\n                  ]}\r\n                  value={statusFilter}\r\n                  onChange={(value) => setStatusFilter(value || '')}\r\n                  clearable\r\n                />\r\n              </Grid.Col>\r\n              <Grid.Col span={{ base: 12, sm: 6, md: 4 }}>\r\n                <Button fullWidth onClick={fetchClaims}>\r\n                  Apply Filters\r\n                </Button>\r\n              </Grid.Col>\r\n            </Grid>\r\n          </Paper>\r\n\r\n          {/* Claims Table */}\r\n          <Paper withBorder>\r\n            <LoadingOverlay visible={loading} />\r\n            {claims.length === 0 && !loading ? (\r\n              <Alert icon={<IconAlertCircle size={16} />} title=\"No claims found\" color=\"blue\">\r\n                No insurance claims match your current filters. Try adjusting your search criteria.\r\n              </Alert>\r\n            ) : (\r\n              <DataTable\r\n                columns={claimColumns}\r\n                data={claims}\r\n                loading={loading}\r\n              />\r\n            )}\r\n          </Paper>\r\n        </Stack>\r\n      </Container>\r\n\r\n      {/* Claim Form Modal */}\r\n      <InsuranceClaimForm\r\n        opened={claimFormOpened}\r\n        onClose={closeClaimForm}\r\n        claim={selectedClaim}\r\n        onSubmit={selectedClaim ? handleUpdateClaim : handleCreateClaim}\r\n      />\r\n\r\n      {/* Claim Details Modal */}\r\n      {selectedClaim && (\r\n        <InsuranceClaimDetails\r\n          opened={detailsOpened}\r\n          onClose={closeDetails}\r\n          claim={selectedClaim}\r\n          onEdit={handleEditClaim}\r\n          onStatusChange={handleStatusChange}\r\n        />\r\n      )}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default InsurancePage;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\inventory\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Supplier' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 82,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setLocationFilter' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 101,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 101,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedOrder' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 103,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 103,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setSelectedOrder' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 103,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 103,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'showOrderModal' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 105,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setShowOrderModal' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 105,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'showNewItemModal' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 106,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 106,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockInventoryItems' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 108,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 108,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockPurchaseOrders' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 289,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 289,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockStockMovements' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 339,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 339,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\nimport Layout from '../components/Layout';\r\nimport Card from '../components/ui/Card';\r\nimport Button from '../components/ui/Button';\r\nimport Input from '../components/ui/Input';\r\nimport React, { useState } from 'react';\r\n\r\ninterface InventoryItem {\r\n  id: string;\r\n  itemCode: string;\r\n  name: string;\r\n  description: string;\r\n  category: 'MEDICATION' | 'MEDICAL_DEVICE' | 'SURGICAL_SUPPLIES' | 'CONSUMABLES' | 'EQUIPMENT' | 'LABORATORY' | 'OTHER';\r\n  subcategory: string;\r\n  manufacturer: string;\r\n  supplier: string;\r\n  unitOfMeasure: string;\r\n  currentStock: number;\r\n  minStockLevel: number;\r\n  maxStockLevel: number;\r\n  reorderPoint: number;\r\n  reorderQuantity: number;\r\n  unitCost: number;\r\n  totalValue: number;\r\n  location: string;\r\n  storageConditions: string;\r\n  expiryDate?: string;\r\n  batchNumber?: string;\r\n  status: 'ACTIVE' | 'LOW_STOCK' | 'OUT_OF_STOCK' | 'EXPIRED' | 'DISCONTINUED';\r\n  lastRestocked: string;\r\n  lastUsed: string;\r\n  usageRate: number; // per day\r\n  leadTime: number; // days\r\n  isControlled: boolean;\r\n  requiresPrescription: boolean;\r\n  notes: string;\r\n}\r\n\r\ninterface PurchaseOrder {\r\n  id: string;\r\n  orderNumber: string;\r\n  supplier: string;\r\n  orderDate: string;\r\n  expectedDate: string;\r\n  deliveryDate?: string;\r\n  status: 'PENDING' | 'APPROVED' | 'ORDERED' | 'SHIPPED' | 'DELIVERED' | 'CANCELLED';\r\n  items: PurchaseOrderItem[];\r\n  subtotal: number;\r\n  tax: number;\r\n  shipping: number;\r\n  total: number;\r\n  createdBy: string;\r\n  approvedBy?: string;\r\n  notes: string;\r\n}\r\n\r\ninterface PurchaseOrderItem {\r\n  itemId: string;\r\n  itemName: string;\r\n  quantity: number;\r\n  unitCost: number;\r\n  totalCost: number;\r\n}\r\n\r\ninterface StockMovement {\r\n  id: string;\r\n  itemId: string;\r\n  itemName: string;\r\n  type: 'RECEIPT' | 'ISSUE' | 'TRANSFER' | 'ADJUSTMENT' | 'EXPIRED' | 'DAMAGED';\r\n  quantity: number;\r\n  previousStock: number;\r\n  newStock: number;\r\n  reference: string;\r\n  location: string;\r\n  department?: string;\r\n  userId: string;\r\n  userName: string;\r\n  timestamp: string;\r\n  notes: string;\r\n}\r\n\r\ninterface Supplier {\r\n  id: string;\r\n  name: string;\r\n  contactPerson: string;\r\n  email: string;\r\n  phone: string;\r\n  address: string;\r\n  paymentTerms: string;\r\n  deliveryTime: number;\r\n  rating: number;\r\n  isActive: boolean;\r\n  categories: string[];\r\n}\r\n\r\nconst InventoryPage = () => {\r\n  const [currentTab, setCurrentTab] = useState<'inventory' | 'orders' | 'movements' | 'suppliers' | 'analytics' | 'alerts'>('inventory');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [categoryFilter, setCategoryFilter] = useState('ALL');\r\n  const [statusFilter, setStatusFilter] = useState('ALL');\r\n  const [locationFilter, setLocationFilter] = useState('ALL');\r\n  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);\r\n  const [selectedOrder, setSelectedOrder] = useState<PurchaseOrder | null>(null);\r\n  const [showItemModal, setShowItemModal] = useState(false);\r\n  const [showOrderModal, setShowOrderModal] = useState(false);\r\n  const [showNewItemModal, setShowNewItemModal] = useState(false);\r\n\r\n  const mockInventoryItems: InventoryItem[] = [\r\n    {\r\n      id: '1',\r\n      itemCode: 'MED-001',\r\n      name: 'Amoxicillin 500mg',\r\n      description: 'Antibiotic medication for bacterial infections',\r\n      category: 'MEDICATION',\r\n      subcategory: 'Antibiotics',\r\n      manufacturer: 'Pfizer Inc.',\r\n      supplier: 'MedSupply Corp',\r\n      unitOfMeasure: 'Tablets',\r\n      currentStock: 150,\r\n      minStockLevel: 50,\r\n      maxStockLevel: 500,\r\n      reorderPoint: 75,\r\n      reorderQuantity: 200,\r\n      unitCost: 2.50,\r\n      totalValue: 375.00,\r\n      location: 'Pharmacy - A1',\r\n      storageConditions: 'Room temperature, dry place',\r\n      expiryDate: '2025-06-30',\r\n      batchNumber: 'AMX-2024-001',\r\n      status: 'ACTIVE',\r\n      lastRestocked: '2024-11-15T09:00:00',\r\n      lastUsed: '2024-12-04T14:30:00',\r\n      usageRate: 5.2,\r\n      leadTime: 7,\r\n      isControlled: false,\r\n      requiresPrescription: true,\r\n      notes: 'Monitor expiry dates closely'\r\n    },\r\n    {\r\n      id: '2',\r\n      itemCode: 'DEV-002',\r\n      name: 'Digital Thermometer',\r\n      description: 'Non-contact infrared digital thermometer',\r\n      category: 'MEDICAL_DEVICE',\r\n      subcategory: 'Diagnostic Equipment',\r\n      manufacturer: 'MedTech Solutions',\r\n      supplier: 'Healthcare Supplies Ltd',\r\n      unitOfMeasure: 'Units',\r\n      currentStock: 12,\r\n      minStockLevel: 5,\r\n      maxStockLevel: 25,\r\n      reorderPoint: 8,\r\n      reorderQuantity: 10,\r\n      unitCost: 45.00,\r\n      totalValue: 540.00,\r\n      location: 'Equipment Room - B2',\r\n      storageConditions: 'Room temperature',\r\n      status: 'ACTIVE',\r\n      lastRestocked: '2024-10-20T11:00:00',\r\n      lastUsed: '2024-12-05T08:15:00',\r\n      usageRate: 0.3,\r\n      leadTime: 14,\r\n      isControlled: false,\r\n      requiresPrescription: false,\r\n      notes: 'Calibration required every 6 months'\r\n    },\r\n    {\r\n      id: '3',\r\n      itemCode: 'SUR-003',\r\n      name: 'Surgical Gloves - Size L',\r\n      description: 'Sterile latex surgical gloves, powder-free',\r\n      category: 'SURGICAL_SUPPLIES',\r\n      subcategory: 'Personal Protective Equipment',\r\n      manufacturer: 'SafeGuard Medical',\r\n      supplier: 'SurgiSupply Inc',\r\n      unitOfMeasure: 'Pairs',\r\n      currentStock: 25,\r\n      minStockLevel: 100,\r\n      maxStockLevel: 1000,\r\n      reorderPoint: 150,\r\n      reorderQuantity: 500,\r\n      unitCost: 0.75,\r\n      totalValue: 18.75,\r\n      location: 'OR Storage - C1',\r\n      storageConditions: 'Cool, dry environment',\r\n      expiryDate: '2026-03-15',\r\n      batchNumber: 'SG-L-2024-042',\r\n      status: 'LOW_STOCK',\r\n      lastRestocked: '2024-09-10T14:00:00',\r\n      lastUsed: '2024-12-05T16:45:00',\r\n      usageRate: 15.8,\r\n      leadTime: 5,\r\n      isControlled: false,\r\n      requiresPrescription: false,\r\n      notes: 'Critical item - maintain adequate stock'\r\n    },\r\n    {\r\n      id: '4',\r\n      itemCode: 'CON-004',\r\n      name: 'Disposable Syringes 10ml',\r\n      description: 'Sterile disposable syringes with needles',\r\n      category: 'CONSUMABLES',\r\n      subcategory: 'Injection Equipment',\r\n      manufacturer: 'Needle Tech',\r\n      supplier: 'Medical Consumables Co',\r\n      unitOfMeasure: 'Units',\r\n      currentStock: 0,\r\n      minStockLevel: 200,\r\n      maxStockLevel: 2000,\r\n      reorderPoint: 300,\r\n      reorderQuantity: 1000,\r\n      unitCost: 0.35,\r\n      totalValue: 0.00,\r\n      location: 'Nursing Station - D1',\r\n      storageConditions: 'Room temperature, sterile environment',\r\n      expiryDate: '2025-12-31',\r\n      batchNumber: 'NT-10ML-2024-156',\r\n      status: 'OUT_OF_STOCK',\r\n      lastRestocked: '2024-11-01T10:30:00',\r\n      lastUsed: '2024-12-05T17:20:00',\r\n      usageRate: 8.5,\r\n      leadTime: 3,\r\n      isControlled: false,\r\n      requiresPrescription: false,\r\n      notes: 'URGENT: Out of stock - emergency order placed'\r\n    },\r\n    {\r\n      id: '5',\r\n      itemCode: 'LAB-005',\r\n      name: 'Blood Collection Tubes',\r\n      description: 'EDTA blood collection tubes for hematology',\r\n      category: 'LABORATORY',\r\n      subcategory: 'Sample Collection',\r\n      manufacturer: 'LabTech Industries',\r\n      supplier: 'Lab Supply Express',\r\n      unitOfMeasure: 'Tubes',\r\n      currentStock: 345,\r\n      minStockLevel: 100,\r\n      maxStockLevel: 1000,\r\n      reorderPoint: 200,\r\n      reorderQuantity: 500,\r\n      unitCost: 0.85,\r\n      totalValue: 293.25,\r\n      location: 'Laboratory - E1',\r\n      storageConditions: 'Room temperature',\r\n      expiryDate: '2025-08-20',\r\n      batchNumber: 'LT-EDTA-2024-089',\r\n      status: 'ACTIVE',\r\n      lastRestocked: '2024-11-28T13:15:00',\r\n      lastUsed: '2024-12-05T11:30:00',\r\n      usageRate: 12.3,\r\n      leadTime: 10,\r\n      isControlled: false,\r\n      requiresPrescription: false,\r\n      notes: 'Regular usage item'\r\n    },\r\n    {\r\n      id: '6',\r\n      itemCode: 'MED-006',\r\n      name: 'Morphine 10mg/ml',\r\n      description: 'Injectable morphine for pain management',\r\n      category: 'MEDICATION',\r\n      subcategory: 'Controlled Substances',\r\n      manufacturer: 'PharmaCore',\r\n      supplier: 'Controlled Med Supply',\r\n      unitOfMeasure: 'Vials',\r\n      currentStock: 28,\r\n      minStockLevel: 10,\r\n      maxStockLevel: 50,\r\n      reorderPoint: 15,\r\n      reorderQuantity: 25,\r\n      unitCost: 12.50,\r\n      totalValue: 350.00,\r\n      location: 'Secure Storage - F1',\r\n      storageConditions: 'Controlled temperature, secure cabinet',\r\n      expiryDate: '2025-04-10',\r\n      batchNumber: 'PC-MOR-2024-023',\r\n      status: 'ACTIVE',\r\n      lastRestocked: '2024-11-05T09:45:00',\r\n      lastUsed: '2024-12-03T22:10:00',\r\n      usageRate: 1.8,\r\n      leadTime: 21,\r\n      isControlled: true,\r\n      requiresPrescription: true,\r\n      notes: 'Controlled substance - strict tracking required'\r\n    }\r\n  ];\r\n\r\n  const mockPurchaseOrders: PurchaseOrder[] = [\r\n    {\r\n      id: '1',\r\n      orderNumber: 'PO-2024-001',\r\n      supplier: 'MedSupply Corp',\r\n      orderDate: '2024-12-01T10:00:00',\r\n      expectedDate: '2024-12-08T00:00:00',\r\n      status: 'ORDERED',\r\n      items: [\r\n        {\r\n          itemId: '1',\r\n          itemName: 'Amoxicillin 500mg',\r\n          quantity: 200,\r\n          unitCost: 2.50,\r\n          totalCost: 500.00\r\n        }\r\n      ],\r\n      subtotal: 500.00,\r\n      tax: 50.00,\r\n      shipping: 25.00,\r\n      total: 575.00,\r\n      createdBy: 'John Smith',\r\n      approvedBy: 'Dr. Sarah Mitchell',\r\n      notes: 'Regular restocking order'\r\n    },\r\n    {\r\n      id: '2',\r\n      orderNumber: 'PO-2024-002',\r\n      supplier: 'Medical Consumables Co',\r\n      orderDate: '2024-12-05T15:30:00',\r\n      expectedDate: '2024-12-08T00:00:00',\r\n      status: 'PENDING',\r\n      items: [\r\n        {\r\n          itemId: '4',\r\n          itemName: 'Disposable Syringes 10ml',\r\n          quantity: 1000,\r\n          unitCost: 0.35,\r\n          totalCost: 350.00\r\n        }\r\n      ],\r\n      subtotal: 350.00,\r\n      tax: 35.00,\r\n      shipping: 15.00,\r\n      total: 400.00,\r\n      createdBy: 'Lisa Rodriguez',\r\n      notes: 'URGENT: Emergency stock replenishment'\r\n    }\r\n  ];\r\n\r\n  const mockStockMovements: StockMovement[] = [\r\n    {\r\n      id: '1',\r\n      itemId: '3',\r\n      itemName: 'Surgical Gloves - Size L',\r\n      type: 'ISSUE',\r\n      quantity: -50,\r\n      previousStock: 75,\r\n      newStock: 25,\r\n      reference: 'OR-REQ-001',\r\n      location: 'OR Storage - C1',\r\n      department: 'Operating Room',\r\n      userId: 'N001',\r\n      userName: 'Nurse Jane',\r\n      timestamp: '2024-12-05T16:45:00',\r\n      notes: 'Emergency surgery supplies'\r\n    },\r\n    {\r\n      id: '2',\r\n      itemId: '5',\r\n      itemName: 'Blood Collection Tubes',\r\n      type: 'RECEIPT',\r\n      quantity: 500,\r\n      previousStock: 345,\r\n      newStock: 845,\r\n      reference: 'PO-2024-003',\r\n      location: 'Laboratory - E1',\r\n      userId: 'L001',\r\n      userName: 'Lab Tech Mike',\r\n      timestamp: '2024-11-28T13:15:00',\r\n      notes: 'Regular restocking from purchase order'\r\n    }\r\n  ];\r\n\r\n  const filteredItems = [].filter /* TODO: API */(item => {\r\n    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         item.itemCode.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         item.description.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    const matchesCategory = categoryFilter === 'ALL' || item.category === categoryFilter;\r\n    const matchesStatus = statusFilter === 'ALL' || item.status === statusFilter;\r\n    const matchesLocation = locationFilter === 'ALL' || item.location.includes(locationFilter);\r\n    \r\n    return matchesSearch && matchesCategory && matchesStatus && matchesLocation;\r\n  });\r\n\r\n  const getStatusColor = (status: string) => {\r\n    const colors = {\r\n      'ACTIVE': '#10b981',\r\n      'LOW_STOCK': '#f59e0b',\r\n      'OUT_OF_STOCK': '#ef4444',\r\n      'EXPIRED': '#dc2626',\r\n      'DISCONTINUED': '#6b7280'\r\n    };\r\n    return colors[status as keyof typeof colors] || '#6b7280';\r\n  };\r\n\r\n  const getCategoryIcon = (category: string) => {\r\n    const icons = {\r\n      'MEDICATION': '💊',\r\n      'MEDICAL_DEVICE': '🩺',\r\n      'SURGICAL_SUPPLIES': '🔧',\r\n      'CONSUMABLES': '📦',\r\n      'EQUIPMENT': '⚕️',\r\n      'LABORATORY': '🧪',\r\n      'OTHER': '📋'\r\n    };\r\n    return icons[category as keyof typeof icons] || '📋';\r\n  };\r\n\r\n  const ItemModal = () => (\r\n    <div style={{\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      zIndex: 1000,\r\n      padding: '1rem'\r\n    }}>\r\n      <div style={{\r\n        backgroundColor: 'white',\r\n        borderRadius: '12px',\r\n        padding: '2rem',\r\n        maxWidth: '800px',\r\n        width: '100%',\r\n        maxHeight: '90vh',\r\n        overflowY: 'auto'\r\n      }}>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem' }}>\r\n          <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n            Item Details\r\n          </h2>\r\n          <button\r\n            onClick={() => setShowItemModal(false)}\r\n            style={{\r\n              background: 'none',\r\n              border: 'none',\r\n              fontSize: '1.5rem',\r\n              cursor: 'pointer',\r\n              color: '#6b7280'\r\n            }}\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n\r\n        {selectedItem && (\r\n          <div style={{ display: 'grid', gap: '1.5rem' }}>\r\n            {/* Basic Info */}\r\n            <div>\r\n              <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '1rem' }}>\r\n                <span style={{ fontSize: '2rem' }}>{getCategoryIcon(selectedItem.category)}</span>\r\n                <div>\r\n                  <h3 style={{ fontSize: '1.5rem', fontWeight: '600', color: '#1f2937', margin: 0 }}>\r\n                    {selectedItem.name}\r\n                  </h3>\r\n                  <p style={{ color: '#6b7280', margin: 0 }}>\r\n                    {selectedItem.itemCode} • {selectedItem.description}\r\n                  </p>\r\n                </div>\r\n                <span style={{\r\n                  marginLeft: 'auto',\r\n                  padding: '0.5rem 1rem',\r\n                  borderRadius: '9999px',\r\n                  fontSize: '0.875rem',\r\n                  fontWeight: '600',\r\n                  color: 'white',\r\n                  backgroundColor: getStatusColor(selectedItem.status)\r\n                }}>\r\n                  {selectedItem.status.replace('_', ' ')}\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Stock Information */}\r\n            <div>\r\n              <h4 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Stock Information\r\n              </h4>\r\n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>\r\n                <div>\r\n                  <span style={{ fontWeight: '600' }}>Current Stock:</span>\r\n                  <span style={{ \r\n                    marginLeft: '0.5rem',\r\n                    fontSize: '1.125rem',\r\n                    fontWeight: 'bold',\r\n                    color: selectedItem.currentStock <= selectedItem.reorderPoint ? '#ef4444' : '#10b981'\r\n                  }}>\r\n                    {selectedItem.currentStock} {selectedItem.unitOfMeasure}\r\n                  </span>\r\n                </div>\r\n                <div><span style={{ fontWeight: '600' }}>Min Level:</span> {selectedItem.minStockLevel} {selectedItem.unitOfMeasure}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Max Level:</span> {selectedItem.maxStockLevel} {selectedItem.unitOfMeasure}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Reorder Point:</span> {selectedItem.reorderPoint} {selectedItem.unitOfMeasure}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Unit Cost:</span> ${selectedItem.unitCost.toFixed(2)}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Total Value:</span> ${selectedItem.totalValue.toFixed(2)}</div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Location & Storage */}\r\n            <div>\r\n              <h4 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Location & Storage\r\n              </h4>\r\n              <div style={{ display: 'grid', gap: '0.5rem' }}>\r\n                <div><span style={{ fontWeight: '600' }}>Location:</span> {selectedItem.location}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Storage Conditions:</span> {selectedItem.storageConditions}</div>\r\n                {selectedItem.expiryDate && (\r\n                  <div><span style={{ fontWeight: '600' }}>Expiry Date:</span> {new Date(selectedItem.expiryDate).toLocaleDateString()}</div>\r\n                )}\r\n                {selectedItem.batchNumber && (\r\n                  <div><span style={{ fontWeight: '600' }}>Batch Number:</span> {selectedItem.batchNumber}</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Supplier & Manufacturing */}\r\n            <div>\r\n              <h4 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Supplier & Manufacturing\r\n              </h4>\r\n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '0.5rem' }}>\r\n                <div><span style={{ fontWeight: '600' }}>Manufacturer:</span> {selectedItem.manufacturer}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Supplier:</span> {selectedItem.supplier}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Lead Time:</span> {selectedItem.leadTime} days</div>\r\n                <div><span style={{ fontWeight: '600' }}>Usage Rate:</span> {selectedItem.usageRate}/day</div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Usage Information */}\r\n            <div>\r\n              <h4 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Usage Information\r\n              </h4>\r\n              <div style={{ display: 'grid', gap: '0.5rem' }}>\r\n                <div><span style={{ fontWeight: '600' }}>Last Restocked:</span> {new Date(selectedItem.lastRestocked).toLocaleString()}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Last Used:</span> {new Date(selectedItem.lastUsed).toLocaleString()}</div>\r\n                <div style={{ display: 'flex', gap: '1rem' }}>\r\n                  {selectedItem.isControlled && (\r\n                    <span style={{\r\n                      padding: '0.25rem 0.5rem',\r\n                      backgroundColor: '#fef2f2',\r\n                      color: '#dc2626',\r\n                      borderRadius: '4px',\r\n                      fontSize: '0.75rem',\r\n                      fontWeight: '600'\r\n                    }}>\r\n                      CONTROLLED\r\n                    </span>\r\n                  )}\r\n                  {selectedItem.requiresPrescription && (\r\n                    <span style={{\r\n                      padding: '0.25rem 0.5rem',\r\n                      backgroundColor: '#fef3c7',\r\n                      color: '#92400e',\r\n                      borderRadius: '4px',\r\n                      fontSize: '0.75rem',\r\n                      fontWeight: '600'\r\n                    }}>\r\n                      PRESCRIPTION REQUIRED\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Notes */}\r\n            {selectedItem.notes && (\r\n              <div>\r\n                <h4 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                  Notes\r\n                </h4>\r\n                <p style={{\r\n                  padding: '1rem',\r\n                  backgroundColor: '#f9fafb',\r\n                  borderRadius: '8px',\r\n                  border: '1px solid #e5e7eb',\r\n                  margin: 0\r\n                }}>\r\n                  {selectedItem.notes}\r\n                </p>\r\n              </div>\r\n            )}\r\n\r\n            <div style={{ display: 'flex', gap: '1rem', justifyContent: 'flex-end', paddingTop: '1rem', borderTop: '1px solid #e5e7eb' }}>\r\n              <Button variant=\"primary\">\r\n                📝 Edit Item\r\n              </Button>\r\n              <Button variant=\"outline\">\r\n                📦 Create Order\r\n              </Button>\r\n              <Button variant=\"secondary\" onClick={() => setShowItemModal(false)}>\r\n                Close\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Layout>\r\n      <div style={{ maxWidth: '1400px', margin: '0 auto' }}>\r\n        {/* Header */}\r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'space-between', \r\n          alignItems: 'center', \r\n          marginBottom: '2rem' \r\n        }}>\r\n          <div>\r\n            <h1 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n              Inventory Management\r\n            </h1>\r\n            <p style={{ color: '#6b7280', fontSize: '1rem' }}>\r\n              Manage medical supplies, equipment, and medication inventory\r\n            </p>\r\n          </div>\r\n          <div style={{ display: 'flex', gap: '0.5rem' }}>\r\n            <Button variant=\"primary\" onClick={() => setShowNewItemModal(true)}>\r\n              ➕ Add Item\r\n            </Button>\r\n            <Button variant=\"outline\">\r\n              📊 Reports\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Quick Stats */}\r\n        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem', marginBottom: '2rem' }}>\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '1rem' }}>\r\n              <div style={{ fontSize: '2rem', color: '#10b981', marginBottom: '0.5rem' }}>📦</div>\r\n              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n                {0}\r\n              </div>\r\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Total Items</div>\r\n            </div>\r\n          </Card>\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '1rem' }}>\r\n              <div style={{ fontSize: '2rem', color: '#f59e0b', marginBottom: '0.5rem' }}>⚠️</div>\r\n              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n                {[].filter /* TODO: API */(item => item.status === 'LOW_STOCK').length}\r\n              </div>\r\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Low Stock</div>\r\n            </div>\r\n          </Card>\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '1rem' }}>\r\n              <div style={{ fontSize: '2rem', color: '#ef4444', marginBottom: '0.5rem' }}>🚫</div>\r\n              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n                {[].filter /* TODO: API */(item => item.status === 'OUT_OF_STOCK').length}\r\n              </div>\r\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Out of Stock</div>\r\n            </div>\r\n          </Card>\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '1rem' }}>\r\n              <div style={{ fontSize: '2rem', color: '#3b82f6', marginBottom: '0.5rem' }}>💰</div>\r\n              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n                ${[].reduce /* TODO: API */((sum, item) => sum + item.totalValue, 0).toLocaleString()}\r\n              </div>\r\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Total Value</div>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Tab Navigation */}\r\n        <div style={{ marginBottom: '2rem' }}>\r\n          <div style={{ display: 'flex', gap: '0.5rem', borderBottom: '1px solid #e5e7eb' }}>\r\n            {[\r\n              { key: 'inventory', label: '📦 Inventory', desc: 'Stock Items' },\r\n              { key: 'orders', label: '📋 Orders', desc: 'Purchase Orders' },\r\n              { key: 'movements', label: '📈 Movements', desc: 'Stock Activity' },\r\n              { key: 'suppliers', label: '🏪 Suppliers', desc: 'Vendor Management' },\r\n              { key: 'analytics', label: '📊 Analytics', desc: 'Inventory Reports' },\r\n              { key: 'alerts', label: '🚨 Alerts', desc: 'Stock Alerts' }\r\n            ].map(tab => (\r\n              <button\r\n                key={tab.key}\r\n                onClick={() => setCurrentTab(tab.key as string)}\r\n                style={{\r\n                  padding: '1rem 1.5rem',\r\n                  border: 'none',\r\n                  background: 'none',\r\n                  fontSize: '1rem',\r\n                  fontWeight: '500',\r\n                  color: currentTab === tab.key ? '#667eea' : '#6b7280',\r\n                  borderBottom: currentTab === tab.key ? '2px solid #667eea' : '2px solid transparent',\r\n                  cursor: 'pointer',\r\n                  transition: 'all 0.2s ease'\r\n                }}\r\n              >\r\n                <div>{tab.label}</div>\r\n                <div style={{ fontSize: '0.75rem', opacity: 0.8 }}>\r\n                  {tab.desc}\r\n                </div>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Inventory Tab */}\r\n        {currentTab === 'inventory' && (\r\n          <>\r\n            {/* Search and Filters */}\r\n            <Card style={{ marginBottom: '1.5rem' }}>\r\n              <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                <div style={{ flex: 1, minWidth: '250px' }}>\r\n                  <Input\r\n                    placeholder=\"Search items...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                  />\r\n                </div>\r\n                \r\n                <select\r\n                  value={categoryFilter}\r\n                  onChange={(e) => setCategoryFilter(e.target.value)}\r\n                  style={{\r\n                    padding: '0.75rem 1rem',\r\n                    border: '1px solid #d1d5db',\r\n                    borderRadius: '8px',\r\n                    fontSize: '1rem',\r\n                    backgroundColor: 'white',\r\n                    minWidth: '150px'\r\n                  }}\r\n                >\r\n                  <option value=\"ALL\">All Categories</option>\r\n                  <option value=\"MEDICATION\">Medication</option>\r\n                  <option value=\"MEDICAL_DEVICE\">Medical Device</option>\r\n                  <option value=\"SURGICAL_SUPPLIES\">Surgical Supplies</option>\r\n                  <option value=\"CONSUMABLES\">Consumables</option>\r\n                  <option value=\"EQUIPMENT\">Equipment</option>\r\n                  <option value=\"LABORATORY\">Laboratory</option>\r\n                </select>\r\n\r\n                <select\r\n                  value={statusFilter}\r\n                  onChange={(e) => setStatusFilter(e.target.value)}\r\n                  style={{\r\n                    padding: '0.75rem 1rem',\r\n                    border: '1px solid #d1d5db',\r\n                    borderRadius: '8px',\r\n                    fontSize: '1rem',\r\n                    backgroundColor: 'white',\r\n                    minWidth: '120px'\r\n                  }}\r\n                >\r\n                  <option value=\"ALL\">All Status</option>\r\n                  <option value=\"ACTIVE\">Active</option>\r\n                  <option value=\"LOW_STOCK\">Low Stock</option>\r\n                  <option value=\"OUT_OF_STOCK\">Out of Stock</option>\r\n                  <option value=\"EXPIRED\">Expired</option>\r\n                </select>\r\n\r\n                <Button variant=\"outline\">\r\n                  🔄 Refresh\r\n                </Button>\r\n              </div>\r\n            </Card>\r\n\r\n            {/* Items List */}\r\n            <div style={{ display: 'grid', gap: '1rem' }}>\r\n              {filteredItems.map(item => (\r\n                <Card key={item.id} style={{\r\n                  cursor: 'pointer',\r\n                  border: item.status === 'LOW_STOCK' ? '2px solid #f59e0b' : \r\n                         item.status === 'OUT_OF_STOCK' ? '2px solid #ef4444' : '1px solid #e5e7eb'\r\n                }}>\r\n                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n                    <div style={{ flex: 1, display: 'flex', gap: '1rem' }}>\r\n                      <span style={{ fontSize: '2rem', marginTop: '0.25rem' }}>\r\n                        {getCategoryIcon(item.category)}\r\n                      </span>\r\n                      <div style={{ flex: 1 }}>\r\n                        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', marginBottom: '0.5rem' }}>\r\n                          <h3 style={{ fontSize: '1.125rem', fontWeight: '600', color: '#1f2937', margin: 0 }}>\r\n                            {item.name}\r\n                          </h3>\r\n                          <span style={{\r\n                            padding: '0.25rem 0.75rem',\r\n                            borderRadius: '9999px',\r\n                            fontSize: '0.75rem',\r\n                            fontWeight: '600',\r\n                            color: 'white',\r\n                            backgroundColor: getStatusColor(item.status)\r\n                          }}>\r\n                            {item.status.replace('_', ' ')}\r\n                          </span>\r\n                          {item.isControlled && (\r\n                            <span style={{\r\n                              padding: '0.125rem 0.5rem',\r\n                              borderRadius: '4px',\r\n                              fontSize: '0.625rem',\r\n                              fontWeight: '600',\r\n                              color: '#dc2626',\r\n                              backgroundColor: '#fef2f2',\r\n                              border: '1px solid #fecaca'\r\n                            }}>\r\n                              CONTROLLED\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                        \r\n                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: '0.5rem', marginBottom: '0.5rem' }}>\r\n                          <div style={{ color: '#6b7280' }}>\r\n                            <span style={{ fontWeight: '600' }}>Code:</span> {item.itemCode}\r\n                          </div>\r\n                          <div style={{ color: '#6b7280' }}>\r\n                            <span style={{ fontWeight: '600' }}>Stock:</span>\r\n                            <span style={{ \r\n                              marginLeft: '0.25rem',\r\n                              fontWeight: 'bold',\r\n                              color: item.currentStock <= item.reorderPoint ? '#ef4444' : '#10b981'\r\n                            }}>\r\n                              {item.currentStock}\r\n                            </span> {item.unitOfMeasure}\r\n                          </div>\r\n                          <div style={{ color: '#6b7280' }}>\r\n                            <span style={{ fontWeight: '600' }}>Value:</span> ${item.totalValue.toFixed(2)}\r\n                          </div>\r\n                          <div style={{ color: '#6b7280' }}>\r\n                            <span style={{ fontWeight: '600' }}>Location:</span> {item.location}\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        <p style={{ color: '#6b7280', fontSize: '0.875rem', margin: 0 }}>\r\n                          {item.description}\r\n                        </p>\r\n\r\n                        {item.expiryDate && (\r\n                          <div style={{ \r\n                            marginTop: '0.5rem',\r\n                            fontSize: '0.75rem',\r\n                            color: new Date(item.expiryDate) < new Date(Date.now() + 90 * 24 * 60 * 60 * 1000) ? '#ef4444' : '#6b7280'\r\n                          }}>\r\n                            Expires: {new Date(item.expiryDate).toLocaleDateString()}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', gap: '0.5rem', marginLeft: '1rem' }}>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => {\r\n                          setSelectedItem(item);\r\n                          setShowItemModal(true);\r\n                        }}\r\n                      >\r\n                        View Details\r\n                      </Button>\r\n                      {(item.status === 'LOW_STOCK' || item.status === 'OUT_OF_STOCK') && (\r\n                        <Button size=\"sm\" variant=\"primary\">\r\n                          🛒 Reorder\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* Other tabs placeholder */}\r\n        {['orders', 'movements', 'suppliers', 'analytics', 'alerts'].includes(currentTab) && (\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>\r\n                {currentTab === 'orders' && '📋'}\r\n                {currentTab === 'movements' && '📈'}\r\n                {currentTab === 'suppliers' && '🏪'}\r\n                {currentTab === 'analytics' && '📊'}\r\n                {currentTab === 'alerts' && '🚨'}\r\n              </div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                {currentTab === 'orders' && 'Purchase Orders Management'}\r\n                {currentTab === 'movements' && 'Stock Movement History'}\r\n                {currentTab === 'suppliers' && 'Supplier Management'}\r\n                {currentTab === 'analytics' && 'Inventory Analytics & Reports'}\r\n                {currentTab === 'alerts' && 'Stock Alerts & Notifications'}\r\n              </h3>\r\n              <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\r\n                {currentTab === 'orders' && 'Create, track, and manage purchase orders for inventory restocking and new item procurement.'}\r\n                {currentTab === 'movements' && 'View detailed history of all stock movements including receipts, issues, transfers, and adjustments.'}\r\n                {currentTab === 'suppliers' && 'Manage supplier information, contracts, performance metrics, and vendor relationships.'}\r\n                {currentTab === 'analytics' && 'Analyze inventory turnover, usage patterns, cost trends, and optimize stock levels.'}\r\n                {currentTab === 'alerts' && 'Configure and monitor automated alerts for low stock, expiry dates, and reorder points.'}\r\n              </p>\r\n              <Button variant=\"primary\">\r\n                {currentTab === 'orders' && '📋 View Orders'}\r\n                {currentTab === 'movements' && '📈 View Movement History'}\r\n                {currentTab === 'suppliers' && '🏪 Manage Suppliers'}\r\n                {currentTab === 'analytics' && '📊 View Reports'}\r\n                {currentTab === 'alerts' && '🚨 Configure Alerts'}\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Item Detail Modal */}\r\n        {showItemModal && <ItemModal />}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default InventoryPage;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\ipd\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'UpdateBedStatusDto' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 48,
        "column": 59,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 77
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'fetchBeds' and 'fetchWards'. Either include them or remove the dependency array.",
        "line": 91,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 91,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [user, setUser, fetchWards, fetchBeds]",
            "fix": { "range": [2618, 2633], "text": "[user, setUser, fetchWards, fetchBeds]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Text,\r\n  Group,\r\n  Badge,\r\n  SimpleGrid,\r\n  Stack,\r\n  Button,\r\n  Title,\r\n  Card,\r\n  TextInput,\r\n  Select,\r\n  LoadingOverlay,\r\n  Alert,\r\n  ActionIcon,\r\n  Menu,\r\n  Tabs,\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport { notifications } from '@mantine/notifications';\r\nimport {\r\n  IconPlus,\r\n  IconSearch,\r\n  IconBedFilled,\r\n  IconHome,\r\n  IconCheck,\r\n  IconX,\r\n  IconEdit,\r\n  IconEye,\r\n  IconDotsVertical,\r\n  IconAlertCircle,\r\n  IconSettings,\r\n  IconClock,\r\n} from '@tabler/icons-react';\r\nimport Layout from '../../components/shared/Layout';\r\nimport DataTable from '../../components/shared/DataTable';\r\nimport WardForm from '../../components/ipd/WardForm';\r\nimport BedForm from '../../components/ipd/BedForm';\r\nimport WardDetails from '../../components/ipd/WardDetails';\r\nimport { useAppStore } from '../../stores/appStore';\r\nimport { User, UserRole, TableColumn } from '../../types/common';\r\nimport ipdService from '../../services/ipd.service';\r\nimport type { CreateWardDto, UpdateWardDto, CreateBedDto, UpdateBedStatusDto, WardFilters, BedFilters } from '../../services/ipd.service';\r\n\r\nconst mockUser: User = {\r\n  id: '1',\r\n  username: 'admin',\r\n  email: 'admin@hospital.com',\r\n  firstName: 'Admin',\r\n  lastName: 'User',\r\n  role: UserRole.ADMIN,\r\n  permissions: [],\r\n  isActive: true,\r\n  tenantInfo: {\r\n    tenantId: 'T001',\r\n    tenantName: 'Main Hospital',\r\n  },\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nfunction IpdPage() {\r\n  const { user, setUser } = useAppStore();\r\n  const [wards, setWards] = useState<any[]>([]);\r\n  const [beds, setBeds] = useState<any[]>([]);\r\n  const [stats, setStats] = useState<any>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedWard, setSelectedWard] = useState<any>(null);\r\n  const [selectedBed, setSelectedBed] = useState<any>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [wardFilter, setWardFilter] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('');\r\n  const [activeTab, setActiveTab] = useState<string | null>('wards');\r\n\r\n  const [wardFormOpened, { open: openWardForm, close: closeWardForm }] = useDisclosure(false);\r\n  const [bedFormOpened, { open: openBedForm, close: closeBedForm }] = useDisclosure(false);\r\n  const [detailsOpened, { open: openDetails, close: closeDetails }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setUser(mockUser);\r\n    }\r\n    fetchWards();\r\n    fetchBeds();\r\n    fetchStats();\r\n  }, [user, setUser]);\r\n\r\n  const fetchWards = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const filters: WardFilters = {\r\n        page: 1,\r\n        limit: 100,\r\n      };\r\n\r\n      const response = await ipdService.getWards(filters);\r\n      if (response.success && response.data) {\r\n        let filteredWards = response.data.items;\r\n\r\n        // Apply search filter\r\n        if (searchQuery) {\r\n          filteredWards = filteredWards.filter(w =>\r\n            w.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n            (w.location && w.location.toLowerCase().includes(searchQuery.toLowerCase())) ||\r\n            (w.description && w.description.toLowerCase().includes(searchQuery.toLowerCase()))\r\n          );\r\n        }\r\n\r\n        setWards(filteredWards);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching wards:', error);\r\n      notifications.show({\r\n        title: 'Error Loading Wards',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to fetch wards. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchBeds = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const filters: BedFilters = {\r\n        page: 1,\r\n        limit: 100,\r\n      };\r\n      if (wardFilter) filters.wardId = wardFilter;\r\n      if (statusFilter) filters.status = statusFilter;\r\n\r\n      const response = await ipdService.getBeds(filters);\r\n      if (response.success && response.data) {\r\n        let filteredBeds = response.data.items;\r\n\r\n        // Apply search filter\r\n        if (searchQuery) {\r\n          filteredBeds = filteredBeds.filter(b =>\r\n            b.bedNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n            (b.ward && b.ward.name.toLowerCase().includes(searchQuery.toLowerCase()))\r\n          );\r\n        }\r\n\r\n        setBeds(filteredBeds);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching beds:', error);\r\n      notifications.show({\r\n        title: 'Error Loading Beds',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to fetch beds. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await ipdService.getStats();\r\n      if (response.success && response.data) {\r\n        setStats(response.data);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching stats:', error);\r\n      notifications.show({\r\n        title: 'Error Loading Statistics',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to fetch IPD statistics. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCreateWard = async (data: CreateWardDto) => {\r\n    try {\r\n      const response = await ipdService.createWard(data);\r\n      \r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Ward created successfully',\r\n          color: 'green',\r\n          autoClose: 3000,\r\n        });\r\n        \r\n        closeWardForm();\r\n        fetchWards();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error creating ward:', error);\r\n      notifications.show({\r\n        title: 'Error Creating Ward',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to create ward. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleUpdateWard = async (data: UpdateWardDto) => {\r\n    if (!selectedWard) return;\r\n\r\n    try {\r\n      const response = await ipdService.updateWard(selectedWard.id, data);\r\n      \r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Ward updated successfully',\r\n          color: 'green',\r\n          autoClose: 3000,\r\n        });\r\n        \r\n        closeWardForm();\r\n        setSelectedWard(null);\r\n        fetchWards();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error updating ward:', error);\r\n      notifications.show({\r\n        title: 'Error Updating Ward',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to update ward. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleCreateBed = async (data: CreateBedDto) => {\r\n    try {\r\n      const response = await ipdService.createBed(data);\r\n      \r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Bed created successfully',\r\n          color: 'green',\r\n          autoClose: 3000,\r\n        });\r\n        \r\n        closeBedForm();\r\n        fetchBeds();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error creating bed:', error);\r\n      notifications.show({\r\n        title: 'Error Creating Bed',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to create bed. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleUpdateBedStatus = async (bed: any, status: string) => {\r\n    try {\r\n      const response = await ipdService.updateBedStatus(bed.id, { status: status as any });\r\n      \r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Bed status updated successfully',\r\n          color: 'green',\r\n          autoClose: 3000,\r\n        });\r\n        \r\n        fetchBeds();\r\n        fetchStats();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error updating bed status:', error);\r\n      notifications.show({\r\n        title: 'Error Updating Status',\r\n        message: error?.response?.data?.message || error?.message || 'Failed to update bed status. Please try again.',\r\n        color: 'red',\r\n        autoClose: 5000,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleViewWard = (ward: any) => {\r\n    setSelectedWard(ward);\r\n    openDetails();\r\n  };\r\n\r\n  const handleEditWard = (ward: any) => {\r\n    setSelectedWard(ward);\r\n    openWardForm();\r\n  };\r\n\r\n  const handleNewWard = () => {\r\n    setSelectedWard(null);\r\n    openWardForm();\r\n  };\r\n\r\n  const handleNewBed = () => {\r\n    setSelectedBed(null);\r\n    openBedForm();\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'AVAILABLE':\r\n        return 'green';\r\n      case 'OCCUPIED':\r\n        return 'red';\r\n      case 'MAINTENANCE':\r\n        return 'yellow';\r\n      case 'RESERVED':\r\n        return 'blue';\r\n      default:\r\n        return 'gray';\r\n    }\r\n  };\r\n\r\n  const wardColumns: TableColumn[] = [\r\n    {\r\n      key: 'name',\r\n      title: 'Ward Name',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const ward = record as any;\r\n        return (\r\n          <div>\r\n            <Text fw={600}>{ward.name}</Text>\r\n            <Text size=\"xs\" c=\"dimmed\">{ward.location || 'No location'}</Text>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'capacity',\r\n      title: 'Capacity',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const ward = record as any;\r\n        return (\r\n          <Text fw={500}>{ward.capacity} beds</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'beds',\r\n      title: 'Beds',\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const ward = record as any;\r\n        const totalBeds = ward._count?.beds || 0;\r\n        const occupied = ward.beds?.filter((b: any) => b.status === 'OCCUPIED').length || 0;\r\n        const available = ward.beds?.filter((b: any) => b.status === 'AVAILABLE').length || 0;\r\n        return (\r\n          <div>\r\n            <Text size=\"sm\">Total: {totalBeds}</Text>\r\n            <Group gap=\"xs\">\r\n              <Badge size=\"xs\" color=\"green\">Avail: {available}</Badge>\r\n              <Badge size=\"xs\" color=\"red\">Occup: {occupied}</Badge>\r\n            </Group>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'floor',\r\n      title: 'Floor',\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const ward = record as any;\r\n        return (\r\n          <Text size=\"sm\">{ward.floor || '-'}</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'status',\r\n      title: 'Status',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const ward = record as any;\r\n        return (\r\n          <Badge color={ward.isActive ? 'green' : 'red'}>\r\n            {ward.isActive ? 'Active' : 'Inactive'}\r\n          </Badge>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'actions',\r\n      title: 'Actions',\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const ward = record as any;\r\n        return (\r\n          <Group gap=\"xs\">\r\n            <ActionIcon\r\n              variant=\"subtle\"\r\n              onClick={() => handleViewWard(ward)}\r\n            >\r\n              <IconEye size={16} />\r\n            </ActionIcon>\r\n            <ActionIcon\r\n              variant=\"subtle\"\r\n              onClick={() => handleEditWard(ward)}\r\n            >\r\n              <IconEdit size={16} />\r\n            </ActionIcon>\r\n            <Menu position=\"bottom-end\">\r\n              <Menu.Target>\r\n                <ActionIcon variant=\"subtle\">\r\n                  <IconDotsVertical size={16} />\r\n                </ActionIcon>\r\n              </Menu.Target>\r\n              <Menu.Dropdown>\r\n                <Menu.Item\r\n                  leftSection={<IconEye size={14} />}\r\n                  onClick={() => handleViewWard(ward)}\r\n                >\r\n                  View Details\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                  leftSection={<IconEdit size={14} />}\r\n                  onClick={() => handleEditWard(ward)}\r\n                >\r\n                  Edit Ward\r\n                </Menu.Item>\r\n              </Menu.Dropdown>\r\n            </Menu>\r\n          </Group>\r\n        );\r\n      }\r\n    }\r\n  ];\r\n\r\n  const bedColumns: TableColumn[] = [\r\n    {\r\n      key: 'bedNumber',\r\n      title: 'Bed Number',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const bed = record as any;\r\n        return (\r\n          <Text fw={600}>{bed.bedNumber}</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'ward',\r\n      title: 'Ward',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const bed = record as any;\r\n        return (\r\n          <div>\r\n            <Text fw={500}>{bed.ward?.name || 'N/A'}</Text>\r\n            <Text size=\"xs\" c=\"dimmed\">{bed.ward?.location || ''}</Text>\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'status',\r\n      title: 'Status',\r\n      sortable: true,\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const bed = record as any;\r\n        return (\r\n          <Badge color={getStatusColor(bed.status)}>\r\n            {bed.status}\r\n          </Badge>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'description',\r\n      title: 'Description',\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const bed = record as any;\r\n        return (\r\n          <Text size=\"sm\">{bed.description || '-'}</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      key: 'actions',\r\n      title: 'Actions',\r\n      render: (value: unknown, record: Record<string, unknown>) => {\r\n        const bed = record as any;\r\n        return (\r\n          <Menu position=\"bottom-end\">\r\n            <Menu.Target>\r\n              <ActionIcon variant=\"subtle\">\r\n                <IconDotsVertical size={16} />\r\n              </ActionIcon>\r\n            </Menu.Target>\r\n            <Menu.Dropdown>\r\n              <Menu.Label>Change Status</Menu.Label>\r\n              <Menu.Item\r\n                leftSection={<IconCheck size={14} />}\r\n                onClick={() => handleUpdateBedStatus(bed, 'AVAILABLE')}\r\n                disabled={bed.status === 'AVAILABLE'}\r\n              >\r\n                Mark Available\r\n              </Menu.Item>\r\n              <Menu.Item\r\n                leftSection={<IconX size={14} />}\r\n                onClick={() => handleUpdateBedStatus(bed, 'OCCUPIED')}\r\n                disabled={bed.status === 'OCCUPIED'}\r\n              >\r\n                Mark Occupied\r\n              </Menu.Item>\r\n              <Menu.Item\r\n                leftSection={<IconSettings size={14} />}\r\n                onClick={() => handleUpdateBedStatus(bed, 'MAINTENANCE')}\r\n                disabled={bed.status === 'MAINTENANCE'}\r\n              >\r\n                Mark Maintenance\r\n              </Menu.Item>\r\n              <Menu.Item\r\n                leftSection={<IconClock size={14} />}\r\n                onClick={() => handleUpdateBedStatus(bed, 'RESERVED')}\r\n                disabled={bed.status === 'RESERVED'}\r\n              >\r\n                Mark Reserved\r\n              </Menu.Item>\r\n            </Menu.Dropdown>\r\n          </Menu>\r\n        );\r\n      }\r\n    }\r\n  ];\r\n\r\n  const layoutUser = user || [];\r\n  const userForLayout = {\r\n    id: layoutUser.id,\r\n    name: `${layoutUser.firstName} ${layoutUser.lastName}`,\r\n    email: layoutUser.email,\r\n    role: layoutUser.role,\r\n  };\r\n\r\n  return (\r\n    <Layout user={userForLayout} notifications={0} onLogout={() => {}}>\r\n      <Container size=\"xl\" py=\"xl\">\r\n        <Stack gap=\"lg\">\r\n          {/* Header */}\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Title order={2}>IPD Management</Title>\r\n              <Text c=\"dimmed\" size=\"sm\">\r\n                Manage in-patient wards and beds\r\n              </Text>\r\n            </div>\r\n            <Group>\r\n              <Button\r\n                leftSection={<IconHome size={16} />}\r\n                onClick={handleNewWard}\r\n              >\r\n                New Ward\r\n              </Button>\r\n              <Button\r\n                leftSection={<IconBedFilled size={16} />}\r\n                onClick={handleNewBed}\r\n              >\r\n                New Bed\r\n              </Button>\r\n            </Group>\r\n          </Group>\r\n\r\n          {/* Statistics Cards */}\r\n          <SimpleGrid cols={{ base: 1, sm: 2, md: 5 }}>\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Total Wards\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stats?.wards?.total || 0}\r\n                  </Text>\r\n                </div>\r\n                <IconHome size={32} color=\"#228be6\" />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Total Beds\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\">\r\n                    {stats?.beds?.total || 0}\r\n                  </Text>\r\n                </div>\r\n                <IconBedFilled size={32} color=\"#228be6\" />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Available\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\" c=\"green\">\r\n                    {stats?.beds?.available || 0}\r\n                  </Text>\r\n                </div>\r\n                <IconCheck size={32} color=\"#40c057\" />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Occupied\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\" c=\"red\">\r\n                    {stats?.beds?.occupied || 0}\r\n                  </Text>\r\n                </div>\r\n                <IconX size={32} color=\"#fa5252\" />\r\n              </Group>\r\n            </Card>\r\n\r\n            <Card withBorder padding=\"lg\">\r\n              <Group justify=\"space-between\">\r\n                <div>\r\n                  <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\r\n                    Occupancy Rate\r\n                  </Text>\r\n                  <Text fw={700} size=\"xl\" c=\"blue\">\r\n                    {stats?.occupancyRate || 0}%\r\n                  </Text>\r\n                </div>\r\n                <IconBedFilled size={32} color=\"#228be6\" />\r\n              </Group>\r\n            </Card>\r\n          </SimpleGrid>\r\n\r\n          {/* Tabs */}\r\n          <Tabs value={activeTab} onChange={setActiveTab}>\r\n            <Tabs.List>\r\n              <Tabs.Tab value=\"wards\" leftSection={<IconHome size={16} />}>\r\n                Wards\r\n              </Tabs.Tab>\r\n              <Tabs.Tab value=\"beds\" leftSection={<IconBedFilled size={16} />}>\r\n                Beds\r\n              </Tabs.Tab>\r\n            </Tabs.List>\r\n\r\n            {/* Wards Tab */}\r\n            <Tabs.Panel value=\"wards\" pt=\"md\">\r\n              <Stack gap=\"md\">\r\n                {/* Filters */}\r\n                <Paper withBorder p=\"md\">\r\n                  <Grid>\r\n                    <Grid.Col span={{ base: 12, sm: 6, md: 4 }}>\r\n                      <TextInput\r\n                        placeholder=\"Search wards...\"\r\n                        leftSection={<IconSearch size={16} />}\r\n                        value={searchQuery}\r\n                        onChange={(e) => setSearchQuery(e.target.value)}\r\n                      />\r\n                    </Grid.Col>\r\n                    <Grid.Col span={{ base: 12, sm: 6, md: 4 }}>\r\n                      <Button fullWidth onClick={fetchWards}>\r\n                        Apply Filters\r\n                      </Button>\r\n                    </Grid.Col>\r\n                  </Grid>\r\n                </Paper>\r\n\r\n                {/* Wards Table */}\r\n                <Paper withBorder>\r\n                  <LoadingOverlay visible={loading} />\r\n                  {wards.length === 0 && !loading ? (\r\n                    <Alert icon={<IconAlertCircle size={16} />} title=\"No wards found\" color=\"blue\">\r\n                      No wards match your current filters. Try adjusting your search criteria.\r\n                    </Alert>\r\n                  ) : (\r\n                    <DataTable\r\n                      columns={wardColumns}\r\n                      data={wards}\r\n                      loading={loading}\r\n                    />\r\n                  )}\r\n                </Paper>\r\n              </Stack>\r\n            </Tabs.Panel>\r\n\r\n            {/* Beds Tab */}\r\n            <Tabs.Panel value=\"beds\" pt=\"md\">\r\n              <Stack gap=\"md\">\r\n                {/* Filters */}\r\n                <Paper withBorder p=\"md\">\r\n                  <Grid>\r\n                    <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                      <TextInput\r\n                        placeholder=\"Search beds...\"\r\n                        leftSection={<IconSearch size={16} />}\r\n                        value={searchQuery}\r\n                        onChange={(e) => setSearchQuery(e.target.value)}\r\n                      />\r\n                    </Grid.Col>\r\n                    <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                      <Select\r\n                        placeholder=\"Filter by ward\"\r\n                        data={[\r\n                          { value: '', label: 'All Wards' },\r\n                          ...wards.map(w => ({ value: w.id, label: w.name })),\r\n                        ]}\r\n                        value={wardFilter}\r\n                        onChange={(value) => setWardFilter(value || '')}\r\n                        clearable\r\n                      />\r\n                    </Grid.Col>\r\n                    <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                      <Select\r\n                        placeholder=\"Filter by status\"\r\n                        data={[\r\n                          { value: '', label: 'All Status' },\r\n                          { value: 'AVAILABLE', label: 'Available' },\r\n                          { value: 'OCCUPIED', label: 'Occupied' },\r\n                          { value: 'MAINTENANCE', label: 'Maintenance' },\r\n                          { value: 'RESERVED', label: 'Reserved' },\r\n                        ]}\r\n                        value={statusFilter}\r\n                        onChange={(value) => setStatusFilter(value || '')}\r\n                        clearable\r\n                      />\r\n                    </Grid.Col>\r\n                    <Grid.Col span={{ base: 12, sm: 6, md: 3 }}>\r\n                      <Button fullWidth onClick={fetchBeds}>\r\n                        Apply Filters\r\n                      </Button>\r\n                    </Grid.Col>\r\n                  </Grid>\r\n                </Paper>\r\n\r\n                {/* Beds Table */}\r\n                <Paper withBorder>\r\n                  <LoadingOverlay visible={loading} />\r\n                  {beds.length === 0 && !loading ? (\r\n                    <Alert icon={<IconAlertCircle size={16} />} title=\"No beds found\" color=\"blue\">\r\n                      No beds match your current filters. Try adjusting your search criteria.\r\n                    </Alert>\r\n                  ) : (\r\n                    <DataTable\r\n                      columns={bedColumns}\r\n                      data={beds}\r\n                      loading={loading}\r\n                    />\r\n                  )}\r\n                </Paper>\r\n              </Stack>\r\n            </Tabs.Panel>\r\n          </Tabs>\r\n        </Stack>\r\n      </Container>\r\n\r\n      {/* Ward Form Modal */}\r\n      <WardForm\r\n        opened={wardFormOpened}\r\n        onClose={closeWardForm}\r\n        ward={selectedWard}\r\n        onSubmit={selectedWard ? handleUpdateWard : handleCreateWard}\r\n      />\r\n\r\n      {/* Bed Form Modal */}\r\n      <BedForm\r\n        opened={bedFormOpened}\r\n        onClose={closeBedForm}\r\n        bed={selectedBed}\r\n        onSubmit={handleCreateBed}\r\n      />\r\n\r\n      {/* Ward Details Modal */}\r\n      {selectedWard && (\r\n        <WardDetails\r\n          opened={detailsOpened}\r\n          onClose={closeDetails}\r\n          ward={selectedWard}\r\n          onEdit={handleEditWard}\r\n        />\r\n      )}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default IpdPage;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\lab-tests\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\login\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'parseError' is defined but never used.",
        "line": 68,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport Link from \"next/link\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport LoadingSpinner from '@/components/ui/LoadingSpinner';\r\n\r\ninterface LoginFormData {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n}\r\n\r\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\r\n\r\nexport default function Login() {\r\n  const router = useRouter();\r\n  const [isClient, setIsClient] = useState(false);\r\n  const [formData, setFormData] = useState<LoginFormData>({\r\n    email: '',\r\n    password: '',\r\n    rememberMe: false\r\n  });\r\n  \r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  \r\n  useEffect(() => {\r\n    setIsClient(true);\r\n  }, []);\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: type === 'checkbox' ? checked : value\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setSuccess('');\r\n    \r\n    if (!formData.email || !formData.password) {\r\n      setError('Please fill in all fields');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: formData.email,\r\n          password: formData.password\r\n        })\r\n      });\r\n\r\n      let result;\r\n      try {\r\n        result = await response.json();\r\n      } catch (parseError) {\r\n        throw new Error('Invalid response from server');\r\n      }\r\n\r\n      if (!response.ok) {\r\n        const errorMessage = result?.message || result?.error || `Login failed (${response.status})`;\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      // Store the access token and user info\r\n      // Backend returns { user: {...}, tokens: { accessToken, refreshToken } }\r\n      if (result.tokens && result.tokens.accessToken) {\r\n        localStorage.setItem('accessToken', result.tokens.accessToken);\r\n        localStorage.setItem('refreshToken', result.tokens.refreshToken);\r\n        localStorage.setItem('user', JSON.stringify(result.user));\r\n      } else if (result.accessToken) {\r\n        // Fallback for old format\r\n        localStorage.setItem('accessToken', result.accessToken);\r\n        localStorage.setItem('user', JSON.stringify(result.user));\r\n      }\r\n\r\n      setSuccess('Login successful! Redirecting...');\r\n      setTimeout(() => {\r\n        router.push('/dashboard');\r\n      }, 1500);\r\n    } catch (err) {\r\n      console.error('Login error details:', {\r\n        error: err,\r\n        apiUrl: API_BASE_URL,\r\n        formData: { ...formData, password: '[HIDDEN]' }\r\n      });\r\n\r\n      if (err instanceof Error) {\r\n        if (err.message.includes('fetch') || err.message.includes('network')) {\r\n          setError('Unable to connect to server. Please ensure the backend server is running and try again.');\r\n        } else if (err.message.includes('401')) {\r\n          setError('Invalid email or password. Please check your credentials.');\r\n        } else if (err.message.includes('500')) {\r\n          setError('Server error. Please try again later or contact support.');\r\n        } else {\r\n          setError(err.message);\r\n        }\r\n      } else {\r\n        setError('Login failed. Please try again.');\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Show loading state during hydration\r\n  if (!isClient) {\r\n    return <LoadingSpinner fullScreen message=\"Loading Login...\" />;\r\n  }\r\n  return (\r\n    <div \r\n      style={{ minHeight: \"100vh\", background: \"linear-gradient(135deg, #667eea 0%, #764ba2 100%)\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}\r\n      role=\"main\"\r\n      aria-label=\"Login page\"\r\n    >\r\n      <div style={{\r\n        background: \"rgba(255, 255, 255, 0.95)\",\r\n        padding: \"3rem\",\r\n        borderRadius: \"15px\",\r\n        boxShadow: \"0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)\",\r\n        width: \"100%\",\r\n        maxWidth: \"400px\",\r\n        backdropFilter: \"blur(10px)\"\r\n      }}>\r\n        <div style={{ textAlign: \"center\", marginBottom: \"2rem\" }}>\r\n          <Link href=\"/\" style={{ textDecoration: \"none\", color: \"#667eea\", fontSize: \"1.5rem\", fontWeight: \"bold\" }}>\r\n            HMS SAAS\r\n          </Link>\r\n          <h2 style={{ marginTop: \"1rem\", fontSize: \"1.8rem\", fontWeight: \"600\", color: \"#374151\" }}>\r\n            Sign In\r\n          </h2>\r\n          <p style={{ marginTop: \"0.5rem\", color: \"#6B7280\" }}>\r\n            Access your hospital management dashboard\r\n          </p>\r\n        </div>\r\n\r\n        {error && (\r\n          <div style={{\r\n            background: \"#fee2e2\",\r\n            color: \"#dc2626\",\r\n            padding: \"0.75rem\",\r\n            borderRadius: \"8px\",\r\n            marginBottom: \"1rem\",\r\n            fontSize: \"0.9rem\"\r\n          }}>\r\n            {error}\r\n          </div>\r\n        )}\r\n        \r\n        {success && (\r\n          <div style={{\r\n            background: \"#dcfce7\",\r\n            color: \"#16a34a\",\r\n            padding: \"0.75rem\",\r\n            borderRadius: \"8px\",\r\n            marginBottom: \"1rem\",\r\n            fontSize: \"0.9rem\"\r\n          }}>\r\n            {success}\r\n          </div>\r\n        )}\r\n\r\n        <form \r\n          onSubmit={handleSubmit} \r\n          style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}\r\n          aria-label=\"Login form\"\r\n        >\r\n          <div>\r\n            <label style={{ display: \"block\", marginBottom: \"0.5rem\", fontWeight: \"500\", color: \"#374151\" }}>\r\n              Email Address\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              id=\"email\"\r\n              value={formData.email}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Enter your email\"\r\n              aria-label=\"Email address\"\r\n              aria-required=\"true\"\r\n              autoComplete=\"email\"\r\n              style={{\r\n                width: \"100%\",\r\n                padding: \"0.75rem\",\r\n                border: \"1px solid #D1D5DB\",\r\n                borderRadius: \"8px\",\r\n                fontSize: \"1rem\",\r\n                outline: \"none\",\r\n                transition: \"border-color 0.2s\",\r\n                boxSizing: \"border-box\"\r\n              }}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label style={{ display: \"block\", marginBottom: \"0.5rem\", fontWeight: \"500\", color: \"#374151\" }}>\r\n              Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              id=\"password\"\r\n              value={formData.password}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Enter your password\"\r\n              aria-label=\"Password\"\r\n              aria-required=\"true\"\r\n              autoComplete=\"current-password\"\r\n              style={{\r\n                width: \"100%\",\r\n                padding: \"0.75rem\",\r\n                border: \"1px solid #D1D5DB\",\r\n                borderRadius: \"8px\",\r\n                fontSize: \"1rem\",\r\n                outline: \"none\",\r\n                transition: \"border-color 0.2s\",\r\n                boxSizing: \"border-box\"\r\n              }}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", fontSize: \"0.9rem\" }}>\r\n            <label style={{ display: \"flex\", alignItems: \"center\", gap: \"0.5rem\", color: \"#374151\" }}>\r\n              <input \r\n                type=\"checkbox\" \r\n                name=\"rememberMe\"\r\n                checked={formData.rememberMe}\r\n                onChange={handleInputChange}\r\n              />\r\n              Remember me\r\n            </label>\r\n            <Link href=\"/forgot-password\" style={{ color: \"#667eea\", textDecoration: \"none\" }}>\r\n              Forgot password?\r\n            </Link>\r\n          </div>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            disabled={isLoading}\r\n            aria-busy={isLoading}\r\n            aria-label={isLoading ? \"Signing in, please wait\" : \"Sign in to your account\"}\r\n            style={{\r\n              width: \"100%\",\r\n              background: isLoading ? \"#9CA3AF\" : \"linear-gradient(135deg, #667eea 0%, #764ba2 100%)\",\r\n              color: \"white\",\r\n              padding: \"0.875rem\",\r\n              borderRadius: \"8px\",\r\n              border: \"none\",\r\n              fontSize: \"1rem\",\r\n              fontWeight: \"600\",\r\n              cursor: isLoading ? \"not-allowed\" : \"pointer\",\r\n              transition: \"transform 0.2s, box-shadow 0.2s\",\r\n              marginTop: \"1rem\",\r\n              opacity: isLoading ? 0.7 : 1\r\n            }}\r\n          >\r\n            {isLoading ? (\r\n              <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '0.5rem' }}>\r\n                <span className=\"spinner\" />\r\n                Signing In...\r\n              </span>\r\n            ) : \"Sign In\"}\r\n          </button>\r\n          \r\n          <style jsx>{`\r\n            @keyframes spin {\r\n              to { transform: rotate(360deg); }\r\n            }\r\n            .spinner {\r\n              display: inline-block;\r\n              width: 16px;\r\n              height: 16px;\r\n              border: 2px solid rgba(255,255,255,0.3);\r\n              border-top-color: white;\r\n              border-radius: 50%;\r\n              animation: spin 0.6s linear infinite;\r\n            }\r\n          `}</style>\r\n        </form>\r\n\r\n        <div style={{ marginTop: \"2rem\", textAlign: \"center\" }}>\r\n          <p style={{ color: \"#6B7280\" }}>\r\n            Don&apos;t have an account?{\" \"}\r\n            <Link href=\"/signup\" style={{ color: \"#667eea\", textDecoration: \"none\", fontWeight: \"500\" }}>\r\n              Sign up\r\n            </Link>\r\n          </p>\r\n        </div>\r\n\r\n        <div style={{ marginTop: \"1.5rem\", textAlign: \"center\" }}>\r\n          <Link href=\"/\" style={{ color: \"#9CA3AF\", textDecoration: \"none\", fontSize: \"0.9rem\" }}>\r\n            ΓåÉ Back to Home\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\medical-records\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\notifications\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockNotifications' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockTemplates' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 199,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 199,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockPreferences' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 235,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 235,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\nimport Layout from '../components/Layout';\r\nimport Card from '../components/ui/Card';\r\nimport Button from '../components/ui/Button';\r\nimport Input from '../components/ui/Input';\r\nimport React, { useState } from 'react';\r\n\r\ninterface Notification {\r\n  id: string;\r\n  type: 'EMERGENCY' | 'APPOINTMENT' | 'LAB_RESULT' | 'PRESCRIPTION' | 'SYSTEM' | 'BILLING' | 'GENERAL';\r\n  priority: 'HIGH' | 'MEDIUM' | 'LOW';\r\n  title: string;\r\n  message: string;\r\n  timestamp: string;\r\n  isRead: boolean;\r\n  isArchived: boolean;\r\n  recipientId: string;\r\n  recipientName: string;\r\n  recipientRole: 'DOCTOR' | 'NURSE' | 'PATIENT' | 'ADMIN' | 'STAFF';\r\n  senderId?: string;\r\n  senderName?: string;\r\n  relatedEntityType?: 'PATIENT' | 'APPOINTMENT' | 'LAB_ORDER' | 'PRESCRIPTION' | 'INVOICE';\r\n  relatedEntityId?: string;\r\n  channels: ('EMAIL' | 'SMS' | 'PUSH' | 'IN_APP')[];\r\n  scheduledTime?: string;\r\n  deliveryStatus: 'PENDING' | 'SENT' | 'DELIVERED' | 'FAILED' | 'CANCELLED';\r\n  actionRequired: boolean;\r\n  actionUrl?: string;\r\n  expiresAt?: string;\r\n}\r\n\r\ninterface NotificationTemplate {\r\n  id: string;\r\n  name: string;\r\n  type: Notification['type'];\r\n  subject: string;\r\n  content: string;\r\n  channels: ('EMAIL' | 'SMS' | 'PUSH' | 'IN_APP')[];\r\n  isActive: boolean;\r\n  triggers: string[];\r\n  variables: string[];\r\n}\r\n\r\ninterface NotificationPreferences {\r\n  userId: string;\r\n  userRole: string;\r\n  emailEnabled: boolean;\r\n  smsEnabled: boolean;\r\n  pushEnabled: boolean;\r\n  inAppEnabled: boolean;\r\n  emergencyAlerts: boolean;\r\n  appointmentReminders: boolean;\r\n  labResultAlerts: boolean;\r\n  prescriptionNotices: boolean;\r\n  systemUpdates: boolean;\r\n  billingReminders: boolean;\r\n  quietHoursStart: string;\r\n  quietHoursEnd: string;\r\n  weekendNotifications: boolean;\r\n}\r\n\r\nconst NotificationsPage = () => {\r\n  const [currentTab, setCurrentTab] = useState<'inbox' | 'sent' | 'templates' | 'preferences' | 'analytics' | 'broadcast'>('inbox');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [typeFilter, setTypeFilter] = useState('ALL');\r\n  const [priorityFilter, setPriorityFilter] = useState('ALL');\r\n  const [statusFilter, setStatusFilter] = useState('ALL');\r\n  const [selectedNotification, setSelectedNotification] = useState<Notification | null>(null);\r\n  const [showNotificationModal, setShowNotificationModal] = useState(false);\r\n  const [showComposeModal, setShowComposeModal] = useState(false);\r\n\r\n  const mockNotifications: Notification[] = [\r\n    {\r\n      id: '1',\r\n      type: 'EMERGENCY',\r\n      priority: 'HIGH',\r\n      title: 'Critical Patient Alert - Room 204',\r\n      message: 'Patient John Smith (ID: P001) in Room 204 has critical vital signs. Blood pressure: 180/120, Heart rate: 140 bpm. Immediate attention required.',\r\n      timestamp: '2024-12-05T15:30:00',\r\n      isRead: false,\r\n      isArchived: false,\r\n      recipientId: 'D001',\r\n      recipientName: 'Dr. Sarah Mitchell',\r\n      recipientRole: 'DOCTOR',\r\n      senderId: 'SYS001',\r\n      senderName: 'Vital Signs Monitor',\r\n      relatedEntityType: 'PATIENT',\r\n      relatedEntityId: 'P001',\r\n      channels: ['EMAIL', 'SMS', 'PUSH', 'IN_APP'],\r\n      deliveryStatus: 'DELIVERED',\r\n      actionRequired: true,\r\n      actionUrl: '/patients/P001',\r\n      expiresAt: '2024-12-05T18:30:00'\r\n    },\r\n    {\r\n      id: '2',\r\n      type: 'APPOINTMENT',\r\n      priority: 'MEDIUM',\r\n      title: 'Appointment Reminder',\r\n      message: 'You have an upcoming appointment tomorrow at 10:00 AM with Dr. Michael Chen for dermatology consultation.',\r\n      timestamp: '2024-12-05T14:00:00',\r\n      isRead: true,\r\n      isArchived: false,\r\n      recipientId: 'P002',\r\n      recipientName: 'Emma Johnson',\r\n      recipientRole: 'PATIENT',\r\n      senderId: 'SYS002',\r\n      senderName: 'Appointment Scheduler',\r\n      relatedEntityType: 'APPOINTMENT',\r\n      relatedEntityId: 'APT001',\r\n      channels: ['EMAIL', 'SMS'],\r\n      deliveryStatus: 'DELIVERED',\r\n      actionRequired: false,\r\n      scheduledTime: '2024-12-05T14:00:00'\r\n    },\r\n    {\r\n      id: '3',\r\n      type: 'LAB_RESULT',\r\n      priority: 'HIGH',\r\n      title: 'Lab Results Available - Urgent',\r\n      message: 'Critical lab results are now available for patient Maria Garcia (ID: P003). CBC shows abnormal values requiring immediate review.',\r\n      timestamp: '2024-12-05T13:45:00',\r\n      isRead: false,\r\n      isArchived: false,\r\n      recipientId: 'D002',\r\n      recipientName: 'Dr. Robert Kumar',\r\n      recipientRole: 'DOCTOR',\r\n      senderId: 'LAB001',\r\n      senderName: 'Laboratory System',\r\n      relatedEntityType: 'LAB_ORDER',\r\n      relatedEntityId: 'LAB001',\r\n      channels: ['EMAIL', 'PUSH', 'IN_APP'],\r\n      deliveryStatus: 'DELIVERED',\r\n      actionRequired: true,\r\n      actionUrl: '/lab-tests/LAB001'\r\n    },\r\n    {\r\n      id: '4',\r\n      type: 'PRESCRIPTION',\r\n      priority: 'MEDIUM',\r\n      title: 'Prescription Ready for Pickup',\r\n      message: 'Your prescription for Lisinopril 10mg is ready for pickup at the hospital pharmacy. Please bring a valid ID.',\r\n      timestamp: '2024-12-05T12:30:00',\r\n      isRead: false,\r\n      isArchived: false,\r\n      recipientId: 'P004',\r\n      recipientName: 'David Park',\r\n      recipientRole: 'PATIENT',\r\n      senderId: 'PHARM001',\r\n      senderName: 'Hospital Pharmacy',\r\n      relatedEntityType: 'PRESCRIPTION',\r\n      relatedEntityId: 'RX001',\r\n      channels: ['EMAIL', 'SMS'],\r\n      deliveryStatus: 'DELIVERED',\r\n      actionRequired: true\r\n    },\r\n    {\r\n      id: '5',\r\n      type: 'SYSTEM',\r\n      priority: 'LOW',\r\n      title: 'System Maintenance Scheduled',\r\n      message: 'Scheduled system maintenance will occur on Sunday, December 8th from 2:00 AM to 6:00 AM. Some services may be temporarily unavailable.',\r\n      timestamp: '2024-12-05T11:00:00',\r\n      isRead: true,\r\n      isArchived: false,\r\n      recipientId: 'ALL',\r\n      recipientName: 'All Users',\r\n      recipientRole: 'STAFF',\r\n      senderId: 'ADMIN001',\r\n      senderName: 'System Administrator',\r\n      channels: ['EMAIL', 'IN_APP'],\r\n      deliveryStatus: 'DELIVERED',\r\n      actionRequired: false,\r\n      scheduledTime: '2024-12-05T11:00:00'\r\n    },\r\n    {\r\n      id: '6',\r\n      type: 'BILLING',\r\n      priority: 'MEDIUM',\r\n      title: 'Payment Reminder',\r\n      message: 'Your invoice #INV-2024-001 for $250.00 is due in 3 days. Please make payment to avoid late fees.',\r\n      timestamp: '2024-12-05T10:00:00',\r\n      isRead: false,\r\n      isArchived: false,\r\n      recipientId: 'P005',\r\n      recipientName: 'Lisa Rodriguez',\r\n      recipientRole: 'PATIENT',\r\n      senderId: 'BILLING001',\r\n      senderName: 'Billing Department',\r\n      relatedEntityType: 'INVOICE',\r\n      relatedEntityId: 'INV-2024-001',\r\n      channels: ['EMAIL', 'SMS'],\r\n      deliveryStatus: 'DELIVERED',\r\n      actionRequired: true,\r\n      actionUrl: '/billing/INV-2024-001'\r\n    }\r\n  ];\r\n\r\n  const mockTemplates: NotificationTemplate[] = [\r\n    {\r\n      id: 'TPL001',\r\n      name: 'Appointment Reminder',\r\n      type: 'APPOINTMENT',\r\n      subject: 'Upcoming Appointment Reminder',\r\n      content: 'You have an appointment on {date} at {time} with {doctor} for {specialty}.',\r\n      channels: ['EMAIL', 'SMS'],\r\n      isActive: true,\r\n      triggers: ['24_hours_before', '1_hour_before'],\r\n      variables: ['date', 'time', 'doctor', 'specialty', 'patient_name']\r\n    },\r\n    {\r\n      id: 'TPL002',\r\n      name: 'Lab Results Alert',\r\n      type: 'LAB_RESULT',\r\n      subject: 'Lab Results Available',\r\n      content: 'Lab results for {patient_name} are now available. {urgency_note}',\r\n      channels: ['EMAIL', 'PUSH', 'IN_APP'],\r\n      isActive: true,\r\n      triggers: ['results_available'],\r\n      variables: ['patient_name', 'test_type', 'urgency_note', 'doctor_name']\r\n    },\r\n    {\r\n      id: 'TPL003',\r\n      name: 'Emergency Alert',\r\n      type: 'EMERGENCY',\r\n      subject: 'URGENT: Emergency Alert',\r\n      content: 'Emergency situation: {emergency_type}. Location: {location}. {details}',\r\n      channels: ['EMAIL', 'SMS', 'PUSH', 'IN_APP'],\r\n      isActive: true,\r\n      triggers: ['emergency_triggered'],\r\n      variables: ['emergency_type', 'location', 'details', 'priority_level']\r\n    }\r\n  ];\r\n\r\n  const mockPreferences: NotificationPreferences = {\r\n    userId: 'U001',\r\n    userRole: 'DOCTOR',\r\n    emailEnabled: true,\r\n    smsEnabled: true,\r\n    pushEnabled: true,\r\n    inAppEnabled: true,\r\n    emergencyAlerts: true,\r\n    appointmentReminders: true,\r\n    labResultAlerts: true,\r\n    prescriptionNotices: false,\r\n    systemUpdates: true,\r\n    billingReminders: false,\r\n    quietHoursStart: '22:00',\r\n    quietHoursEnd: '06:00',\r\n    weekendNotifications: true\r\n  };\r\n\r\n  const filteredNotifications = [].filter /* TODO: API */(notification => {\r\n    const matchesSearch = notification.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         notification.message.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         notification.recipientName.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    const matchesType = typeFilter === 'ALL' || notification.type === typeFilter;\r\n    const matchesPriority = priorityFilter === 'ALL' || notification.priority === priorityFilter;\r\n    const matchesStatus = statusFilter === 'ALL' || \r\n                         (statusFilter === 'UNREAD' && !notification.isRead) ||\r\n                         (statusFilter === 'READ' && notification.isRead);\r\n    \r\n    return matchesSearch && matchesType && matchesPriority && matchesStatus;\r\n  });\r\n\r\n  const getTypeColor = (type: string) => {\r\n    const colors = {\r\n      'EMERGENCY': '#ef4444',\r\n      'APPOINTMENT': '#3b82f6',\r\n      'LAB_RESULT': '#8b5cf6',\r\n      'PRESCRIPTION': '#10b981',\r\n      'SYSTEM': '#f59e0b',\r\n      'BILLING': '#06b6d4',\r\n      'GENERAL': '#6b7280'\r\n    };\r\n    return colors[type as keyof typeof colors] || '#6b7280';\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    const colors = {\r\n      'HIGH': '#ef4444',\r\n      'MEDIUM': '#f59e0b',\r\n      'LOW': '#10b981'\r\n    };\r\n    return colors[priority as keyof typeof colors] || '#6b7280';\r\n  };\r\n\r\n  const getTypeIcon = (type: string) => {\r\n    const icons = {\r\n      'EMERGENCY': '🚨',\r\n      'APPOINTMENT': '📅',\r\n      'LAB_RESULT': '🧪',\r\n      'PRESCRIPTION': '💊',\r\n      'SYSTEM': '⚙️',\r\n      'BILLING': '💰',\r\n      'GENERAL': '📝'\r\n    };\r\n    return icons[type as keyof typeof icons] || '📝';\r\n  };\r\n\r\n  const NotificationModal = () => (\r\n    <div style={{\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      zIndex: 1000,\r\n      padding: '1rem'\r\n    }}>\r\n      <div style={{\r\n        backgroundColor: 'white',\r\n        borderRadius: '12px',\r\n        padding: '2rem',\r\n        maxWidth: '700px',\r\n        width: '100%',\r\n        maxHeight: '90vh',\r\n        overflowY: 'auto'\r\n      }}>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem' }}>\r\n          <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n            Notification Details\r\n          </h2>\r\n          <button\r\n            onClick={() => setShowNotificationModal(false)}\r\n            style={{\r\n              background: 'none',\r\n              border: 'none',\r\n              fontSize: '1.5rem',\r\n              cursor: 'pointer',\r\n              color: '#6b7280'\r\n            }}\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n\r\n        {selectedNotification && (\r\n          <div style={{ display: 'grid', gap: '1.5rem' }}>\r\n            {/* Header */}\r\n            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\r\n              <span style={{ fontSize: '2rem' }}>{getTypeIcon(selectedNotification.type)}</span>\r\n              <div>\r\n                <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.25rem' }}>\r\n                  {selectedNotification.title}\r\n                </h3>\r\n                <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center' }}>\r\n                  <span style={{\r\n                    padding: '0.25rem 0.5rem',\r\n                    borderRadius: '4px',\r\n                    fontSize: '0.75rem',\r\n                    fontWeight: '600',\r\n                    color: 'white',\r\n                    backgroundColor: getTypeColor(selectedNotification.type)\r\n                  }}>\r\n                    {selectedNotification.type.replace('_', ' ')}\r\n                  </span>\r\n                  <span style={{\r\n                    padding: '0.25rem 0.5rem',\r\n                    borderRadius: '4px',\r\n                    fontSize: '0.75rem',\r\n                    fontWeight: '600',\r\n                    color: 'white',\r\n                    backgroundColor: getPriorityColor(selectedNotification.priority)\r\n                  }}>\r\n                    {selectedNotification.priority}\r\n                  </span>\r\n                  {selectedNotification.actionRequired && (\r\n                    <span style={{\r\n                      padding: '0.25rem 0.5rem',\r\n                      borderRadius: '4px',\r\n                      fontSize: '0.75rem',\r\n                      fontWeight: '600',\r\n                      color: '#dc2626',\r\n                      backgroundColor: '#fef2f2',\r\n                      border: '1px solid #fecaca'\r\n                    }}>\r\n                      ACTION REQUIRED\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Message Content */}\r\n            <div>\r\n              <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                Message\r\n              </h4>\r\n              <p style={{\r\n                padding: '1rem',\r\n                backgroundColor: '#f9fafb',\r\n                borderRadius: '8px',\r\n                border: '1px solid #e5e7eb',\r\n                margin: 0,\r\n                lineHeight: '1.6'\r\n              }}>\r\n                {selectedNotification.message}\r\n              </p>\r\n            </div>\r\n\r\n            {/* Details */}\r\n            <div>\r\n              <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                Details\r\n              </h4>\r\n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '0.5rem' }}>\r\n                <div><span style={{ fontWeight: '600' }}>Recipient:</span> {selectedNotification.recipientName}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Role:</span> {selectedNotification.recipientRole}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Sent:</span> {new Date(selectedNotification.timestamp).toLocaleString()}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Status:</span> {selectedNotification.deliveryStatus}</div>\r\n                {selectedNotification.senderName && (\r\n                  <div><span style={{ fontWeight: '600' }}>From:</span> {selectedNotification.senderName}</div>\r\n                )}\r\n                {selectedNotification.expiresAt && (\r\n                  <div><span style={{ fontWeight: '600' }}>Expires:</span> {new Date(selectedNotification.expiresAt).toLocaleString()}</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Delivery Channels */}\r\n            <div>\r\n              <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                Delivery Channels\r\n              </h4>\r\n              <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\r\n                {selectedNotification.channels.map(channel => (\r\n                  <span\r\n                    key={channel}\r\n                    style={{\r\n                      padding: '0.25rem 0.75rem',\r\n                      backgroundColor: '#e0f2fe',\r\n                      color: '#0e7490',\r\n                      borderRadius: '9999px',\r\n                      fontSize: '0.875rem',\r\n                      fontWeight: '500'\r\n                    }}\r\n                  >\r\n                    {channel}\r\n                  </span>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            <div style={{ display: 'flex', gap: '1rem', justifyContent: 'flex-end', paddingTop: '1rem', borderTop: '1px solid #e5e7eb' }}>\r\n              {selectedNotification.actionRequired && selectedNotification.actionUrl && (\r\n                <Button variant=\"primary\">\r\n                  Take Action\r\n                </Button>\r\n              )}\r\n              <Button variant=\"outline\">\r\n                Mark as Read\r\n              </Button>\r\n              <Button variant=\"secondary\" onClick={() => setShowNotificationModal(false)}>\r\n                Close\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const ComposeModal = () => (\r\n    <div style={{\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      zIndex: 1000,\r\n      padding: '1rem'\r\n    }}>\r\n      <div style={{\r\n        backgroundColor: 'white',\r\n        borderRadius: '12px',\r\n        padding: '2rem',\r\n        maxWidth: '600px',\r\n        width: '100%'\r\n      }}>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem' }}>\r\n          <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n            Compose Notification\r\n          </h2>\r\n          <button\r\n            onClick={() => setShowComposeModal(false)}\r\n            style={{\r\n              background: 'none',\r\n              border: 'none',\r\n              fontSize: '1.5rem',\r\n              cursor: 'pointer',\r\n              color: '#6b7280'\r\n            }}\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n\r\n        <div style={{ display: 'grid', gap: '1rem' }}>\r\n          <Input label=\"Title\" placeholder=\"Notification title...\" />\r\n          \r\n          <div>\r\n            <label style={{ display: 'block', marginBottom: '0.5rem', fontSize: '0.875rem', fontWeight: '600', color: '#374151' }}>\r\n              Type\r\n            </label>\r\n            <select style={{\r\n              width: '100%',\r\n              padding: '0.75rem 1rem',\r\n              border: '1px solid #d1d5db',\r\n              borderRadius: '8px',\r\n              fontSize: '1rem',\r\n              backgroundColor: 'white'\r\n            }}>\r\n              <option value=\"GENERAL\">General</option>\r\n              <option value=\"APPOINTMENT\">Appointment</option>\r\n              <option value=\"LAB_RESULT\">Lab Result</option>\r\n              <option value=\"PRESCRIPTION\">Prescription</option>\r\n              <option value=\"SYSTEM\">System</option>\r\n              <option value=\"BILLING\">Billing</option>\r\n              <option value=\"EMERGENCY\">Emergency</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label style={{ display: 'block', marginBottom: '0.5rem', fontSize: '0.875rem', fontWeight: '600', color: '#374151' }}>\r\n              Priority\r\n            </label>\r\n            <select style={{\r\n              width: '100%',\r\n              padding: '0.75rem 1rem',\r\n              border: '1px solid #d1d5db',\r\n              borderRadius: '8px',\r\n              fontSize: '1rem',\r\n              backgroundColor: 'white'\r\n            }}>\r\n              <option value=\"LOW\">Low</option>\r\n              <option value=\"MEDIUM\">Medium</option>\r\n              <option value=\"HIGH\">High</option>\r\n            </select>\r\n          </div>\r\n\r\n          <Input label=\"Recipients\" placeholder=\"Enter user IDs or roles...\" />\r\n\r\n          <div>\r\n            <label style={{ display: 'block', marginBottom: '0.5rem', fontSize: '0.875rem', fontWeight: '600', color: '#374151' }}>\r\n              Message\r\n            </label>\r\n            <textarea\r\n              placeholder=\"Enter your message...\"\r\n              rows={4}\r\n              style={{\r\n                width: '100%',\r\n                padding: '0.75rem 1rem',\r\n                border: '1px solid #d1d5db',\r\n                borderRadius: '8px',\r\n                fontSize: '1rem',\r\n                resize: 'vertical',\r\n                fontFamily: 'inherit'\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label style={{ display: 'block', marginBottom: '0.5rem', fontSize: '0.875rem', fontWeight: '600', color: '#374151' }}>\r\n              Delivery Channels\r\n            </label>\r\n            <div style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}>\r\n              {['EMAIL', 'SMS', 'PUSH', 'IN_APP'].map(channel => (\r\n                <label key={channel} style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n                  <input type=\"checkbox\" defaultChecked />\r\n                  <span>{channel}</span>\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', gap: '1rem', justifyContent: 'flex-end', paddingTop: '1rem', borderTop: '1px solid #e5e7eb' }}>\r\n            <Button variant=\"outline\" onClick={() => setShowComposeModal(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"secondary\">\r\n              Save Draft\r\n            </Button>\r\n            <Button variant=\"primary\">\r\n              Send Now\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Layout>\r\n      <div style={{ maxWidth: '1400px', margin: '0 auto' }}>\r\n        {/* Header */}\r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'space-between', \r\n          alignItems: 'center', \r\n          marginBottom: '2rem' \r\n        }}>\r\n          <div>\r\n            <h1 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n              Notification Center\r\n            </h1>\r\n            <p style={{ color: '#6b7280', fontSize: '1rem' }}>\r\n              Manage alerts, messages, and communication across the hospital system\r\n            </p>\r\n          </div>\r\n          <div style={{ display: 'flex', gap: '0.5rem' }}>\r\n            <Button variant=\"primary\" onClick={() => setShowComposeModal(true)}>\r\n              ✉️ Compose\r\n            </Button>\r\n            <Button variant=\"outline\">\r\n              📊 Analytics\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Quick Stats */}\r\n        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem', marginBottom: '2rem' }}>\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '1rem' }}>\r\n              <div style={{ fontSize: '2rem', color: '#ef4444', marginBottom: '0.5rem' }}>📬</div>\r\n              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n                {[].filter /* TODO: API */(n => !n.isRead).length}\r\n              </div>\r\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Unread</div>\r\n            </div>\r\n          </Card>\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '1rem' }}>\r\n              <div style={{ fontSize: '2rem', color: '#f59e0b', marginBottom: '0.5rem' }}>🚨</div>\r\n              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n                {[].filter /* TODO: API */(n => n.priority === 'HIGH').length}\r\n              </div>\r\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>High Priority</div>\r\n            </div>\r\n          </Card>\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '1rem' }}>\r\n              <div style={{ fontSize: '2rem', color: '#10b981', marginBottom: '0.5rem' }}>📤</div>\r\n              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n                {[].filter /* TODO: API */(n => n.deliveryStatus === 'DELIVERED').length}\r\n              </div>\r\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Delivered</div>\r\n            </div>\r\n          </Card>\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '1rem' }}>\r\n              <div style={{ fontSize: '2rem', color: '#3b82f6', marginBottom: '0.5rem' }}>⚡</div>\r\n              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n                {[].filter /* TODO: API */(n => n.actionRequired).length}\r\n              </div>\r\n              <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Action Required</div>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Tab Navigation */}\r\n        <div style={{ marginBottom: '2rem' }}>\r\n          <div style={{ display: 'flex', gap: '0.5rem', borderBottom: '1px solid #e5e7eb' }}>\r\n            {[\r\n              { key: 'inbox', label: '📥 Inbox', desc: 'Received' },\r\n              { key: 'sent', label: '📤 Sent', desc: 'Outgoing' },\r\n              { key: 'templates', label: '📄 Templates', desc: 'Message Templates' },\r\n              { key: 'preferences', label: '⚙️ Preferences', desc: 'User Settings' },\r\n              { key: 'analytics', label: '📊 Analytics', desc: 'Performance' },\r\n              { key: 'broadcast', label: '📢 Broadcast', desc: 'Mass Messaging' }\r\n            ].map(tab => (\r\n              <button\r\n                key={tab.key}\r\n                onClick={() => setCurrentTab(tab.key as string)}\r\n                style={{\r\n                  padding: '1rem 1.5rem',\r\n                  border: 'none',\r\n                  background: 'none',\r\n                  fontSize: '1rem',\r\n                  fontWeight: '500',\r\n                  color: currentTab === tab.key ? '#667eea' : '#6b7280',\r\n                  borderBottom: currentTab === tab.key ? '2px solid #667eea' : '2px solid transparent',\r\n                  cursor: 'pointer',\r\n                  transition: 'all 0.2s ease'\r\n                }}\r\n              >\r\n                <div>{tab.label}</div>\r\n                <div style={{ fontSize: '0.75rem', opacity: 0.8 }}>\r\n                  {tab.desc}\r\n                </div>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Inbox Tab */}\r\n        {currentTab === 'inbox' && (\r\n          <>\r\n            {/* Search and Filters */}\r\n            <Card style={{ marginBottom: '1.5rem' }}>\r\n              <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                <div style={{ flex: 1, minWidth: '250px' }}>\r\n                  <Input\r\n                    placeholder=\"Search notifications...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                  />\r\n                </div>\r\n                \r\n                <select\r\n                  value={typeFilter}\r\n                  onChange={(e) => setTypeFilter(e.target.value)}\r\n                  style={{\r\n                    padding: '0.75rem 1rem',\r\n                    border: '1px solid #d1d5db',\r\n                    borderRadius: '8px',\r\n                    fontSize: '1rem',\r\n                    backgroundColor: 'white',\r\n                    minWidth: '150px'\r\n                  }}\r\n                >\r\n                  <option value=\"ALL\">All Types</option>\r\n                  <option value=\"EMERGENCY\">Emergency</option>\r\n                  <option value=\"APPOINTMENT\">Appointment</option>\r\n                  <option value=\"LAB_RESULT\">Lab Result</option>\r\n                  <option value=\"PRESCRIPTION\">Prescription</option>\r\n                  <option value=\"SYSTEM\">System</option>\r\n                  <option value=\"BILLING\">Billing</option>\r\n                </select>\r\n\r\n                <select\r\n                  value={priorityFilter}\r\n                  onChange={(e) => setPriorityFilter(e.target.value)}\r\n                  style={{\r\n                    padding: '0.75rem 1rem',\r\n                    border: '1px solid #d1d5db',\r\n                    borderRadius: '8px',\r\n                    fontSize: '1rem',\r\n                    backgroundColor: 'white',\r\n                    minWidth: '120px'\r\n                  }}\r\n                >\r\n                  <option value=\"ALL\">All Priority</option>\r\n                  <option value=\"HIGH\">High</option>\r\n                  <option value=\"MEDIUM\">Medium</option>\r\n                  <option value=\"LOW\">Low</option>\r\n                </select>\r\n\r\n                <select\r\n                  value={statusFilter}\r\n                  onChange={(e) => setStatusFilter(e.target.value)}\r\n                  style={{\r\n                    padding: '0.75rem 1rem',\r\n                    border: '1px solid #d1d5db',\r\n                    borderRadius: '8px',\r\n                    fontSize: '1rem',\r\n                    backgroundColor: 'white',\r\n                    minWidth: '120px'\r\n                  }}\r\n                >\r\n                  <option value=\"ALL\">All Status</option>\r\n                  <option value=\"UNREAD\">Unread</option>\r\n                  <option value=\"READ\">Read</option>\r\n                </select>\r\n\r\n                <Button variant=\"outline\">\r\n                  🔄 Refresh\r\n                </Button>\r\n              </div>\r\n            </Card>\r\n\r\n            {/* Notifications List */}\r\n            <div style={{ display: 'grid', gap: '1rem' }}>\r\n              {filteredNotifications.map(notification => (\r\n                <Card key={notification.id} style={{ \r\n                  cursor: 'pointer',\r\n                  backgroundColor: notification.isRead ? 'white' : '#fef3c7',\r\n                  border: notification.priority === 'HIGH' ? '2px solid #ef4444' : '1px solid #e5e7eb'\r\n                }}>\r\n                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n                    <div style={{ flex: 1, display: 'flex', gap: '1rem' }}>\r\n                      <span style={{ fontSize: '1.5rem', marginTop: '0.25rem' }}>\r\n                        {getTypeIcon(notification.type)}\r\n                      </span>\r\n                      <div style={{ flex: 1 }}>\r\n                        <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center', marginBottom: '0.5rem' }}>\r\n                          <h3 style={{ \r\n                            fontSize: '1rem', \r\n                            fontWeight: notification.isRead ? '500' : '600', \r\n                            color: '#1f2937', \r\n                            margin: 0 \r\n                          }}>\r\n                            {notification.title}\r\n                          </h3>\r\n                          {!notification.isRead && (\r\n                            <div style={{\r\n                              width: '8px',\r\n                              height: '8px',\r\n                              backgroundColor: '#3b82f6',\r\n                              borderRadius: '50%'\r\n                            }} />\r\n                          )}\r\n                          {notification.actionRequired && (\r\n                            <span style={{\r\n                              padding: '0.125rem 0.5rem',\r\n                              borderRadius: '4px',\r\n                              fontSize: '0.75rem',\r\n                              fontWeight: '600',\r\n                              color: '#dc2626',\r\n                              backgroundColor: '#fef2f2',\r\n                              border: '1px solid #fecaca'\r\n                            }}>\r\n                              ACTION\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                        \r\n                        <p style={{ \r\n                          color: '#6b7280', \r\n                          fontSize: '0.875rem', \r\n                          margin: 0, \r\n                          marginBottom: '0.5rem',\r\n                          lineHeight: '1.4'\r\n                        }}>\r\n                          {notification.message.length > 120 ? \r\n                            notification.message.substring(0, 120) + '...' : \r\n                            notification.message\r\n                          }\r\n                        </p>\r\n                        \r\n                        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>\r\n                          <span style={{ fontSize: '0.75rem', color: '#9ca3af' }}>\r\n                            {notification.senderName} • {new Date(notification.timestamp).toLocaleString()}\r\n                          </span>\r\n                          <div style={{ display: 'flex', gap: '0.25rem' }}>\r\n                            <span style={{\r\n                              padding: '0.125rem 0.375rem',\r\n                              borderRadius: '4px',\r\n                              fontSize: '0.625rem',\r\n                              fontWeight: '600',\r\n                              color: 'white',\r\n                              backgroundColor: getTypeColor(notification.type)\r\n                            }}>\r\n                              {notification.type.replace('_', ' ')}\r\n                            </span>\r\n                            <span style={{\r\n                              padding: '0.125rem 0.375rem',\r\n                              borderRadius: '4px',\r\n                              fontSize: '0.625rem',\r\n                              fontWeight: '600',\r\n                              color: 'white',\r\n                              backgroundColor: getPriorityColor(notification.priority)\r\n                            }}>\r\n                              {notification.priority}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', gap: '0.5rem', marginLeft: '1rem' }}>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => {\r\n                          setSelectedNotification(notification);\r\n                          setShowNotificationModal(true);\r\n                        }}\r\n                      >\r\n                        View\r\n                      </Button>\r\n                      {notification.actionRequired && (\r\n                        <Button size=\"sm\" variant=\"primary\">\r\n                          Action\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* Templates Tab */}\r\n        {currentTab === 'templates' && (\r\n          <div style={{ display: 'grid', gap: '1rem' }}>\r\n            {[].map /* TODO: API */(template => (\r\n              <Card key={template.id}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n                  <div style={{ flex: 1 }}>\r\n                    <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', marginBottom: '0.75rem' }}>\r\n                      <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', margin: 0 }}>\r\n                        {template.name}\r\n                      </h3>\r\n                      <span style={{\r\n                        padding: '0.25rem 0.75rem',\r\n                        borderRadius: '9999px',\r\n                        fontSize: '0.75rem',\r\n                        fontWeight: '600',\r\n                        color: 'white',\r\n                        backgroundColor: getTypeColor(template.type)\r\n                      }}>\r\n                        {template.type.replace('_', ' ')}\r\n                      </span>\r\n                      <span style={{\r\n                        padding: '0.25rem 0.75rem',\r\n                        borderRadius: '9999px',\r\n                        fontSize: '0.75rem',\r\n                        fontWeight: '600',\r\n                        color: template.isActive ? '#166534' : '#dc2626',\r\n                        backgroundColor: template.isActive ? '#f0fdf4' : '#fef2f2'\r\n                      }}>\r\n                        {template.isActive ? 'Active' : 'Inactive'}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <div style={{ marginBottom: '0.75rem' }}>\r\n                      <div style={{ fontWeight: '600', fontSize: '0.875rem', color: '#374151', marginBottom: '0.25rem' }}>\r\n                        Subject: {template.subject}\r\n                      </div>\r\n                      <p style={{ color: '#6b7280', fontSize: '0.875rem', margin: 0 }}>\r\n                        {template.content}\r\n                      </p>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\r\n                      {template.channels.map(channel => (\r\n                        <span\r\n                          key={channel}\r\n                          style={{\r\n                            padding: '0.125rem 0.5rem',\r\n                            backgroundColor: '#e0f2fe',\r\n                            color: '#0e7490',\r\n                            borderRadius: '4px',\r\n                            fontSize: '0.75rem',\r\n                            fontWeight: '500'\r\n                          }}\r\n                        >\r\n                          {channel}\r\n                        </span>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div style={{ display: 'flex', gap: '0.5rem', marginLeft: '1rem' }}>\r\n                    <Button size=\"sm\" variant=\"outline\">\r\n                      Edit\r\n                    </Button>\r\n                    <Button size=\"sm\" variant=\"secondary\">\r\n                      Use Template\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        {/* Other tabs placeholder */}\r\n        {['sent', 'preferences', 'analytics', 'broadcast'].includes(currentTab) && (\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>\r\n                {currentTab === 'sent' && '📤'}\r\n                {currentTab === 'preferences' && '⚙️'}\r\n                {currentTab === 'analytics' && '📊'}\r\n                {currentTab === 'broadcast' && '📢'}\r\n              </div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                {currentTab === 'sent' && 'Sent Notifications'}\r\n                {currentTab === 'preferences' && 'Notification Preferences'}\r\n                {currentTab === 'analytics' && 'Notification Analytics'}\r\n                {currentTab === 'broadcast' && 'Broadcast Messaging'}\r\n              </h3>\r\n              <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\r\n                {currentTab === 'sent' && 'View and manage outgoing notifications and delivery status.'}\r\n                {currentTab === 'preferences' && 'Configure personal notification settings and preferences.'}\r\n                {currentTab === 'analytics' && 'Analyze notification performance, engagement, and delivery metrics.'}\r\n                {currentTab === 'broadcast' && 'Send mass notifications to groups of users or departments.'}\r\n              </p>\r\n              <Button variant=\"primary\">\r\n                {currentTab === 'sent' && '📤 View Sent Items'}\r\n                {currentTab === 'preferences' && '⚙️ Configure Settings'}\r\n                {currentTab === 'analytics' && '📊 View Analytics'}\r\n                {currentTab === 'broadcast' && '📢 Create Broadcast'}\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Modals */}\r\n        {showNotificationModal && <NotificationModal />}\r\n        {showComposeModal && <ComposeModal />}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default NotificationsPage;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\patients\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Modal' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'notifications' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 42,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'searchQuery' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'filters' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 73,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 17
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchPatients'. Either include it or remove the dependency array.",
        "line": 85,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 85,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [user, setUser, fetchPatients]",
            "fix": { "range": [2737, 2752], "text": "[user, setUser, fetchPatients]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleOpenHistory' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 292,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 292,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleOpenDocuments' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 300,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 300,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Paper,\r\n  Text,\r\n  Group,\r\n  Badge,\r\n  SimpleGrid,\r\n  Stack,\r\n  Button,\r\n  Tabs,\r\n  Card,\r\n  Progress,\r\n  Avatar,\r\n  Modal,\r\n  Title,\r\n  Divider,\r\n  Alert\r\n} from '@mantine/core';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport {\r\n  IconUsers,\r\n  IconDownload,\r\n  IconPhone,\r\n  IconMail,\r\n  IconCalendar,\r\n  IconHeart,\r\n  IconAlertCircle,\r\n  IconShieldX,\r\n  IconUsers as IconUserPlus\r\n} from '@tabler/icons-react';\r\nimport Layout from '../../components/shared/Layout';\r\nimport DataTable from '../../components/shared/DataTable';\r\nimport PatientForm from '../../components/patients/PatientForm';\r\nimport PatientDetails from '../../components/patients/PatientDetails';\r\nimport MedicalHistoryManager from '../../components/patients/MedicalHistoryManager';\r\nimport DocumentManager from '../../components/patients/DocumentManager';\r\nimport { useAppStore } from '../../stores/appStore';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { User, UserRole, TableColumn, FilterOption, Status } from '../../types/common';\r\nimport { Patient, PatientStats, PatientListItem, CreatePatientDto, UpdatePatientDto } from '../../types/patient';\r\nimport { patientsService } from '../../services';\r\nimport { formatDate, formatPhoneNumber } from '../../lib/utils';\r\n\r\nconst mockUser: User = {\r\n  id: '1',\r\n  username: 'sjohnson',\r\n  email: 'sarah.johnson@hospital.com',\r\n  firstName: 'Sarah',\r\n  lastName: 'Johnson',\r\n  role: UserRole.DOCTOR,\r\n  permissions: [],\r\n  isActive: true,\r\n  tenantInfo: {\r\n    tenantId: 'T001',\r\n    tenantName: 'Main Hospital',\r\n  },\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n};\r\n\r\nfunction PatientsPage() {\r\n  const { user, setUser, notifications } = useAppStore();\r\n  const [activeTab, setActiveTab] = useState('list');\r\n  const [patients, setPatients] = useState<Patient[]>([]);\r\n  const [patientStats, setPatientStats] = useState<PatientStats | null>(null);\r\n  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [filters, setFilters] = useState<Record<string, unknown>>({});\r\n  const [opened, { open, close }] = useDisclosure(false);\r\n  const [viewModalOpened, { open: openView, close: closeView }] = useDisclosure(false);\r\n  const [historyModalOpened, { open: openHistory, close: closeHistory }] = useDisclosure(false);\r\n  const [documentsModalOpened, { open: openDocuments, close: closeDocuments }] = useDisclosure(false);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setUser(mockUser);\r\n    }\r\n    fetchPatients();\r\n    fetchStats();\r\n  }, [user, setUser]);\r\n\r\n  const fetchPatients = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await patientsService.getPatients();\r\n      if (response.success && response.data) {\r\n        setPatients(response.data.patients || []);\r\n      } else {\r\n        notifications.show({\r\n          title: 'Error',\r\n          message: 'Failed to fetch patients',\r\n          color: 'red',\r\n        });\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching patients:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to fetch patients',\r\n        color: 'red',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      const response = await patientsService.getPatientStats();\r\n      if (response.success && response.data) {\r\n        setPatientStats(response.data);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching stats:', error);\r\n    }\r\n  };\r\n\r\n  // Convert patients to list items for table\r\n  const patientListItems: PatientListItem[] = patients.map(patient => ({\r\n    id: patient.id,\r\n    patientId: (patient as any).medicalRecordNumber || patient.id,\r\n    fullName: `${patient.firstName} ${patient.lastName}`,\r\n    age: calculateAge(patient.dateOfBirth),\r\n    gender: patient.gender,\r\n    phoneNumber: (patient as any).phone || '',\r\n    lastVisitDate: new Date(), // Placeholder - need to add to API\r\n    totalVisits: 0, // Placeholder - need to add to API\r\n    status: (patient as any).isActive ? Status.ACTIVE : Status.INACTIVE,\r\n    hasInsurance: false, // Placeholder - need to add to API\r\n    emergencyFlag: false // Placeholder\r\n  }));\r\n\r\n  const calculateAge = (dateOfBirth: Date | string) => {\r\n    const birthDate = new Date(dateOfBirth);\r\n    const today = new Date();\r\n    let age = today.getFullYear() - birthDate.getFullYear();\r\n    const monthDiff = today.getMonth() - birthDate.getMonth();\r\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  // Handle patient actions\r\n  const handleViewPatient = (patient: PatientListItem) => {\r\n    const fullPatient = patients.find(p => p.id === patient.id);\r\n    if (fullPatient) {\r\n      setSelectedPatient(fullPatient);\r\n      openView();\r\n    }\r\n  };\r\n\r\n  const handleEditPatientForTable = (patient: PatientListItem) => {\r\n    const fullPatient = patients.find(p => p.id === patient.id);\r\n    if (fullPatient) {\r\n      setSelectedPatient(fullPatient);\r\n      open();\r\n    }\r\n  };\r\n\r\n  const handleEditPatientForModal = (patient: Patient) => {\r\n    setSelectedPatient(patient);\r\n    open();\r\n  };\r\n\r\n  const handleDeletePatient = async (patient: PatientListItem) => {\r\n    if (window.confirm(`Are you sure you want to delete patient ${patient.fullName}?`)) {\r\n      try {\r\n        const response = await patientsService.deletePatient(patient.id);\r\n        if (response.success) {\r\n          notifications.show({\r\n            title: 'Success',\r\n            message: 'Patient deleted successfully',\r\n            color: 'green',\r\n          });\r\n          fetchPatients();\r\n          fetchStats();\r\n        }\r\n      } catch (error: any) {\r\n        console.error('Error deleting patient:', error);\r\n        notifications.show({\r\n          title: 'Error',\r\n          message: error?.message || 'Failed to delete patient',\r\n          color: 'red',\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // Patient CRUD operations\r\n  const handleCreatePatient = async (data: CreatePatientDto) => {\r\n    try {\r\n      const response = await patientsService.createPatient(data);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Patient created successfully',\r\n          color: 'green',\r\n        });\r\n        fetchPatients();\r\n        fetchStats();\r\n        close();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error creating patient:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to create patient',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleUpdatePatient = async (data: UpdatePatientDto) => {\r\n    try {\r\n      const response = await patientsService.updatePatient(data.id, data);\r\n      if (response.success) {\r\n        notifications.show({\r\n          title: 'Success',\r\n          message: 'Patient updated successfully',\r\n          color: 'green',\r\n        });\r\n        fetchPatients();\r\n        fetchStats();\r\n        close();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error updating patient:', error);\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: error?.message || 'Failed to update patient',\r\n        color: 'red',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Medical history operations\r\n  const handleSaveMedicalHistory = async (history: any): Promise<void> => {\r\n    console.log('Saving medical history:', history);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleUpdateMedicalHistory = async (id: string, history: any): Promise<void> => {\r\n    console.log('Updating medical history:', id, history);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleDeleteMedicalHistory = async (id: string): Promise<void> => {\r\n    console.log('Deleting medical history:', id);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  // Document operations\r\n  const handleUploadDocument = async (document: any, file: File): Promise<void> => {\r\n    console.log('Uploading document:', document, file);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleUpdateDocument = async (id: string, document: any): Promise<void> => {\r\n    console.log('Updating document:', id, document);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleDeleteDocument = async (id: string): Promise<void> => {\r\n    console.log('Deleting document:', id);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleDownloadDocument = async (document: any): Promise<void> => {\r\n    console.log('Downloading document:', document);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  const handleViewDocument = async (document: any): Promise<void> => {\r\n    console.log('Viewing document:', document);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  };\r\n\r\n  // Additional handlers\r\n  const handleScheduleAppointment = (patientId: string) => {\r\n    console.log('Schedule appointment for patient:', patientId);\r\n    // Would navigate to appointment scheduling\r\n  };\r\n\r\n  const handleOpenHistory = (patient: PatientListItem) => {\r\n    const fullPatient = patients.find(p => p.id === patient.id);\r\n    if (fullPatient) {\r\n      setSelectedPatient(fullPatient);\r\n      openHistory();\r\n    }\r\n  };\r\n\r\n  const handleOpenDocuments = (patient: PatientListItem) => {\r\n    const fullPatient = patients.find(p => p.id === patient.id);\r\n    if (fullPatient) {\r\n      setSelectedPatient(fullPatient);\r\n      openDocuments();\r\n    }\r\n  };\r\n\r\n  // Table columns configuration\r\n  const columns: TableColumn[] = [\r\n    {\r\n      key: 'patientId',\r\n      title: 'Patient ID',\r\n      sortable: true,\r\n      width: '120px',\r\n      render: (value) => (\r\n        <Text fw={500} c=\"blue\">\r\n          {value as string}\r\n        </Text>\r\n      )\r\n    },\r\n    {\r\n      key: 'fullName',\r\n      title: 'Patient Name',\r\n      sortable: true,\r\n      render: (value, record) => (\r\n        <Group gap=\"sm\">\r\n          <Avatar size=\"sm\" name={value as string} color=\"blue\" />\r\n          <div>\r\n            <Text fw={500}>{value as string}</Text>\r\n            <Text size=\"xs\" c=\"dimmed\">\r\n              {record.age as string} years • {record.gender as string}\r\n            </Text>\r\n          </div>\r\n        </Group>\r\n      )\r\n    },\r\n    {\r\n      key: 'phoneNumber',\r\n      title: 'Contact',\r\n      render: (value) => (\r\n        <div>\r\n          <Group gap=\"xs\">\r\n            <IconPhone size=\"1rem\" />\r\n            <Text size=\"sm\">{formatPhoneNumber(value as string)}</Text>\r\n          </Group>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'lastVisitDate',\r\n      title: 'Last Visit',\r\n      sortable: true,\r\n      render: (value) => value ? formatDate(value as string | Date) : 'Never'\r\n    },\r\n    {\r\n      key: 'totalVisits',\r\n      title: 'Visits',\r\n      sortable: true,\r\n      width: '80px',\r\n      render: (value) => (\r\n        <Badge variant=\"light\" color=\"blue\">\r\n          {value as string}\r\n        </Badge>\r\n      )\r\n    },\r\n    {\r\n      key: 'status',\r\n      title: 'Status',\r\n      render: (value) => (\r\n        <Badge\r\n          color={value === 'active' ? 'green' : 'red'}\r\n          variant=\"light\"\r\n        >\r\n          {value as string}\r\n        </Badge>\r\n      )\r\n    },\r\n    {\r\n      key: 'hasInsurance',\r\n      title: 'Insurance',\r\n      render: (value, record) => (\r\n        <Group gap=\"xs\">\r\n          {value ? (\r\n            <Badge color=\"green\" variant=\"light\" leftSection={<IconShieldX size=\"0.8rem\" />}>\r\n              Insured\r\n            </Badge>\r\n          ) : (\r\n            <Badge color=\"gray\" variant=\"light\">\r\n              Self Pay\r\n            </Badge>\r\n          )}\r\n          {record.emergencyFlag && (\r\n            <IconAlertCircle size=\"1rem\" color=\"red\" />\r\n          )}\r\n        </Group>\r\n      )\r\n    }\r\n  ];\r\n\r\n  // Filter options\r\n  const filterOptions: FilterOption[] = [\r\n    {\r\n      key: 'status',\r\n      title: 'Status',\r\n      type: 'select',\r\n      options: [\r\n        { value: 'active', title: 'Active' },\r\n        { value: 'inactive', title: 'Inactive' }\r\n      ]\r\n    },\r\n    {\r\n      key: 'gender',\r\n      title: 'Gender',\r\n      type: 'select',\r\n      options: [\r\n        { value: 'male', title: 'Male' },\r\n        { value: 'female', title: 'Female' },\r\n        { value: 'other', title: 'Other' }\r\n      ]\r\n    },\r\n    {\r\n      key: 'hasInsurance',\r\n      title: 'Insurance',\r\n      type: 'select',\r\n      options: [\r\n        { value: 'true', title: 'Insured' },\r\n        { value: 'false', title: 'Self Pay' }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  // Statistics cards\r\n  const StatCard = ({ title, value, icon, color, subtitle }: { title: string; value: string; icon: React.ReactNode; color: string; subtitle?: string }) => (\r\n    <Card shadow=\"sm\" padding=\"lg\" radius=\"md\" withBorder>\r\n      <Group justify=\"space-between\" mb=\"md\">\r\n        <div style={{ color: `var(--mantine-color-${color}-6)` }}>\r\n          {icon}\r\n        </div>\r\n      </Group>\r\n\r\n      <Text size=\"xl\" fw={700} mb=\"xs\">\r\n        {value}\r\n      </Text>\r\n\r\n      <Text size=\"sm\" c=\"dimmed\" mb=\"sm\">\r\n        {title}\r\n      </Text>\r\n\r\n      {subtitle && (\r\n        <Text size=\"xs\" c=\"dimmed\">\r\n          {subtitle}\r\n        </Text>\r\n      )}\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Layout user={user ? { id: user.id, name: `${user.firstName} ${user.lastName}`, email: user.email, role: user.role } : undefined} notifications={notifications.length} onLogout={() => setUser(null)}>\r\n      <Container fluid>\r\n        <Stack gap=\"lg\">\r\n          {/* Header */}\r\n          <Group justify=\"space-between\">\r\n            <div>\r\n              <Title order={2}>Patient Management</Title>\r\n              <Text c=\"dimmed\">\r\n                Manage patient registration, medical records, and healthcare information\r\n              </Text>\r\n            </div>\r\n            <Group>\r\n              <Button\r\n                leftSection={<IconUserPlus size=\"1rem\" />}\r\n                onClick={open}\r\n              >\r\n                New Patient\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                leftSection={<IconDownload size=\"1rem\" />}\r\n              >\r\n                Export\r\n              </Button>\r\n            </Group>\r\n          </Group>\r\n\r\n          {/* Statistics Cards */}\r\n          <SimpleGrid cols={{ base: 1, sm: 2, lg: 4 }} spacing=\"lg\">\r\n            <StatCard\r\n              title=\"Total Patients\"\r\n              value={patientStats ? patientStats.totalPatients.toLocaleString() : '0'}\r\n              icon={<IconUsers size=\"2rem\" />}\r\n              color=\"blue\"\r\n              subtitle={patientStats ? `+${patientStats.newPatientsThisMonth} this month` : ''}\r\n            />\r\n            <StatCard\r\n              title=\"New Today\"\r\n              value={patientStats ? patientStats.newPatientsToday.toString() : '0'}\r\n              icon={<IconUserPlus size=\"2rem\" />}\r\n              color=\"green\"\r\n              subtitle=\"New registrations today\"\r\n            />\r\n            <StatCard\r\n              title=\"Active Patients\"\r\n              value={patientStats ? patientStats.activePatients.toLocaleString() : '0'}\r\n              icon={<IconHeart size=\"2rem\" />}\r\n              color=\"red\"\r\n              subtitle=\"Currently under care\"\r\n            />\r\n            <StatCard\r\n              title=\"Average Age\"\r\n              value={patientStats ? `${patientStats.averageAge} years` : '0 years'}\r\n              icon={<IconCalendar size=\"2rem\" />}\r\n              color=\"purple\"\r\n              subtitle=\"Patient demographics\"\r\n            />\r\n          </SimpleGrid>\r\n\r\n          {/* Tabs */}\r\n          <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'list')}>\r\n            <Tabs.List>\r\n              <Tabs.Tab value=\"list\">Patient List</Tabs.Tab>\r\n              <Tabs.Tab value=\"analytics\">Analytics</Tabs.Tab>\r\n              <Tabs.Tab value=\"demographics\">Demographics</Tabs.Tab>\r\n              <Tabs.Tab value=\"insurance\">Insurance</Tabs.Tab>\r\n            </Tabs.List>\r\n\r\n            <Tabs.Panel value=\"list\" pt=\"md\">\r\n              <DataTable\r\n                data={patientListItems}\r\n                columns={columns}\r\n                loading={loading}\r\n                searchable={true}\r\n                filterable={true}\r\n                sortable={true}\r\n                filters={filterOptions}\r\n                onSearch={(query) => setSearchQuery(query)}\r\n                onFilter={(filters) => setFilters(filters)}\r\n                pagination={{\r\n                  page: 1,\r\n                  limit: 10,\r\n                  total: patientListItems.length,\r\n                  onPageChange: (page) => console.log('Page:', page),\r\n                  onLimitChange: (limit) => console.log('Limit:', limit)\r\n                }}\r\n                actions={{\r\n                  view: handleViewPatient,\r\n                  edit: handleEditPatientForTable,\r\n                  delete: handleDeletePatient\r\n                }}\r\n                emptyMessage=\"No patients found\"\r\n              />\r\n            </Tabs.Panel>\r\n\r\n            <Tabs.Panel value=\"analytics\" pt=\"md\">\r\n              <Grid>\r\n                <Grid.Col span={{ base: 12, md: 6 }}>\r\n                  <Paper p=\"lg\" shadow=\"sm\" radius=\"md\" withBorder>\r\n                    <Text fw={600} size=\"lg\" mb=\"md\">\r\n                      Visit Trends (Last 7 Days)\r\n                    </Text>\r\n                    <Stack gap=\"sm\">\r\n                      {patientStats?.visitTrends?.map((trend, index) => (\r\n                        <Group key={index} justify=\"space-between\">\r\n                          <Text size=\"sm\">{formatDate(new Date(trend.date))}</Text>\r\n                          <Group gap=\"sm\">\r\n                            <Progress\r\n                              value={(trend.count / 200) * 100}\r\n                              size=\"sm\"\r\n                              w={100}\r\n                              color=\"blue\"\r\n                            />\r\n                            <Text size=\"sm\" fw={500}>{trend.count}</Text>\r\n                          </Group>\r\n                        </Group>\r\n                      )) || <Text>No data available</Text>}\r\n                    </Stack>\r\n                  </Paper>\r\n                </Grid.Col>\r\n\r\n                <Grid.Col span={{ base: 12, md: 6 }}>\r\n                  <Paper p=\"lg\" shadow=\"sm\" radius=\"md\" withBorder>\r\n                    <Text fw={600} size=\"lg\" mb=\"md\">\r\n                      Quick Stats\r\n                    </Text>\r\n                    <Stack gap=\"md\">\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\">Male Patients</Text>\r\n                        <Text size=\"sm\" fw={500}>\r\n                          {patientStats ? `${patientStats.genderDistribution.male} (${Math.round((patientStats.genderDistribution.male / patientStats.totalPatients) * 100)}%)` : '0 (0%)'}\r\n                        </Text>\r\n                      </Group>\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\">Female Patients</Text>\r\n                        <Text size=\"sm\" fw={500}>\r\n                          {patientStats ? `${patientStats.genderDistribution.female} (${Math.round((patientStats.genderDistribution.female / patientStats.totalPatients) * 100)}%)` : '0 (0%)'}\r\n                        </Text>\r\n                      </Group>\r\n                      <Divider />\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\">Insured Patients</Text>\r\n                        <Text size=\"sm\" fw={500} c=\"green\">\r\n                          {patientStats ? `${patientStats.insuranceDistribution.insured} (${Math.round((patientStats.insuranceDistribution.insured / patientStats.totalPatients) * 100)}%)` : '0 (0%)'}\r\n                        </Text>\r\n                      </Group>\r\n                      <Group justify=\"space-between\">\r\n                        <Text size=\"sm\">Self-Pay Patients</Text>\r\n                        <Text size=\"sm\" fw={500} c=\"orange\">\r\n                          {patientStats ? `${patientStats.insuranceDistribution.uninsured} (${Math.round((patientStats.insuranceDistribution.uninsured / patientStats.totalPatients) * 100)}%)` : '0 (0%)'}\r\n                        </Text>\r\n                      </Group>\r\n                    </Stack>\r\n                  </Paper>\r\n                </Grid.Col>\r\n              </Grid>\r\n            </Tabs.Panel>\r\n\r\n            <Tabs.Panel value=\"demographics\" pt=\"md\">\r\n              <Grid>\r\n                <Grid.Col span={{ base: 12, md: 6 }}>\r\n                  <Paper p=\"lg\" shadow=\"sm\" radius=\"md\" withBorder>\r\n                    <Text fw={600} size=\"lg\" mb=\"md\">\r\n                      Blood Group Distribution\r\n                    </Text>\r\n                    <Stack gap=\"sm\">\r\n                      {patientStats?.bloodGroupDistribution && Object.entries(patientStats.bloodGroupDistribution).map(([bloodGroup, count]) => (\r\n                        <Group key={bloodGroup} justify=\"space-between\">\r\n                          <Text size=\"sm\">{bloodGroup}</Text>\r\n                          <Group gap=\"sm\">\r\n                            <Progress\r\n                              value={(count / (patientStats.totalPatients || 1)) * 100}\r\n                              size=\"sm\"\r\n                              w={100}\r\n                              color=\"red\"\r\n                            />\r\n                            <Text size=\"sm\" fw={500}>{count}</Text>\r\n                          </Group>\r\n                        </Group>\r\n                      )) || <Text>No data available</Text>}\r\n                    </Stack>\r\n                  </Paper>\r\n                </Grid.Col>\r\n\r\n                <Grid.Col span={{ base: 12, md: 6 }}>\r\n                  <Paper p=\"lg\" shadow=\"sm\" radius=\"md\" withBorder>\r\n                    <Text fw={600} size=\"lg\" mb=\"md\">\r\n                      Age Distribution\r\n                    </Text>\r\n                    <Alert icon={<IconAlertCircle size=\"1rem\" />} color=\"blue\">\r\n                      Age analytics feature will show detailed age group breakdowns,\r\n                      pediatric vs adult ratios, and senior citizen statistics.\r\n                    </Alert>\r\n                  </Paper>\r\n                </Grid.Col>\r\n              </Grid>\r\n            </Tabs.Panel>\r\n\r\n            <Tabs.Panel value=\"insurance\" pt=\"md\">\r\n              <Paper p=\"lg\" shadow=\"sm\" radius=\"md\" withBorder>\r\n                <Text fw={600} size=\"lg\" mb=\"md\">\r\n                  Insurance Coverage Analysis\r\n                </Text>\r\n                <SimpleGrid cols={{ base: 1, md: 2 }} spacing=\"lg\">\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\" mb=\"sm\">Coverage Distribution</Text>\r\n                    <Group gap=\"lg\">\r\n                      <div>\r\n                        <Text size=\"xl\" fw={700} c=\"green\">\r\n                          {patientStats ? `${Math.round((patientStats.insuranceDistribution.insured / patientStats.totalPatients) * 100)}%` : '0%'}\r\n                        </Text>\r\n                        <Text size=\"sm\" c=\"dimmed\">Insured</Text>\r\n                      </div>\r\n                      <div>\r\n                        <Text size=\"xl\" fw={700} c=\"orange\">\r\n                          {patientStats ? `${Math.round((patientStats.insuranceDistribution.uninsured / patientStats.totalPatients) * 100)}%` : '0%'}\r\n                        </Text>\r\n                        <Text size=\"sm\" c=\"dimmed\">Self-Pay</Text>\r\n                      </div>\r\n                    </Group>\r\n                  </div>\r\n                  <div>\r\n                    <Text size=\"sm\" c=\"dimmed\" mb=\"sm\">Insurance Types</Text>\r\n                    <Alert icon={<IconShieldX size=\"1rem\" />} color=\"blue\">\r\n                      Government: 45% • Private: 35% • Corporate: 20%\r\n                    </Alert>\r\n                  </div>\r\n                </SimpleGrid>\r\n              </Paper>\r\n            </Tabs.Panel>\r\n          </Tabs>\r\n\r\n          {/* Enhanced Patient Details Modal */}\r\n          <PatientDetails\r\n            opened={viewModalOpened}\r\n            onClose={closeView}\r\n            patient={selectedPatient}\r\n            visits={[]}\r\n            documents={[]}\r\n            medicalHistory={[]}\r\n            appointments={[]}\r\n            onEdit={handleEditPatientForModal}\r\n            onScheduleAppointment={handleScheduleAppointment}\r\n          />\r\n\r\n          {/* Enhanced Patient Form Modal */}\r\n          <PatientForm\r\n            opened={opened}\r\n            onClose={close}\r\n            patient={selectedPatient}\r\n            onSubmit={selectedPatient ? handleUpdatePatient : handleCreatePatient}\r\n          />\r\n\r\n          {/* Medical History Manager */}\r\n          {selectedPatient && (\r\n            <MedicalHistoryManager\r\n              opened={historyModalOpened}\r\n              onClose={closeHistory}\r\n              patientId={selectedPatient.patientId}\r\n              patientName={`${selectedPatient.firstName} ${selectedPatient.lastName}`}\r\n              medicalHistory={[]}\r\n              onSave={handleSaveMedicalHistory}\r\n              onUpdate={handleUpdateMedicalHistory}\r\n              onDelete={handleDeleteMedicalHistory}\r\n            />\r\n          )}\r\n\r\n          {/* Document Manager */}\r\n          {selectedPatient && (\r\n            <DocumentManager\r\n              opened={documentsModalOpened}\r\n              onClose={closeDocuments}\r\n              patientId={selectedPatient.patientId}\r\n              patientName={`${selectedPatient.firstName} ${selectedPatient.lastName}`}\r\n              documents={[]}\r\n              onUpload={handleUploadDocument}\r\n              onUpdate={handleUpdateDocument}\r\n              onDelete={handleDeleteDocument}\r\n              onDownload={handleDownloadDocument}\r\n              onView={handleViewDocument}\r\n            />\r\n          )}\r\n        </Stack>\r\n      </Container>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default PatientsPage;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\prescriptions\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\profile\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 109,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 109,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 141,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 141,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 154,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 154,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\nimport Layout from '../components/Layout';\r\nimport Card from '../components/ui/Card';\r\nimport Button from '../components/ui/Button';\r\nimport Input from '../components/ui/Input';\r\nimport React, { useState } from 'react';\r\n\r\ninterface UserProfile {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phone: string;\r\n  dateOfBirth: string;\r\n  gender: 'MALE' | 'FEMALE' | 'OTHER';\r\n  address: string;\r\n  city: string;\r\n  state: string;\r\n  zipCode: string;\r\n  role: 'ADMIN' | 'DOCTOR' | 'NURSE' | 'STAFF' | 'TECHNICIAN';\r\n  department: string;\r\n  licenseNumber?: string;\r\n  specialization?: string;\r\n  profileImage?: string;\r\n  joinedDate: string;\r\n  isActive: boolean;\r\n}\r\n\r\ninterface PasswordForm {\r\n  currentPassword: string;\r\n  newPassword: string;\r\n  confirmPassword: string;\r\n}\r\n\r\ninterface NotificationSettings {\r\n  emailNotifications: boolean;\r\n  smsNotifications: boolean;\r\n  pushNotifications: boolean;\r\n  appointmentReminders: boolean;\r\n  systemUpdates: boolean;\r\n  marketingEmails: boolean;\r\n}\r\n\r\nconst ProfilePage = () => {\r\n  const [currentTab, setCurrentTab] = useState<'profile' | 'password' | 'notifications' | 'security'>('profile');\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [profile, setProfile] = useState<UserProfile>({\r\n    id: '1',\r\n    firstName: 'Dr. Sarah',\r\n    lastName: 'Johnson',\r\n    email: 'sarah.johnson@hospital.com',\r\n    phone: '+1 (555) 123-4567',\r\n    dateOfBirth: '1985-03-15',\r\n    gender: 'FEMALE',\r\n    address: '123 Medical Plaza, Suite 200',\r\n    city: 'New York',\r\n    state: 'NY',\r\n    zipCode: '10001',\r\n    role: 'DOCTOR',\r\n    department: 'Cardiology',\r\n    licenseNumber: 'MD123456789',\r\n    specialization: 'Interventional Cardiology',\r\n    joinedDate: '2020-01-15',\r\n    isActive: true\r\n  });\r\n\r\n  const [passwordForm, setPasswordForm] = useState<PasswordForm>({\r\n    currentPassword: '',\r\n    newPassword: '',\r\n    confirmPassword: ''\r\n  });\r\n\r\n  const [notifications, setNotifications] = useState<NotificationSettings>({\r\n    emailNotifications: true,\r\n    smsNotifications: false,\r\n    pushNotifications: true,\r\n    appointmentReminders: true,\r\n    systemUpdates: true,\r\n    marketingEmails: false\r\n  });\r\n\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n  const handleProfileSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErrors({});\r\n\r\n    try {\r\n      // Validate required fields\r\n      const newErrors: Record<string, string> = {};\r\n      if (!profile.firstName) newErrors.firstName = 'First name is required';\r\n      if (!profile.lastName) newErrors.lastName = 'Last name is required';\r\n      if (!profile.email) newErrors.email = 'Email is required';\r\n      if (!profile.phone) newErrors.phone = 'Phone is required';\r\n\r\n      if (Object.keys(newErrors).length > 0) {\r\n        setErrors(newErrors);\r\n        return;\r\n      }\r\n\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      setIsEditing(false);\r\n      alert('Profile updated successfully!');\r\n    } catch (error) {\r\n      alert('Failed to update profile. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErrors({});\r\n\r\n    try {\r\n      // Validate password form\r\n      const newErrors: Record<string, string> = {};\r\n      if (!passwordForm.currentPassword) newErrors.currentPassword = 'Current password is required';\r\n      if (!passwordForm.newPassword) newErrors.newPassword = 'New password is required';\r\n      if (passwordForm.newPassword.length < 8) newErrors.newPassword = 'Password must be at least 8 characters';\r\n      if (passwordForm.newPassword !== passwordForm.confirmPassword) {\r\n        newErrors.confirmPassword = 'Passwords do not match';\r\n      }\r\n\r\n      if (Object.keys(newErrors).length > 0) {\r\n        setErrors(newErrors);\r\n        return;\r\n      }\r\n\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      setPasswordForm({ currentPassword: '', newPassword: '', confirmPassword: '' });\r\n      alert('Password updated successfully!');\r\n    } catch (error) {\r\n      alert('Failed to update password. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleNotificationsSave = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      alert('Notification preferences saved!');\r\n    } catch (error) {\r\n      alert('Failed to save preferences. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const getRoleColor = (role: string) => {\r\n    switch (role) {\r\n      case 'ADMIN': return '#dc2626';\r\n      case 'DOCTOR': return '#059669';\r\n      case 'NURSE': return '#0369a1';\r\n      case 'STAFF': return '#7c3aed';\r\n      case 'TECHNICIAN': return '#ea580c';\r\n      default: return '#6b7280';\r\n    }\r\n  };\r\n\r\n  const ProfileForm = () => (\r\n    <form onSubmit={handleProfileSubmit}>\r\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1.5rem' }}>\r\n        {/* Basic Information */}\r\n        <div style={{ gridColumn: 'span 2' }}>\r\n          <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n            Basic Information\r\n          </h3>\r\n        </div>\r\n        \r\n        <Input\r\n          label=\"First Name\"\r\n          value={profile.firstName}\r\n          onChange={(e) => setProfile(prev => ({ ...prev, firstName: e.target.value }))}\r\n          error={errors.firstName}\r\n          disabled={!isEditing}\r\n          required\r\n        />\r\n        \r\n        <Input\r\n          label=\"Last Name\"\r\n          value={profile.lastName}\r\n          onChange={(e) => setProfile(prev => ({ ...prev, lastName: e.target.value }))}\r\n          error={errors.lastName}\r\n          disabled={!isEditing}\r\n          required\r\n        />\r\n        \r\n        <Input\r\n          type=\"email\"\r\n          label=\"Email\"\r\n          value={profile.email}\r\n          onChange={(e) => setProfile(prev => ({ ...prev, email: e.target.value }))}\r\n          error={errors.email}\r\n          disabled={!isEditing}\r\n          required\r\n        />\r\n        \r\n        <Input\r\n          type=\"tel\"\r\n          label=\"Phone\"\r\n          value={profile.phone}\r\n          onChange={(e) => setProfile(prev => ({ ...prev, phone: e.target.value }))}\r\n          error={errors.phone}\r\n          disabled={!isEditing}\r\n          required\r\n        />\r\n        \r\n        <Input\r\n          type=\"date\"\r\n          label=\"Date of Birth\"\r\n          value={profile.dateOfBirth}\r\n          onChange={(e) => setProfile(prev => ({ ...prev, dateOfBirth: e.target.value }))}\r\n          disabled={!isEditing}\r\n        />\r\n        \r\n        <div>\r\n          <label style={{ \r\n            display: 'block', \r\n            marginBottom: '0.5rem', \r\n            fontSize: '0.875rem', \r\n            fontWeight: '600', \r\n            color: '#374151' \r\n          }}>\r\n            Gender\r\n          </label>\r\n          <select\r\n            value={profile.gender}\r\n            onChange={(e) => setProfile(prev => ({ ...prev, gender: e.target.value as string }))}\r\n            disabled={!isEditing}\r\n            style={{\r\n              width: '100%',\r\n              padding: '0.75rem 1rem',\r\n              border: '1px solid #d1d5db',\r\n              borderRadius: '8px',\r\n              fontSize: '1rem',\r\n              backgroundColor: isEditing ? 'white' : '#f9fafb',\r\n              color: '#374151'\r\n            }}\r\n          >\r\n            <option value=\"MALE\">Male</option>\r\n            <option value=\"FEMALE\">Female</option>\r\n            <option value=\"OTHER\">Other</option>\r\n          </select>\r\n        </div>\r\n\r\n        {/* Address Information */}\r\n        <div style={{ gridColumn: 'span 2', marginTop: '2rem' }}>\r\n          <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n            Address Information\r\n          </h3>\r\n        </div>\r\n        \r\n        <div style={{ gridColumn: 'span 2' }}>\r\n          <Input\r\n            label=\"Address\"\r\n            value={profile.address}\r\n            onChange={(e) => setProfile(prev => ({ ...prev, address: e.target.value }))}\r\n            disabled={!isEditing}\r\n          />\r\n        </div>\r\n        \r\n        <Input\r\n          label=\"City\"\r\n          value={profile.city}\r\n          onChange={(e) => setProfile(prev => ({ ...prev, city: e.target.value }))}\r\n          disabled={!isEditing}\r\n        />\r\n        \r\n        <Input\r\n          label=\"State\"\r\n          value={profile.state}\r\n          onChange={(e) => setProfile(prev => ({ ...prev, state: e.target.value }))}\r\n          disabled={!isEditing}\r\n        />\r\n        \r\n        <Input\r\n          label=\"ZIP Code\"\r\n          value={profile.zipCode}\r\n          onChange={(e) => setProfile(prev => ({ ...prev, zipCode: e.target.value }))}\r\n          disabled={!isEditing}\r\n        />\r\n\r\n        {/* Professional Information */}\r\n        <div style={{ gridColumn: 'span 2', marginTop: '2rem' }}>\r\n          <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n            Professional Information\r\n          </h3>\r\n        </div>\r\n        \r\n        <Input\r\n          label=\"Department\"\r\n          value={profile.department}\r\n          onChange={(e) => setProfile(prev => ({ ...prev, department: e.target.value }))}\r\n          disabled={!isEditing}\r\n        />\r\n        \r\n        <Input\r\n          label=\"License Number\"\r\n          value={profile.licenseNumber || ''}\r\n          onChange={(e) => setProfile(prev => ({ ...prev, licenseNumber: e.target.value }))}\r\n          disabled={!isEditing}\r\n        />\r\n        \r\n        <div style={{ gridColumn: 'span 2' }}>\r\n          <Input\r\n            label=\"Specialization\"\r\n            value={profile.specialization || ''}\r\n            onChange={(e) => setProfile(prev => ({ ...prev, specialization: e.target.value }))}\r\n            disabled={!isEditing}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {isEditing && (\r\n        <div style={{ display: 'flex', gap: '1rem', marginTop: '2rem', justifyContent: 'flex-end' }}>\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"outline\"\r\n            onClick={() => setIsEditing(false)}\r\n            disabled={isLoading}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button type=\"submit\" disabled={isLoading}>\r\n            {isLoading ? 'Saving...' : 'Save Changes'}\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n\r\n  const PasswordForm = () => (\r\n    <Card>\r\n      <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1.5rem' }}>\r\n        Change Password\r\n      </h3>\r\n      \r\n      <form onSubmit={handlePasswordSubmit}>\r\n        <div style={{ maxWidth: '400px' }}>\r\n          <div style={{ marginBottom: '1.5rem' }}>\r\n            <Input\r\n              type=\"password\"\r\n              label=\"Current Password\"\r\n              value={passwordForm.currentPassword}\r\n              onChange={(e) => setPasswordForm(prev => ({ ...prev, currentPassword: e.target.value }))}\r\n              error={errors.currentPassword}\r\n              required\r\n            />\r\n          </div>\r\n          \r\n          <div style={{ marginBottom: '1.5rem' }}>\r\n            <Input\r\n              type=\"password\"\r\n              label=\"New Password\"\r\n              value={passwordForm.newPassword}\r\n              onChange={(e) => setPasswordForm(prev => ({ ...prev, newPassword: e.target.value }))}\r\n              error={errors.newPassword}\r\n              required\r\n            />\r\n            <p style={{ margin: '0.25rem 0 0 0', fontSize: '0.75rem', color: '#6b7280' }}>\r\n              Password must be at least 8 characters long\r\n            </p>\r\n          </div>\r\n          \r\n          <div style={{ marginBottom: '2rem' }}>\r\n            <Input\r\n              type=\"password\"\r\n              label=\"Confirm New Password\"\r\n              value={passwordForm.confirmPassword}\r\n              onChange={(e) => setPasswordForm(prev => ({ ...prev, confirmPassword: e.target.value }))}\r\n              error={errors.confirmPassword}\r\n              required\r\n            />\r\n          </div>\r\n          \r\n          <Button type=\"submit\" disabled={isLoading}>\r\n            {isLoading ? 'Updating...' : 'Update Password'}\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Card>\r\n  );\r\n\r\n  const NotificationsForm = () => (\r\n    <Card>\r\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem' }}>\r\n        <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937' }}>\r\n          Notification Preferences\r\n        </h3>\r\n        <Button onClick={handleNotificationsSave} disabled={isLoading}>\r\n          {isLoading ? 'Saving...' : 'Save Preferences'}\r\n        </Button>\r\n      </div>\r\n      \r\n      <div style={{ display: 'grid', gap: '1.5rem' }}>\r\n        {[\r\n          { key: 'emailNotifications', label: 'Email Notifications', description: 'Receive notifications via email' },\r\n          { key: 'smsNotifications', label: 'SMS Notifications', description: 'Receive notifications via SMS' },\r\n          { key: 'pushNotifications', label: 'Push Notifications', description: 'Receive push notifications in browser' },\r\n          { key: 'appointmentReminders', label: 'Appointment Reminders', description: 'Get reminded about upcoming appointments' },\r\n          { key: 'systemUpdates', label: 'System Updates', description: 'Receive updates about system changes' },\r\n          { key: 'marketingEmails', label: 'Marketing Emails', description: 'Receive marketing and promotional emails' }\r\n        ].map(item => (\r\n          <div key={item.key} style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            padding: '1rem',\r\n            border: '1px solid #e5e7eb',\r\n            borderRadius: '8px'\r\n          }}>\r\n            <div>\r\n              <h4 style={{ margin: '0 0 0.25rem 0', fontSize: '1rem', fontWeight: '600', color: '#1f2937' }}>\r\n                {item.label}\r\n              </h4>\r\n              <p style={{ margin: '0', fontSize: '0.875rem', color: '#6b7280' }}>\r\n                {item.description}\r\n              </p>\r\n            </div>\r\n            <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={notifications[item.key as keyof NotificationSettings]}\r\n                onChange={(e) => setNotifications(prev => ({\r\n                  ...prev,\r\n                  [item.key]: e.target.checked\r\n                }))}\r\n                style={{ \r\n                  width: '1.25rem',\r\n                  height: '1.25rem',\r\n                  marginRight: '0.5rem'\r\n                }}\r\n              />\r\n              <span style={{ fontSize: '0.875rem', color: '#374151' }}>\r\n                {notifications[item.key as keyof NotificationSettings] ? 'Enabled' : 'Disabled'}\r\n              </span>\r\n            </label>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Card>\r\n  );\r\n\r\n  const SecuritySettings = () => (\r\n    <Card>\r\n      <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1.5rem' }}>\r\n        Security Settings\r\n      </h3>\r\n      \r\n      <div style={{ display: 'grid', gap: '1.5rem' }}>\r\n        <div style={{\r\n          padding: '1.5rem',\r\n          border: '1px solid #e5e7eb',\r\n          borderRadius: '8px'\r\n        }}>\r\n          <h4 style={{ margin: '0 0 1rem 0', fontSize: '1rem', fontWeight: '600', color: '#1f2937' }}>\r\n            Two-Factor Authentication\r\n          </h4>\r\n          <p style={{ margin: '0 0 1rem 0', fontSize: '0.875rem', color: '#6b7280' }}>\r\n            Add an extra layer of security to your account by requiring a second form of authentication.\r\n          </p>\r\n          <Button variant=\"outline\">\r\n            Enable 2FA\r\n          </Button>\r\n        </div>\r\n\r\n        <div style={{\r\n          padding: '1.5rem',\r\n          border: '1px solid #e5e7eb',\r\n          borderRadius: '8px'\r\n        }}>\r\n          <h4 style={{ margin: '0 0 1rem 0', fontSize: '1rem', fontWeight: '600', color: '#1f2937' }}>\r\n            Active Sessions\r\n          </h4>\r\n          <p style={{ margin: '0 0 1rem 0', fontSize: '0.875rem', color: '#6b7280' }}>\r\n            Monitor and manage your active login sessions across devices.\r\n          </p>\r\n          <div style={{ \r\n            padding: '0.75rem',\r\n            backgroundColor: '#f9fafb',\r\n            borderRadius: '6px',\r\n            marginBottom: '1rem',\r\n            fontSize: '0.875rem'\r\n          }}>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n              <div>\r\n                <strong>Current Session</strong>\r\n                <br />\r\n                Chrome on Windows • New York, NY\r\n              </div>\r\n              <span style={{ color: '#10b981', fontSize: '0.75rem' }}>Active Now</span>\r\n            </div>\r\n          </div>\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            Manage Sessions\r\n          </Button>\r\n        </div>\r\n\r\n        <div style={{\r\n          padding: '1.5rem',\r\n          border: '1px solid #fee2e2',\r\n          borderRadius: '8px',\r\n          backgroundColor: '#fef2f2'\r\n        }}>\r\n          <h4 style={{ margin: '0 0 1rem 0', fontSize: '1rem', fontWeight: '600', color: '#dc2626' }}>\r\n            Danger Zone\r\n          </h4>\r\n          <p style={{ margin: '0 0 1rem 0', fontSize: '0.875rem', color: '#6b7280' }}>\r\n            These actions are irreversible and will permanently affect your account.\r\n          </p>\r\n          <div style={{ display: 'flex', gap: '1rem' }}>\r\n            <Button variant=\"outline\" size=\"sm\">\r\n              Deactivate Account\r\n            </Button>\r\n            <Button variant=\"outline\" size=\"sm\" style={{ color: '#dc2626', borderColor: '#dc2626' }}>\r\n              Delete Account\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Layout>\r\n      <div style={{ maxWidth: '1200px', margin: '0 auto' }}>\r\n        {/* Header */}\r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'space-between', \r\n          alignItems: 'center', \r\n          marginBottom: '2rem' \r\n        }}>\r\n          <div>\r\n            <h1 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n              Profile Settings\r\n            </h1>\r\n            <p style={{ color: '#6b7280', fontSize: '1rem' }}>\r\n              Manage your account information and preferences\r\n            </p>\r\n          </div>\r\n          {currentTab === 'profile' && !isEditing && (\r\n            <Button onClick={() => setIsEditing(true)}>\r\n              ✏️ Edit Profile\r\n            </Button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Profile Overview Card */}\r\n        <Card style={{ marginBottom: '2rem' }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '1.5rem' }}>\r\n            <div style={{\r\n              width: '80px',\r\n              height: '80px',\r\n              borderRadius: '50%',\r\n              backgroundColor: '#667eea',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              fontSize: '2rem',\r\n              color: 'white',\r\n              fontWeight: 'bold'\r\n            }}>\r\n              {profile.firstName.charAt(0)}{profile.lastName.charAt(0)}\r\n            </div>\r\n            \r\n            <div style={{ flex: 1 }}>\r\n              <h2 style={{ \r\n                fontSize: '1.5rem', \r\n                fontWeight: '600', \r\n                color: '#1f2937', \r\n                marginBottom: '0.5rem' \r\n              }}>\r\n                {profile.firstName} {profile.lastName}\r\n              </h2>\r\n              \r\n              <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '0.5rem' }}>\r\n                <span style={{\r\n                  padding: '0.25rem 0.75rem',\r\n                  backgroundColor: `${getRoleColor(profile.role)}15`,\r\n                  color: getRoleColor(profile.role),\r\n                  borderRadius: '12px',\r\n                  fontSize: '0.75rem',\r\n                  fontWeight: '600'\r\n                }}>\r\n                  {profile.role}\r\n                </span>\r\n                <span style={{ fontSize: '0.875rem', color: '#6b7280' }}>\r\n                  {profile.department}\r\n                </span>\r\n              </div>\r\n              \r\n              <div style={{ display: 'flex', alignItems: 'center', gap: '2rem', fontSize: '0.875rem', color: '#6b7280' }}>\r\n                <span>📧 {profile.email}</span>\r\n                <span>📞 {profile.phone}</span>\r\n                <span>📅 Joined {new Date(profile.joinedDate).toLocaleDateString()}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Card>\r\n\r\n        {/* Tab Navigation */}\r\n        <div style={{ marginBottom: '2rem' }}>\r\n          <div style={{ display: 'flex', gap: '0.5rem', borderBottom: '1px solid #e5e7eb' }}>\r\n            {[\r\n              { key: 'profile', label: '👤 Profile', desc: 'Personal Information' },\r\n              { key: 'password', label: '🔒 Password', desc: 'Security Settings' },\r\n              { key: 'notifications', label: '🔔 Notifications', desc: 'Preferences' },\r\n              { key: 'security', label: '🛡️ Security', desc: 'Account Security' }\r\n            ].map(tab => (\r\n              <button\r\n                key={tab.key}\r\n                onClick={() => setCurrentTab(tab.key as string)}\r\n                style={{\r\n                  padding: '1rem 1.5rem',\r\n                  border: 'none',\r\n                  background: 'none',\r\n                  fontSize: '1rem',\r\n                  fontWeight: '500',\r\n                  color: currentTab === tab.key ? '#667eea' : '#6b7280',\r\n                  borderBottom: currentTab === tab.key ? '2px solid #667eea' : '2px solid transparent',\r\n                  cursor: 'pointer',\r\n                  transition: 'all 0.2s ease'\r\n                }}\r\n              >\r\n                <div>\r\n                  {tab.label}\r\n                  <div style={{ fontSize: '0.75rem', opacity: 0.8 }}>\r\n                    {tab.desc}\r\n                  </div>\r\n                </div>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Tab Content */}\r\n        {currentTab === 'profile' && (\r\n          <Card>\r\n            <ProfileForm />\r\n          </Card>\r\n        )}\r\n        \r\n        {currentTab === 'password' && <PasswordForm />}\r\n        {currentTab === 'notifications' && <NotificationsForm />}\r\n        {currentTab === 'security' && <SecuritySettings />}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\providers.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\radiology\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockOrders' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 62,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockReports' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 160,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 160,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\nimport Layout from '../components/Layout';\r\nimport Card from '../components/ui/Card';\r\nimport Button from '../components/ui/Button';\r\nimport Input from '../components/ui/Input';\r\nimport React, { useState } from 'react';\r\n\r\ninterface ImagingOrder {\r\n  id: string;\r\n  orderId: string;\r\n  patientId: string;\r\n  patientName: string;\r\n  patientAge: number;\r\n  patientGender: 'M' | 'F';\r\n  examType: string;\r\n  bodyPart: string;\r\n  urgency: 'STAT' | 'URGENT' | 'ROUTINE';\r\n  status: 'SCHEDULED' | 'IN_PROGRESS' | 'COMPLETED' | 'REPORTED' | 'CANCELLED';\r\n  orderDate: string;\r\n  scheduledDate: string;\r\n  completedDate?: string;\r\n  orderingPhysician: string;\r\n  department: string;\r\n  notes: string;\r\n  contrast: boolean;\r\n  preparation: string;\r\n  estimatedDuration: number;\r\n  technician?: string;\r\n  radiologist?: string;\r\n  reportStatus: 'PENDING' | 'DRAFT' | 'FINAL' | 'AMENDED';\r\n  facility: string;\r\n}\r\n\r\ninterface RadiologyReport {\r\n  id: string;\r\n  orderId: string;\r\n  patientName: string;\r\n  examType: string;\r\n  examDate: string;\r\n  radiologist: string;\r\n  status: 'DRAFT' | 'FINAL' | 'AMENDED';\r\n  findings: string;\r\n  impression: string;\r\n  recommendations: string;\r\n  reportDate: string;\r\n  criticalFindings: boolean;\r\n  comparison: string;\r\n  technique: string;\r\n  images: number;\r\n}\r\n\r\nconst RadiologyPage = () => {\r\n  const [currentTab, setCurrentTab] = useState<'orders' | 'worklist' | 'reports' | 'schedule' | 'equipment'>('orders');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('ALL');\r\n  const [urgencyFilter, setUrgencyFilter] = useState('ALL');\r\n  const [selectedOrder, setSelectedOrder] = useState<ImagingOrder | null>(null);\r\n  const [selectedReport, setSelectedReport] = useState<RadiologyReport | null>(null);\r\n  const [showOrderModal, setShowOrderModal] = useState(false);\r\n  const [showReportModal, setShowReportModal] = useState(false);\r\n\r\n  const mockOrders: ImagingOrder[] = [\r\n    {\r\n      id: '1',\r\n      orderId: 'RAD-2024-001',\r\n      patientId: 'P001',\r\n      patientName: 'John Smith',\r\n      patientAge: 45,\r\n      patientGender: 'M',\r\n      examType: 'Chest CT with Contrast',\r\n      bodyPart: 'Chest',\r\n      urgency: 'URGENT',\r\n      status: 'SCHEDULED',\r\n      orderDate: '2024-12-05',\r\n      scheduledDate: '2024-12-06T10:00:00',\r\n      orderingPhysician: 'Dr. Emily Johnson',\r\n      department: 'Emergency Department',\r\n      notes: 'Suspected pulmonary embolism, patient has chest pain and shortness of breath',\r\n      contrast: true,\r\n      preparation: 'NPO 4 hours prior to exam',\r\n      estimatedDuration: 30,\r\n      reportStatus: 'PENDING',\r\n      facility: 'Main Campus'\r\n    },\r\n    {\r\n      id: '2',\r\n      orderId: 'RAD-2024-002',\r\n      patientId: 'P002',\r\n      patientName: 'Sarah Wilson',\r\n      patientAge: 32,\r\n      patientGender: 'F',\r\n      examType: 'Abdominal Ultrasound',\r\n      bodyPart: 'Abdomen',\r\n      urgency: 'ROUTINE',\r\n      status: 'COMPLETED',\r\n      orderDate: '2024-12-04',\r\n      scheduledDate: '2024-12-05T14:30:00',\r\n      completedDate: '2024-12-05T14:45:00',\r\n      orderingPhysician: 'Dr. Michael Chen',\r\n      department: 'Obstetrics & Gynecology',\r\n      notes: 'First trimester pregnancy confirmation',\r\n      contrast: false,\r\n      preparation: 'Full bladder required',\r\n      estimatedDuration: 15,\r\n      technician: 'Lisa Rodriguez, RT',\r\n      radiologist: 'Dr. James Park',\r\n      reportStatus: 'FINAL',\r\n      facility: 'Women\\'s Center'\r\n    },\r\n    {\r\n      id: '3',\r\n      orderId: 'RAD-2024-003',\r\n      patientId: 'P003',\r\n      patientName: 'Robert Davis',\r\n      patientAge: 67,\r\n      patientGender: 'M',\r\n      examType: 'Lumbar Spine MRI',\r\n      bodyPart: 'Spine',\r\n      urgency: 'ROUTINE',\r\n      status: 'IN_PROGRESS',\r\n      orderDate: '2024-12-03',\r\n      scheduledDate: '2024-12-05T16:00:00',\r\n      orderingPhysician: 'Dr. Susan Martinez',\r\n      department: 'Orthopedics',\r\n      notes: 'Chronic lower back pain, rule out disc herniation',\r\n      contrast: false,\r\n      preparation: 'Remove all metal objects',\r\n      estimatedDuration: 45,\r\n      technician: 'Mark Johnson, RT',\r\n      reportStatus: 'PENDING',\r\n      facility: 'Orthopedic Center'\r\n    },\r\n    {\r\n      id: '4',\r\n      orderId: 'RAD-2024-004',\r\n      patientId: 'P004',\r\n      patientName: 'Maria Garcia',\r\n      patientAge: 28,\r\n      patientGender: 'F',\r\n      examType: 'Chest X-Ray',\r\n      bodyPart: 'Chest',\r\n      urgency: 'STAT',\r\n      status: 'REPORTED',\r\n      orderDate: '2024-12-05',\r\n      scheduledDate: '2024-12-05T08:00:00',\r\n      completedDate: '2024-12-05T08:15:00',\r\n      orderingPhysician: 'Dr. David Thompson',\r\n      department: 'Emergency Department',\r\n      notes: 'Motor vehicle accident, trauma evaluation',\r\n      contrast: false,\r\n      preparation: 'None',\r\n      estimatedDuration: 10,\r\n      technician: 'Angela Wright, RT',\r\n      radiologist: 'Dr. Jennifer Kim',\r\n      reportStatus: 'FINAL',\r\n      facility: 'Emergency Department'\r\n    }\r\n  ];\r\n\r\n  const mockReports: RadiologyReport[] = [\r\n    {\r\n      id: '1',\r\n      orderId: 'RAD-2024-002',\r\n      patientName: 'Sarah Wilson',\r\n      examType: 'Abdominal Ultrasound',\r\n      examDate: '2024-12-05T14:30:00',\r\n      radiologist: 'Dr. James Park',\r\n      status: 'FINAL',\r\n      findings: 'Single intrauterine gestational sac identified measuring 15mm in greatest dimension, corresponding to approximately 7 weeks gestational age. Yolk sac and fetal pole with cardiac activity visualized. No free fluid in pelvis.',\r\n      impression: '1. Single viable intrauterine pregnancy at approximately 7 weeks gestational age.\\n2. Normal appearing uterus and adnexa.',\r\n      recommendations: 'Routine prenatal care. Follow-up obstetric ultrasound at 18-20 weeks for anatomic survey.',\r\n      reportDate: '2024-12-05T15:30:00',\r\n      criticalFindings: false,\r\n      comparison: 'No prior imaging available for comparison',\r\n      technique: 'Transabdominal and transvaginal ultrasound performed',\r\n      images: 12\r\n    },\r\n    {\r\n      id: '2',\r\n      orderId: 'RAD-2024-004',\r\n      patientName: 'Maria Garcia',\r\n      examType: 'Chest X-Ray',\r\n      examDate: '2024-12-05T08:00:00',\r\n      radiologist: 'Dr. Jennifer Kim',\r\n      status: 'FINAL',\r\n      findings: 'The heart size is normal. The mediastinal and hilar contours are within normal limits. The lungs are clear without focal consolidation, effusion, or pneumothorax. The costophrenic angles are sharp. No acute bony abnormalities are identified.',\r\n      impression: 'Normal chest radiograph. No acute cardiopulmonary abnormalities.',\r\n      recommendations: 'No further imaging required at this time unless clinically indicated.',\r\n      reportDate: '2024-12-05T08:30:00',\r\n      criticalFindings: false,\r\n      comparison: 'No prior chest imaging available',\r\n      technique: 'Single frontal chest radiograph',\r\n      images: 1\r\n    }\r\n  ];\r\n\r\n  const filteredOrders = [].filter /* TODO: API */(order => {\r\n    const matchesSearch = order.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         order.orderId.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         order.examType.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesStatus = statusFilter === 'ALL' || order.status === statusFilter;\r\n    const matchesUrgency = urgencyFilter === 'ALL' || order.urgency === urgencyFilter;\r\n    \r\n    return matchesSearch && matchesStatus && matchesUrgency;\r\n  });\r\n\r\n  const getStatusColor = (status: string) => {\r\n    const colors = {\r\n      'SCHEDULED': '#3b82f6',\r\n      'IN_PROGRESS': '#f59e0b', \r\n      'COMPLETED': '#10b981',\r\n      'REPORTED': '#06b6d4',\r\n      'CANCELLED': '#ef4444'\r\n    };\r\n    return colors[status as keyof typeof colors] || '#6b7280';\r\n  };\r\n\r\n  const getUrgencyColor = (urgency: string) => {\r\n    const colors = {\r\n      'STAT': '#ef4444',\r\n      'URGENT': '#f59e0b',\r\n      'ROUTINE': '#10b981'\r\n    };\r\n    return colors[urgency as keyof typeof colors] || '#6b7280';\r\n  };\r\n\r\n  const OrderModal = () => (\r\n    <div style={{\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      zIndex: 1000,\r\n      padding: '1rem'\r\n    }}>\r\n      <div style={{\r\n        backgroundColor: 'white',\r\n        borderRadius: '12px',\r\n        padding: '2rem',\r\n        maxWidth: '800px',\r\n        width: '100%',\r\n        maxHeight: '90vh',\r\n        overflowY: 'auto'\r\n      }}>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem' }}>\r\n          <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n            Imaging Order Details\r\n          </h2>\r\n          <button\r\n            onClick={() => setShowOrderModal(false)}\r\n            style={{\r\n              background: 'none',\r\n              border: 'none',\r\n              fontSize: '1.5rem',\r\n              cursor: 'pointer',\r\n              color: '#6b7280'\r\n            }}\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n\r\n        {selectedOrder && (\r\n          <div style={{ display: 'grid', gap: '1.5rem' }}>\r\n            {/* Patient Information */}\r\n            <div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Patient Information\r\n              </h3>\r\n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>\r\n                <div>\r\n                  <span style={{ fontWeight: '600' }}>Name:</span> {selectedOrder.patientName}\r\n                </div>\r\n                <div>\r\n                  <span style={{ fontWeight: '600' }}>Age:</span> {selectedOrder.patientAge}\r\n                </div>\r\n                <div>\r\n                  <span style={{ fontWeight: '600' }}>Gender:</span> {selectedOrder.patientGender === 'M' ? 'Male' : 'Female'}\r\n                </div>\r\n                <div>\r\n                  <span style={{ fontWeight: '600' }}>Patient ID:</span> {selectedOrder.patientId}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Exam Information */}\r\n            <div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Examination Details\r\n              </h3>\r\n              <div style={{ display: 'grid', gap: '0.75rem' }}>\r\n                <div><span style={{ fontWeight: '600' }}>Exam Type:</span> {selectedOrder.examType}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Body Part:</span> {selectedOrder.bodyPart}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Contrast:</span> {selectedOrder.contrast ? 'Yes' : 'No'}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Duration:</span> {selectedOrder.estimatedDuration} minutes</div>\r\n                <div><span style={{ fontWeight: '600' }}>Preparation:</span> {selectedOrder.preparation}</div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Order Information */}\r\n            <div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Order Information\r\n              </h3>\r\n              <div style={{ display: 'grid', gap: '0.75rem' }}>\r\n                <div><span style={{ fontWeight: '600' }}>Order ID:</span> {selectedOrder.orderId}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Ordering Physician:</span> {selectedOrder.orderingPhysician}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Department:</span> {selectedOrder.department}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Order Date:</span> {new Date(selectedOrder.orderDate).toLocaleDateString()}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Scheduled Date:</span> {new Date(selectedOrder.scheduledDate).toLocaleString()}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Facility:</span> {selectedOrder.facility}</div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Status and Assignment */}\r\n            <div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Status & Assignment\r\n              </h3>\r\n              <div style={{ display: 'grid', gap: '0.75rem' }}>\r\n                <div>\r\n                  <span style={{ fontWeight: '600' }}>Status:</span>\r\n                  <span style={{\r\n                    marginLeft: '0.5rem',\r\n                    padding: '0.25rem 0.75rem',\r\n                    borderRadius: '9999px',\r\n                    fontSize: '0.875rem',\r\n                    fontWeight: '600',\r\n                    color: 'white',\r\n                    backgroundColor: getStatusColor(selectedOrder.status)\r\n                  }}>\r\n                    {selectedOrder.status.replace('_', ' ')}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span style={{ fontWeight: '600' }}>Urgency:</span>\r\n                  <span style={{\r\n                    marginLeft: '0.5rem',\r\n                    padding: '0.25rem 0.75rem',\r\n                    borderRadius: '9999px',\r\n                    fontSize: '0.875rem',\r\n                    fontWeight: '600',\r\n                    color: 'white',\r\n                    backgroundColor: getUrgencyColor(selectedOrder.urgency)\r\n                  }}>\r\n                    {selectedOrder.urgency}\r\n                  </span>\r\n                </div>\r\n                {selectedOrder.technician && (\r\n                  <div><span style={{ fontWeight: '600' }}>Technician:</span> {selectedOrder.technician}</div>\r\n                )}\r\n                {selectedOrder.radiologist && (\r\n                  <div><span style={{ fontWeight: '600' }}>Radiologist:</span> {selectedOrder.radiologist}</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Clinical Notes */}\r\n            <div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Clinical Notes\r\n              </h3>\r\n              <p style={{\r\n                padding: '1rem',\r\n                backgroundColor: '#f9fafb',\r\n                borderRadius: '8px',\r\n                border: '1px solid #e5e7eb'\r\n              }}>\r\n                {selectedOrder.notes}\r\n              </p>\r\n            </div>\r\n\r\n            <div style={{ display: 'flex', gap: '1rem', justifyContent: 'flex-end', paddingTop: '1rem', borderTop: '1px solid #e5e7eb' }}>\r\n              {selectedOrder.status === 'SCHEDULED' && (\r\n                <Button variant=\"primary\">Start Exam</Button>\r\n              )}\r\n              {selectedOrder.status === 'COMPLETED' && selectedOrder.reportStatus === 'PENDING' && (\r\n                <Button variant=\"primary\">Create Report</Button>\r\n              )}\r\n              <Button variant=\"outline\">Edit Order</Button>\r\n              <Button variant=\"secondary\" onClick={() => setShowOrderModal(false)}>\r\n                Close\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const ReportModal = () => (\r\n    <div style={{\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      zIndex: 1000,\r\n      padding: '1rem'\r\n    }}>\r\n      <div style={{\r\n        backgroundColor: 'white',\r\n        borderRadius: '12px',\r\n        padding: '2rem',\r\n        maxWidth: '900px',\r\n        width: '100%',\r\n        maxHeight: '90vh',\r\n        overflowY: 'auto'\r\n      }}>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem' }}>\r\n          <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n            Radiology Report\r\n          </h2>\r\n          <button\r\n            onClick={() => setShowReportModal(false)}\r\n            style={{\r\n              background: 'none',\r\n              border: 'none',\r\n              fontSize: '1.5rem',\r\n              cursor: 'pointer',\r\n              color: '#6b7280'\r\n            }}\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n\r\n        {selectedReport && (\r\n          <div style={{ display: 'grid', gap: '1.5rem' }}>\r\n            {/* Report Header */}\r\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>\r\n              <div><span style={{ fontWeight: '600' }}>Patient:</span> {selectedReport.patientName}</div>\r\n              <div><span style={{ fontWeight: '600' }}>Exam:</span> {selectedReport.examType}</div>\r\n              <div><span style={{ fontWeight: '600' }}>Exam Date:</span> {new Date(selectedReport.examDate).toLocaleDateString()}</div>\r\n              <div><span style={{ fontWeight: '600' }}>Radiologist:</span> {selectedReport.radiologist}</div>\r\n              <div><span style={{ fontWeight: '600' }}>Report Date:</span> {new Date(selectedReport.reportDate).toLocaleDateString()}</div>\r\n              <div>\r\n                <span style={{ fontWeight: '600' }}>Status:</span>\r\n                <span style={{\r\n                  marginLeft: '0.5rem',\r\n                  padding: '0.25rem 0.75rem',\r\n                  borderRadius: '9999px',\r\n                  fontSize: '0.875rem',\r\n                  fontWeight: '600',\r\n                  color: 'white',\r\n                  backgroundColor: selectedReport.status === 'FINAL' ? '#10b981' : '#f59e0b'\r\n                }}>\r\n                  {selectedReport.status}\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Technique and Comparison */}\r\n            <div>\r\n              <h3 style={{ fontSize: '1.125rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                Technique\r\n              </h3>\r\n              <p style={{ color: '#374151' }}>{selectedReport.technique}</p>\r\n            </div>\r\n\r\n            <div>\r\n              <h3 style={{ fontSize: '1.125rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                Comparison\r\n              </h3>\r\n              <p style={{ color: '#374151' }}>{selectedReport.comparison}</p>\r\n            </div>\r\n\r\n            {/* Findings */}\r\n            <div>\r\n              <h3 style={{ fontSize: '1.125rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                Findings\r\n              </h3>\r\n              <p style={{\r\n                padding: '1rem',\r\n                backgroundColor: '#f9fafb',\r\n                borderRadius: '8px',\r\n                border: '1px solid #e5e7eb',\r\n                color: '#374151',\r\n                lineHeight: '1.6'\r\n              }}>\r\n                {selectedReport.findings}\r\n              </p>\r\n            </div>\r\n\r\n            {/* Impression */}\r\n            <div>\r\n              <h3 style={{ fontSize: '1.125rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                Impression\r\n              </h3>\r\n              <p style={{\r\n                padding: '1rem',\r\n                backgroundColor: '#fef3c7',\r\n                borderRadius: '8px',\r\n                border: '1px solid #f59e0b',\r\n                color: '#92400e',\r\n                lineHeight: '1.6',\r\n                whiteSpace: 'pre-line'\r\n              }}>\r\n                {selectedReport.impression}\r\n              </p>\r\n            </div>\r\n\r\n            {/* Recommendations */}\r\n            <div>\r\n              <h3 style={{ fontSize: '1.125rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                Recommendations\r\n              </h3>\r\n              <p style={{\r\n                padding: '1rem',\r\n                backgroundColor: '#f0fdf4',\r\n                borderRadius: '8px',\r\n                border: '1px solid #bbf7d0',\r\n                color: '#166534',\r\n                lineHeight: '1.6'\r\n              }}>\r\n                {selectedReport.recommendations}\r\n              </p>\r\n            </div>\r\n\r\n            {selectedReport.criticalFindings && (\r\n              <div style={{\r\n                padding: '1rem',\r\n                backgroundColor: '#fef2f2',\r\n                borderRadius: '8px',\r\n                border: '1px solid #fecaca'\r\n              }}>\r\n                <h4 style={{ color: '#dc2626', fontWeight: '600', marginBottom: '0.5rem' }}>\r\n                  ⚠️ Critical Findings Alert\r\n                </h4>\r\n                <p style={{ color: '#dc2626' }}>\r\n                  This report contains critical findings that require immediate attention.\r\n                </p>\r\n              </div>\r\n            )}\r\n\r\n            <div style={{ display: 'flex', gap: '1rem', justifyContent: 'flex-end', paddingTop: '1rem', borderTop: '1px solid #e5e7eb' }}>\r\n              <Button variant=\"primary\">📄 Print Report</Button>\r\n              <Button variant=\"outline\">📧 Send to Physician</Button>\r\n              <Button variant=\"secondary\" onClick={() => setShowReportModal(false)}>\r\n                Close\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Layout>\r\n      <div style={{ maxWidth: '1400px', margin: '0 auto' }}>\r\n        {/* Header */}\r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'space-between', \r\n          alignItems: 'center', \r\n          marginBottom: '2rem' \r\n        }}>\r\n          <div>\r\n            <h1 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n              Radiology & Imaging\r\n            </h1>\r\n            <p style={{ color: '#6b7280', fontSize: '1rem' }}>\r\n              Manage imaging orders, reports, and radiology workflow\r\n            </p>\r\n          </div>\r\n          <div style={{ display: 'flex', gap: '0.5rem' }}>\r\n            <Button variant=\"primary\">\r\n              ➕ New Order\r\n            </Button>\r\n            <Button variant=\"outline\">\r\n              📊 Statistics\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Tab Navigation */}\r\n        <div style={{ marginBottom: '2rem' }}>\r\n          <div style={{ display: 'flex', gap: '0.5rem', borderBottom: '1px solid #e5e7eb' }}>\r\n            {[\r\n              { key: 'orders', label: '📋 Orders', desc: 'All Orders' },\r\n              { key: 'worklist', label: '⚡ Worklist', desc: 'Today\\'s Schedule' },\r\n              { key: 'reports', label: '📄 Reports', desc: 'Radiology Reports' },\r\n              { key: 'schedule', label: '📅 Schedule', desc: 'Equipment Calendar' },\r\n              { key: 'equipment', label: '🏥 Equipment', desc: 'Machine Status' }\r\n            ].map(tab => (\r\n              <button\r\n                key={tab.key}\r\n                onClick={() => setCurrentTab(tab.key as string)}\r\n                style={{\r\n                  padding: '1rem 1.5rem',\r\n                  border: 'none',\r\n                  background: 'none',\r\n                  fontSize: '1rem',\r\n                  fontWeight: '500',\r\n                  color: currentTab === tab.key ? '#667eea' : '#6b7280',\r\n                  borderBottom: currentTab === tab.key ? '2px solid #667eea' : '2px solid transparent',\r\n                  cursor: 'pointer',\r\n                  transition: 'all 0.2s ease'\r\n                }}\r\n              >\r\n                <div>{tab.label}</div>\r\n                <div style={{ fontSize: '0.75rem', opacity: 0.8 }}>\r\n                  {tab.desc}\r\n                </div>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Orders Tab */}\r\n        {currentTab === 'orders' && (\r\n          <>\r\n            {/* Search and Filters */}\r\n            <Card style={{ marginBottom: '1.5rem' }}>\r\n              <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                <div style={{ flex: 1, minWidth: '250px' }}>\r\n                  <Input\r\n                    placeholder=\"Search by patient name, order ID, or exam type...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                  />\r\n                </div>\r\n                \r\n                <select\r\n                  value={statusFilter}\r\n                  onChange={(e) => setStatusFilter(e.target.value)}\r\n                  style={{\r\n                    padding: '0.75rem 1rem',\r\n                    border: '1px solid #d1d5db',\r\n                    borderRadius: '8px',\r\n                    fontSize: '1rem',\r\n                    backgroundColor: 'white',\r\n                    minWidth: '150px'\r\n                  }}\r\n                >\r\n                  <option value=\"ALL\">All Status</option>\r\n                  <option value=\"SCHEDULED\">Scheduled</option>\r\n                  <option value=\"IN_PROGRESS\">In Progress</option>\r\n                  <option value=\"COMPLETED\">Completed</option>\r\n                  <option value=\"REPORTED\">Reported</option>\r\n                  <option value=\"CANCELLED\">Cancelled</option>\r\n                </select>\r\n\r\n                <select\r\n                  value={urgencyFilter}\r\n                  onChange={(e) => setUrgencyFilter(e.target.value)}\r\n                  style={{\r\n                    padding: '0.75rem 1rem',\r\n                    border: '1px solid #d1d5db',\r\n                    borderRadius: '8px',\r\n                    fontSize: '1rem',\r\n                    backgroundColor: 'white',\r\n                    minWidth: '150px'\r\n                  }}\r\n                >\r\n                  <option value=\"ALL\">All Urgency</option>\r\n                  <option value=\"STAT\">STAT</option>\r\n                  <option value=\"URGENT\">Urgent</option>\r\n                  <option value=\"ROUTINE\">Routine</option>\r\n                </select>\r\n\r\n                <Button variant=\"outline\">\r\n                  🔄 Refresh\r\n                </Button>\r\n              </div>\r\n            </Card>\r\n\r\n            {/* Orders List */}\r\n            <div style={{ display: 'grid', gap: '1rem' }}>\r\n              {filteredOrders.map(order => (\r\n                <Card key={order.id} style={{ cursor: 'pointer' }}>\r\n                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n                    <div style={{ flex: 1 }}>\r\n                      <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', marginBottom: '0.75rem' }}>\r\n                        <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', margin: 0 }}>\r\n                          {order.patientName}\r\n                        </h3>\r\n                        <span style={{\r\n                          padding: '0.25rem 0.75rem',\r\n                          borderRadius: '9999px',\r\n                          fontSize: '0.75rem',\r\n                          fontWeight: '600',\r\n                          color: 'white',\r\n                          backgroundColor: getUrgencyColor(order.urgency)\r\n                        }}>\r\n                          {order.urgency}\r\n                        </span>\r\n                        <span style={{\r\n                          padding: '0.25rem 0.75rem',\r\n                          borderRadius: '9999px',\r\n                          fontSize: '0.75rem',\r\n                          fontWeight: '600',\r\n                          color: 'white',\r\n                          backgroundColor: getStatusColor(order.status)\r\n                        }}>\r\n                          {order.status.replace('_', ' ')}\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '0.5rem', marginBottom: '0.75rem' }}>\r\n                        <div style={{ color: '#6b7280' }}>\r\n                          <span style={{ fontWeight: '600' }}>Order ID:</span> {order.orderId}\r\n                        </div>\r\n                        <div style={{ color: '#6b7280' }}>\r\n                          <span style={{ fontWeight: '600' }}>Exam:</span> {order.examType}\r\n                        </div>\r\n                        <div style={{ color: '#6b7280' }}>\r\n                          <span style={{ fontWeight: '600' }}>Scheduled:</span> {new Date(order.scheduledDate).toLocaleString()}\r\n                        </div>\r\n                        <div style={{ color: '#6b7280' }}>\r\n                          <span style={{ fontWeight: '600' }}>Physician:</span> {order.orderingPhysician}\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <p style={{ color: '#6b7280', fontSize: '0.875rem', margin: 0 }}>\r\n                        {order.notes}\r\n                      </p>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', gap: '0.5rem', marginLeft: '1rem' }}>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => {\r\n                          setSelectedOrder(order);\r\n                          setShowOrderModal(true);\r\n                        }}\r\n                      >\r\n                        View Details\r\n                      </Button>\r\n                      {order.status === 'REPORTED' && (\r\n                        <Button\r\n                          size=\"sm\"\r\n                          variant=\"primary\"\r\n                          onClick={() => {\r\n                            const report = [].find /* TODO: API */(r => r.orderId === order.orderId);\r\n                            if (report) {\r\n                              setSelectedReport(report);\r\n                              setShowReportModal(true);\r\n                            }\r\n                          }}\r\n                        >\r\n                          View Report\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* Worklist Tab */}\r\n        {currentTab === 'worklist' && (\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>⚡</div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                Today&apos;s Imaging Worklist\r\n              </h3>\r\n              <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\r\n                View and manage today&apos;s scheduled imaging exams by technician and equipment. This interface provides a streamlined workflow for radiology staff.\r\n              </p>\r\n              <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>\r\n                <Button variant=\"primary\">\r\n                  📋 View Worklist\r\n                </Button>\r\n                <Button variant=\"outline\">\r\n                  ⏰ Schedule Management\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Reports Tab */}\r\n        {currentTab === 'reports' && (\r\n          <>\r\n            <div style={{ display: 'grid', gap: '1rem' }}>\r\n              {[].map /* TODO: API */(report => (\r\n                <Card key={report.id} style={{ cursor: 'pointer' }}>\r\n                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n                    <div style={{ flex: 1 }}>\r\n                      <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', marginBottom: '0.75rem' }}>\r\n                        <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', margin: 0 }}>\r\n                          {report.patientName}\r\n                        </h3>\r\n                        <span style={{\r\n                          padding: '0.25rem 0.75rem',\r\n                          borderRadius: '9999px',\r\n                          fontSize: '0.75rem',\r\n                          fontWeight: '600',\r\n                          color: 'white',\r\n                          backgroundColor: report.status === 'FINAL' ? '#10b981' : '#f59e0b'\r\n                        }}>\r\n                          {report.status}\r\n                        </span>\r\n                        {report.criticalFindings && (\r\n                          <span style={{\r\n                            padding: '0.25rem 0.75rem',\r\n                            borderRadius: '9999px',\r\n                            fontSize: '0.75rem',\r\n                            fontWeight: '600',\r\n                            color: 'white',\r\n                            backgroundColor: '#ef4444'\r\n                          }}>\r\n                            CRITICAL\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                      \r\n                      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '0.5rem', marginBottom: '0.75rem' }}>\r\n                        <div style={{ color: '#6b7280' }}>\r\n                          <span style={{ fontWeight: '600' }}>Exam:</span> {report.examType}\r\n                        </div>\r\n                        <div style={{ color: '#6b7280' }}>\r\n                          <span style={{ fontWeight: '600' }}>Exam Date:</span> {new Date(report.examDate).toLocaleDateString()}\r\n                        </div>\r\n                        <div style={{ color: '#6b7280' }}>\r\n                          <span style={{ fontWeight: '600' }}>Radiologist:</span> {report.radiologist}\r\n                        </div>\r\n                        <div style={{ color: '#6b7280' }}>\r\n                          <span style={{ fontWeight: '600' }}>Images:</span> {report.images}\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <p style={{ color: '#6b7280', fontSize: '0.875rem', margin: 0 }}>\r\n                        {report.impression.substring(0, 150)}...\r\n                      </p>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', gap: '0.5rem', marginLeft: '1rem' }}>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"primary\"\r\n                        onClick={() => {\r\n                          setSelectedReport(report);\r\n                          setShowReportModal(true);\r\n                        }}\r\n                      >\r\n                        View Report\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* Schedule Tab */}\r\n        {currentTab === 'schedule' && (\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>📅</div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                Equipment Schedule & Calendar\r\n              </h3>\r\n              <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\r\n                View and manage equipment schedules, maintenance windows, and availability. Coordinate imaging appointments across multiple modalities.\r\n              </p>\r\n              <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>\r\n                <Button variant=\"primary\">\r\n                  📅 View Calendar\r\n                </Button>\r\n                <Button variant=\"outline\">\r\n                  🔧 Maintenance Schedule\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Equipment Tab */}\r\n        {currentTab === 'equipment' && (\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>🏥</div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                Imaging Equipment Status\r\n              </h3>\r\n              <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\r\n                Monitor imaging equipment status, utilization, maintenance schedules, and quality control metrics for optimal department operations.\r\n              </p>\r\n              <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>\r\n                <Button variant=\"primary\">\r\n                  🏥 Equipment Dashboard\r\n                </Button>\r\n                <Button variant=\"outline\">\r\n                  🔧 Maintenance Logs\r\n                </Button>\r\n                <Button variant=\"secondary\">\r\n                  📊 Utilization Reports\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Modals */}\r\n        {showOrderModal && <OrderModal />}\r\n        {showReportModal && <ReportModal />}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default RadiologyPage;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\register-hospital\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Textarea' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 22,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { \r\n  Stepper, Card, Title, Text, Stack, Group, Button, \r\n  TextInput, Select, Textarea, Radio, Checkbox \r\n} from '@mantine/core';\r\nimport { \r\n  IconBuilding, IconUser, IconCreditCard, IconCheck \r\n} from '@tabler/icons-react';\r\n\r\nexport default function RegisterHospitalPage() {\r\n  const [active, setActive] = useState(0);\r\n  const [formData, setFormData] = useState({\r\n    // Step 1: Hospital Information\r\n    hospitalName: '',\r\n    hospitalType: '',\r\n    registrationNumber: '',\r\n    licenseNumber: '',\r\n    email: '',\r\n    phone: '',\r\n    website: '',\r\n    \r\n    // Step 2: Address\r\n    addressLine1: '',\r\n    addressLine2: '',\r\n    city: '',\r\n    state: '',\r\n    postalCode: '',\r\n    country: '',\r\n    \r\n    // Step 3: Admin User\r\n    adminFirstName: '',\r\n    adminLastName: '',\r\n    adminEmail: '',\r\n    adminPhone: '',\r\n    adminPassword: '',\r\n    confirmPassword: '',\r\n    \r\n    // Step 4: Subscription\r\n    plan: '',\r\n    billingCycle: 'monthly',\r\n    agreeToTerms: false,\r\n  });\r\n\r\n  const nextStep = () => setActive((current) => (current < 4 ? current + 1 : current));\r\n  const prevStep = () => setActive((current) => (current > 0 ? current - 1 : current));\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      // Step 1: Create tenant\r\n      const tenantPayload = {\r\n        name: formData.hospitalName,\r\n        type: formData.hospitalType,\r\n        email: formData.email,\r\n        phone: formData.phone,\r\n        subscriptionPlan: formData.plan,\r\n        settings: {\r\n          website: formData.website,\r\n          licenseNumber: formData.licenseNumber,\r\n          registrationNumber: formData.registrationNumber,\r\n          address: {\r\n            addressLine1: formData.addressLine1,\r\n            addressLine2: formData.addressLine2,\r\n            city: formData.city,\r\n            state: formData.state,\r\n            postalCode: formData.postalCode,\r\n            country: formData.country,\r\n          }\r\n        }\r\n      };\r\n\r\n      const tenantResponse = await fetch('/api/tenants', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(tenantPayload),\r\n      });\r\n\r\n      if (!tenantResponse.ok) {\r\n        throw new Error('Failed to create tenant');\r\n      }\r\n\r\n      const tenant = await tenantResponse.json();\r\n\r\n      // Step 2: Register admin user\r\n      const userPayload = {\r\n        email: formData.adminEmail,\r\n        password: formData.adminPassword,\r\n        firstName: formData.adminFirstName,\r\n        lastName: formData.adminLastName,\r\n        phone: formData.adminPhone,\r\n        tenantId: tenant.id,\r\n        role: 'HOSPITAL_ADMIN'\r\n      };\r\n\r\n      const userResponse = await fetch('/api/auth/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(userPayload),\r\n      });\r\n\r\n      if (!userResponse.ok) {\r\n        throw new Error('Failed to register admin user');\r\n      }\r\n\r\n      // Move to completion step\r\n      nextStep();\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      alert('Registration failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      minHeight: '100vh',\r\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n      padding: '2rem',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center'\r\n    }}>\r\n      <Card \r\n        shadow=\"xl\" \r\n        padding=\"xl\" \r\n        radius=\"md\" \r\n        style={{ \r\n          width: '100%', \r\n          maxWidth: '900px',\r\n          background: 'rgba(255,255,255,0.98)',\r\n          backdropFilter: 'blur(10px)'\r\n        }}\r\n      >\r\n        {/* Header */}\r\n        <div style={{ textAlign: 'center', marginBottom: '2rem' }}>\r\n          <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>🏥</div>\r\n          <Title order={1} mb=\"xs\">Register Your Hospital</Title>\r\n          <Text c=\"dimmed\">Join HMS SAAS and modernize your healthcare facility</Text>\r\n        </div>\r\n\r\n        {/* Stepper */}\r\n        <Stepper active={active} onStepClick={setActive} mb=\"xl\">\r\n          <Stepper.Step \r\n            label=\"Hospital Info\" \r\n            description=\"Basic details\"\r\n            icon={<IconBuilding size={18} />}\r\n          >\r\n            <Stack gap=\"md\" mt=\"xl\">\r\n              <TextInput\r\n                label=\"Hospital/Clinic Name\"\r\n                placeholder=\"Enter your hospital name\"\r\n                value={formData.hospitalName}\r\n                onChange={(e) => setFormData({ ...formData, hospitalName: e.target.value })}\r\n                required\r\n              />\r\n              \r\n              <Select\r\n                label=\"Facility Type\"\r\n                placeholder=\"Select type\"\r\n                data={[\r\n                  { value: 'hospital', label: 'Hospital' },\r\n                  { value: 'clinic', label: 'Clinic' },\r\n                  { value: 'diagnostic_center', label: 'Diagnostic Center' },\r\n                  { value: 'pharmacy', label: 'Pharmacy' },\r\n                  { value: 'laboratory', label: 'Laboratory' },\r\n                ]}\r\n                value={formData.hospitalType}\r\n                onChange={(value) => setFormData({ ...formData, hospitalType: value || '' })}\r\n                required\r\n              />\r\n\r\n              <Group grow>\r\n                <TextInput\r\n                  label=\"Registration Number\"\r\n                  placeholder=\"Hospital registration no.\"\r\n                  value={formData.registrationNumber}\r\n                  onChange={(e) => setFormData({ ...formData, registrationNumber: e.target.value })}\r\n                />\r\n                <TextInput\r\n                  label=\"License Number\"\r\n                  placeholder=\"Medical license no.\"\r\n                  value={formData.licenseNumber}\r\n                  onChange={(e) => setFormData({ ...formData, licenseNumber: e.target.value })}\r\n                />\r\n              </Group>\r\n\r\n              <Group grow>\r\n                <TextInput\r\n                  label=\"Email\"\r\n                  placeholder=\"contact@hospital.com\"\r\n                  type=\"email\"\r\n                  value={formData.email}\r\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\r\n                  required\r\n                />\r\n                <TextInput\r\n                  label=\"Phone\"\r\n                  placeholder=\"+1 (555) 123-4567\"\r\n                  value={formData.phone}\r\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n                  required\r\n                />\r\n              </Group>\r\n\r\n              <TextInput\r\n                label=\"Website (Optional)\"\r\n                placeholder=\"https://www.yourhospital.com\"\r\n                value={formData.website}\r\n                onChange={(e) => setFormData({ ...formData, website: e.target.value })}\r\n              />\r\n            </Stack>\r\n          </Stepper.Step>\r\n\r\n          <Stepper.Step \r\n            label=\"Address\" \r\n            description=\"Location details\"\r\n          >\r\n            <Stack gap=\"md\" mt=\"xl\">\r\n              <TextInput\r\n                label=\"Address Line 1\"\r\n                placeholder=\"Street address\"\r\n                value={formData.addressLine1}\r\n                onChange={(e) => setFormData({ ...formData, addressLine1: e.target.value })}\r\n                required\r\n              />\r\n\r\n              <TextInput\r\n                label=\"Address Line 2 (Optional)\"\r\n                placeholder=\"Apartment, suite, etc.\"\r\n                value={formData.addressLine2}\r\n                onChange={(e) => setFormData({ ...formData, addressLine2: e.target.value })}\r\n              />\r\n\r\n              <Group grow>\r\n                <TextInput\r\n                  label=\"City\"\r\n                  placeholder=\"City\"\r\n                  value={formData.city}\r\n                  onChange={(e) => setFormData({ ...formData, city: e.target.value })}\r\n                  required\r\n                />\r\n                <TextInput\r\n                  label=\"State/Province\"\r\n                  placeholder=\"State\"\r\n                  value={formData.state}\r\n                  onChange={(e) => setFormData({ ...formData, state: e.target.value })}\r\n                  required\r\n                />\r\n              </Group>\r\n\r\n              <Group grow>\r\n                <TextInput\r\n                  label=\"Postal Code\"\r\n                  placeholder=\"ZIP/Postal code\"\r\n                  value={formData.postalCode}\r\n                  onChange={(e) => setFormData({ ...formData, postalCode: e.target.value })}\r\n                  required\r\n                />\r\n                <Select\r\n                  label=\"Country\"\r\n                  placeholder=\"Select country\"\r\n                  data={[\r\n                    { value: 'US', label: 'United States' },\r\n                    { value: 'UK', label: 'United Kingdom' },\r\n                    { value: 'CA', label: 'Canada' },\r\n                    { value: 'AU', label: 'Australia' },\r\n                    { value: 'IN', label: 'India' },\r\n                  ]}\r\n                  value={formData.country}\r\n                  onChange={(value) => setFormData({ ...formData, country: value || '' })}\r\n                  required\r\n                />\r\n              </Group>\r\n            </Stack>\r\n          </Stepper.Step>\r\n\r\n          <Stepper.Step \r\n            label=\"Admin User\" \r\n            description=\"Create account\"\r\n            icon={<IconUser size={18} />}\r\n          >\r\n            <Stack gap=\"md\" mt=\"xl\">\r\n              <Text size=\"sm\" c=\"dimmed\">\r\n                Create the main administrator account for your hospital\r\n              </Text>\r\n\r\n              <Group grow>\r\n                <TextInput\r\n                  label=\"First Name\"\r\n                  placeholder=\"John\"\r\n                  value={formData.adminFirstName}\r\n                  onChange={(e) => setFormData({ ...formData, adminFirstName: e.target.value })}\r\n                  required\r\n                />\r\n                <TextInput\r\n                  label=\"Last Name\"\r\n                  placeholder=\"Doe\"\r\n                  value={formData.adminLastName}\r\n                  onChange={(e) => setFormData({ ...formData, adminLastName: e.target.value })}\r\n                  required\r\n                />\r\n              </Group>\r\n\r\n              <TextInput\r\n                label=\"Admin Email\"\r\n                placeholder=\"admin@hospital.com\"\r\n                type=\"email\"\r\n                value={formData.adminEmail}\r\n                onChange={(e) => setFormData({ ...formData, adminEmail: e.target.value })}\r\n                required\r\n              />\r\n\r\n              <TextInput\r\n                label=\"Phone Number\"\r\n                placeholder=\"+1 (555) 123-4567\"\r\n                value={formData.adminPhone}\r\n                onChange={(e) => setFormData({ ...formData, adminPhone: e.target.value })}\r\n                required\r\n              />\r\n\r\n              <TextInput\r\n                label=\"Password\"\r\n                placeholder=\"Create a strong password\"\r\n                type=\"password\"\r\n                value={formData.adminPassword}\r\n                onChange={(e) => setFormData({ ...formData, adminPassword: e.target.value })}\r\n                required\r\n              />\r\n\r\n              <TextInput\r\n                label=\"Confirm Password\"\r\n                placeholder=\"Re-enter password\"\r\n                type=\"password\"\r\n                value={formData.confirmPassword}\r\n                onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}\r\n                required\r\n              />\r\n            </Stack>\r\n          </Stepper.Step>\r\n\r\n          <Stepper.Step \r\n            label=\"Subscription\" \r\n            description=\"Choose plan\"\r\n            icon={<IconCreditCard size={18} />}\r\n          >\r\n            <Stack gap=\"md\" mt=\"xl\">\r\n              <Text size=\"sm\" c=\"dimmed\" mb=\"md\">\r\n                Select a subscription plan that fits your needs. You can upgrade or downgrade anytime.\r\n              </Text>\r\n\r\n              <Radio.Group\r\n                value={formData.plan}\r\n                onChange={(value) => setFormData({ ...formData, plan: value })}\r\n                label=\"Select Your Plan\"\r\n                required\r\n              >\r\n                <Stack mt=\"xs\" gap=\"sm\">\r\n                  <Card shadow=\"sm\" padding=\"md\" withBorder>\r\n                    <Radio \r\n                      value=\"free\" \r\n                      label={\r\n                        <div>\r\n                          <Text fw={600}>Free Trial - $0/month</Text>\r\n                          <Text size=\"sm\" c=\"dimmed\">\r\n                            30 days free • Up to 5 users • 100 patients • Basic features\r\n                          </Text>\r\n                        </div>\r\n                      } \r\n                    />\r\n                  </Card>\r\n\r\n                  <Card shadow=\"sm\" padding=\"md\" withBorder>\r\n                    <Radio \r\n                      value=\"basic\" \r\n                      label={\r\n                        <div>\r\n                          <Text fw={600}>Basic - $99/month</Text>\r\n                          <Text size=\"sm\" c=\"dimmed\">\r\n                            Up to 20 users • 1,000 patients • Core HMS features\r\n                          </Text>\r\n                        </div>\r\n                      } \r\n                    />\r\n                  </Card>\r\n\r\n                  <Card shadow=\"sm\" padding=\"md\" withBorder>\r\n                    <Radio \r\n                      value=\"professional\" \r\n                      label={\r\n                        <div>\r\n                          <Text fw={600}>Professional - $299/month</Text>\r\n                          <Text size=\"sm\" c=\"dimmed\">\r\n                            Up to 100 users • 10,000 patients • Advanced features • Priority support\r\n                          </Text>\r\n                        </div>\r\n                      } \r\n                    />\r\n                  </Card>\r\n\r\n                  <Card shadow=\"sm\" padding=\"md\" withBorder>\r\n                    <Radio \r\n                      value=\"enterprise\" \r\n                      label={\r\n                        <div>\r\n                          <Text fw={600}>Enterprise - Custom Pricing</Text>\r\n                          <Text size=\"sm\" c=\"dimmed\">\r\n                            Unlimited users • Unlimited patients • All features • Dedicated support\r\n                          </Text>\r\n                        </div>\r\n                      } \r\n                    />\r\n                  </Card>\r\n                </Stack>\r\n              </Radio.Group>\r\n\r\n              <Radio.Group\r\n                value={formData.billingCycle}\r\n                onChange={(value) => setFormData({ ...formData, billingCycle: value })}\r\n                label=\"Billing Cycle\"\r\n                mt=\"xl\"\r\n              >\r\n                <Group mt=\"xs\">\r\n                  <Radio value=\"monthly\" label=\"Monthly\" />\r\n                  <Radio value=\"yearly\" label=\"Yearly (Save 20%)\" />\r\n                </Group>\r\n              </Radio.Group>\r\n\r\n              <Checkbox\r\n                mt=\"xl\"\r\n                label=\"I agree to the Terms of Service and Privacy Policy\"\r\n                checked={formData.agreeToTerms}\r\n                onChange={(e) => setFormData({ ...formData, agreeToTerms: e.target.checked })}\r\n                required\r\n              />\r\n            </Stack>\r\n          </Stepper.Step>\r\n\r\n          <Stepper.Completed>\r\n            <Stack align=\"center\" gap=\"md\" mt=\"xl\" style={{ textAlign: 'center' }}>\r\n              <div style={{ \r\n                width: '80px', \r\n                height: '80px', \r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                borderRadius: '50%',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n              }}>\r\n                <IconCheck size={48} color=\"white\" />\r\n              </div>\r\n              <Title order={2}>Registration Complete!</Title>\r\n              <Text c=\"dimmed\">\r\n                Your hospital has been successfully registered. You will receive a confirmation email shortly.\r\n              </Text>\r\n              <Button\r\n                size=\"lg\"\r\n                mt=\"md\"\r\n                style={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }}\r\n                onClick={() => window.location.href = '/login'}\r\n              >\r\n                Go to Login\r\n              </Button>\r\n            </Stack>\r\n          </Stepper.Completed>\r\n        </Stepper>\r\n\r\n        {/* Navigation Buttons */}\r\n        {active < 4 && (\r\n          <Group justify=\"space-between\" mt=\"xl\">\r\n            <Button variant=\"default\" onClick={prevStep} disabled={active === 0}>\r\n              Back\r\n            </Button>\r\n            <Button \r\n              onClick={active === 3 ? handleSubmit : nextStep}\r\n              style={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }}\r\n            >\r\n              {active === 3 ? 'Complete Registration' : 'Next Step'}\r\n            </Button>\r\n          </Group>\r\n        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\reports\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\reset-password\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\settings\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 140,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 140,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\nimport Layout from '../components/Layout';\r\nimport Card from '../components/ui/Card';\r\nimport Button from '../components/ui/Button';\r\nimport Input from '../components/ui/Input';\r\nimport React, { useState } from 'react';\r\n\r\ninterface SystemSettings {\r\n  hospitalName: string;\r\n  hospitalAddress: string;\r\n  hospitalPhone: string;\r\n  hospitalEmail: string;\r\n  hospitalWebsite: string;\r\n  licenseNumber: string;\r\n  timeZone: string;\r\n  language: string;\r\n  currency: string;\r\n  dateFormat: string;\r\n  maintenanceMode: boolean;\r\n  allowRegistrations: boolean;\r\n  requireEmailVerification: boolean;\r\n  sessionTimeout: number;\r\n  maxLoginAttempts: number;\r\n  passwordMinLength: number;\r\n  passwordRequireSymbols: boolean;\r\n  twoFactorEnabled: boolean;\r\n  backupFrequency: 'DAILY' | 'WEEKLY' | 'MONTHLY';\r\n  retentionPeriod: number;\r\n}\r\n\r\ninterface NotificationSettings {\r\n  emailNotifications: boolean;\r\n  smsNotifications: boolean;\r\n  pushNotifications: boolean;\r\n  appointmentReminders: boolean;\r\n  labResultAlerts: boolean;\r\n  emergencyAlerts: boolean;\r\n  systemMaintenanceNotices: boolean;\r\n  billingReminders: boolean;\r\n}\r\n\r\ninterface IntegrationSettings {\r\n  labIntegration: {\r\n    enabled: boolean;\r\n    provider: string;\r\n    apiKey: string;\r\n    endpoint: string;\r\n  };\r\n  radiologyIntegration: {\r\n    enabled: boolean;\r\n    provider: string;\r\n    apiKey: string;\r\n    endpoint: string;\r\n  };\r\n  paymentGateway: {\r\n    enabled: boolean;\r\n    provider: string;\r\n    publicKey: string;\r\n    secretKey: string;\r\n  };\r\n  smsGateway: {\r\n    enabled: boolean;\r\n    provider: string;\r\n    apiKey: string;\r\n    sender: string;\r\n  };\r\n}\r\n\r\nconst SettingsPage = () => {\r\n  const [currentTab, setCurrentTab] = useState<'general' | 'security' | 'notifications' | 'integrations' | 'backup' | 'users'>('general');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [systemSettings, setSystemSettings] = useState<SystemSettings>({\r\n    hospitalName: 'Central Medical Hospital',\r\n    hospitalAddress: '123 Medical Plaza, Healthcare City, HC 12345',\r\n    hospitalPhone: '+1 (555) 123-4567',\r\n    hospitalEmail: 'admin@centralmedical.com',\r\n    hospitalWebsite: 'www.centralmedical.com',\r\n    licenseNumber: 'MED-LIC-2024-001',\r\n    timeZone: 'America/New_York',\r\n    language: 'English',\r\n    currency: 'USD',\r\n    dateFormat: 'MM/DD/YYYY',\r\n    maintenanceMode: false,\r\n    allowRegistrations: true,\r\n    requireEmailVerification: true,\r\n    sessionTimeout: 30,\r\n    maxLoginAttempts: 5,\r\n    passwordMinLength: 8,\r\n    passwordRequireSymbols: true,\r\n    twoFactorEnabled: false,\r\n    backupFrequency: 'DAILY',\r\n    retentionPeriod: 365\r\n  });\r\n\r\n  const [notificationSettings, setNotificationSettings] = useState<NotificationSettings>({\r\n    emailNotifications: true,\r\n    smsNotifications: false,\r\n    pushNotifications: true,\r\n    appointmentReminders: true,\r\n    labResultAlerts: true,\r\n    emergencyAlerts: true,\r\n    systemMaintenanceNotices: true,\r\n    billingReminders: true\r\n  });\r\n\r\n  const [integrationSettings, setIntegrationSettings] = useState<IntegrationSettings>({\r\n    labIntegration: {\r\n      enabled: false,\r\n      provider: 'LabCorp',\r\n      apiKey: '',\r\n      endpoint: 'https://api.labcorp.com/v1'\r\n    },\r\n    radiologyIntegration: {\r\n      enabled: false,\r\n      provider: 'RadiologyPartners',\r\n      apiKey: '',\r\n      endpoint: 'https://api.radiologypartners.com/v1'\r\n    },\r\n    paymentGateway: {\r\n      enabled: true,\r\n      provider: 'Stripe',\r\n      publicKey: 'pk_test_...',\r\n      secretKey: '••••••••••••'\r\n    },\r\n    smsGateway: {\r\n      enabled: true,\r\n      provider: 'Twilio',\r\n      apiKey: '••••••••••••',\r\n      sender: 'HMS-ALERT'\r\n    }\r\n  });\r\n\r\n  const handleSaveSettings = async (category: string) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      alert(`${category} settings saved successfully!`);\r\n    } catch (error) {\r\n      alert('Failed to save settings. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const SettingGroup = ({ title, children }: { title: string; children: React.ReactNode }) => (\r\n    <div style={{ marginBottom: '2rem' }}>\r\n      <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n        {title}\r\n      </h3>\r\n      <div style={{ display: 'grid', gap: '1rem' }}>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const ToggleSetting = ({ \r\n    label, \r\n    description, \r\n    checked, \r\n    onChange, \r\n    disabled = false \r\n  }: { \r\n    label: string; \r\n    description?: string; \r\n    checked: boolean; \r\n    onChange: (checked: boolean) => void;\r\n    disabled?: boolean;\r\n  }) => (\r\n    <div style={{\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      alignItems: 'flex-start',\r\n      padding: '1rem',\r\n      border: '1px solid #e5e7eb',\r\n      borderRadius: '8px',\r\n      backgroundColor: disabled ? '#f9fafb' : 'white'\r\n    }}>\r\n      <div style={{ flex: 1 }}>\r\n        <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.25rem' }}>\r\n          {label}\r\n        </h4>\r\n        {description && (\r\n          <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>\r\n            {description}\r\n          </p>\r\n        )}\r\n      </div>\r\n      <label style={{ display: 'flex', alignItems: 'center', cursor: disabled ? 'not-allowed' : 'pointer' }}>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={checked}\r\n          onChange={(e) => onChange(e.target.checked)}\r\n          disabled={disabled}\r\n          style={{\r\n            width: '1.5rem',\r\n            height: '1.5rem',\r\n            marginLeft: '1rem'\r\n          }}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Layout>\r\n      <div style={{ maxWidth: '1400px', margin: '0 auto' }}>\r\n        {/* Header */}\r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'space-between', \r\n          alignItems: 'center', \r\n          marginBottom: '2rem' \r\n        }}>\r\n          <div>\r\n            <h1 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n              Settings & Configuration\r\n            </h1>\r\n            <p style={{ color: '#6b7280', fontSize: '1rem' }}>\r\n              Manage system settings, integrations, and hospital configuration\r\n            </p>\r\n          </div>\r\n          <div style={{ display: 'flex', gap: '0.5rem' }}>\r\n            <Button variant=\"secondary\">\r\n              📤 Export Config\r\n            </Button>\r\n            <Button variant=\"outline\">\r\n              🔄 Reset to Defaults\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Tab Navigation */}\r\n        <div style={{ marginBottom: '2rem' }}>\r\n          <div style={{ display: 'flex', gap: '0.5rem', borderBottom: '1px solid #e5e7eb' }}>\r\n            {[\r\n              { key: 'general', label: '🏥 General', desc: 'Hospital Info' },\r\n              { key: 'security', label: '🔐 Security', desc: 'Access & Auth' },\r\n              { key: 'notifications', label: '🔔 Notifications', desc: 'Alerts & Messages' },\r\n              { key: 'integrations', label: '🔗 Integrations', desc: 'Third-party APIs' },\r\n              { key: 'backup', label: '💾 Backup', desc: 'Data Protection' },\r\n              { key: 'users', label: '👥 User Management', desc: 'Roles & Permissions' }\r\n            ].map(tab => (\r\n              <button\r\n                key={tab.key}\r\n                onClick={() => setCurrentTab(tab.key as string)}\r\n                style={{\r\n                  padding: '1rem 1.5rem',\r\n                  border: 'none',\r\n                  background: 'none',\r\n                  fontSize: '1rem',\r\n                  fontWeight: '500',\r\n                  color: currentTab === tab.key ? '#667eea' : '#6b7280',\r\n                  borderBottom: currentTab === tab.key ? '2px solid #667eea' : '2px solid transparent',\r\n                  cursor: 'pointer',\r\n                  transition: 'all 0.2s ease',\r\n                  textAlign: 'left'\r\n                }}\r\n              >\r\n                <div>{tab.label}</div>\r\n                <div style={{ fontSize: '0.75rem', opacity: 0.8 }}>\r\n                  {tab.desc}\r\n                </div>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* General Settings Tab */}\r\n        {currentTab === 'general' && (\r\n          <Card>\r\n            <SettingGroup title=\"Hospital Information\">\r\n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '1rem' }}>\r\n                <Input\r\n                  label=\"Hospital Name\"\r\n                  value={systemSettings.hospitalName}\r\n                  onChange={(e) => setSystemSettings(prev => ({ ...prev, hospitalName: e.target.value }))}\r\n                  required\r\n                />\r\n                <Input\r\n                  label=\"License Number\"\r\n                  value={systemSettings.licenseNumber}\r\n                  onChange={(e) => setSystemSettings(prev => ({ ...prev, licenseNumber: e.target.value }))}\r\n                  required\r\n                />\r\n              </div>\r\n              \r\n              <Input\r\n                label=\"Hospital Address\"\r\n                value={systemSettings.hospitalAddress}\r\n                onChange={(e) => setSystemSettings(prev => ({ ...prev, hospitalAddress: e.target.value }))}\r\n                required\r\n              />\r\n              \r\n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1rem' }}>\r\n                <Input\r\n                  type=\"tel\"\r\n                  label=\"Phone Number\"\r\n                  value={systemSettings.hospitalPhone}\r\n                  onChange={(e) => setSystemSettings(prev => ({ ...prev, hospitalPhone: e.target.value }))}\r\n                  required\r\n                />\r\n                <Input\r\n                  type=\"email\"\r\n                  label=\"Email Address\"\r\n                  value={systemSettings.hospitalEmail}\r\n                  onChange={(e) => setSystemSettings(prev => ({ ...prev, hospitalEmail: e.target.value }))}\r\n                  required\r\n                />\r\n                <Input\r\n                  label=\"Website\"\r\n                  value={systemSettings.hospitalWebsite}\r\n                  onChange={(e) => setSystemSettings(prev => ({ ...prev, hospitalWebsite: e.target.value }))}\r\n                />\r\n              </div>\r\n            </SettingGroup>\r\n\r\n            <SettingGroup title=\"Regional Settings\">\r\n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>\r\n                <div>\r\n                  <label style={{ display: 'block', marginBottom: '0.5rem', fontSize: '0.875rem', fontWeight: '600', color: '#374151' }}>\r\n                    Time Zone\r\n                  </label>\r\n                  <select\r\n                    value={systemSettings.timeZone}\r\n                    onChange={(e) => setSystemSettings(prev => ({ ...prev, timeZone: e.target.value }))}\r\n                    style={{\r\n                      width: '100%',\r\n                      padding: '0.75rem 1rem',\r\n                      border: '1px solid #d1d5db',\r\n                      borderRadius: '8px',\r\n                      fontSize: '1rem',\r\n                      backgroundColor: 'white',\r\n                      color: '#374151'\r\n                    }}\r\n                  >\r\n                    <option value=\"America/New_York\">Eastern Time</option>\r\n                    <option value=\"America/Chicago\">Central Time</option>\r\n                    <option value=\"America/Denver\">Mountain Time</option>\r\n                    <option value=\"America/Los_Angeles\">Pacific Time</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div>\r\n                  <label style={{ display: 'block', marginBottom: '0.5rem', fontSize: '0.875rem', fontWeight: '600', color: '#374151' }}>\r\n                    Language\r\n                  </label>\r\n                  <select\r\n                    value={systemSettings.language}\r\n                    onChange={(e) => setSystemSettings(prev => ({ ...prev, language: e.target.value }))}\r\n                    style={{\r\n                      width: '100%',\r\n                      padding: '0.75rem 1rem',\r\n                      border: '1px solid #d1d5db',\r\n                      borderRadius: '8px',\r\n                      fontSize: '1rem',\r\n                      backgroundColor: 'white',\r\n                      color: '#374151'\r\n                    }}\r\n                  >\r\n                    <option value=\"English\">English</option>\r\n                    <option value=\"Spanish\">Spanish</option>\r\n                    <option value=\"French\">French</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div>\r\n                  <label style={{ display: 'block', marginBottom: '0.5rem', fontSize: '0.875rem', fontWeight: '600', color: '#374151' }}>\r\n                    Currency\r\n                  </label>\r\n                  <select\r\n                    value={systemSettings.currency}\r\n                    onChange={(e) => setSystemSettings(prev => ({ ...prev, currency: e.target.value }))}\r\n                    style={{\r\n                      width: '100%',\r\n                      padding: '0.75rem 1rem',\r\n                      border: '1px solid #d1d5db',\r\n                      borderRadius: '8px',\r\n                      fontSize: '1rem',\r\n                      backgroundColor: 'white',\r\n                      color: '#374151'\r\n                    }}\r\n                  >\r\n                    <option value=\"USD\">USD ($)</option>\r\n                    <option value=\"EUR\">EUR (€)</option>\r\n                    <option value=\"GBP\">GBP (£)</option>\r\n                    <option value=\"INR\">INR (₹)</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div>\r\n                  <label style={{ display: 'block', marginBottom: '0.5rem', fontSize: '0.875rem', fontWeight: '600', color: '#374151' }}>\r\n                    Date Format\r\n                  </label>\r\n                  <select\r\n                    value={systemSettings.dateFormat}\r\n                    onChange={(e) => setSystemSettings(prev => ({ ...prev, dateFormat: e.target.value }))}\r\n                    style={{\r\n                      width: '100%',\r\n                      padding: '0.75rem 1rem',\r\n                      border: '1px solid #d1d5db',\r\n                      borderRadius: '8px',\r\n                      fontSize: '1rem',\r\n                      backgroundColor: 'white',\r\n                      color: '#374151'\r\n                    }}\r\n                  >\r\n                    <option value=\"MM/DD/YYYY\">MM/DD/YYYY</option>\r\n                    <option value=\"DD/MM/YYYY\">DD/MM/YYYY</option>\r\n                    <option value=\"YYYY-MM-DD\">YYYY-MM-DD</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </SettingGroup>\r\n\r\n            <SettingGroup title=\"System Options\">\r\n              <ToggleSetting\r\n                label=\"Maintenance Mode\"\r\n                description=\"Put the system in maintenance mode to prevent user access during updates\"\r\n                checked={systemSettings.maintenanceMode}\r\n                onChange={(checked) => setSystemSettings(prev => ({ ...prev, maintenanceMode: checked }))}\r\n              />\r\n              \r\n              <ToggleSetting\r\n                label=\"Allow New Registrations\"\r\n                description=\"Allow new users to register accounts\"\r\n                checked={systemSettings.allowRegistrations}\r\n                onChange={(checked) => setSystemSettings(prev => ({ ...prev, allowRegistrations: checked }))}\r\n              />\r\n              \r\n              <ToggleSetting\r\n                label=\"Require Email Verification\"\r\n                description=\"Require users to verify their email address before accessing the system\"\r\n                checked={systemSettings.requireEmailVerification}\r\n                onChange={(checked) => setSystemSettings(prev => ({ ...prev, requireEmailVerification: checked }))}\r\n              />\r\n            </SettingGroup>\r\n\r\n            <div style={{ display: 'flex', justifyContent: 'flex-end', paddingTop: '1rem', borderTop: '1px solid #e5e7eb' }}>\r\n              <Button\r\n                onClick={() => handleSaveSettings('General')}\r\n                disabled={isLoading}\r\n              >\r\n                {isLoading ? 'Saving...' : 'Save General Settings'}\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Security Settings Tab */}\r\n        {currentTab === 'security' && (\r\n          <Card>\r\n            <SettingGroup title=\"Authentication Settings\">\r\n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1rem' }}>\r\n                <Input\r\n                  type=\"number\"\r\n                  label=\"Session Timeout (minutes)\"\r\n                  value={systemSettings.sessionTimeout.toString()}\r\n                  onChange={(e) => setSystemSettings(prev => ({ ...prev, sessionTimeout: parseInt(e.target.value) }))}\r\n                  min={5}\r\n                  max={480}\r\n                />\r\n                \r\n                <Input\r\n                  type=\"number\"\r\n                  label=\"Max Login Attempts\"\r\n                  value={systemSettings.maxLoginAttempts.toString()}\r\n                  onChange={(e) => setSystemSettings(prev => ({ ...prev, maxLoginAttempts: parseInt(e.target.value) }))}\r\n                  min={3}\r\n                  max={10}\r\n                />\r\n              </div>\r\n            </SettingGroup>\r\n\r\n            <SettingGroup title=\"Password Requirements\">\r\n              <Input\r\n                type=\"number\"\r\n                label=\"Minimum Password Length\"\r\n                value={systemSettings.passwordMinLength.toString()}\r\n                onChange={(e) => setSystemSettings(prev => ({ ...prev, passwordMinLength: parseInt(e.target.value) }))}\r\n                min={6}\r\n                max={20}\r\n                style={{ maxWidth: '200px' }}\r\n              />\r\n              \r\n              <ToggleSetting\r\n                label=\"Require Special Characters\"\r\n                description=\"Passwords must contain at least one special character (!@#$%^&*)\"\r\n                checked={systemSettings.passwordRequireSymbols}\r\n                onChange={(checked) => setSystemSettings(prev => ({ ...prev, passwordRequireSymbols: checked }))}\r\n              />\r\n              \r\n              <ToggleSetting\r\n                label=\"Enable Two-Factor Authentication\"\r\n                description=\"Require two-factor authentication for all user accounts\"\r\n                checked={systemSettings.twoFactorEnabled}\r\n                onChange={(checked) => setSystemSettings(prev => ({ ...prev, twoFactorEnabled: checked }))}\r\n              />\r\n            </SettingGroup>\r\n\r\n            <SettingGroup title=\"System Security\">\r\n              <div style={{\r\n                padding: '1rem',\r\n                backgroundColor: '#fef3c7',\r\n                borderRadius: '8px',\r\n                border: '1px solid #f59e0b'\r\n              }}>\r\n                <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#92400e', marginBottom: '0.5rem' }}>\r\n                  🔒 Security Audit\r\n                </h4>\r\n                <p style={{ fontSize: '0.875rem', color: '#92400e', marginBottom: '1rem' }}>\r\n                  Last security scan: December 1, 2024 - No issues found\r\n                </p>\r\n                <Button size=\"sm\" variant=\"outline\">\r\n                  Run Security Scan\r\n                </Button>\r\n              </div>\r\n            </SettingGroup>\r\n\r\n            <div style={{ display: 'flex', justifyContent: 'flex-end', paddingTop: '1rem', borderTop: '1px solid #e5e7eb' }}>\r\n              <Button\r\n                onClick={() => handleSaveSettings('Security')}\r\n                disabled={isLoading}\r\n              >\r\n                {isLoading ? 'Saving...' : 'Save Security Settings'}\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Notifications Tab */}\r\n        {currentTab === 'notifications' && (\r\n          <Card>\r\n            <SettingGroup title=\"Global Notification Settings\">\r\n              <ToggleSetting\r\n                label=\"Email Notifications\"\r\n                description=\"Enable email notifications system-wide\"\r\n                checked={notificationSettings.emailNotifications}\r\n                onChange={(checked) => setNotificationSettings(prev => ({ ...prev, emailNotifications: checked }))}\r\n              />\r\n              \r\n              <ToggleSetting\r\n                label=\"SMS Notifications\"\r\n                description=\"Enable SMS notifications system-wide\"\r\n                checked={notificationSettings.smsNotifications}\r\n                onChange={(checked) => setNotificationSettings(prev => ({ ...prev, smsNotifications: checked }))}\r\n              />\r\n              \r\n              <ToggleSetting\r\n                label=\"Push Notifications\"\r\n                description=\"Enable browser push notifications\"\r\n                checked={notificationSettings.pushNotifications}\r\n                onChange={(checked) => setNotificationSettings(prev => ({ ...prev, pushNotifications: checked }))}\r\n              />\r\n            </SettingGroup>\r\n\r\n            <SettingGroup title=\"Specific Notification Types\">\r\n              <ToggleSetting\r\n                label=\"Appointment Reminders\"\r\n                description=\"Send reminders to patients about upcoming appointments\"\r\n                checked={notificationSettings.appointmentReminders}\r\n                onChange={(checked) => setNotificationSettings(prev => ({ ...prev, appointmentReminders: checked }))}\r\n                disabled={!notificationSettings.emailNotifications && !notificationSettings.smsNotifications}\r\n              />\r\n              \r\n              <ToggleSetting\r\n                label=\"Lab Result Alerts\"\r\n                description=\"Notify doctors when lab results are available\"\r\n                checked={notificationSettings.labResultAlerts}\r\n                onChange={(checked) => setNotificationSettings(prev => ({ ...prev, labResultAlerts: checked }))}\r\n                disabled={!notificationSettings.emailNotifications}\r\n              />\r\n              \r\n              <ToggleSetting\r\n                label=\"Emergency Alerts\"\r\n                description=\"Send immediate alerts for emergency situations\"\r\n                checked={notificationSettings.emergencyAlerts}\r\n                onChange={(checked) => setNotificationSettings(prev => ({ ...prev, emergencyAlerts: checked }))}\r\n              />\r\n              \r\n              <ToggleSetting\r\n                label=\"System Maintenance Notices\"\r\n                description=\"Notify users about scheduled system maintenance\"\r\n                checked={notificationSettings.systemMaintenanceNotices}\r\n                onChange={(checked) => setNotificationSettings(prev => ({ ...prev, systemMaintenanceNotices: checked }))}\r\n              />\r\n              \r\n              <ToggleSetting\r\n                label=\"Billing Reminders\"\r\n                description=\"Send payment reminders to patients\"\r\n                checked={notificationSettings.billingReminders}\r\n                onChange={(checked) => setNotificationSettings(prev => ({ ...prev, billingReminders: checked }))}\r\n                disabled={!notificationSettings.emailNotifications && !notificationSettings.smsNotifications}\r\n              />\r\n            </SettingGroup>\r\n\r\n            <div style={{ display: 'flex', justifyContent: 'flex-end', paddingTop: '1rem', borderTop: '1px solid #e5e7eb' }}>\r\n              <Button\r\n                onClick={() => handleSaveSettings('Notification')}\r\n                disabled={isLoading}\r\n              >\r\n                {isLoading ? 'Saving...' : 'Save Notification Settings'}\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Integrations Tab */}\r\n        {currentTab === 'integrations' && (\r\n          <Card>\r\n            <SettingGroup title=\"Laboratory Integration\">\r\n              <ToggleSetting\r\n                label=\"Enable Lab Integration\"\r\n                description=\"Connect with external laboratory systems for test orders and results\"\r\n                checked={integrationSettings.labIntegration.enabled}\r\n                onChange={(checked) => setIntegrationSettings(prev => ({\r\n                  ...prev,\r\n                  labIntegration: { ...prev.labIntegration, enabled: checked }\r\n                }))}\r\n              />\r\n              \r\n              {integrationSettings.labIntegration.enabled && (\r\n                <div style={{ marginLeft: '2rem', display: 'grid', gap: '1rem' }}>\r\n                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1rem' }}>\r\n                    <Input\r\n                      label=\"Provider\"\r\n                      value={integrationSettings.labIntegration.provider}\r\n                      onChange={(e) => setIntegrationSettings(prev => ({\r\n                        ...prev,\r\n                        labIntegration: { ...prev.labIntegration, provider: e.target.value }\r\n                      }))}\r\n                    />\r\n                    <Input\r\n                      type=\"password\"\r\n                      label=\"API Key\"\r\n                      value={integrationSettings.labIntegration.apiKey}\r\n                      onChange={(e) => setIntegrationSettings(prev => ({\r\n                        ...prev,\r\n                        labIntegration: { ...prev.labIntegration, apiKey: e.target.value }\r\n                      }))}\r\n                    />\r\n                  </div>\r\n                  <Input\r\n                    label=\"API Endpoint\"\r\n                    value={integrationSettings.labIntegration.endpoint}\r\n                    onChange={(e) => setIntegrationSettings(prev => ({\r\n                      ...prev,\r\n                      labIntegration: { ...prev.labIntegration, endpoint: e.target.value }\r\n                    }))}\r\n                  />\r\n                  <Button size=\"sm\" variant=\"outline\" style={{ width: 'fit-content' }}>\r\n                    Test Connection\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </SettingGroup>\r\n\r\n            <SettingGroup title=\"Payment Gateway\">\r\n              <ToggleSetting\r\n                label=\"Enable Payment Processing\"\r\n                description=\"Accept online payments from patients\"\r\n                checked={integrationSettings.paymentGateway.enabled}\r\n                onChange={(checked) => setIntegrationSettings(prev => ({\r\n                  ...prev,\r\n                  paymentGateway: { ...prev.paymentGateway, enabled: checked }\r\n                }))}\r\n              />\r\n              \r\n              {integrationSettings.paymentGateway.enabled && (\r\n                <div style={{ marginLeft: '2rem', display: 'grid', gap: '1rem' }}>\r\n                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1rem' }}>\r\n                    <Input\r\n                      label=\"Provider\"\r\n                      value={integrationSettings.paymentGateway.provider}\r\n                      onChange={(e) => setIntegrationSettings(prev => ({\r\n                        ...prev,\r\n                        paymentGateway: { ...prev.paymentGateway, provider: e.target.value }\r\n                      }))}\r\n                    />\r\n                    <Input\r\n                      label=\"Public Key\"\r\n                      value={integrationSettings.paymentGateway.publicKey}\r\n                      onChange={(e) => setIntegrationSettings(prev => ({\r\n                        ...prev,\r\n                        paymentGateway: { ...prev.paymentGateway, publicKey: e.target.value }\r\n                      }))}\r\n                    />\r\n                  </div>\r\n                  <Input\r\n                    type=\"password\"\r\n                    label=\"Secret Key\"\r\n                    value={integrationSettings.paymentGateway.secretKey}\r\n                    onChange={(e) => setIntegrationSettings(prev => ({\r\n                      ...prev,\r\n                      paymentGateway: { ...prev.paymentGateway, secretKey: e.target.value }\r\n                    }))}\r\n                  />\r\n                </div>\r\n              )}\r\n            </SettingGroup>\r\n\r\n            <SettingGroup title=\"SMS Gateway\">\r\n              <ToggleSetting\r\n                label=\"Enable SMS Service\"\r\n                description=\"Send SMS notifications and reminders\"\r\n                checked={integrationSettings.smsGateway.enabled}\r\n                onChange={(checked) => setIntegrationSettings(prev => ({\r\n                  ...prev,\r\n                  smsGateway: { ...prev.smsGateway, enabled: checked }\r\n                }))}\r\n              />\r\n              \r\n              {integrationSettings.smsGateway.enabled && (\r\n                <div style={{ marginLeft: '2rem', display: 'grid', gap: '1rem' }}>\r\n                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>\r\n                    <Input\r\n                      label=\"Provider\"\r\n                      value={integrationSettings.smsGateway.provider}\r\n                      onChange={(e) => setIntegrationSettings(prev => ({\r\n                        ...prev,\r\n                        smsGateway: { ...prev.smsGateway, provider: e.target.value }\r\n                      }))}\r\n                    />\r\n                    <Input\r\n                      label=\"Sender ID\"\r\n                      value={integrationSettings.smsGateway.sender}\r\n                      onChange={(e) => setIntegrationSettings(prev => ({\r\n                        ...prev,\r\n                        smsGateway: { ...prev.smsGateway, sender: e.target.value }\r\n                      }))}\r\n                    />\r\n                  </div>\r\n                  <Input\r\n                    type=\"password\"\r\n                    label=\"API Key\"\r\n                    value={integrationSettings.smsGateway.apiKey}\r\n                    onChange={(e) => setIntegrationSettings(prev => ({\r\n                      ...prev,\r\n                      smsGateway: { ...prev.smsGateway, apiKey: e.target.value }\r\n                    }))}\r\n                  />\r\n                </div>\r\n              )}\r\n            </SettingGroup>\r\n\r\n            <div style={{ display: 'flex', justifyContent: 'flex-end', paddingTop: '1rem', borderTop: '1px solid #e5e7eb' }}>\r\n              <Button\r\n                onClick={() => handleSaveSettings('Integration')}\r\n                disabled={isLoading}\r\n              >\r\n                {isLoading ? 'Saving...' : 'Save Integration Settings'}\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Backup Tab */}\r\n        {currentTab === 'backup' && (\r\n          <Card>\r\n            <SettingGroup title=\"Backup Configuration\">\r\n              <div>\r\n                <label style={{ display: 'block', marginBottom: '0.5rem', fontSize: '0.875rem', fontWeight: '600', color: '#374151' }}>\r\n                  Backup Frequency\r\n                </label>\r\n                <select\r\n                  value={systemSettings.backupFrequency}\r\n                  onChange={(e) => setSystemSettings(prev => ({ ...prev, backupFrequency: e.target.value as string }))}\r\n                  style={{\r\n                    width: '300px',\r\n                    padding: '0.75rem 1rem',\r\n                    border: '1px solid #d1d5db',\r\n                    borderRadius: '8px',\r\n                    fontSize: '1rem',\r\n                    backgroundColor: 'white',\r\n                    color: '#374151'\r\n                  }}\r\n                >\r\n                  <option value=\"DAILY\">Daily</option>\r\n                  <option value=\"WEEKLY\">Weekly</option>\r\n                  <option value=\"MONTHLY\">Monthly</option>\r\n                </select>\r\n              </div>\r\n\r\n              <Input\r\n                type=\"number\"\r\n                label=\"Retention Period (days)\"\r\n                value={systemSettings.retentionPeriod.toString()}\r\n                onChange={(e) => setSystemSettings(prev => ({ ...prev, retentionPeriod: parseInt(e.target.value) }))}\r\n                min={30}\r\n                max={2555}\r\n                style={{ maxWidth: '300px' }}\r\n              />\r\n            </SettingGroup>\r\n\r\n            <SettingGroup title=\"Backup Status\">\r\n              <div style={{ display: 'grid', gap: '1rem' }}>\r\n                <div style={{\r\n                  padding: '1rem',\r\n                  backgroundColor: '#f0fdf4',\r\n                  borderRadius: '8px',\r\n                  border: '1px solid #bbf7d0'\r\n                }}>\r\n                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    <div>\r\n                      <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#166534', marginBottom: '0.25rem' }}>\r\n                        ✅ Last Backup Successful\r\n                      </h4>\r\n                      <p style={{ fontSize: '0.875rem', color: '#166534', margin: 0 }}>\r\n                        December 5, 2024 at 2:00 AM - Size: 2.4 GB\r\n                      </p>\r\n                    </div>\r\n                    <Button size=\"sm\" variant=\"outline\">\r\n                      Download\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n\r\n                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>\r\n                  <div style={{ textAlign: 'center', padding: '1rem', border: '1px solid #e5e7eb', borderRadius: '8px' }}>\r\n                    <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#10b981' }}>15</div>\r\n                    <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Total Backups</div>\r\n                  </div>\r\n                  <div style={{ textAlign: 'center', padding: '1rem', border: '1px solid #e5e7eb', borderRadius: '8px' }}>\r\n                    <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#3b82f6' }}>36.2 GB</div>\r\n                    <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Total Size</div>\r\n                  </div>\r\n                  <div style={{ textAlign: 'center', padding: '1rem', border: '1px solid #e5e7eb', borderRadius: '8px' }}>\r\n                    <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#f59e0b' }}>99.9%</div>\r\n                    <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Success Rate</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </SettingGroup>\r\n\r\n            <SettingGroup title=\"Manual Actions\">\r\n              <div style={{ display: 'flex', gap: '1rem' }}>\r\n                <Button variant=\"primary\">\r\n                  🗄️ Create Backup Now\r\n                </Button>\r\n                <Button variant=\"outline\">\r\n                  📤 Export Data\r\n                </Button>\r\n                <Button variant=\"secondary\">\r\n                  📥 Restore from Backup\r\n                </Button>\r\n              </div>\r\n            </SettingGroup>\r\n\r\n            <div style={{ display: 'flex', justifyContent: 'flex-end', paddingTop: '1rem', borderTop: '1px solid #e5e7eb' }}>\r\n              <Button\r\n                onClick={() => handleSaveSettings('Backup')}\r\n                disabled={isLoading}\r\n              >\r\n                {isLoading ? 'Saving...' : 'Save Backup Settings'}\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* User Management Tab */}\r\n        {currentTab === 'users' && (\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>👥</div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                User Management & Roles\r\n              </h3>\r\n              <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\r\n                Manage user roles, permissions, and access control settings. This advanced module allows you to configure role-based access control (RBAC) for your hospital management system.\r\n              </p>\r\n              <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>\r\n                <Button variant=\"primary\">\r\n                  👥 Manage Users\r\n                </Button>\r\n                <Button variant=\"outline\">\r\n                  🔐 Configure Roles\r\n                </Button>\r\n                <Button variant=\"secondary\">\r\n                  📋 Permission Matrix\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default SettingsPage;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\signup\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\staff\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\telemedicine\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockConsultations' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 72,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mockWaitingRoom' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 201,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 201,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\nimport Layout from '../components/Layout';\r\nimport Card from '../components/ui/Card';\r\nimport Button from '../components/ui/Button';\r\nimport Input from '../components/ui/Input';\r\nimport React, { useState } from 'react';\r\n\r\ninterface TelemedicineConsultation {\r\n  id: string;\r\n  consultationId: string;\r\n  patientId: string;\r\n  patientName: string;\r\n  patientAge: number;\r\n  patientEmail: string;\r\n  patientPhone: string;\r\n  doctorId: string;\r\n  doctorName: string;\r\n  specialty: string;\r\n  appointmentDate: string;\r\n  duration: number;\r\n  status: 'SCHEDULED' | 'WAITING' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED' | 'NO_SHOW';\r\n  consultationType: 'VIDEO' | 'AUDIO' | 'CHAT';\r\n  chiefComplaint: string;\r\n  symptoms: string[];\r\n  vitalSigns?: {\r\n    temperature?: number;\r\n    bloodPressure?: string;\r\n    heartRate?: number;\r\n    oxygenSaturation?: number;\r\n  };\r\n  prescriptions: Prescription[];\r\n  followUpRequired: boolean;\r\n  followUpDate?: string;\r\n  notes: string;\r\n  rating?: number;\r\n  feedback?: string;\r\n  sessionUrl?: string;\r\n  recordingAvailable: boolean;\r\n}\r\n\r\ninterface Prescription {\r\n  id: string;\r\n  medication: string;\r\n  dosage: string;\r\n  frequency: string;\r\n  duration: string;\r\n  instructions: string;\r\n  prescribedDate: string;\r\n  status: 'ACTIVE' | 'COMPLETED' | 'DISCONTINUED';\r\n}\r\n\r\ninterface VirtualWaitingRoom {\r\n  id: string;\r\n  patientName: string;\r\n  appointmentTime: string;\r\n  waitTime: number;\r\n  consultationType: 'VIDEO' | 'AUDIO' | 'CHAT';\r\n  priority: 'HIGH' | 'MEDIUM' | 'LOW';\r\n  chiefComplaint: string;\r\n  techCheck: boolean;\r\n}\r\n\r\nconst TelemedicinePage = () => {\r\n  const [currentTab, setCurrentTab] = useState<'consultations' | 'waiting-room' | 'sessions' | 'analytics' | 'settings'>('consultations');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('ALL');\r\n  const [dateFilter, setDateFilter] = useState('TODAY');\r\n  const [selectedConsultation, setSelectedConsultation] = useState<TelemedicineConsultation | null>(null);\r\n  const [showConsultationModal, setShowConsultationModal] = useState(false);\r\n  const [showSessionModal, setShowSessionModal] = useState(false);\r\n\r\n  const mockConsultations: TelemedicineConsultation[] = [\r\n    {\r\n      id: '1',\r\n      consultationId: 'TM-2024-001',\r\n      patientId: 'P001',\r\n      patientName: 'Emma Johnson',\r\n      patientAge: 34,\r\n      patientEmail: 'emma.johnson@email.com',\r\n      patientPhone: '+1 (555) 123-4567',\r\n      doctorId: 'D001',\r\n      doctorName: 'Dr. Sarah Mitchell',\r\n      specialty: 'Family Medicine',\r\n      appointmentDate: '2024-12-05T14:00:00',\r\n      duration: 30,\r\n      status: 'SCHEDULED',\r\n      consultationType: 'VIDEO',\r\n      chiefComplaint: 'Persistent cough and fatigue',\r\n      symptoms: ['Dry cough', 'Fatigue', 'Mild fever', 'Throat irritation'],\r\n      vitalSigns: {\r\n        temperature: 99.2,\r\n        heartRate: 78,\r\n        oxygenSaturation: 98\r\n      },\r\n      prescriptions: [],\r\n      followUpRequired: true,\r\n      followUpDate: '2024-12-12T14:00:00',\r\n      notes: 'Patient reports symptoms started 5 days ago. No shortness of breath.',\r\n      sessionUrl: 'https://meet.hospital.com/session-001',\r\n      recordingAvailable: false\r\n    },\r\n    {\r\n      id: '2',\r\n      consultationId: 'TM-2024-002',\r\n      patientId: 'P002',\r\n      patientName: 'Michael Chen',\r\n      patientAge: 45,\r\n      patientEmail: 'michael.chen@email.com',\r\n      patientPhone: '+1 (555) 987-6543',\r\n      doctorId: 'D002',\r\n      doctorName: 'Dr. Robert Kumar',\r\n      specialty: 'Dermatology',\r\n      appointmentDate: '2024-12-05T10:30:00',\r\n      duration: 20,\r\n      status: 'COMPLETED',\r\n      consultationType: 'VIDEO',\r\n      chiefComplaint: 'Skin rash on arms',\r\n      symptoms: ['Red rash', 'Itching', 'Dry skin'],\r\n      prescriptions: [\r\n        {\r\n          id: 'RX001',\r\n          medication: 'Hydrocortisone Cream 1%',\r\n          dosage: '1%',\r\n          frequency: 'Twice daily',\r\n          duration: '7 days',\r\n          instructions: 'Apply thin layer to affected areas after cleansing',\r\n          prescribedDate: '2024-12-05T10:45:00',\r\n          status: 'ACTIVE'\r\n        },\r\n        {\r\n          id: 'RX002',\r\n          medication: 'Cetirizine',\r\n          dosage: '10mg',\r\n          frequency: 'Once daily',\r\n          duration: '5 days',\r\n          instructions: 'Take with food to reduce stomach upset',\r\n          prescribedDate: '2024-12-05T10:45:00',\r\n          status: 'ACTIVE'\r\n        }\r\n      ],\r\n      followUpRequired: true,\r\n      followUpDate: '2024-12-12T10:30:00',\r\n      notes: 'Eczema flare-up. Patient education provided on skincare routine.',\r\n      rating: 5,\r\n      feedback: 'Excellent consultation, doctor was very thorough',\r\n      recordingAvailable: true\r\n    },\r\n    {\r\n      id: '3',\r\n      consultationId: 'TM-2024-003',\r\n      patientId: 'P003',\r\n      patientName: 'Lisa Rodriguez',\r\n      patientAge: 28,\r\n      patientEmail: 'lisa.rodriguez@email.com',\r\n      patientPhone: '+1 (555) 456-7890',\r\n      doctorId: 'D003',\r\n      doctorName: 'Dr. Amanda Foster',\r\n      specialty: 'Mental Health',\r\n      appointmentDate: '2024-12-05T16:00:00',\r\n      duration: 45,\r\n      status: 'IN_PROGRESS',\r\n      consultationType: 'VIDEO',\r\n      chiefComplaint: 'Anxiety and stress management',\r\n      symptoms: ['Anxiety', 'Sleep difficulties', 'Stress'],\r\n      prescriptions: [],\r\n      followUpRequired: true,\r\n      followUpDate: '2024-12-12T16:00:00',\r\n      notes: 'Regular therapy session. Patient showing improvement with coping strategies.',\r\n      sessionUrl: 'https://meet.hospital.com/session-003',\r\n      recordingAvailable: false\r\n    },\r\n    {\r\n      id: '4',\r\n      consultationId: 'TM-2024-004',\r\n      patientId: 'P004',\r\n      patientName: 'David Park',\r\n      patientAge: 52,\r\n      patientEmail: 'david.park@email.com',\r\n      patientPhone: '+1 (555) 321-0987',\r\n      doctorId: 'D004',\r\n      doctorName: 'Dr. Jennifer Lee',\r\n      specialty: 'Cardiology',\r\n      appointmentDate: '2024-12-05T11:00:00',\r\n      duration: 30,\r\n      status: 'WAITING',\r\n      consultationType: 'VIDEO',\r\n      chiefComplaint: 'Follow-up on blood pressure medication',\r\n      symptoms: ['Occasional headaches', 'Fatigue'],\r\n      vitalSigns: {\r\n        bloodPressure: '138/84',\r\n        heartRate: 72\r\n      },\r\n      prescriptions: [],\r\n      followUpRequired: false,\r\n      notes: 'Medication adjustment consultation. Patient monitoring BP at home.',\r\n      sessionUrl: 'https://meet.hospital.com/session-004',\r\n      recordingAvailable: false\r\n    }\r\n  ];\r\n\r\n  const mockWaitingRoom: VirtualWaitingRoom[] = [\r\n    {\r\n      id: '1',\r\n      patientName: 'David Park',\r\n      appointmentTime: '11:00 AM',\r\n      waitTime: 5,\r\n      consultationType: 'VIDEO',\r\n      priority: 'HIGH',\r\n      chiefComplaint: 'Follow-up on blood pressure medication',\r\n      techCheck: true\r\n    },\r\n    {\r\n      id: '2',\r\n      patientName: 'Emma Johnson',\r\n      appointmentTime: '2:00 PM',\r\n      waitTime: 0,\r\n      consultationType: 'VIDEO',\r\n      priority: 'MEDIUM',\r\n      chiefComplaint: 'Persistent cough and fatigue',\r\n      techCheck: false\r\n    },\r\n    {\r\n      id: '3',\r\n      patientName: 'Lisa Rodriguez',\r\n      appointmentTime: '4:00 PM',\r\n      waitTime: 0,\r\n      consultationType: 'VIDEO',\r\n      priority: 'LOW',\r\n      chiefComplaint: 'Anxiety and stress management',\r\n      techCheck: true\r\n    }\r\n  ];\r\n\r\n  const filteredConsultations = [].filter /* TODO: API */(consultation => {\r\n    const matchesSearch = consultation.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         consultation.consultationId.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         consultation.doctorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         consultation.chiefComplaint.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    const matchesStatus = statusFilter === 'ALL' || consultation.status === statusFilter;\r\n    \r\n    const today = new Date().toDateString();\r\n    const consultationDate = new Date(consultation.appointmentDate).toDateString();\r\n    const matchesDate = dateFilter === 'ALL' || \r\n                       (dateFilter === 'TODAY' && consultationDate === today) ||\r\n                       (dateFilter === 'UPCOMING' && new Date(consultation.appointmentDate) > new Date());\r\n    \r\n    return matchesSearch && matchesStatus && matchesDate;\r\n  });\r\n\r\n  const getStatusColor = (status: string) => {\r\n    const colors = {\r\n      'SCHEDULED': '#3b82f6',\r\n      'WAITING': '#f59e0b',\r\n      'IN_PROGRESS': '#10b981',\r\n      'COMPLETED': '#6b7280',\r\n      'CANCELLED': '#ef4444',\r\n      'NO_SHOW': '#dc2626'\r\n    };\r\n    return colors[status as keyof typeof colors] || '#6b7280';\r\n  };\r\n\r\n  const getConsultationTypeIcon = (type: string) => {\r\n    const icons = {\r\n      'VIDEO': '🎥',\r\n      'AUDIO': '🎵',\r\n      'CHAT': '💬'\r\n    };\r\n    return icons[type as keyof typeof icons] || '📞';\r\n  };\r\n\r\n  const ConsultationModal = () => (\r\n    <div style={{\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      zIndex: 1000,\r\n      padding: '1rem'\r\n    }}>\r\n      <div style={{\r\n        backgroundColor: 'white',\r\n        borderRadius: '12px',\r\n        padding: '2rem',\r\n        maxWidth: '900px',\r\n        width: '100%',\r\n        maxHeight: '90vh',\r\n        overflowY: 'auto'\r\n      }}>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem' }}>\r\n          <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n            Consultation Details\r\n          </h2>\r\n          <button\r\n            onClick={() => setShowConsultationModal(false)}\r\n            style={{\r\n              background: 'none',\r\n              border: 'none',\r\n              fontSize: '1.5rem',\r\n              cursor: 'pointer',\r\n              color: '#6b7280'\r\n            }}\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n\r\n        {selectedConsultation && (\r\n          <div style={{ display: 'grid', gap: '1.5rem' }}>\r\n            {/* Header Info */}\r\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>\r\n              <div><span style={{ fontWeight: '600' }}>Consultation ID:</span> {selectedConsultation.consultationId}</div>\r\n              <div><span style={{ fontWeight: '600' }}>Date & Time:</span> {new Date(selectedConsultation.appointmentDate).toLocaleString()}</div>\r\n              <div><span style={{ fontWeight: '600' }}>Duration:</span> {selectedConsultation.duration} minutes</div>\r\n              <div>\r\n                <span style={{ fontWeight: '600' }}>Status:</span>\r\n                <span style={{\r\n                  marginLeft: '0.5rem',\r\n                  padding: '0.25rem 0.75rem',\r\n                  borderRadius: '9999px',\r\n                  fontSize: '0.875rem',\r\n                  fontWeight: '600',\r\n                  color: 'white',\r\n                  backgroundColor: getStatusColor(selectedConsultation.status)\r\n                }}>\r\n                  {selectedConsultation.status.replace('_', ' ')}\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Patient Information */}\r\n            <div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Patient Information\r\n              </h3>\r\n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1rem' }}>\r\n                <div><span style={{ fontWeight: '600' }}>Name:</span> {selectedConsultation.patientName}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Age:</span> {selectedConsultation.patientAge} years</div>\r\n                <div><span style={{ fontWeight: '600' }}>Email:</span> {selectedConsultation.patientEmail}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Phone:</span> {selectedConsultation.patientPhone}</div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Doctor Information */}\r\n            <div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Healthcare Provider\r\n              </h3>\r\n              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>\r\n                <div><span style={{ fontWeight: '600' }}>Doctor:</span> {selectedConsultation.doctorName}</div>\r\n                <div><span style={{ fontWeight: '600' }}>Specialty:</span> {selectedConsultation.specialty}</div>\r\n                <div>\r\n                  <span style={{ fontWeight: '600' }}>Consultation Type:</span> \r\n                  {getConsultationTypeIcon(selectedConsultation.consultationType)} {selectedConsultation.consultationType}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Clinical Information */}\r\n            <div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Clinical Information\r\n              </h3>\r\n              <div style={{ marginBottom: '1rem' }}>\r\n                <div style={{ fontWeight: '600', marginBottom: '0.5rem' }}>Chief Complaint:</div>\r\n                <p style={{\r\n                  padding: '1rem',\r\n                  backgroundColor: '#f9fafb',\r\n                  borderRadius: '8px',\r\n                  border: '1px solid #e5e7eb',\r\n                  margin: 0\r\n                }}>\r\n                  {selectedConsultation.chiefComplaint}\r\n                </p>\r\n              </div>\r\n\r\n              <div style={{ marginBottom: '1rem' }}>\r\n                <div style={{ fontWeight: '600', marginBottom: '0.5rem' }}>Symptoms:</div>\r\n                <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\r\n                  {selectedConsultation.symptoms.map((symptom, index) => (\r\n                    <span\r\n                      key={index}\r\n                      style={{\r\n                        padding: '0.25rem 0.75rem',\r\n                        backgroundColor: '#e0f2fe',\r\n                        color: '#0e7490',\r\n                        borderRadius: '9999px',\r\n                        fontSize: '0.875rem',\r\n                        fontWeight: '500'\r\n                      }}\r\n                    >\r\n                      {symptom}\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {selectedConsultation.vitalSigns && (\r\n                <div>\r\n                  <div style={{ fontWeight: '600', marginBottom: '0.5rem' }}>Vital Signs:</div>\r\n                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: '0.5rem' }}>\r\n                    {selectedConsultation.vitalSigns.temperature && (\r\n                      <div>Temperature: {selectedConsultation.vitalSigns.temperature}°F</div>\r\n                    )}\r\n                    {selectedConsultation.vitalSigns.bloodPressure && (\r\n                      <div>BP: {selectedConsultation.vitalSigns.bloodPressure} mmHg</div>\r\n                    )}\r\n                    {selectedConsultation.vitalSigns.heartRate && (\r\n                      <div>HR: {selectedConsultation.vitalSigns.heartRate} bpm</div>\r\n                    )}\r\n                    {selectedConsultation.vitalSigns.oxygenSaturation && (\r\n                      <div>O2 Sat: {selectedConsultation.vitalSigns.oxygenSaturation}%</div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Prescriptions */}\r\n            {selectedConsultation.prescriptions.length > 0 && (\r\n              <div>\r\n                <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                  Prescriptions\r\n                </h3>\r\n                <div style={{ display: 'grid', gap: '0.75rem' }}>\r\n                  {selectedConsultation.prescriptions.map(prescription => (\r\n                    <div\r\n                      key={prescription.id}\r\n                      style={{\r\n                        padding: '1rem',\r\n                        border: '1px solid #e5e7eb',\r\n                        borderRadius: '8px',\r\n                        backgroundColor: '#f9fafb'\r\n                      }}\r\n                    >\r\n                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.5rem' }}>\r\n                        <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#1f2937', margin: 0 }}>\r\n                          {prescription.medication}\r\n                        </h4>\r\n                        <span style={{\r\n                          padding: '0.25rem 0.5rem',\r\n                          borderRadius: '4px',\r\n                          fontSize: '0.75rem',\r\n                          fontWeight: '600',\r\n                          color: 'white',\r\n                          backgroundColor: prescription.status === 'ACTIVE' ? '#10b981' : '#6b7280'\r\n                        }}>\r\n                          {prescription.status}\r\n                        </span>\r\n                      </div>\r\n                      <div style={{ color: '#6b7280', fontSize: '0.875rem' }}>\r\n                        <div>Dosage: {prescription.dosage} • Frequency: {prescription.frequency}</div>\r\n                        <div>Duration: {prescription.duration}</div>\r\n                        <div>Instructions: {prescription.instructions}</div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Notes */}\r\n            <div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                Clinical Notes\r\n              </h3>\r\n              <p style={{\r\n                padding: '1rem',\r\n                backgroundColor: '#f9fafb',\r\n                borderRadius: '8px',\r\n                border: '1px solid #e5e7eb',\r\n                margin: 0,\r\n                lineHeight: '1.6'\r\n              }}>\r\n                {selectedConsultation.notes}\r\n              </p>\r\n            </div>\r\n\r\n            {/* Follow-up */}\r\n            {selectedConsultation.followUpRequired && (\r\n              <div>\r\n                <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                  Follow-up Required\r\n                </h3>\r\n                <div style={{\r\n                  padding: '1rem',\r\n                  backgroundColor: '#fef3c7',\r\n                  borderRadius: '8px',\r\n                  border: '1px solid #f59e0b'\r\n                }}>\r\n                  <div style={{ color: '#92400e' }}>\r\n                    Follow-up appointment scheduled for: {selectedConsultation.followUpDate ? new Date(selectedConsultation.followUpDate).toLocaleString() : 'To be scheduled'}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Patient Feedback */}\r\n            {selectedConsultation.rating && (\r\n              <div>\r\n                <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '1rem' }}>\r\n                  Patient Feedback\r\n                </h3>\r\n                <div style={{\r\n                  padding: '1rem',\r\n                  backgroundColor: '#f0fdf4',\r\n                  borderRadius: '8px',\r\n                  border: '1px solid #bbf7d0'\r\n                }}>\r\n                  <div style={{ display: 'flex', alignItems: 'center', marginBottom: '0.5rem' }}>\r\n                    <span style={{ fontWeight: '600', marginRight: '0.5rem' }}>Rating:</span>\r\n                    <div style={{ color: '#f59e0b' }}>\r\n                      {'⭐'.repeat(selectedConsultation.rating)}\r\n                    </div>\r\n                  </div>\r\n                  {selectedConsultation.feedback && (\r\n                    <p style={{ color: '#166534', margin: 0 }}>{selectedConsultation.feedback}</p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div style={{ display: 'flex', gap: '1rem', justifyContent: 'flex-end', paddingTop: '1rem', borderTop: '1px solid #e5e7eb' }}>\r\n              {selectedConsultation.status === 'SCHEDULED' || selectedConsultation.status === 'WAITING' ? (\r\n                <Button variant=\"primary\" onClick={() => setShowSessionModal(true)}>\r\n                  🎥 Join Session\r\n                </Button>\r\n              ) : null}\r\n              {selectedConsultation.recordingAvailable && (\r\n                <Button variant=\"outline\">\r\n                  📹 View Recording\r\n                </Button>\r\n              )}\r\n              <Button variant=\"secondary\" onClick={() => setShowConsultationModal(false)}>\r\n                Close\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const SessionModal = () => (\r\n    <div style={{\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      zIndex: 1000,\r\n      padding: '1rem'\r\n    }}>\r\n      <div style={{\r\n        backgroundColor: 'white',\r\n        borderRadius: '12px',\r\n        padding: '2rem',\r\n        maxWidth: '600px',\r\n        width: '100%'\r\n      }}>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem' }}>\r\n          <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#1f2937' }}>\r\n            Video Session\r\n          </h2>\r\n          <button\r\n            onClick={() => setShowSessionModal(false)}\r\n            style={{\r\n              background: 'none',\r\n              border: 'none',\r\n              fontSize: '1.5rem',\r\n              cursor: 'pointer',\r\n              color: '#6b7280'\r\n            }}\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n\r\n        <div style={{ textAlign: 'center' }}>\r\n          <div style={{\r\n            width: '100%',\r\n            height: '300px',\r\n            backgroundColor: '#1f2937',\r\n            borderRadius: '12px',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            marginBottom: '1.5rem',\r\n            color: 'white'\r\n          }}>\r\n            <div>\r\n              <div style={{ fontSize: '4rem', marginBottom: '1rem' }}>🎥</div>\r\n              <div style={{ fontSize: '1.25rem' }}>Video Call Interface</div>\r\n              <div style={{ fontSize: '0.875rem', opacity: 0.8 }}>\r\n                Integration with video conferencing platform\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center', marginBottom: '1rem' }}>\r\n            <Button variant=\"primary\">\r\n              📹 Turn on Camera\r\n            </Button>\r\n            <Button variant=\"outline\">\r\n              🎤 Mute/Unmute\r\n            </Button>\r\n            <Button variant=\"secondary\">\r\n              💬 Chat\r\n            </Button>\r\n            <Button variant=\"secondary\">\r\n              📋 Notes\r\n            </Button>\r\n          </div>\r\n\r\n          <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>\r\n            <Button variant=\"outline\" onClick={() => setShowSessionModal(false)}>\r\n              End Session\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Layout>\r\n      <div style={{ maxWidth: '1400px', margin: '0 auto' }}>\r\n        {/* Header */}\r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'space-between', \r\n          alignItems: 'center', \r\n          marginBottom: '2rem' \r\n        }}>\r\n          <div>\r\n            <h1 style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n              Telemedicine Platform\r\n            </h1>\r\n            <p style={{ color: '#6b7280', fontSize: '1rem' }}>\r\n              Manage virtual consultations, patient sessions, and remote healthcare delivery\r\n            </p>\r\n          </div>\r\n          <div style={{ display: 'flex', gap: '0.5rem' }}>\r\n            <Button variant=\"primary\">\r\n              🎥 New Consultation\r\n            </Button>\r\n            <Button variant=\"outline\">\r\n              📊 Analytics\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Tab Navigation */}\r\n        <div style={{ marginBottom: '2rem' }}>\r\n          <div style={{ display: 'flex', gap: '0.5rem', borderBottom: '1px solid #e5e7eb' }}>\r\n            {[\r\n              { key: 'consultations', label: '📋 Consultations', desc: 'All Sessions' },\r\n              { key: 'waiting-room', label: '⏳ Waiting Room', desc: 'Current Queue' },\r\n              { key: 'sessions', label: '🎥 Active Sessions', desc: 'Live Calls' },\r\n              { key: 'analytics', label: '📊 Analytics', desc: 'Platform Metrics' },\r\n              { key: 'settings', label: '⚙️ Settings', desc: 'Configuration' }\r\n            ].map(tab => (\r\n              <button\r\n                key={tab.key}\r\n                onClick={() => setCurrentTab(tab.key as string)}\r\n                style={{\r\n                  padding: '1rem 1.5rem',\r\n                  border: 'none',\r\n                  background: 'none',\r\n                  fontSize: '1rem',\r\n                  fontWeight: '500',\r\n                  color: currentTab === tab.key ? '#667eea' : '#6b7280',\r\n                  borderBottom: currentTab === tab.key ? '2px solid #667eea' : '2px solid transparent',\r\n                  cursor: 'pointer',\r\n                  transition: 'all 0.2s ease'\r\n                }}\r\n              >\r\n                <div>{tab.label}</div>\r\n                <div style={{ fontSize: '0.75rem', opacity: 0.8 }}>\r\n                  {tab.desc}\r\n                </div>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Consultations Tab */}\r\n        {currentTab === 'consultations' && (\r\n          <>\r\n            {/* Search and Filters */}\r\n            <Card style={{ marginBottom: '1.5rem' }}>\r\n              <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', flexWrap: 'wrap' }}>\r\n                <div style={{ flex: 1, minWidth: '250px' }}>\r\n                  <Input\r\n                    placeholder=\"Search consultations...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                  />\r\n                </div>\r\n                \r\n                <select\r\n                  value={statusFilter}\r\n                  onChange={(e) => setStatusFilter(e.target.value)}\r\n                  style={{\r\n                    padding: '0.75rem 1rem',\r\n                    border: '1px solid #d1d5db',\r\n                    borderRadius: '8px',\r\n                    fontSize: '1rem',\r\n                    backgroundColor: 'white',\r\n                    minWidth: '150px'\r\n                  }}\r\n                >\r\n                  <option value=\"ALL\">All Status</option>\r\n                  <option value=\"SCHEDULED\">Scheduled</option>\r\n                  <option value=\"WAITING\">Waiting</option>\r\n                  <option value=\"IN_PROGRESS\">In Progress</option>\r\n                  <option value=\"COMPLETED\">Completed</option>\r\n                  <option value=\"CANCELLED\">Cancelled</option>\r\n                </select>\r\n\r\n                <select\r\n                  value={dateFilter}\r\n                  onChange={(e) => setDateFilter(e.target.value)}\r\n                  style={{\r\n                    padding: '0.75rem 1rem',\r\n                    border: '1px solid #d1d5db',\r\n                    borderRadius: '8px',\r\n                    fontSize: '1rem',\r\n                    backgroundColor: 'white',\r\n                    minWidth: '150px'\r\n                  }}\r\n                >\r\n                  <option value=\"ALL\">All Dates</option>\r\n                  <option value=\"TODAY\">Today</option>\r\n                  <option value=\"UPCOMING\">Upcoming</option>\r\n                </select>\r\n\r\n                <Button variant=\"outline\">\r\n                  🔄 Refresh\r\n                </Button>\r\n              </div>\r\n            </Card>\r\n\r\n            {/* Consultations List */}\r\n            <div style={{ display: 'grid', gap: '1rem' }}>\r\n              {filteredConsultations.map(consultation => (\r\n                <Card key={consultation.id}>\r\n                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\r\n                    <div style={{ flex: 1 }}>\r\n                      <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', marginBottom: '0.75rem' }}>\r\n                        <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', margin: 0 }}>\r\n                          {consultation.patientName}\r\n                        </h3>\r\n                        <span style={{ fontSize: '1.5rem' }}>\r\n                          {getConsultationTypeIcon(consultation.consultationType)}\r\n                        </span>\r\n                        <span style={{\r\n                          padding: '0.25rem 0.75rem',\r\n                          borderRadius: '9999px',\r\n                          fontSize: '0.75rem',\r\n                          fontWeight: '600',\r\n                          color: 'white',\r\n                          backgroundColor: getStatusColor(consultation.status)\r\n                        }}>\r\n                          {consultation.status.replace('_', ' ')}\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '0.5rem', marginBottom: '0.75rem' }}>\r\n                        <div style={{ color: '#6b7280' }}>\r\n                          <span style={{ fontWeight: '600' }}>Doctor:</span> {consultation.doctorName}\r\n                        </div>\r\n                        <div style={{ color: '#6b7280' }}>\r\n                          <span style={{ fontWeight: '600' }}>Specialty:</span> {consultation.specialty}\r\n                        </div>\r\n                        <div style={{ color: '#6b7280' }}>\r\n                          <span style={{ fontWeight: '600' }}>Date:</span> {new Date(consultation.appointmentDate).toLocaleString()}\r\n                        </div>\r\n                        <div style={{ color: '#6b7280' }}>\r\n                          <span style={{ fontWeight: '600' }}>Duration:</span> {consultation.duration} min\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <p style={{ color: '#6b7280', fontSize: '0.875rem', margin: 0 }}>\r\n                        <span style={{ fontWeight: '600' }}>Chief Complaint:</span> {consultation.chiefComplaint}\r\n                      </p>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', gap: '0.5rem', marginLeft: '1rem' }}>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => {\r\n                          setSelectedConsultation(consultation);\r\n                          setShowConsultationModal(true);\r\n                        }}\r\n                      >\r\n                        View Details\r\n                      </Button>\r\n                      {(consultation.status === 'SCHEDULED' || consultation.status === 'WAITING') && (\r\n                        <Button\r\n                          size=\"sm\"\r\n                          variant=\"primary\"\r\n                          onClick={() => setShowSessionModal(true)}\r\n                        >\r\n                          Join Session\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {/* Waiting Room Tab */}\r\n        {currentTab === 'waiting-room' && (\r\n          <div style={{ display: 'grid', gap: '1rem' }}>\r\n            <Card>\r\n              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem' }}>\r\n                <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', margin: 0 }}>\r\n                  Virtual Waiting Room\r\n                </h3>\r\n                <div style={{ display: 'flex', gap: '0.5rem' }}>\r\n                  <span style={{ color: '#6b7280' }}>Patients waiting: {0}</span>\r\n                  <Button size=\"sm\" variant=\"outline\">Refresh</Button>\r\n                </div>\r\n              </div>\r\n\r\n              <div style={{ display: 'grid', gap: '1rem' }}>\r\n                {[].map /* TODO: API */(patient => (\r\n                  <div\r\n                    key={patient.id}\r\n                    style={{\r\n                      padding: '1rem',\r\n                      border: '1px solid #e5e7eb',\r\n                      borderRadius: '8px',\r\n                      display: 'flex',\r\n                      justifyContent: 'space-between',\r\n                      alignItems: 'center'\r\n                    }}\r\n                  >\r\n                    <div style={{ flex: 1 }}>\r\n                      <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '0.5rem' }}>\r\n                        <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#1f2937', margin: 0 }}>\r\n                          {patient.patientName}\r\n                        </h4>\r\n                        <span style={{ fontSize: '1.25rem' }}>\r\n                          {getConsultationTypeIcon(patient.consultationType)}\r\n                        </span>\r\n                        <span style={{\r\n                          padding: '0.125rem 0.5rem',\r\n                          borderRadius: '4px',\r\n                          fontSize: '0.75rem',\r\n                          fontWeight: '600',\r\n                          backgroundColor: patient.priority === 'HIGH' ? '#fef2f2' : patient.priority === 'MEDIUM' ? '#fef3c7' : '#f0fdf4',\r\n                          color: patient.priority === 'HIGH' ? '#dc2626' : patient.priority === 'MEDIUM' ? '#92400e' : '#166534'\r\n                        }}>\r\n                          {patient.priority}\r\n                        </span>\r\n                        {patient.techCheck ? (\r\n                          <span style={{ color: '#10b981', fontSize: '0.875rem' }}>✅ Tech Ready</span>\r\n                        ) : (\r\n                          <span style={{ color: '#f59e0b', fontSize: '0.875rem' }}>⚠️ Tech Check</span>\r\n                        )}\r\n                      </div>\r\n                      <div style={{ color: '#6b7280', fontSize: '0.875rem' }}>\r\n                        Appointment: {patient.appointmentTime} • \r\n                        Wait time: {patient.waitTime} minutes • \r\n                        {patient.chiefComplaint}\r\n                      </div>\r\n                    </div>\r\n                    <div style={{ display: 'flex', gap: '0.5rem' }}>\r\n                      <Button size=\"sm\" variant=\"outline\">Message</Button>\r\n                      <Button size=\"sm\" variant=\"primary\">Start Session</Button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        )}\r\n\r\n        {/* Active Sessions Tab */}\r\n        {currentTab === 'sessions' && (\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>🎥</div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                Active Telemedicine Sessions\r\n              </h3>\r\n              <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\r\n                Monitor and manage live video consultations, chat sessions, and ongoing patient communications in real-time.\r\n              </p>\r\n              <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>\r\n                <Button variant=\"primary\">\r\n                  🎥 View Active Sessions\r\n                </Button>\r\n                <Button variant=\"outline\">\r\n                  📱 Mobile Sessions\r\n                </Button>\r\n                <Button variant=\"secondary\">\r\n                  🔧 Technical Support\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Analytics Tab */}\r\n        {currentTab === 'analytics' && (\r\n          <div style={{ display: 'grid', gap: '1.5rem' }}>\r\n            {/* Summary Cards */}\r\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1rem' }}>\r\n              <Card>\r\n                <div style={{ textAlign: 'center', padding: '1.5rem' }}>\r\n                  <div style={{ fontSize: '2rem', color: '#3b82f6', marginBottom: '0.5rem' }}>📈</div>\r\n                  <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1f2937' }}>142</div>\r\n                  <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Total Consultations</div>\r\n                  <div style={{ fontSize: '0.75rem', color: '#10b981' }}>+12% from last month</div>\r\n                </div>\r\n              </Card>\r\n\r\n              <Card>\r\n                <div style={{ textAlign: 'center', padding: '1.5rem' }}>\r\n                  <div style={{ fontSize: '2rem', color: '#10b981', marginBottom: '0.5rem' }}>🎯</div>\r\n                  <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1f2937' }}>94%</div>\r\n                  <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Completion Rate</div>\r\n                  <div style={{ fontSize: '0.75rem', color: '#10b981' }}>Above target</div>\r\n                </div>\r\n              </Card>\r\n\r\n              <Card>\r\n                <div style={{ textAlign: 'center', padding: '1.5rem' }}>\r\n                  <div style={{ fontSize: '2rem', color: '#f59e0b', marginBottom: '0.5rem' }}>⭐</div>\r\n                  <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1f2937' }}>4.8</div>\r\n                  <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Average Rating</div>\r\n                  <div style={{ fontSize: '0.75rem', color: '#10b981' }}>Excellent feedback</div>\r\n                </div>\r\n              </Card>\r\n\r\n              <Card>\r\n                <div style={{ textAlign: 'center', padding: '1.5rem' }}>\r\n                  <div style={{ fontSize: '2rem', color: '#8b5cf6', marginBottom: '0.5rem' }}>⏱️</div>\r\n                  <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#1f2937' }}>28</div>\r\n                  <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>Avg Duration (min)</div>\r\n                  <div style={{ fontSize: '0.75rem', color: '#6b7280' }}>Within guidelines</div>\r\n                </div>\r\n              </Card>\r\n            </div>\r\n\r\n            <Card>\r\n              <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n                <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>📊</div>\r\n                <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                  Telemedicine Analytics Dashboard\r\n                </h3>\r\n                <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\r\n                  Comprehensive analytics for virtual consultations, patient satisfaction, technical performance, and platform utilization metrics.\r\n                </p>\r\n                <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>\r\n                  <Button variant=\"primary\">\r\n                    📊 View Full Analytics\r\n                  </Button>\r\n                  <Button variant=\"outline\">\r\n                    📈 Performance Reports\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        )}\r\n\r\n        {/* Settings Tab */}\r\n        {currentTab === 'settings' && (\r\n          <Card>\r\n            <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>⚙️</div>\r\n              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937', marginBottom: '0.5rem' }}>\r\n                Telemedicine Platform Settings\r\n              </h3>\r\n              <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\r\n                Configure video conferencing settings, quality parameters, security options, integration settings, and platform customizations.\r\n              </p>\r\n              <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>\r\n                <Button variant=\"primary\">\r\n                  ⚙️ Platform Settings\r\n                </Button>\r\n                <Button variant=\"outline\">\r\n                  📹 Video Configuration\r\n                </Button>\r\n                <Button variant=\"secondary\">\r\n                  🔐 Security Options\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Modals */}\r\n        {showConsultationModal && <ConsultationModal />}\r\n        {showSessionModal && <SessionModal />}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TelemedicinePage;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\app\\test-mantine\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\EmptyState.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\MantineChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\appointments\\AppointmentDetails.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Avatar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 12,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ActionIcon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Menu' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDotsVertical' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport {\r\n  Modal,\r\n  Text,\r\n  Group,\r\n  Stack,\r\n  Badge,\r\n  Button,\r\n  Divider,\r\n  Grid,\r\n  Card,\r\n  Avatar,\r\n  ActionIcon,\r\n  Menu\r\n} from '@mantine/core';\r\nimport {\r\n  IconCalendar,\r\n  IconClock,\r\n  IconUser,\r\n  IconStethoscope,\r\n  IconNotes,\r\n  IconEdit,\r\n  IconTrash,\r\n  IconCheck,\r\n  IconX,\r\n  IconDotsVertical,\r\n  IconPhone,\r\n  IconMail\r\n} from '@tabler/icons-react';\r\n\r\ninterface AppointmentDetailsProps {\r\n  opened: boolean;\r\n  onClose: () => void;\r\n  appointment: any;\r\n  onEdit?: (appointment: any) => void;\r\n  onDelete?: (appointment: any) => void;\r\n  onStatusChange?: (appointmentId: string, status: string) => void;\r\n}\r\n\r\nexport default function AppointmentDetails({\r\n  opened,\r\n  onClose,\r\n  appointment,\r\n  onEdit,\r\n  onDelete,\r\n  onStatusChange\r\n}: AppointmentDetailsProps) {\r\n  if (!appointment) return null;\r\n\r\n  const getStatusColor = (status: string) => {\r\n    const colors: Record<string, string> = {\r\n      SCHEDULED: 'blue',\r\n      ARRIVED: 'teal',\r\n      IN_PROGRESS: 'yellow',\r\n      COMPLETED: 'green',\r\n      CANCELLED: 'red',\r\n      NO_SHOW: 'gray',\r\n      RESCHEDULED: 'orange'\r\n    };\r\n    return colors[status] || 'gray';\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('en-US', {\r\n      weekday: 'long',\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  const formatTime = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleTimeString('en-US', {\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  const patient = appointment.patient || {};\r\n  const doctor = appointment.doctor || {};\r\n\r\n  return (\r\n    <Modal\r\n      opened={opened}\r\n      onClose={onClose}\r\n      title={\r\n        <Group justify=\"space-between\" style={{ width: '100%' }}>\r\n          <Group>\r\n            <IconCalendar size={24} />\r\n            <Text size=\"lg\" fw={600}>\r\n              Appointment Details\r\n            </Text>\r\n          </Group>\r\n          <Badge color={getStatusColor(appointment.status)} size=\"lg\">\r\n            {appointment.status}\r\n          </Badge>\r\n        </Group>\r\n      }\r\n      size=\"lg\"\r\n      padding=\"md\"\r\n    >\r\n      <Stack gap=\"md\">\r\n        {/* Date and Time */}\r\n        <Card withBorder padding=\"md\">\r\n          <Grid>\r\n            <Grid.Col span={6}>\r\n              <Group gap=\"xs\">\r\n                <IconCalendar size={20} color=\"#228be6\" />\r\n                <div>\r\n                  <Text size=\"xs\" c=\"dimmed\">Date</Text>\r\n                  <Text fw={500}>{formatDate(appointment.startTime)}</Text>\r\n                </div>\r\n              </Group>\r\n            </Grid.Col>\r\n            <Grid.Col span={6}>\r\n              <Group gap=\"xs\">\r\n                <IconClock size={20} color=\"#228be6\" />\r\n                <div>\r\n                  <Text size=\"xs\" c=\"dimmed\">Time</Text>\r\n                  <Text fw={500}>\r\n                    {formatTime(appointment.startTime)} - {formatTime(appointment.endTime)}\r\n                  </Text>\r\n                </div>\r\n              </Group>\r\n            </Grid.Col>\r\n          </Grid>\r\n        </Card>\r\n\r\n        {/* Patient Information */}\r\n        <Card withBorder padding=\"md\">\r\n          <Group mb=\"xs\">\r\n            <IconUser size={20} />\r\n            <Text fw={600}>Patient Information</Text>\r\n          </Group>\r\n          <Divider mb=\"sm\" />\r\n          <Stack gap=\"xs\">\r\n            <Group justify=\"space-between\">\r\n              <Text size=\"sm\" c=\"dimmed\">Name:</Text>\r\n              <Text fw={500}>\r\n                {patient.firstName} {patient.lastName}\r\n              </Text>\r\n            </Group>\r\n            {patient.medicalRecordNumber && (\r\n              <Group justify=\"space-between\">\r\n                <Text size=\"sm\" c=\"dimmed\">MRN:</Text>\r\n                <Text fw={500}>{patient.medicalRecordNumber}</Text>\r\n              </Group>\r\n            )}\r\n            {patient.phone && (\r\n              <Group justify=\"space-between\">\r\n                <Text size=\"sm\" c=\"dimmed\">Phone:</Text>\r\n                <Group gap=\"xs\">\r\n                  <IconPhone size={16} />\r\n                  <Text fw={500}>{patient.phone}</Text>\r\n                </Group>\r\n              </Group>\r\n            )}\r\n            {patient.email && (\r\n              <Group justify=\"space-between\">\r\n                <Text size=\"sm\" c=\"dimmed\">Email:</Text>\r\n                <Group gap=\"xs\">\r\n                  <IconMail size={16} />\r\n                  <Text fw={500}>{patient.email}</Text>\r\n                </Group>\r\n              </Group>\r\n            )}\r\n          </Stack>\r\n        </Card>\r\n\r\n        {/* Doctor Information */}\r\n        <Card withBorder padding=\"md\">\r\n          <Group mb=\"xs\">\r\n            <IconStethoscope size={20} />\r\n            <Text fw={600}>Doctor Information</Text>\r\n          </Group>\r\n          <Divider mb=\"sm\" />\r\n          <Stack gap=\"xs\">\r\n            <Group justify=\"space-between\">\r\n              <Text size=\"sm\" c=\"dimmed\">Name:</Text>\r\n              <Text fw={500}>\r\n                Dr. {doctor.firstName} {doctor.lastName}\r\n              </Text>\r\n            </Group>\r\n          </Stack>\r\n        </Card>\r\n\r\n        {/* Appointment Details */}\r\n        <Card withBorder padding=\"md\">\r\n          <Group mb=\"xs\">\r\n            <IconNotes size={20} />\r\n            <Text fw={600}>Appointment Details</Text>\r\n          </Group>\r\n          <Divider mb=\"sm\" />\r\n          <Stack gap=\"xs\">\r\n            {appointment.reason && (\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" mb={4}>Reason for Visit:</Text>\r\n                <Text>{appointment.reason}</Text>\r\n              </div>\r\n            )}\r\n            {appointment.notes && (\r\n              <div>\r\n                <Text size=\"sm\" c=\"dimmed\" mb={4}>Additional Notes:</Text>\r\n                <Text>{appointment.notes}</Text>\r\n              </div>\r\n            )}\r\n          </Stack>\r\n        </Card>\r\n\r\n        {/* Status Actions */}\r\n        {onStatusChange && appointment.status === 'SCHEDULED' && (\r\n          <Card withBorder padding=\"md\" bg=\"blue.0\">\r\n            <Text size=\"sm\" fw={600} mb=\"sm\">Quick Actions</Text>\r\n            <Group>\r\n              <Button\r\n                size=\"xs\"\r\n                leftSection={<IconCheck size={16} />}\r\n                onClick={() => onStatusChange(appointment.id, 'ARRIVED')}\r\n              >\r\n                Mark as Arrived\r\n              </Button>\r\n              <Button\r\n                size=\"xs\"\r\n                color=\"yellow\"\r\n                leftSection={<IconClock size={16} />}\r\n                onClick={() => onStatusChange(appointment.id, 'IN_PROGRESS')}\r\n              >\r\n                Start Consultation\r\n              </Button>\r\n              <Button\r\n                size=\"xs\"\r\n                color=\"red\"\r\n                variant=\"light\"\r\n                leftSection={<IconX size={16} />}\r\n                onClick={() => onStatusChange(appointment.id, 'CANCELLED')}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Group>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Action Buttons */}\r\n        <Group justify=\"flex-end\" mt=\"md\">\r\n          {onDelete && (\r\n            <Button\r\n              variant=\"subtle\"\r\n              color=\"red\"\r\n              leftSection={<IconTrash size={16} />}\r\n              onClick={() => {\r\n                if (window.confirm('Are you sure you want to delete this appointment?')) {\r\n                  onDelete(appointment);\r\n                  onClose();\r\n                }\r\n              }}\r\n            >\r\n              Delete\r\n            </Button>\r\n          )}\r\n          {onEdit && (\r\n            <Button\r\n              leftSection={<IconEdit size={16} />}\r\n              onClick={() => {\r\n                onEdit(appointment);\r\n                onClose();\r\n              }}\r\n            >\r\n              Edit Appointment\r\n            </Button>\r\n          )}\r\n          <Button variant=\"default\" onClick={onClose}>\r\n            Close\r\n          </Button>\r\n        </Group>\r\n      </Stack>\r\n    </Modal>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\appointments\\AppointmentForm.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TextInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Badge' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 12,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TimeInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 16,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'checkingAvailability' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setCheckingAvailability' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 55
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Modal,\r\n  TextInput,\r\n  Textarea,\r\n  Button,\r\n  Group,\r\n  Stack,\r\n  Select,\r\n  Grid,\r\n  Text,\r\n  Badge,\r\n  Alert,\r\n  LoadingOverlay\r\n} from '@mantine/core';\r\nimport { DatePickerInput, TimeInput } from '@mantine/dates';\r\nimport { IconCalendar, IconClock, IconAlertCircle, IconCheck } from '@tabler/icons-react';\r\nimport type { CreateAppointmentDto, UpdateAppointmentDto } from '../../services/appointments.service';\r\n\r\ninterface AppointmentFormProps {\r\n  opened: boolean;\r\n  onClose: () => void;\r\n  appointment?: any;\r\n  onSubmit: (data: CreateAppointmentDto | UpdateAppointmentDto) => Promise<void>;\r\n  loading?: boolean;\r\n  patients?: any[];\r\n  doctors?: any[];\r\n}\r\n\r\nexport default function AppointmentForm({\r\n  opened,\r\n  onClose,\r\n  appointment,\r\n  onSubmit,\r\n  loading = false,\r\n  patients = [],\r\n  doctors = []\r\n}: AppointmentFormProps) {\r\n  const [formData, setFormData] = useState({\r\n    patientId: '',\r\n    doctorId: '',\r\n    departmentId: '',\r\n    appointmentDate: new Date(),\r\n    appointmentTime: '',\r\n    reason: '',\r\n    notes: '',\r\n    status: 'SCHEDULED'\r\n  });\r\n\r\n  const [availableSlots, setAvailableSlots] = useState<string[]>([]);\r\n  const [checkingAvailability, setCheckingAvailability] = useState(false);\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n  useEffect(() => {\r\n    if (appointment) {\r\n      const appointmentDateTime = new Date(appointment.startTime);\r\n      setFormData({\r\n        patientId: appointment.patientId || '',\r\n        doctorId: appointment.doctorId || '',\r\n        departmentId: appointment.departmentId || '',\r\n        appointmentDate: appointmentDateTime,\r\n        appointmentTime: appointmentDateTime.toTimeString().slice(0, 5),\r\n        reason: appointment.reason || '',\r\n        notes: appointment.notes || '',\r\n        status: appointment.status || 'SCHEDULED'\r\n      });\r\n    } else {\r\n      resetForm();\r\n    }\r\n  }, [appointment, opened]);\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      patientId: '',\r\n      doctorId: '',\r\n      departmentId: '',\r\n      appointmentDate: new Date(),\r\n      appointmentTime: '',\r\n      reason: '',\r\n      notes: '',\r\n      status: 'SCHEDULED'\r\n    });\r\n    setErrors({});\r\n    setAvailableSlots([]);\r\n  };\r\n\r\n  const generateTimeSlots = () => {\r\n    const slots: string[] = [];\r\n    for (let hour = 9; hour < 17; hour++) {\r\n      for (let minute = 0; minute < 60; minute += 30) {\r\n        const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\r\n        slots.push(time);\r\n      }\r\n    }\r\n    return slots;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (formData.doctorId && formData.appointmentDate) {\r\n      // In a real implementation, fetch available slots from API\r\n      setAvailableSlots(generateTimeSlots());\r\n    }\r\n  }, [formData.doctorId, formData.appointmentDate]);\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    if (!formData.patientId) {\r\n      newErrors.patientId = 'Patient is required';\r\n    }\r\n    if (!formData.doctorId) {\r\n      newErrors.doctorId = 'Doctor is required';\r\n    }\r\n    if (!formData.appointmentDate) {\r\n      newErrors.appointmentDate = 'Date is required';\r\n    }\r\n    if (!formData.appointmentTime) {\r\n      newErrors.appointmentTime = 'Time is required';\r\n    }\r\n    if (!formData.reason || formData.reason.trim().length < 3) {\r\n      newErrors.reason = 'Reason must be at least 3 characters';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Combine date and time into ISO string\r\n      const [hours, minutes] = formData.appointmentTime.split(':');\r\n      const appointmentDateTime = new Date(formData.appointmentDate);\r\n      appointmentDateTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);\r\n\r\n      const submitData: CreateAppointmentDto = {\r\n        patientId: formData.patientId,\r\n        doctorId: formData.doctorId,\r\n        departmentId: formData.departmentId || undefined,\r\n        appointmentDateTime: appointmentDateTime.toISOString(),\r\n        reason: formData.reason,\r\n        notes: formData.notes || undefined,\r\n        status: formData.status\r\n      };\r\n\r\n      await onSubmit(submitData);\r\n      resetForm();\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error submitting appointment:', error);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    resetForm();\r\n    onClose();\r\n  };\r\n\r\n  const patientOptions = patients.map(p => ({\r\n    value: p.id,\r\n    label: `${p.firstName} ${p.lastName} - ${p.medicalRecordNumber || p.id}`\r\n  }));\r\n\r\n  const doctorOptions = doctors.map(d => ({\r\n    value: d.id,\r\n    label: `Dr. ${d.firstName} ${d.lastName}`\r\n  }));\r\n\r\n  const timeSlotOptions = availableSlots.map(slot => ({\r\n    value: slot,\r\n    label: slot\r\n  }));\r\n\r\n  const statusOptions = [\r\n    { value: 'SCHEDULED', label: 'Scheduled' },\r\n    { value: 'ARRIVED', label: 'Arrived' },\r\n    { value: 'IN_PROGRESS', label: 'In Progress' },\r\n    { value: 'COMPLETED', label: 'Completed' },\r\n    { value: 'CANCELLED', label: 'Cancelled' },\r\n    { value: 'NO_SHOW', label: 'No Show' },\r\n    { value: 'RESCHEDULED', label: 'Rescheduled' }\r\n  ];\r\n\r\n  return (\r\n    <Modal\r\n      opened={opened}\r\n      onClose={handleClose}\r\n      title={\r\n        <Group>\r\n          <IconCalendar size={24} />\r\n          <Text size=\"lg\" fw={600}>\r\n            {appointment ? 'Edit Appointment' : 'Book New Appointment'}\r\n          </Text>\r\n        </Group>\r\n      }\r\n      size=\"lg\"\r\n      padding=\"md\"\r\n    >\r\n      <LoadingOverlay visible={loading} />\r\n      \r\n      <form onSubmit={handleSubmit}>\r\n        <Stack gap=\"md\">\r\n          {/* Patient Selection */}\r\n          <Select\r\n            label=\"Patient\"\r\n            placeholder=\"Select patient\"\r\n            data={patientOptions}\r\n            value={formData.patientId}\r\n            onChange={(value) => setFormData({ ...formData, patientId: value || '' })}\r\n            error={errors.patientId}\r\n            required\r\n            searchable\r\n            leftSection={<IconCheck size={16} />}\r\n          />\r\n\r\n          {/* Doctor Selection */}\r\n          <Select\r\n            label=\"Doctor\"\r\n            placeholder=\"Select doctor\"\r\n            data={doctorOptions}\r\n            value={formData.doctorId}\r\n            onChange={(value) => setFormData({ ...formData, doctorId: value || '' })}\r\n            error={errors.doctorId}\r\n            required\r\n            searchable\r\n            leftSection={<IconCheck size={16} />}\r\n          />\r\n\r\n          {/* Date and Time */}\r\n          <Grid>\r\n            <Grid.Col span={6}>\r\n              <DatePickerInput\r\n                label=\"Appointment Date\"\r\n                placeholder=\"Select date\"\r\n                value={formData.appointmentDate}\r\n                onChange={(value) => setFormData({ ...formData, appointmentDate: value || new Date() })}\r\n                error={errors.appointmentDate}\r\n                required\r\n                minDate={new Date()}\r\n                leftSection={<IconCalendar size={16} />}\r\n              />\r\n            </Grid.Col>\r\n            <Grid.Col span={6}>\r\n              <Select\r\n                label=\"Appointment Time\"\r\n                placeholder=\"Select time\"\r\n                data={timeSlotOptions}\r\n                value={formData.appointmentTime}\r\n                onChange={(value) => setFormData({ ...formData, appointmentTime: value || '' })}\r\n                error={errors.appointmentTime}\r\n                required\r\n                searchable\r\n                leftSection={<IconClock size={16} />}\r\n                disabled={!formData.doctorId || !formData.appointmentDate}\r\n              />\r\n            </Grid.Col>\r\n          </Grid>\r\n\r\n          {availableSlots.length > 0 && formData.doctorId && (\r\n            <Alert icon={<IconAlertCircle size={16} />} color=\"blue\" variant=\"light\">\r\n              {availableSlots.length} time slots available for selected date\r\n            </Alert>\r\n          )}\r\n\r\n          {/* Status (only for editing) */}\r\n          {appointment && (\r\n            <Select\r\n              label=\"Status\"\r\n              placeholder=\"Select status\"\r\n              data={statusOptions}\r\n              value={formData.status}\r\n              onChange={(value) => setFormData({ ...formData, status: value || 'SCHEDULED' })}\r\n            />\r\n          )}\r\n\r\n          {/* Reason */}\r\n          <Textarea\r\n            label=\"Reason for Visit\"\r\n            placeholder=\"Enter reason for appointment\"\r\n            value={formData.reason}\r\n            onChange={(e) => setFormData({ ...formData, reason: e.target.value })}\r\n            error={errors.reason}\r\n            required\r\n            minRows={2}\r\n            maxRows={4}\r\n          />\r\n\r\n          {/* Notes */}\r\n          <Textarea\r\n            label=\"Additional Notes\"\r\n            placeholder=\"Enter any additional notes (optional)\"\r\n            value={formData.notes}\r\n            onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\r\n            minRows={2}\r\n            maxRows={4}\r\n          />\r\n\r\n          {/* Action Buttons */}\r\n          <Group justify=\"flex-end\" mt=\"md\">\r\n            <Button variant=\"subtle\" onClick={handleClose} disabled={loading}>\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" loading={loading}>\r\n              {appointment ? 'Update Appointment' : 'Book Appointment'}\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </form>\r\n    </Modal>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\billing\\InvoiceDetails.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ActionIcon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Menu' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 15,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDotsVertical' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport {\r\n  Modal,\r\n  Text,\r\n  Group,\r\n  Stack,\r\n  Badge,\r\n  Button,\r\n  Divider,\r\n  Grid,\r\n  Card,\r\n  Table,\r\n  Timeline,\r\n  ActionIcon,\r\n  Menu\r\n} from '@mantine/core';\r\nimport {\r\n  IconCurrencyRupee,\r\n  IconUser,\r\n  IconCalendar,\r\n  IconEdit,\r\n  IconTrash,\r\n  IconReceipt,\r\n  IconDotsVertical,\r\n  IconPrinter,\r\n  IconDownload,\r\n  IconCash\r\n} from '@tabler/icons-react';\r\n\r\ninterface InvoiceDetailsProps {\r\n  opened: boolean;\r\n  onClose: () => void;\r\n  invoice: any;\r\n  onEdit?: (invoice: any) => void;\r\n  onDelete?: (invoice: any) => void;\r\n  onRecordPayment?: (invoice: any) => void;\r\n  onPrint?: (invoice: any) => void;\r\n}\r\n\r\nexport default function InvoiceDetails({\r\n  opened,\r\n  onClose,\r\n  invoice,\r\n  onEdit,\r\n  onDelete,\r\n  onRecordPayment,\r\n  onPrint\r\n}: InvoiceDetailsProps) {\r\n  if (!invoice) return null;\r\n\r\n  const getStatusColor = (status: string) => {\r\n    const colors: Record<string, string> = {\r\n      PENDING: 'yellow',\r\n      PARTIALLY_PAID: 'orange',\r\n      PAID: 'green',\r\n      OVERDUE: 'red',\r\n      CANCELLED: 'gray'\r\n    };\r\n    return colors[status] || 'gray';\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return `₹${amount.toFixed(2)}`;\r\n  };\r\n\r\n  const patient = invoice.patient || {};\r\n  const items = invoice.invoiceItems || [];\r\n  const payments = invoice.payments || [];\r\n\r\n  const totalPaid = payments.reduce((sum: number, payment: any) => {\r\n    if (payment.status === 'COMPLETED') {\r\n      return sum + payment.amount;\r\n    }\r\n    return sum;\r\n  }, 0);\r\n\r\n  const remainingAmount = invoice.totalAmount - totalPaid;\r\n\r\n  return (\r\n    <Modal\r\n      opened={opened}\r\n      onClose={onClose}\r\n      title={\r\n        <Group justify=\"space-between\" style={{ width: '100%' }}>\r\n          <Group>\r\n            <IconReceipt size={24} />\r\n            <div>\r\n              <Text size=\"lg\" fw={600}>\r\n                Invoice Details\r\n              </Text>\r\n              <Text size=\"xs\" c=\"dimmed\">\r\n                {invoice.invoiceNumber}\r\n              </Text>\r\n            </div>\r\n          </Group>\r\n          <Badge color={getStatusColor(invoice.status)} size=\"lg\">\r\n            {invoice.status}\r\n          </Badge>\r\n        </Group>\r\n      }\r\n      size=\"xl\"\r\n      padding=\"md\"\r\n    >\r\n      <Stack gap=\"md\">\r\n        {/* Patient Information */}\r\n        <Card withBorder padding=\"md\">\r\n          <Group mb=\"xs\">\r\n            <IconUser size={20} />\r\n            <Text fw={600}>Patient Information</Text>\r\n          </Group>\r\n          <Divider mb=\"sm\" />\r\n          <Grid>\r\n            <Grid.Col span={6}>\r\n              <Stack gap=\"xs\">\r\n                <Group justify=\"space-between\">\r\n                  <Text size=\"sm\" c=\"dimmed\">Name:</Text>\r\n                  <Text fw={500}>\r\n                    {patient.firstName} {patient.lastName}\r\n                  </Text>\r\n                </Group>\r\n                {patient.medicalRecordNumber && (\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\" c=\"dimmed\">MRN:</Text>\r\n                    <Text fw={500}>{patient.medicalRecordNumber}</Text>\r\n                  </Group>\r\n                )}\r\n              </Stack>\r\n            </Grid.Col>\r\n            <Grid.Col span={6}>\r\n              <Stack gap=\"xs\">\r\n                {patient.phone && (\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\" c=\"dimmed\">Phone:</Text>\r\n                    <Text fw={500}>{patient.phone}</Text>\r\n                  </Group>\r\n                )}\r\n                {patient.email && (\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\" c=\"dimmed\">Email:</Text>\r\n                    <Text fw={500}>{patient.email}</Text>\r\n                  </Group>\r\n                )}\r\n              </Stack>\r\n            </Grid.Col>\r\n          </Grid>\r\n        </Card>\r\n\r\n        {/* Invoice Dates */}\r\n        <Card withBorder padding=\"md\">\r\n          <Group mb=\"xs\">\r\n            <IconCalendar size={20} />\r\n            <Text fw={600}>Invoice Dates</Text>\r\n          </Group>\r\n          <Divider mb=\"sm\" />\r\n          <Grid>\r\n            <Grid.Col span={6}>\r\n              <Group justify=\"space-between\">\r\n                <Text size=\"sm\" c=\"dimmed\">Invoice Date:</Text>\r\n                <Text fw={500}>{formatDate(invoice.date)}</Text>\r\n              </Group>\r\n            </Grid.Col>\r\n            <Grid.Col span={6}>\r\n              <Group justify=\"space-between\">\r\n                <Text size=\"sm\" c=\"dimmed\">Due Date:</Text>\r\n                <Text fw={500}>{formatDate(invoice.dueDate)}</Text>\r\n              </Group>\r\n            </Grid.Col>\r\n          </Grid>\r\n        </Card>\r\n\r\n        {/* Invoice Items */}\r\n        <Card withBorder padding=\"md\">\r\n          <Text fw={600} mb=\"sm\">Invoice Items</Text>\r\n          <Table>\r\n            <Table.Thead>\r\n              <Table.Tr>\r\n                <Table.Th>Description</Table.Th>\r\n                <Table.Th>Type</Table.Th>\r\n                <Table.Th>Qty</Table.Th>\r\n                <Table.Th>Price</Table.Th>\r\n                <Table.Th>Discount</Table.Th>\r\n                <Table.Th>Tax</Table.Th>\r\n                <Table.Th>Total</Table.Th>\r\n              </Table.Tr>\r\n            </Table.Thead>\r\n            <Table.Tbody>\r\n              {items.map((item: any, index: number) => (\r\n                <Table.Tr key={index}>\r\n                  <Table.Td>{item.description}</Table.Td>\r\n                  <Table.Td>\r\n                    <Badge size=\"sm\" variant=\"light\">\r\n                      {item.itemType}\r\n                    </Badge>\r\n                  </Table.Td>\r\n                  <Table.Td>{item.quantity}</Table.Td>\r\n                  <Table.Td>{formatCurrency(item.unitPrice)}</Table.Td>\r\n                  <Table.Td>{formatCurrency(item.discount)}</Table.Td>\r\n                  <Table.Td>{item.taxRate}%</Table.Td>\r\n                  <Table.Td>\r\n                    <Text fw={500}>{formatCurrency(item.totalAmount)}</Text>\r\n                  </Table.Td>\r\n                </Table.Tr>\r\n              ))}\r\n            </Table.Tbody>\r\n          </Table>\r\n        </Card>\r\n\r\n        {/* Totals */}\r\n        <Card withBorder padding=\"md\" bg=\"gray.0\">\r\n          <Stack gap=\"xs\">\r\n            <Group justify=\"space-between\">\r\n              <Text size=\"sm\">Subtotal:</Text>\r\n              <Text size=\"sm\" fw={500}>{formatCurrency(invoice.subTotal)}</Text>\r\n            </Group>\r\n            <Group justify=\"space-between\">\r\n              <Text size=\"sm\">Tax:</Text>\r\n              <Text size=\"sm\" fw={500}>{formatCurrency(invoice.taxAmount)}</Text>\r\n            </Group>\r\n            <Group justify=\"space-between\">\r\n              <Text size=\"sm\">Discount:</Text>\r\n              <Text size=\"sm\" fw={500}>-{formatCurrency(invoice.discountAmount)}</Text>\r\n            </Group>\r\n            <Divider />\r\n            <Group justify=\"space-between\">\r\n              <Text size=\"lg\" fw={700}>Total Amount:</Text>\r\n              <Badge size=\"xl\" color=\"blue\">\r\n                {formatCurrency(invoice.totalAmount)}\r\n              </Badge>\r\n            </Group>\r\n            <Group justify=\"space-between\">\r\n              <Text size=\"sm\" c=\"green\">Paid:</Text>\r\n              <Text size=\"sm\" fw={600} c=\"green\">{formatCurrency(totalPaid)}</Text>\r\n            </Group>\r\n            <Group justify=\"space-between\">\r\n              <Text size=\"sm\" c=\"orange\">Remaining:</Text>\r\n              <Text size=\"sm\" fw={600} c=\"orange\">{formatCurrency(remainingAmount)}</Text>\r\n            </Group>\r\n          </Stack>\r\n        </Card>\r\n\r\n        {/* Payment History */}\r\n        {payments.length > 0 && (\r\n          <Card withBorder padding=\"md\">\r\n            <Group mb=\"xs\">\r\n              <IconCash size={20} />\r\n              <Text fw={600}>Payment History</Text>\r\n            </Group>\r\n            <Divider mb=\"sm\" />\r\n            <Timeline active={payments.length} bulletSize={24}>\r\n              {payments.map((payment: any, index: number) => (\r\n                <Timeline.Item\r\n                  key={index}\r\n                  bullet={<IconCurrencyRupee size={12} />}\r\n                  title={formatCurrency(payment.amount)}\r\n                >\r\n                  <Text size=\"xs\" c=\"dimmed\">\r\n                    {payment.paymentMethod} - {formatDate(payment.paymentDate)}\r\n                  </Text>\r\n                  {payment.referenceNumber && (\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Ref: {payment.referenceNumber}\r\n                    </Text>\r\n                  )}\r\n                  <Badge size=\"xs\" color={payment.status === 'COMPLETED' ? 'green' : 'gray'} mt={4}>\r\n                    {payment.status}\r\n                  </Badge>\r\n                </Timeline.Item>\r\n              ))}\r\n            </Timeline>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Notes */}\r\n        {invoice.notes && (\r\n          <Card withBorder padding=\"md\">\r\n            <Text fw={600} mb=\"xs\">Notes</Text>\r\n            <Text size=\"sm\">{invoice.notes}</Text>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Action Buttons */}\r\n        <Group justify=\"space-between\" mt=\"md\">\r\n          <Group>\r\n            {onPrint && (\r\n              <Button\r\n                variant=\"light\"\r\n                leftSection={<IconPrinter size={16} />}\r\n                onClick={() => onPrint(invoice)}\r\n              >\r\n                Print\r\n              </Button>\r\n            )}\r\n            <Button\r\n              variant=\"light\"\r\n              leftSection={<IconDownload size={16} />}\r\n            >\r\n              Download PDF\r\n            </Button>\r\n          </Group>\r\n\r\n          <Group>\r\n            {onDelete && invoice.status !== 'PAID' && (\r\n              <Button\r\n                variant=\"subtle\"\r\n                color=\"red\"\r\n                leftSection={<IconTrash size={16} />}\r\n                onClick={() => {\r\n                  if (window.confirm('Are you sure you want to cancel this invoice?')) {\r\n                    onDelete(invoice);\r\n                    onClose();\r\n                  }\r\n                }}\r\n              >\r\n                Cancel Invoice\r\n              </Button>\r\n            )}\r\n            {onRecordPayment && remainingAmount > 0 && (\r\n              <Button\r\n                leftSection={<IconCurrencyRupee size={16} />}\r\n                onClick={() => {\r\n                  onRecordPayment(invoice);\r\n                  onClose();\r\n                }}\r\n              >\r\n                Record Payment\r\n              </Button>\r\n            )}\r\n            {onEdit && invoice.status === 'PENDING' && (\r\n              <Button\r\n                leftSection={<IconEdit size={16} />}\r\n                onClick={() => {\r\n                  onEdit(invoice);\r\n                  onClose();\r\n                }}\r\n              >\r\n                Edit Invoice\r\n              </Button>\r\n            )}\r\n            <Button variant=\"default\" onClick={onClose}>\r\n              Close\r\n            </Button>\r\n          </Group>\r\n        </Group>\r\n      </Stack>\r\n    </Modal>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\billing\\InvoiceForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\billing\\PaymentForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\communications\\MessageDetails.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\communications\\MessageForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\communications\\NotificationCenter.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\emergency\\EmergencyCaseDetails.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\emergency\\EmergencyCaseForm.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconActivity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 17,
        "column": 39,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 51
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'VitalSigns' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 73
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Modal,\r\n  TextInput,\r\n  Textarea,\r\n  Button,\r\n  Group,\r\n  Stack,\r\n  Select,\r\n  NumberInput,\r\n  Grid,\r\n  Text,\r\n  LoadingOverlay,\r\n  Divider,\r\n  Card\r\n} from '@mantine/core';\r\nimport { IconAlertTriangle, IconUser, IconActivity } from '@tabler/icons-react';\r\nimport type { CreateEmergencyCaseDto, UpdateEmergencyCaseDto, VitalSigns } from '../../services/emergency.service';\r\n\r\ninterface EmergencyCaseFormProps {\r\n  opened: boolean;\r\n  onClose: () => void;\r\n  emergencyCase?: any;\r\n  onSubmit: (data: CreateEmergencyCaseDto | UpdateEmergencyCaseDto) => Promise<void>;\r\n  loading?: boolean;\r\n  patients?: any[];\r\n  doctors?: any[];\r\n}\r\n\r\nexport default function EmergencyCaseForm({\r\n  opened,\r\n  onClose,\r\n  emergencyCase,\r\n  onSubmit,\r\n  loading = false,\r\n  patients = [],\r\n  doctors = []\r\n}: EmergencyCaseFormProps) {\r\n  const [formData, setFormData] = useState({\r\n    patientId: '',\r\n    chiefComplaint: '',\r\n    triageLevel: 'NON_URGENT',\r\n    status: 'WAITING',\r\n    assignedDoctorId: '',\r\n    treatmentNotes: '',\r\n    vitalSigns: {\r\n      bloodPressure: '',\r\n      heartRate: 0,\r\n      temperature: 0,\r\n      respiratoryRate: 0,\r\n      oxygenSaturation: 0\r\n    }\r\n  });\r\n\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n  useEffect(() => {\r\n    if (emergencyCase) {\r\n      const vitalSigns = typeof emergencyCase.vitalSigns === 'string' \r\n        ? JSON.parse(emergencyCase.vitalSigns) \r\n        : emergencyCase.vitalSigns || {};\r\n      \r\n      setFormData({\r\n        patientId: emergencyCase.patientId || '',\r\n        chiefComplaint: emergencyCase.chiefComplaint || '',\r\n        triageLevel: emergencyCase.triageLevel || 'NON_URGENT',\r\n        status: emergencyCase.status || 'WAITING',\r\n        assignedDoctorId: emergencyCase.assignedDoctorId || '',\r\n        treatmentNotes: emergencyCase.treatmentNotes || '',\r\n        vitalSigns: {\r\n          bloodPressure: vitalSigns.bloodPressure || '',\r\n          heartRate: vitalSigns.heartRate || 0,\r\n          temperature: vitalSigns.temperature || 0,\r\n          respiratoryRate: vitalSigns.respiratoryRate || 0,\r\n          oxygenSaturation: vitalSigns.oxygenSaturation || 0\r\n        }\r\n      });\r\n    } else {\r\n      resetForm();\r\n    }\r\n  }, [emergencyCase, opened]);\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      patientId: '',\r\n      chiefComplaint: '',\r\n      triageLevel: 'NON_URGENT',\r\n      status: 'WAITING',\r\n      assignedDoctorId: '',\r\n      treatmentNotes: '',\r\n      vitalSigns: {\r\n        bloodPressure: '',\r\n        heartRate: 0,\r\n        temperature: 0,\r\n        respiratoryRate: 0,\r\n        oxygenSaturation: 0\r\n      }\r\n    });\r\n    setErrors({});\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    if (!emergencyCase && !formData.patientId) {\r\n      newErrors.patientId = 'Patient is required';\r\n    }\r\n    if (!formData.chiefComplaint || formData.chiefComplaint.trim().length < 5) {\r\n      newErrors.chiefComplaint = 'Chief complaint must be at least 5 characters';\r\n    }\r\n    if (!formData.triageLevel) {\r\n      newErrors.triageLevel = 'Triage level is required';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const submitData: any = {\r\n        chiefComplaint: formData.chiefComplaint,\r\n        triageLevel: formData.triageLevel,\r\n        vitalSigns: formData.vitalSigns\r\n      };\r\n\r\n      if (!emergencyCase) {\r\n        submitData.patientId = formData.patientId;\r\n      } else {\r\n        submitData.status = formData.status;\r\n        submitData.assignedDoctorId = formData.assignedDoctorId || undefined;\r\n        submitData.treatmentNotes = formData.treatmentNotes || undefined;\r\n      }\r\n\r\n      await onSubmit(submitData);\r\n      resetForm();\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error submitting emergency case:', error);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    resetForm();\r\n    onClose();\r\n  };\r\n\r\n  const patientOptions = patients.map(p => ({\r\n    value: p.id,\r\n    label: `${p.firstName} ${p.lastName} - ${p.medicalRecordNumber || p.id}`\r\n  }));\r\n\r\n  const doctorOptions = doctors.map(d => ({\r\n    value: d.id,\r\n    label: `Dr. ${d.firstName} ${d.lastName}`\r\n  }));\r\n\r\n  const triageLevelOptions = [\r\n    { value: 'CRITICAL', label: 'Critical (Red)', color: 'red' },\r\n    { value: 'URGENT', label: 'Urgent (Orange)', color: 'orange' },\r\n    { value: 'SEMI_URGENT', label: 'Semi-Urgent (Yellow)', color: 'yellow' },\r\n    { value: 'NON_URGENT', label: 'Non-Urgent (Green)', color: 'green' }\r\n  ];\r\n\r\n  const statusOptions = [\r\n    { value: 'WAITING', label: 'Waiting' },\r\n    { value: 'IN_TREATMENT', label: 'In Treatment' },\r\n    { value: 'DISCHARGED', label: 'Discharged' },\r\n    { value: 'ADMITTED', label: 'Admitted' },\r\n    { value: 'TRANSFERRED', label: 'Transferred' }\r\n  ];\r\n\r\n  return (\r\n    <Modal\r\n      opened={opened}\r\n      onClose={handleClose}\r\n      title={\r\n        <Group>\r\n          <IconAlertTriangle size={24} />\r\n          <Text size=\"lg\" fw={600}>\r\n            {emergencyCase ? 'Update Emergency Case' : 'Register Emergency Case'}\r\n          </Text>\r\n        </Group>\r\n      }\r\n      size=\"lg\"\r\n      padding=\"md\"\r\n    >\r\n      <LoadingOverlay visible={loading} />\r\n      \r\n      <form onSubmit={handleSubmit}>\r\n        <Stack gap=\"md\">\r\n          {/* Patient Selection (only for new cases) */}\r\n          {!emergencyCase && (\r\n            <Select\r\n              label=\"Patient\"\r\n              placeholder=\"Select patient\"\r\n              data={patientOptions}\r\n              value={formData.patientId}\r\n              onChange={(value) => setFormData({ ...formData, patientId: value || '' })}\r\n              error={errors.patientId}\r\n              required\r\n              searchable\r\n              leftSection={<IconUser size={16} />}\r\n            />\r\n          )}\r\n\r\n          {/* Chief Complaint */}\r\n          <Textarea\r\n            label=\"Chief Complaint\"\r\n            placeholder=\"Describe the emergency condition\"\r\n            value={formData.chiefComplaint}\r\n            onChange={(e) => setFormData({ ...formData, chiefComplaint: e.target.value })}\r\n            error={errors.chiefComplaint}\r\n            required\r\n            minRows={3}\r\n            maxRows={5}\r\n          />\r\n\r\n          {/* Triage Level */}\r\n          <Select\r\n            label=\"Triage Level\"\r\n            placeholder=\"Select triage level\"\r\n            data={triageLevelOptions}\r\n            value={formData.triageLevel}\r\n            onChange={(value) => setFormData({ ...formData, triageLevel: value || 'NON_URGENT' })}\r\n            error={errors.triageLevel}\r\n            required\r\n            leftSection={<IconAlertTriangle size={16} />}\r\n          />\r\n\r\n          {/* Status (only for updates) */}\r\n          {emergencyCase && (\r\n            <>\r\n              <Select\r\n                label=\"Status\"\r\n                placeholder=\"Select status\"\r\n                data={statusOptions}\r\n                value={formData.status}\r\n                onChange={(value) => setFormData({ ...formData, status: value || 'WAITING' })}\r\n              />\r\n\r\n              <Select\r\n                label=\"Assigned Doctor\"\r\n                placeholder=\"Select doctor\"\r\n                data={doctorOptions}\r\n                value={formData.assignedDoctorId}\r\n                onChange={(value) => setFormData({ ...formData, assignedDoctorId: value || '' })}\r\n                searchable\r\n                clearable\r\n              />\r\n\r\n              <Textarea\r\n                label=\"Treatment Notes\"\r\n                placeholder=\"Enter treatment notes\"\r\n                value={formData.treatmentNotes}\r\n                onChange={(e) => setFormData({ ...formData, treatmentNotes: e.target.value })}\r\n                minRows={3}\r\n                maxRows={5}\r\n              />\r\n            </>\r\n          )}\r\n\r\n          <Divider label=\"Vital Signs\" labelPosition=\"center\" />\r\n\r\n          {/* Vital Signs */}\r\n          <Card withBorder padding=\"md\">\r\n            <Stack gap=\"sm\">\r\n              <Grid>\r\n                <Grid.Col span={6}>\r\n                  <TextInput\r\n                    label=\"Blood Pressure\"\r\n                    placeholder=\"120/80\"\r\n                    value={formData.vitalSigns.bloodPressure}\r\n                    onChange={(e) => setFormData({\r\n                      ...formData,\r\n                      vitalSigns: { ...formData.vitalSigns, bloodPressure: e.target.value }\r\n                    })}\r\n                  />\r\n                </Grid.Col>\r\n                <Grid.Col span={6}>\r\n                  <NumberInput\r\n                    label=\"Heart Rate (bpm)\"\r\n                    placeholder=\"72\"\r\n                    value={formData.vitalSigns.heartRate}\r\n                    onChange={(value) => setFormData({\r\n                      ...formData,\r\n                      vitalSigns: { ...formData.vitalSigns, heartRate: value || 0 }\r\n                    })}\r\n                    min={0}\r\n                    max={300}\r\n                  />\r\n                </Grid.Col>\r\n                <Grid.Col span={6}>\r\n                  <NumberInput\r\n                    label=\"Temperature (°F)\"\r\n                    placeholder=\"98.6\"\r\n                    value={formData.vitalSigns.temperature}\r\n                    onChange={(value) => setFormData({\r\n                      ...formData,\r\n                      vitalSigns: { ...formData.vitalSigns, temperature: value || 0 }\r\n                    })}\r\n                    min={0}\r\n                    max={120}\r\n                    decimalScale={1}\r\n                  />\r\n                </Grid.Col>\r\n                <Grid.Col span={6}>\r\n                  <NumberInput\r\n                    label=\"Respiratory Rate\"\r\n                    placeholder=\"16\"\r\n                    value={formData.vitalSigns.respiratoryRate}\r\n                    onChange={(value) => setFormData({\r\n                      ...formData,\r\n                      vitalSigns: { ...formData.vitalSigns, respiratoryRate: value || 0 }\r\n                    })}\r\n                    min={0}\r\n                    max={100}\r\n                  />\r\n                </Grid.Col>\r\n                <Grid.Col span={6}>\r\n                  <NumberInput\r\n                    label=\"O2 Saturation (%)\"\r\n                    placeholder=\"98\"\r\n                    value={formData.vitalSigns.oxygenSaturation}\r\n                    onChange={(value) => setFormData({\r\n                      ...formData,\r\n                      vitalSigns: { ...formData.vitalSigns, oxygenSaturation: value || 0 }\r\n                    })}\r\n                    min={0}\r\n                    max={100}\r\n                  />\r\n                </Grid.Col>\r\n              </Grid>\r\n            </Stack>\r\n          </Card>\r\n\r\n          {/* Action Buttons */}\r\n          <Group justify=\"flex-end\" mt=\"md\">\r\n            <Button variant=\"subtle\" onClick={handleClose} disabled={loading}>\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" loading={loading}>\r\n              {emergencyCase ? 'Update Case' : 'Register Case'}\r\n            </Button>\r\n          </Group>\r\n        </Stack>\r\n      </form>\r\n    </Modal>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\emergency\\TriageForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\emr\\MedicalRecordDetails.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCalendar' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 16,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport {\r\n  Modal,\r\n  Text,\r\n  Group,\r\n  Stack,\r\n  Badge,\r\n  Button,\r\n  Divider,\r\n  Card,\r\n  Avatar\r\n} from '@mantine/core';\r\nimport {\r\n  IconFileText,\r\n  IconUser,\r\n  IconCalendar,\r\n  IconEdit,\r\n  IconTrash,\r\n  IconStethoscope\r\n} from '@tabler/icons-react';\r\n\r\ninterface MedicalRecordDetailsProps {\r\n  opened: boolean;\r\n  onClose: () => void;\r\n  record: any;\r\n  onEdit?: (record: any) => void;\r\n  onDelete?: (record: any) => void;\r\n}\r\n\r\nexport default function MedicalRecordDetails({\r\n  opened,\r\n  onClose,\r\n  record,\r\n  onEdit,\r\n  onDelete\r\n}: MedicalRecordDetailsProps) {\r\n  if (!record) return null;\r\n\r\n  const getRecordTypeColor = (type: string) => {\r\n    const colors: Record<string, string> = {\r\n      CONSULTATION: 'blue',\r\n      DIAGNOSIS: 'red',\r\n      PRESCRIPTION: 'green',\r\n      LAB_RESULT: 'cyan',\r\n      IMAGING: 'grape',\r\n      PROCEDURE: 'orange',\r\n      VACCINATION: 'teal',\r\n      ALLERGY: 'pink',\r\n      OTHER: 'gray'\r\n    };\r\n    return colors[type] || 'gray';\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleString('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  const patient = record.patient || {};\r\n  const doctor = record.doctor || {};\r\n\r\n  return (\r\n    <Modal\r\n      opened={opened}\r\n      onClose={onClose}\r\n      title={\r\n        <Group justify=\"space-between\" style={{ width: '100%' }}>\r\n          <Group>\r\n            <IconFileText size={24} />\r\n            <div>\r\n              <Text size=\"lg\" fw={600}>\r\n                Medical Record Details\r\n              </Text>\r\n              <Badge color={getRecordTypeColor(record.recordType)} size=\"sm\" mt={4}>\r\n                {record.recordType}\r\n              </Badge>\r\n            </div>\r\n          </Group>\r\n        </Group>\r\n      }\r\n      size=\"md\"\r\n      padding=\"md\"\r\n    >\r\n      <Stack gap=\"md\">\r\n        {/* Patient Information */}\r\n        <Card withBorder padding=\"md\">\r\n          <Group mb=\"xs\">\r\n            <IconUser size={20} />\r\n            <Text fw={600}>Patient Information</Text>\r\n          </Group>\r\n          <Divider mb=\"sm\" />\r\n          <Group>\r\n            <Avatar color=\"blue\" radius=\"xl\">\r\n              {patient.firstName?.[0]}{patient.lastName?.[0]}\r\n            </Avatar>\r\n            <div>\r\n              <Text fw={500}>\r\n                {patient.firstName} {patient.lastName}\r\n              </Text>\r\n              <Text size=\"sm\" c=\"dimmed\">\r\n                MRN: {patient.medicalRecordNumber || 'N/A'}\r\n              </Text>\r\n              {patient.phone && (\r\n                <Text size=\"sm\" c=\"dimmed\">\r\n                  Phone: {patient.phone}\r\n                </Text>\r\n              )}\r\n            </div>\r\n          </Group>\r\n        </Card>\r\n\r\n        {/* Record Information */}\r\n        <Card withBorder padding=\"md\">\r\n          <Group mb=\"xs\">\r\n            <IconFileText size={20} />\r\n            <Text fw={600}>Record Information</Text>\r\n          </Group>\r\n          <Divider mb=\"sm\" />\r\n          \r\n          <Stack gap=\"sm\">\r\n            <div>\r\n              <Text size=\"xs\" c=\"dimmed\" mb={4}>Title:</Text>\r\n              <Text fw={600}>{record.title}</Text>\r\n            </div>\r\n            \r\n            <div>\r\n              <Text size=\"xs\" c=\"dimmed\" mb={4}>Description:</Text>\r\n              <Text style={{ whiteSpace: 'pre-wrap' }}>\r\n                {record.description}\r\n              </Text>\r\n            </div>\r\n            \r\n            <div>\r\n              <Text size=\"xs\" c=\"dimmed\" mb={4}>Date:</Text>\r\n              <Text size=\"sm\">{formatDate(record.date)}</Text>\r\n            </div>\r\n          </Stack>\r\n        </Card>\r\n\r\n        {/* Doctor Information */}\r\n        {doctor.id && (\r\n          <Card withBorder padding=\"md\">\r\n            <Group mb=\"xs\">\r\n              <IconStethoscope size={20} />\r\n              <Text fw={600}>Doctor Information</Text>\r\n            </Group>\r\n            <Divider mb=\"sm\" />\r\n            <Group>\r\n              <Avatar color=\"green\" radius=\"xl\">\r\n                {doctor.firstName?.[0]}{doctor.lastName?.[0]}\r\n              </Avatar>\r\n              <div>\r\n                <Text fw={500}>\r\n                  Dr. {doctor.firstName} {doctor.lastName}\r\n                </Text>\r\n                <Text size=\"sm\" c=\"dimmed\">\r\n                  {doctor.specialization || 'General Medicine'}\r\n                </Text>\r\n                {doctor.licenseNumber && (\r\n                  <Text size=\"xs\" c=\"dimmed\">\r\n                    License: {doctor.licenseNumber}\r\n                  </Text>\r\n                )}\r\n              </div>\r\n            </Group>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Action Buttons */}\r\n        <Group justify=\"space-between\" mt=\"md\">\r\n          <Group>\r\n            {onDelete && (\r\n              <Button\r\n                variant=\"subtle\"\r\n                color=\"red\"\r\n                leftSection={<IconTrash size={16} />}\r\n                onClick={() => {\r\n                  if (window.confirm('Are you sure you want to delete this medical record?')) {\r\n                    onDelete(record);\r\n                    onClose();\r\n                  }\r\n                }}\r\n              >\r\n                Delete\r\n              </Button>\r\n            )}\r\n          </Group>\r\n          \r\n          <Group>\r\n            {onEdit && (\r\n              <Button\r\n                leftSection={<IconEdit size={16} />}\r\n                onClick={() => {\r\n                  onEdit(record);\r\n                  onClose();\r\n                }}\r\n              >\r\n                Edit Record\r\n              </Button>\r\n            )}\r\n            <Button variant=\"default\" onClick={onClose}>\r\n              Close\r\n            </Button>\r\n          </Group>\r\n        </Group>\r\n      </Stack>\r\n    </Modal>\r\n  );\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\emr\\MedicalRecordForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\finance\\FinanceTransactionDetails.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\finance\\FinanceTransactionForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\hr\\StaffDetails.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\hr\\StaffForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\insurance\\InsuranceClaimDetails.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\insurance\\InsuranceClaimForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\ipd\\BedForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\ipd\\WardDetails.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\ipd\\WardForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\patients\\DocumentManager.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Title' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'FileInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Progress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Card' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Spotlight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Table' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 42,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconCheck' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 52,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconExternalLink' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 55,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 181,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 181,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 203,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 203,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 221,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 221,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 14,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Modal,\r\n  Stack,\r\n  Group,\r\n  Text,\r\n  TextInput,\r\n  Textarea,\r\n  Select,\r\n  Button,\r\n  Paper,\r\n  Title,\r\n  Badge,\r\n  ActionIcon,\r\n  Grid,\r\n  Alert,\r\n  Tabs,\r\n  FileInput,\r\n  Progress,\r\n  Image,\r\n  Card,\r\n  Spotlight,\r\n  Menu,\r\n  ThemeIcon,\r\n  Table\r\n} from '@mantine/core';\r\nimport { useForm } from '@mantine/form';\r\nimport { Dropzone, FileWithPath, IMAGE_MIME_TYPE, PDF_MIME_TYPE } from '@mantine/dropzone';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport {\r\n  IconFileText,\r\n  IconUpload,\r\n  IconEye,\r\n  IconDownload,\r\n  IconEdit,\r\n  IconTrash,\r\n  IconShare,\r\n  IconFileUpload,\r\n  IconCalendar,\r\n  IconPlus,\r\n  IconDeviceFloppy,\r\n  IconX,\r\n  IconPhoto,\r\n  // IconFilePdf, // not available\r\n  IconFileWord,\r\n  IconFile,\r\n  IconLock,\r\n  IconShield,\r\n  IconWorld,\r\n  IconCheck,\r\n  IconExternalLink,\r\n  IconSearch,\r\n  IconFilter,\r\n  IconSortAscending,\r\n  IconDotsVertical\r\n} from '@tabler/icons-react';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { PatientDocument } from '../../types/patient';\r\nimport { formatDate } from '../../lib/utils';\r\n\r\ninterface DocumentManagerProps {\r\n  opened: boolean;\r\n  onClose: () => void;\r\n  patientId: string;\r\n  patientName: string;\r\n  documents: PatientDocument[];\r\n  onUpload: (document: Partial<PatientDocument>, file: File) => Promise<void>;\r\n  onUpdate: (id: string, document: Partial<PatientDocument>) => Promise<void>;\r\n  onDelete: (id: string) => Promise<void>;\r\n  onDownload: (document: PatientDocument) => Promise<void>;\r\n  onView: (document: PatientDocument) => Promise<void>;\r\n}\r\n\r\ninterface DocumentFormData {\r\n  documentType: 'id_proof' | 'medical_report' | 'lab_result' | 'radiology' | 'prescription' | 'insurance' | 'consent' | 'discharge_summary' | 'vaccination_record' | 'other';\r\n  title: string;\r\n  description?: string;\r\n  accessLevel: 'public' | 'restricted' | 'confidential';\r\n  tags?: string[];\r\n  expirationDate?: Date;\r\n}\r\n\r\nconst documentTypes = [\r\n  { value: 'id_proof', label: 'ID Proof', color: 'blue' },\r\n  { value: 'medical_report', label: 'Medical Report', color: 'green' },\r\n  { value: 'lab_result', label: 'Lab Result', color: 'orange' },\r\n  { value: 'radiology', label: 'Radiology', color: 'purple' },\r\n  { value: 'prescription', label: 'Prescription', color: 'pink' },\r\n  { value: 'insurance', label: 'Insurance', color: 'teal' },\r\n  { value: 'consent', label: 'Consent Form', color: 'red' },\r\n  { value: 'discharge_summary', label: 'Discharge Summary', color: 'cyan' },\r\n  { value: 'vaccination_record', label: 'Vaccination Record', color: 'lime' },\r\n  { value: 'other', label: 'Other', color: 'gray' }\r\n];\r\n\r\nexport default function DocumentManager({\r\n  opened,\r\n  onClose,\r\n  patientId,\r\n  patientName,\r\n  documents,\r\n  onUpload,\r\n  onUpdate,\r\n  onDelete,\r\n  onDownload,\r\n  onView\r\n}: DocumentManagerProps) {\r\n  const [activeTab, setActiveTab] = useState('all');\r\n  const [uploadModalOpened, setUploadModalOpened] = useState(false);\r\n  const [editModalOpened, setEditModalOpened] = useState(false);\r\n  const [editingDocument, setEditingDocument] = useState<PatientDocument | null>(null);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [selectedFiles, setSelectedFiles] = useState<FileWithPath[]>([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [sortBy, setSortBy] = useState<'title' | 'date' | 'type' | 'size'>('date');\r\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\r\n\r\n  const uploadForm = useForm<DocumentFormData>({\r\n    initialValues: {\r\n      documentType: 'other',\r\n      title: '',\r\n      description: '',\r\n      accessLevel: 'restricted',\r\n      tags: [],\r\n      expirationDate: undefined\r\n    },\r\n    validate: {\r\n      title: (value) => (value.trim().length < 2 ? 'Title must be at least 2 characters' : null),\r\n      documentType: (value) => (!value ? 'Document type is required' : null)\r\n    }\r\n  });\r\n\r\n  const editForm = useForm<DocumentFormData>({\r\n    initialValues: {\r\n      documentType: 'other',\r\n      title: '',\r\n      description: '',\r\n      accessLevel: 'restricted',\r\n      tags: [],\r\n      expirationDate: undefined\r\n    }\r\n  });\r\n\r\n  const handleUpload = async (values: DocumentFormData) => {\r\n    if (selectedFiles.length === 0) {\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: 'Please select at least one file to upload.',\r\n        color: 'red'\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setUploading(true);\r\n      \r\n      for (const file of selectedFiles) {\r\n        const documentData = {\r\n          ...values,\r\n          fileName: file.name,\r\n          fileSize: file.size,\r\n          mimeType: file.type,\r\n          uploadedAt: new Date(),\r\n          uploadedBy: 'current_user', // Would come from auth context\r\n          isActive: true,\r\n          patientId\r\n        };\r\n\r\n        await onUpload(documentData, file);\r\n      }\r\n\r\n      notifications.show({\r\n        title: 'Upload Successful',\r\n        message: `${selectedFiles.length} document(s) uploaded successfully.`,\r\n        color: 'green'\r\n      });\r\n\r\n      handleUploadModalClose();\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Upload Failed',\r\n        message: 'Failed to upload documents. Please try again.',\r\n        color: 'red'\r\n      });\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = async (values: DocumentFormData) => {\r\n    if (!editingDocument) return;\r\n\r\n    try {\r\n      await onUpdate(editingDocument.id, values);\r\n      notifications.show({\r\n        title: 'Document Updated',\r\n        message: 'Document information has been updated successfully.',\r\n        color: 'green'\r\n      });\r\n      handleEditModalClose();\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Update Failed',\r\n        message: 'Failed to update document. Please try again.',\r\n        color: 'red'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id: string, title: string) => {\r\n    if (window.confirm(`Are you sure you want to delete \"${title}\"?`)) {\r\n      try {\r\n        await onDelete(id);\r\n        notifications.show({\r\n          title: 'Document Deleted',\r\n          message: 'Document has been deleted successfully.',\r\n          color: 'green'\r\n        });\r\n      } catch (error) {\r\n        notifications.show({\r\n          title: 'Delete Failed',\r\n          message: 'Failed to delete document. Please try again.',\r\n          color: 'red'\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUploadModalClose = () => {\r\n    uploadForm.reset();\r\n    setSelectedFiles([]);\r\n    setUploadModalOpened(false);\r\n  };\r\n\r\n  const handleEditModalClose = () => {\r\n    editForm.reset();\r\n    setEditingDocument(null);\r\n    setEditModalOpened(false);\r\n  };\r\n\r\n  const openEditModal = (document: PatientDocument) => {\r\n    setEditingDocument(document);\r\n    editForm.setValues({\r\n      documentType: document.documentType,\r\n      title: document.title,\r\n      description: document.description || '',\r\n      accessLevel: document.accessLevel,\r\n      tags: document.tags || [],\r\n      expirationDate: document.expirationDate ? new Date(document.expirationDate) : undefined\r\n    });\r\n    setEditModalOpened(true);\r\n  };\r\n\r\n  const getFileIcon = (mimeType: string, size = '1.5rem') => {\r\n    if (mimeType.startsWith('image/')) {\r\n      return <IconPhoto size={size} />;\r\n    } else if (mimeType === 'application/pdf') {\r\n      return <IconFileText size={size} />;\r\n    } else if (mimeType.includes('word')) {\r\n      return <IconFileWord size={size} />;\r\n    } else {\r\n      return <IconFile size={size} />;\r\n    }\r\n  };\r\n\r\n  const getAccessIcon = (level: string) => {\r\n    switch (level) {\r\n      case 'public': return <IconWorld size=\"1rem\" />;\r\n      case 'restricted': return <IconShield size=\"1rem\" />;\r\n      case 'confidential': return <IconLock size=\"1rem\" />;\r\n      default: return <IconShield size=\"1rem\" />;\r\n    }\r\n  };\r\n\r\n  const getAccessColor = (level: string) => {\r\n    switch (level) {\r\n      case 'public': return 'green';\r\n      case 'restricted': return 'blue';\r\n      case 'confidential': return 'red';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const filterAndSortDocuments = (docs: PatientDocument[]) => {\r\n    let filtered = docs;\r\n\r\n    // Filter by search query\r\n    if (searchQuery.trim()) {\r\n      filtered = filtered.filter(doc => \r\n        doc.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        doc.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        doc.documentType.toLowerCase().includes(searchQuery.toLowerCase())\r\n      );\r\n    }\r\n\r\n    // Filter by tab\r\n    if (activeTab !== 'all') {\r\n      filtered = filtered.filter(doc => doc.documentType === activeTab);\r\n    }\r\n\r\n    // Sort documents\r\n    filtered.sort((a, b) => {\r\n      let comparison = 0;\r\n      \r\n      switch (sortBy) {\r\n        case 'title':\r\n          comparison = a.title.localeCompare(b.title);\r\n          break;\r\n        case 'date':\r\n          comparison = new Date(b.uploadedAt).getTime() - new Date(a.uploadedAt).getTime();\r\n          break;\r\n        case 'type':\r\n          comparison = a.documentType.localeCompare(b.documentType);\r\n          break;\r\n        case 'size':\r\n          comparison = b.fileSize - a.fileSize;\r\n          break;\r\n        default:\r\n          comparison = 0;\r\n      }\r\n\r\n      return sortOrder === 'asc' ? comparison : -comparison;\r\n    });\r\n\r\n    return filtered;\r\n  };\r\n\r\n  const getDocumentTypeStats = () => {\r\n    const stats = documentTypes.map(type => ({\r\n      ...type,\r\n      count: documents.filter(doc => doc.documentType === type.value).length\r\n    }));\r\n    return [\r\n      { value: 'all', label: 'All Documents', count: documents.length, color: 'gray' },\r\n      ...stats.filter(stat => stat.count > 0)\r\n    ];\r\n  };\r\n\r\n  const DocumentCard = ({ document }: { document: PatientDocument }) => (\r\n    <Paper p=\"md\" withBorder>\r\n      <Group justify=\"space-between\" align=\"flex-start\" mb=\"sm\">\r\n        <Group>\r\n          <ThemeIcon\r\n            size=\"lg\"\r\n            variant=\"light\"\r\n            color={documentTypes.find(t => t.value === document.documentType)?.color || 'gray'}\r\n          >\r\n            {getFileIcon(document.mimeType)}\r\n          </ThemeIcon>\r\n          <div>\r\n            <Text fw={500} size=\"sm\">{document.title}</Text>\r\n            <Text size=\"xs\" c=\"dimmed\">{document.documentType.replace('_', ' ')}</Text>\r\n          </div>\r\n        </Group>\r\n        \r\n        <Menu shadow=\"md\" width={200}>\r\n          <Menu.Target>\r\n            <ActionIcon variant=\"subtle\" size=\"sm\">\r\n              <IconDotsVertical size=\"0.8rem\" />\r\n            </ActionIcon>\r\n          </Menu.Target>\r\n          <Menu.Dropdown>\r\n            <Menu.Item\r\n              leftSection={<IconEye size=\"0.9rem\" />}\r\n              onClick={() => onView(document)}\r\n            >\r\n              View\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              leftSection={<IconDownload size=\"0.9rem\" />}\r\n              onClick={() => onDownload(document)}\r\n            >\r\n              Download\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              leftSection={<IconEdit size=\"0.9rem\" />}\r\n              onClick={() => openEditModal(document)}\r\n            >\r\n              Edit\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              leftSection={<IconShare size=\"0.9rem\" />}\r\n            >\r\n              Share\r\n            </Menu.Item>\r\n            <Menu.Divider />\r\n            <Menu.Item\r\n              color=\"red\"\r\n              leftSection={<IconTrash size=\"0.9rem\" />}\r\n              onClick={() => handleDelete(document.id, document.title)}\r\n            >\r\n              Delete\r\n            </Menu.Item>\r\n          </Menu.Dropdown>\r\n        </Menu>\r\n      </Group>\r\n\r\n      {document.description && (\r\n        <Text size=\"sm\" c=\"dimmed\" mb=\"sm\">{document.description}</Text>\r\n      )}\r\n\r\n      <Group justify=\"space-between\" align=\"center\" mb=\"sm\">\r\n        <Badge\r\n          color={getAccessColor(document.accessLevel)}\r\n          variant=\"light\"\r\n          size=\"sm\"\r\n          leftSection={getAccessIcon(document.accessLevel)}\r\n        >\r\n          {document.accessLevel}\r\n        </Badge>\r\n        <Text size=\"xs\" c=\"dimmed\">\r\n          {(document.fileSize / 1024).toFixed(1)} KB\r\n        </Text>\r\n      </Group>\r\n\r\n      {document.tags && document.tags.length > 0 && (\r\n        <Group gap=\"xs\" mb=\"sm\">\r\n          {document.tags.map((tag, index) => (\r\n            <Badge key={index} size=\"xs\" variant=\"outline\">\r\n              {tag}\r\n            </Badge>\r\n          ))}\r\n        </Group>\r\n      )}\r\n\r\n      <Group justify=\"space-between\" align=\"center\">\r\n        <Text size=\"xs\" c=\"dimmed\">\r\n          {formatDate(document.uploadedAt)}\r\n        </Text>\r\n        <Text size=\"xs\" c=\"dimmed\">\r\n          By {document.uploadedBy}\r\n        </Text>\r\n      </Group>\r\n\r\n      {document.expirationDate && (\r\n        <Alert color=\"orange\" mt=\"sm\" p=\"xs\">\r\n          <Text size=\"xs\">\r\n            Expires: {formatDate(document.expirationDate)}\r\n          </Text>\r\n        </Alert>\r\n      )}\r\n    </Paper>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        opened={opened}\r\n        onClose={onClose}\r\n        title={\r\n          <Group>\r\n            <IconFileText size=\"1.2rem\" />\r\n            <div>\r\n              <Text fw={600}>Document Manager</Text>\r\n              <Text size=\"sm\" c=\"dimmed\">{patientName}</Text>\r\n            </div>\r\n          </Group>\r\n        }\r\n        size=\"xl\"\r\n      >\r\n        <Stack gap=\"lg\">\r\n          {/* Header Controls */}\r\n          <Group justify=\"space-between\">\r\n            <Group>\r\n              <TextInput\r\n                placeholder=\"Search documents...\"\r\n                leftSection={<IconSearch size=\"1rem\" />}\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.currentTarget.value)}\r\n                style={{ width: 250 }}\r\n              />\r\n              <Select\r\n                placeholder=\"Sort by\"\r\n                leftSection={<IconSortAscending size=\"1rem\" />}\r\n                data={[\r\n                  { value: 'date', label: 'Upload Date' },\r\n                  { value: 'title', label: 'Title' },\r\n                  { value: 'type', label: 'Type' },\r\n                  { value: 'size', label: 'File Size' }\r\n                ]}\r\n                value={sortBy}\r\n                onChange={(value) => setSortBy(value as any)}\r\n                style={{ width: 150 }}\r\n              />\r\n              <Button\r\n                variant=\"subtle\"\r\n                size=\"sm\"\r\n                onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}\r\n              >\r\n                {sortOrder === 'asc' ? '↑' : '↓'}\r\n              </Button>\r\n            </Group>\r\n            \r\n            <Button\r\n              leftSection={<IconUpload size=\"1rem\" />}\r\n              onClick={() => setUploadModalOpened(true)}\r\n            >\r\n              Upload Document\r\n            </Button>\r\n          </Group>\r\n\r\n          {/* Document Type Tabs */}\r\n          <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'all')}>\r\n            <Tabs.List>\r\n              {getDocumentTypeStats().map((stat) => (\r\n                <Tabs.Tab key={stat.value} value={stat.value}>\r\n                  {stat.label} ({stat.count})\r\n                </Tabs.Tab>\r\n              ))}\r\n            </Tabs.List>\r\n\r\n            <Tabs.Panel value={activeTab} pt=\"md\">\r\n              {filterAndSortDocuments(documents).length === 0 ? (\r\n                <Paper p=\"xl\" withBorder style={{ textAlign: 'center' }}>\r\n                  <IconFileText size=\"3rem\" color=\"var(--mantine-color-gray-5)\" />\r\n                  <Text mt=\"md\" c=\"dimmed\">\r\n                    {searchQuery.trim() ? 'No documents match your search' : 'No documents found'}\r\n                  </Text>\r\n                </Paper>\r\n              ) : (\r\n                <Grid>\r\n                  {filterAndSortDocuments(documents).map((document) => (\r\n                    <Grid.Col key={document.id} span={{ base: 12, md: 6, lg: 4 }}>\r\n                      <DocumentCard document={document} />\r\n                    </Grid.Col>\r\n                  ))}\r\n                </Grid>\r\n              )}\r\n            </Tabs.Panel>\r\n          </Tabs>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* Upload Modal */}\r\n      <Modal\r\n        opened={uploadModalOpened}\r\n        onClose={handleUploadModalClose}\r\n        title={\r\n          <Group>\r\n            <IconUpload size=\"1.2rem\" />\r\n            <Text fw={600}>Upload Documents</Text>\r\n          </Group>\r\n        }\r\n        size=\"lg\"\r\n      >\r\n        <form onSubmit={uploadForm.onSubmit(handleUpload)}>\r\n          <Stack gap=\"md\">\r\n            <Dropzone\r\n              onDrop={setSelectedFiles}\r\n              accept={[...IMAGE_MIME_TYPE, ...PDF_MIME_TYPE, 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']}\r\n              maxSize={10 * 1024 * 1024} // 10MB\r\n              multiple\r\n            >\r\n              <Group justify=\"center\" gap=\"xl\" mih={220} style={{ pointerEvents: 'none' }}>\r\n                <Dropzone.Accept>\r\n                  <IconUpload size=\"3.2rem\" stroke={1.5} />\r\n                </Dropzone.Accept>\r\n                <Dropzone.Reject>\r\n                  <IconX size=\"3.2rem\" stroke={1.5} />\r\n                </Dropzone.Reject>\r\n                <Dropzone.Idle>\r\n                  <IconFileUpload size=\"3.2rem\" stroke={1.5} />\r\n                </Dropzone.Idle>\r\n\r\n                <div>\r\n                  <Text size=\"xl\" inline>\r\n                    Drag files here or click to select files\r\n                  </Text>\r\n                  <Text size=\"sm\" c=\"dimmed\" inline mt={7}>\r\n                    Attach up to 5 files, each file should not exceed 10MB\r\n                  </Text>\r\n                </div>\r\n              </Group>\r\n            </Dropzone>\r\n\r\n            {selectedFiles.length > 0 && (\r\n              <Stack gap=\"xs\">\r\n                <Text size=\"sm\" fw={500}>Selected Files:</Text>\r\n                {selectedFiles.map((file, index) => (\r\n                  <Group key={index} justify=\"space-between\" p=\"xs\" bg=\"gray.0\" style={{ borderRadius: 4 }}>\r\n                    <Group>\r\n                      {getFileIcon(file.type, '1rem')}\r\n                      <div>\r\n                        <Text size=\"sm\" fw={500}>{file.name}</Text>\r\n                        <Text size=\"xs\" c=\"dimmed\">{(file.size / 1024).toFixed(1)} KB</Text>\r\n                      </div>\r\n                    </Group>\r\n                    <ActionIcon\r\n                      variant=\"subtle\"\r\n                      size=\"sm\"\r\n                      onClick={() => setSelectedFiles(files => files.filter((_, i) => i !== index))}\r\n                    >\r\n                      <IconX size=\"0.8rem\" />\r\n                    </ActionIcon>\r\n                  </Group>\r\n                ))}\r\n              </Stack>\r\n            )}\r\n\r\n            <Grid>\r\n              <Grid.Col span={{ base: 12, md: 6 }}>\r\n                <Select\r\n                  label=\"Document Type\"\r\n                  placeholder=\"Select document type\"\r\n                  required\r\n                  data={documentTypes.map(type => ({ value: type.value, label: type.label }))}\r\n                  {...uploadForm.getInputProps('documentType')}\r\n                />\r\n              </Grid.Col>\r\n              \r\n              <Grid.Col span={{ base: 12, md: 6 }}>\r\n                <Select\r\n                  label=\"Access Level\"\r\n                  placeholder=\"Select access level\"\r\n                  required\r\n                  data={[\r\n                    { value: 'public', label: 'Public - Everyone can view' },\r\n                    { value: 'restricted', label: 'Restricted - Healthcare staff only' },\r\n                    { value: 'confidential', label: 'Confidential - Authorized personnel only' }\r\n                  ]}\r\n                  {...uploadForm.getInputProps('accessLevel')}\r\n                />\r\n              </Grid.Col>\r\n            </Grid>\r\n\r\n            <TextInput\r\n              label=\"Document Title\"\r\n              placeholder=\"Enter document title\"\r\n              required\r\n              {...uploadForm.getInputProps('title')}\r\n            />\r\n\r\n            <Textarea\r\n              label=\"Description\"\r\n              placeholder=\"Enter document description\"\r\n              minRows={2}\r\n              {...uploadForm.getInputProps('description')}\r\n            />\r\n\r\n            <DatePickerInput\r\n              label=\"Expiration Date\"\r\n              placeholder=\"Select expiration date (optional)\"\r\n              minDate={new Date()}\r\n              {...uploadForm.getInputProps('expirationDate')}\r\n              leftSection={<IconCalendar size=\"1rem\" />}\r\n            />\r\n\r\n            <Group justify=\"flex-end\" mt=\"xl\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={handleUploadModalClose}\r\n                disabled={uploading}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                loading={uploading}\r\n                leftSection={<IconUpload size=\"1rem\" />}\r\n              >\r\n                Upload Documents\r\n              </Button>\r\n            </Group>\r\n          </Stack>\r\n        </form>\r\n      </Modal>\r\n\r\n      {/* Edit Modal */}\r\n      <Modal\r\n        opened={editModalOpened}\r\n        onClose={handleEditModalClose}\r\n        title={\r\n          <Group>\r\n            <IconEdit size=\"1.2rem\" />\r\n            <Text fw={600}>Edit Document</Text>\r\n          </Group>\r\n        }\r\n        size=\"lg\"\r\n      >\r\n        <form onSubmit={editForm.onSubmit(handleEdit)}>\r\n          <Stack gap=\"md\">\r\n            <Grid>\r\n              <Grid.Col span={{ base: 12, md: 6 }}>\r\n                <Select\r\n                  label=\"Document Type\"\r\n                  placeholder=\"Select document type\"\r\n                  required\r\n                  data={documentTypes.map(type => ({ value: type.value, label: type.label }))}\r\n                  {...editForm.getInputProps('documentType')}\r\n                />\r\n              </Grid.Col>\r\n              \r\n              <Grid.Col span={{ base: 12, md: 6 }}>\r\n                <Select\r\n                  label=\"Access Level\"\r\n                  placeholder=\"Select access level\"\r\n                  required\r\n                  data={[\r\n                    { value: 'public', label: 'Public - Everyone can view' },\r\n                    { value: 'restricted', label: 'Restricted - Healthcare staff only' },\r\n                    { value: 'confidential', label: 'Confidential - Authorized personnel only' }\r\n                  ]}\r\n                  {...editForm.getInputProps('accessLevel')}\r\n                />\r\n              </Grid.Col>\r\n            </Grid>\r\n\r\n            <TextInput\r\n              label=\"Document Title\"\r\n              placeholder=\"Enter document title\"\r\n              required\r\n              {...editForm.getInputProps('title')}\r\n            />\r\n\r\n            <Textarea\r\n              label=\"Description\"\r\n              placeholder=\"Enter document description\"\r\n              minRows={2}\r\n              {...editForm.getInputProps('description')}\r\n            />\r\n\r\n            <DatePickerInput\r\n              label=\"Expiration Date\"\r\n              placeholder=\"Select expiration date (optional)\"\r\n              minDate={new Date()}\r\n              {...editForm.getInputProps('expirationDate')}\r\n              leftSection={<IconCalendar size=\"1rem\" />}\r\n            />\r\n\r\n            <Group justify=\"flex-end\" mt=\"xl\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={handleEditModalClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                leftSection={<IconDeviceFloppy size=\"1rem\" />}\r\n              >\r\n                Save Changes\r\n              </Button>\r\n            </Group>\r\n          </Stack>\r\n        </form>\r\n      </Modal>\r\n    </>\r\n  );\r\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\patients\\MedicalHistoryManager.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Title' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Divider' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 19,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Card' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'NumberInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TagsInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 41,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconNotes' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 42,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'patientId' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 78,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 132,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 132,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 170,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 170,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Modal,\r\n  Stack,\r\n  Group,\r\n  Text,\r\n  TextInput,\r\n  Textarea,\r\n  Select,\r\n  Button,\r\n  Paper,\r\n  Title,\r\n  Badge,\r\n  ActionIcon,\r\n  Grid,\r\n  Alert,\r\n  Divider,\r\n  Timeline,\r\n  Card,\r\n  Tabs,\r\n  Switch,\r\n  NumberInput,\r\n  TagsInput\r\n} from '@mantine/core';\r\nimport { useForm } from '@mantine/form';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport {\r\n  IconMedicalCross,\r\n  IconAlertCircle,\r\n  IconPill,\r\n  IconHeartbeat,\r\n  IconUser,\r\n  IconStethoscope,\r\n  IconCalendar,\r\n  IconPlus,\r\n  IconEdit,\r\n  IconTrash,\r\n  IconCheck,\r\n  IconX,\r\n  IconNotes,\r\n  IconVaccine\r\n} from '@tabler/icons-react';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { MedicalHistory } from '../../types/patient';\r\nimport { formatDate } from '../../lib/utils';\r\n\r\ninterface MedicalHistoryManagerProps {\r\n  opened: boolean;\r\n  onClose: () => void;\r\n  patientId: string;\r\n  patientName: string;\r\n  medicalHistory: MedicalHistory[];\r\n  onSave: (history: Partial<MedicalHistory>) => Promise<void>;\r\n  onUpdate: (id: string, history: Partial<MedicalHistory>) => Promise<void>;\r\n  onDelete: (id: string) => Promise<void>;\r\n}\r\n\r\ninterface HistoryFormData {\r\n  historyType: 'medical' | 'surgical' | 'family' | 'social' | 'allergy' | 'medication' | 'immunization';\r\n  title: string;\r\n  description: string;\r\n  date?: Date;\r\n  severity?: 'mild' | 'moderate' | 'severe';\r\n  outcome?: string;\r\n  complications?: string;\r\n  treatmentReceived?: string;\r\n  doctorName?: string;\r\n  hospitalName?: string;\r\n  notes?: string;\r\n  isActive: boolean;\r\n}\r\n\r\nexport default function MedicalHistoryManager({\r\n  opened,\r\n  onClose,\r\n  patientId,\r\n  patientName,\r\n  medicalHistory,\r\n  onSave,\r\n  onUpdate,\r\n  onDelete\r\n}: MedicalHistoryManagerProps) {\r\n  const [activeTab, setActiveTab] = useState('all');\r\n  const [formOpened, setFormOpened] = useState(false);\r\n  const [editingHistory, setEditingHistory] = useState<MedicalHistory | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const form = useForm<HistoryFormData>({\r\n    initialValues: {\r\n      historyType: 'medical',\r\n      title: '',\r\n      description: '',\r\n      date: undefined,\r\n      severity: undefined,\r\n      outcome: '',\r\n      complications: '',\r\n      treatmentReceived: '',\r\n      doctorName: '',\r\n      hospitalName: '',\r\n      notes: '',\r\n      isActive: true\r\n    },\r\n    validate: {\r\n      title: (value) => (value.trim().length < 2 ? 'Title must be at least 2 characters' : null),\r\n      description: (value) => (value.trim().length < 5 ? 'Description must be at least 5 characters' : null)\r\n    }\r\n  });\r\n\r\n  const handleSubmit = async (values: HistoryFormData) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      if (editingHistory) {\r\n        await onUpdate(editingHistory.id, values);\r\n        notifications.show({\r\n          title: 'History Updated',\r\n          message: 'Medical history entry has been updated successfully.',\r\n          color: 'green'\r\n        });\r\n      } else {\r\n        await onSave(values);\r\n        notifications.show({\r\n          title: 'History Added',\r\n          message: 'New medical history entry has been added successfully.',\r\n          color: 'green'\r\n        });\r\n      }\r\n      \r\n      handleFormClose();\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: `Failed to ${editingHistory ? 'update' : 'save'} medical history. Please try again.`,\r\n        color: 'red'\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (history: MedicalHistory) => {\r\n    setEditingHistory(history);\r\n    form.setValues({\r\n      historyType: history.historyType,\r\n      title: history.title,\r\n      description: history.description,\r\n      date: history.date ? new Date(history.date) : undefined,\r\n      severity: history.severity,\r\n      outcome: history.outcome || '',\r\n      complications: history.complications || '',\r\n      treatmentReceived: history.treatmentReceived || '',\r\n      doctorName: history.doctorName || '',\r\n      hospitalName: history.hospitalName || '',\r\n      notes: history.notes || '',\r\n      isActive: history.isActive\r\n    });\r\n    setFormOpened(true);\r\n  };\r\n\r\n  const handleDelete = async (id: string) => {\r\n    try {\r\n      await onDelete(id);\r\n      notifications.show({\r\n        title: 'History Deleted',\r\n        message: 'Medical history entry has been deleted successfully.',\r\n        color: 'green'\r\n      });\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: 'Failed to delete medical history. Please try again.',\r\n        color: 'red'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleFormClose = () => {\r\n    form.reset();\r\n    setEditingHistory(null);\r\n    setFormOpened(false);\r\n  };\r\n\r\n  const getHistoryIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'medical': return <IconMedicalCross size=\"1rem\" />;\r\n      case 'surgical': return <IconStethoscope size=\"1rem\" />;\r\n      case 'family': return <IconStethoscope size=\"1rem\" />;\r\n      case 'social': return <IconUser size=\"1rem\" />;\r\n      case 'allergy': return <IconAlertCircle size=\"1rem\" />;\r\n      case 'medication': return <IconPill size=\"1rem\" />;\r\n      case 'immunization': return <IconVaccine size=\"1rem\" />;\r\n      default: return <IconHeartbeat size=\"1rem\" />;\r\n    }\r\n  };\r\n\r\n  const getHistoryTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'medical': return 'blue';\r\n      case 'surgical': return 'orange';\r\n      case 'family': return 'purple';\r\n      case 'social': return 'teal';\r\n      case 'allergy': return 'red';\r\n      case 'medication': return 'green';\r\n      case 'immunization': return 'cyan';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const getSeverityColor = (severity?: string) => {\r\n    switch (severity) {\r\n      case 'severe': return 'red';\r\n      case 'moderate': return 'orange';\r\n      case 'mild': return 'yellow';\r\n      default: return 'gray';\r\n    }\r\n  };\r\n\r\n  const filterHistoryByType = (type: string) => {\r\n    if (type === 'all') return medicalHistory;\r\n    return medicalHistory.filter(history => history.historyType === type);\r\n  };\r\n\r\n  const historyTabs = [\r\n    { value: 'all', label: 'All History', count: medicalHistory.length },\r\n    { value: 'medical', label: 'Medical', count: medicalHistory.filter(h => h.historyType === 'medical').length },\r\n    { value: 'surgical', label: 'Surgical', count: medicalHistory.filter(h => h.historyType === 'surgical').length },\r\n    { value: 'allergy', label: 'Allergies', count: medicalHistory.filter(h => h.historyType === 'allergy').length },\r\n    { value: 'family', label: 'Family', count: medicalHistory.filter(h => h.historyType === 'family').length },\r\n    { value: 'medication', label: 'Medications', count: medicalHistory.filter(h => h.historyType === 'medication').length }\r\n  ];\r\n\r\n  const HistoryList = ({ histories }: { histories: MedicalHistory[] }) => (\r\n    <>\r\n      {histories.length === 0 ? (\r\n        <Paper p=\"xl\" withBorder style={{ textAlign: 'center' }}>\r\n          <IconMedicalCross size=\"3rem\" color=\"var(--mantine-color-gray-5)\" />\r\n          <Text mt=\"md\" c=\"dimmed\">No medical history found for this category</Text>\r\n        </Paper>\r\n      ) : (\r\n        <Stack gap=\"md\">\r\n          {histories.map((history) => (\r\n            <Paper key={history.id} p=\"md\" withBorder>\r\n              <Group justify=\"space-between\" align=\"flex-start\" mb=\"sm\">\r\n                <Group>\r\n                  <Badge\r\n                    color={getHistoryTypeColor(history.historyType)}\r\n                    variant=\"light\"\r\n                    leftSection={getHistoryIcon(history.historyType)}\r\n                  >\r\n                    {history.historyType}\r\n                  </Badge>\r\n                  <Text fw={500}>{history.title}</Text>\r\n                </Group>\r\n                \r\n                <Group gap=\"xs\">\r\n                  {history.severity && (\r\n                    <Badge\r\n                      color={getSeverityColor(history.severity)}\r\n                      variant=\"light\"\r\n                      size=\"sm\"\r\n                    >\r\n                      {history.severity}\r\n                    </Badge>\r\n                  )}\r\n                  <ActionIcon\r\n                    variant=\"subtle\"\r\n                    size=\"sm\"\r\n                    onClick={() => handleEdit(history)}\r\n                  >\r\n                    <IconEdit size=\"0.8rem\" />\r\n                  </ActionIcon>\r\n                  <ActionIcon\r\n                    variant=\"subtle\"\r\n                    size=\"sm\"\r\n                    color=\"red\"\r\n                    onClick={() => handleDelete(history.id)}\r\n                  >\r\n                    <IconTrash size=\"0.8rem\" />\r\n                  </ActionIcon>\r\n                </Group>\r\n              </Group>\r\n\r\n              <Text size=\"sm\" mb=\"sm\">{history.description}</Text>\r\n\r\n              <Grid>\r\n                {history.date && (\r\n                  <Grid.Col span={6}>\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      <IconCalendar size=\"0.8rem\" style={{ marginRight: 4 }} />\r\n                      {formatDate(history.date)}\r\n                    </Text>\r\n                  </Grid.Col>\r\n                )}\r\n                \r\n                {history.doctorName && (\r\n                  <Grid.Col span={6}>\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Doctor: {history.doctorName}\r\n                    </Text>\r\n                  </Grid.Col>\r\n                )}\r\n                \r\n                {history.hospitalName && (\r\n                  <Grid.Col span={6}>\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Hospital: {history.hospitalName}\r\n                    </Text>\r\n                  </Grid.Col>\r\n                )}\r\n                \r\n                {history.outcome && (\r\n                  <Grid.Col span={6}>\r\n                    <Text size=\"xs\" c=\"dimmed\">\r\n                      Outcome: {history.outcome}\r\n                    </Text>\r\n                  </Grid.Col>\r\n                )}\r\n              </Grid>\r\n\r\n              {history.treatmentReceived && (\r\n                <div>\r\n                  <Text size=\"xs\" fw={500} mt=\"sm\" mb=\"xs\">Treatment Received:</Text>\r\n                  <Text size=\"xs\" c=\"dimmed\">{history.treatmentReceived}</Text>\r\n                </div>\r\n              )}\r\n\r\n              {history.complications && (\r\n                <Alert color=\"orange\" mt=\"sm\" p=\"xs\">\r\n                  <Text size=\"xs\" fw={500}>Complications:</Text>\r\n                  <Text size=\"xs\">{history.complications}</Text>\r\n                </Alert>\r\n              )}\r\n\r\n              {history.notes && (\r\n                <div>\r\n                  <Text size=\"xs\" fw={500} mt=\"sm\" mb=\"xs\">Notes:</Text>\r\n                  <Text size=\"xs\" c=\"dimmed\">{history.notes}</Text>\r\n                </div>\r\n              )}\r\n\r\n              {!history.isActive && (\r\n                <Badge color=\"gray\" size=\"sm\" mt=\"sm\">Inactive</Badge>\r\n              )}\r\n            </Paper>\r\n          ))}\r\n        </Stack>\r\n      )}\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        opened={opened}\r\n        onClose={onClose}\r\n        title={\r\n          <Group>\r\n            <IconMedicalCross size=\"1.2rem\" />\r\n            <div>\r\n              <Text fw={600}>Medical History</Text>\r\n              <Text size=\"sm\" c=\"dimmed\">{patientName}</Text>\r\n            </div>\r\n          </Group>\r\n        }\r\n        size=\"xl\"\r\n      >\r\n        <Stack gap=\"lg\">\r\n          <Group justify=\"space-between\">\r\n            <Text size=\"sm\" c=\"dimmed\">\r\n              Total entries: {medicalHistory.length}\r\n            </Text>\r\n            <Button\r\n              leftSection={<IconPlus size=\"1rem\" />}\r\n              onClick={() => setFormOpened(true)}\r\n            >\r\n              Add History\r\n            </Button>\r\n          </Group>\r\n\r\n          <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'all')}>\r\n            <Tabs.List>\r\n              {historyTabs.map((tab) => (\r\n                <Tabs.Tab key={tab.value} value={tab.value}>\r\n                  {tab.label} ({tab.count})\r\n                </Tabs.Tab>\r\n              ))}\r\n            </Tabs.List>\r\n\r\n            {historyTabs.map((tab) => (\r\n              <Tabs.Panel key={tab.value} value={tab.value} pt=\"md\">\r\n                <HistoryList histories={filterHistoryByType(tab.value)} />\r\n              </Tabs.Panel>\r\n            ))}\r\n          </Tabs>\r\n        </Stack>\r\n      </Modal>\r\n\r\n      {/* Add/Edit History Form */}\r\n      <Modal\r\n        opened={formOpened}\r\n        onClose={handleFormClose}\r\n        title={\r\n          <Group>\r\n            <IconMedicalCross size=\"1.2rem\" />\r\n            <Text fw={600}>{editingHistory ? 'Edit' : 'Add'} Medical History</Text>\r\n          </Group>\r\n        }\r\n        size=\"lg\"\r\n      >\r\n        <form onSubmit={form.onSubmit(handleSubmit)}>\r\n          <Stack gap=\"md\">\r\n            <Grid>\r\n              <Grid.Col span={{ base: 12, md: 6 }}>\r\n                <Select\r\n                  label=\"History Type\"\r\n                  placeholder=\"Select history type\"\r\n                  required\r\n                  data={[\r\n                    { value: 'medical', label: 'Medical Condition' },\r\n                    { value: 'surgical', label: 'Surgical History' },\r\n                    { value: 'family', label: 'Family History' },\r\n                    { value: 'social', label: 'Social History' },\r\n                    { value: 'allergy', label: 'Allergy' },\r\n                    { value: 'medication', label: 'Medication History' },\r\n                    { value: 'immunization', label: 'Immunization' }\r\n                  ]}\r\n                  {...form.getInputProps('historyType')}\r\n                />\r\n              </Grid.Col>\r\n              \r\n              <Grid.Col span={{ base: 12, md: 6 }}>\r\n                <DatePickerInput\r\n                  label=\"Date\"\r\n                  placeholder=\"Select date\"\r\n                  maxDate={new Date()}\r\n                  {...form.getInputProps('date')}\r\n                  leftSection={<IconCalendar size=\"1rem\" />}\r\n                />\r\n              </Grid.Col>\r\n            </Grid>\r\n\r\n            <TextInput\r\n              label=\"Title\"\r\n              placeholder=\"Enter condition/procedure title\"\r\n              required\r\n              {...form.getInputProps('title')}\r\n            />\r\n\r\n            <Textarea\r\n              label=\"Description\"\r\n              placeholder=\"Enter detailed description\"\r\n              required\r\n              minRows={3}\r\n              {...form.getInputProps('description')}\r\n            />\r\n\r\n            <Grid>\r\n              <Grid.Col span={{ base: 12, md: 6 }}>\r\n                <Select\r\n                  label=\"Severity\"\r\n                  placeholder=\"Select severity level\"\r\n                  data={[\r\n                    { value: 'mild', label: 'Mild' },\r\n                    { value: 'moderate', label: 'Moderate' },\r\n                    { value: 'severe', label: 'Severe' }\r\n                  ]}\r\n                  {...form.getInputProps('severity')}\r\n                  clearable\r\n                />\r\n              </Grid.Col>\r\n              \r\n              <Grid.Col span={{ base: 12, md: 6 }}>\r\n                <TextInput\r\n                  label=\"Outcome\"\r\n                  placeholder=\"Enter outcome/result\"\r\n                  {...form.getInputProps('outcome')}\r\n                />\r\n              </Grid.Col>\r\n            </Grid>\r\n\r\n            <Textarea\r\n              label=\"Treatment Received\"\r\n              placeholder=\"Describe treatment received\"\r\n              minRows={2}\r\n              {...form.getInputProps('treatmentReceived')}\r\n            />\r\n\r\n            <Textarea\r\n              label=\"Complications\"\r\n              placeholder=\"Any complications experienced\"\r\n              minRows={2}\r\n              {...form.getInputProps('complications')}\r\n            />\r\n\r\n            <Grid>\r\n              <Grid.Col span={{ base: 12, md: 6 }}>\r\n                <TextInput\r\n                  label=\"Doctor Name\"\r\n                  placeholder=\"Enter treating doctor's name\"\r\n                  {...form.getInputProps('doctorName')}\r\n                />\r\n              </Grid.Col>\r\n              \r\n              <Grid.Col span={{ base: 12, md: 6 }}>\r\n                <TextInput\r\n                  label=\"Hospital/Clinic Name\"\r\n                  placeholder=\"Enter hospital/clinic name\"\r\n                  {...form.getInputProps('hospitalName')}\r\n                />\r\n              </Grid.Col>\r\n            </Grid>\r\n\r\n            <Textarea\r\n              label=\"Additional Notes\"\r\n              placeholder=\"Any additional notes\"\r\n              minRows={2}\r\n              {...form.getInputProps('notes')}\r\n            />\r\n\r\n            <Switch\r\n              label=\"Active\"\r\n              description=\"Is this medical history item currently active/relevant?\"\r\n              {...form.getInputProps('isActive', { type: 'checkbox' })}\r\n            />\r\n\r\n            <Group justify=\"flex-end\" mt=\"xl\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={handleFormClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                loading={loading}\r\n                leftSection={<IconCheck size=\"1rem\" />}\r\n              >\r\n                {editingHistory ? 'Update' : 'Save'} History\r\n              </Button>\r\n            </Group>\r\n          </Stack>\r\n        </form>\r\n      </Modal>\r\n    </>\r\n  );\r\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\patients\\PatientAnalytics.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SegmentedControl' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 16,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timeline' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 19,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Table' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Divider' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconChartPie' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 38,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 43,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 43,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconEye' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 44,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'BloodGroup' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'lastYear' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 84,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport {\r\n  Paper,\r\n  Title,\r\n  Text,\r\n  Grid,\r\n  Card,\r\n  Group,\r\n  Badge,\r\n  Progress,\r\n  SimpleGrid,\r\n  Stack,\r\n  Select,\r\n  SegmentedControl,\r\n  RingProgress,\r\n  ThemeIcon,\r\n  Timeline,\r\n  Table,\r\n  Alert,\r\n  Tabs,\r\n  ActionIcon,\r\n  Menu,\r\n  Button,\r\n  Center,\r\n  Divider,\r\n  Modal\r\n} from '@mantine/core';\r\nimport {\r\n  IconTrendingUp,\r\n  IconTrendingDown,\r\n  IconUsers,\r\n  IconUserPlus,\r\n  IconHeart,\r\n  IconCalendar,\r\n  IconChartBar,\r\n  IconChartPie,\r\n  IconRefresh,\r\n  IconDownload,\r\n  IconPrinter,\r\n  IconShare,\r\n  IconFilter,\r\n  IconEye,\r\n  IconAlertCircle,\r\n  IconMedicalCross,\r\n  IconShield,\r\n  IconStethoscope,\r\n  IconActivity,\r\n  IconClock\r\n} from '@tabler/icons-react';\r\nimport { PatientStats, Patient } from '../../types/patient';\r\nimport { BloodGroup } from '../../types/common';\r\nimport { formatDate } from '../../lib/utils';\r\n\r\ninterface PatientAnalyticsProps {\r\n  opened: boolean;\r\n  onClose: () => void;\r\n  patients: Patient[];\r\n  stats: PatientStats | null;\r\n}\r\n\r\ninterface ChartTimeframe {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\nconst timeframes: ChartTimeframe[] = [\r\n  { value: '7d', label: 'Last 7 Days' },\r\n  { value: '30d', label: 'Last 30 Days' },\r\n  { value: '90d', label: 'Last 3 Months' },\r\n  { value: '1y', label: 'Last Year' }\r\n];\r\n\r\nexport default function PatientAnalytics({ opened, onClose, patients, stats }: PatientAnalyticsProps) {\r\n  const [selectedTimeframe, setSelectedTimeframe] = useState('30d');\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n\r\n  // Calculate derived statistics (must be before conditional return to follow Rules of Hooks)\r\n  const derivedStats = useMemo(() => {\r\n    const totalPatients = patients.length;\r\n    const today = new Date();\r\n    const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\r\n    const lastYear = new Date(today.getFullYear() - 1, today.getMonth(), today.getDate());\r\n\r\n    const newPatientsThisMonth = patients.filter(p => \r\n      new Date(p.registrationDate) >= lastMonth\r\n    ).length;\r\n\r\n    const newPatientsLastMonth = patients.filter(p => {\r\n      const regDate = new Date(p.registrationDate);\r\n      const twoMonthsAgo = new Date(today.getFullYear(), today.getMonth() - 2, today.getDate());\r\n      return regDate >= twoMonthsAgo && regDate < lastMonth;\r\n    }).length;\r\n\r\n    const growthRate = newPatientsLastMonth > 0 \r\n      ? ((newPatientsThisMonth - newPatientsLastMonth) / newPatientsLastMonth) * 100\r\n      : 0;\r\n\r\n    // Age group distribution\r\n    const ageGroups = patients.reduce((acc, patient) => {\r\n      if (patient.age < 18) acc.pediatric++;\r\n      else if (patient.age < 65) acc.adult++;\r\n      else acc.senior++;\r\n      return acc;\r\n    }, { pediatric: 0, adult: 0, senior: 0 });\r\n\r\n    // Most common conditions\r\n    const conditions = patients\r\n      .flatMap(p => p.chronicDiseases)\r\n      .reduce((acc, condition) => {\r\n        acc[condition] = (acc[condition] || 0) + 1;\r\n        return acc;\r\n      }, {} as Record<string, number>);\r\n\r\n    const topConditions = Object.entries(conditions)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, 5)\r\n      .map(([condition, count]) => ({\r\n        condition,\r\n        count,\r\n        percentage: (count / totalPatients) * 100\r\n      }));\r\n\r\n    return {\r\n      growthRate,\r\n      ageGroups,\r\n      topConditions,\r\n      totalPatients,\r\n      newPatientsThisMonth\r\n    };\r\n  }, [patients]);\r\n\r\n  // Handle null stats (after all hooks to follow Rules of Hooks)\r\n  if (!stats) {\r\n    return (\r\n      <Modal\r\n        opened={opened}\r\n        onClose={onClose}\r\n        size=\"xl\"\r\n        title=\"Patient Analytics\"\r\n        padding=\"lg\"\r\n      >\r\n        <Center p=\"xl\">\r\n          <Stack align=\"center\" gap=\"md\">\r\n            <IconAlertCircle size=\"3rem\" color=\"gray\" />\r\n            <Text size=\"lg\" c=\"dimmed\">No patient statistics available</Text>\r\n            <Text size=\"sm\" c=\"dimmed\">Patient data is still loading or unavailable</Text>\r\n          </Stack>\r\n        </Center>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  // Stat Card Component\r\n  const StatCard = ({ \r\n    title, \r\n    value, \r\n    subtitle, \r\n    icon, \r\n    color, \r\n    trend, \r\n    trendValue \r\n  }: {\r\n    title: string;\r\n    value: string | number;\r\n    subtitle?: string;\r\n    icon: React.ReactNode;\r\n    color: string;\r\n    trend?: 'up' | 'down' | 'neutral';\r\n    trendValue?: string;\r\n  }) => (\r\n    <Card withBorder p=\"lg\" radius=\"md\">\r\n      <Group justify=\"space-between\" align=\"flex-start\">\r\n        <div>\r\n          <Text size=\"xs\" c=\"dimmed\" tt=\"uppercase\" fw={700}>\r\n            {title}\r\n          </Text>\r\n          <Text size=\"xl\" fw={700} mt=\"xs\">\r\n            {value}\r\n          </Text>\r\n          {subtitle && (\r\n            <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">\r\n              {subtitle}\r\n            </Text>\r\n          )}\r\n          {trend && trendValue && (\r\n            <Group gap=\"xs\" mt=\"xs\">\r\n              <ThemeIcon\r\n                size=\"xs\"\r\n                variant=\"light\"\r\n                color={trend === 'up' ? 'green' : trend === 'down' ? 'red' : 'gray'}\r\n              >\r\n                {trend === 'up' ? (\r\n                  <IconTrendingUp size=\"0.7rem\" />\r\n                ) : trend === 'down' ? (\r\n                  <IconTrendingDown size=\"0.7rem\" />\r\n                ) : (\r\n                  <IconActivity size=\"0.7rem\" />\r\n                )}\r\n              </ThemeIcon>\r\n              <Text\r\n                size=\"xs\"\r\n                c={trend === 'up' ? 'green' : trend === 'down' ? 'red' : 'dimmed'}\r\n                fw={500}\r\n              >\r\n                {trendValue}\r\n              </Text>\r\n            </Group>\r\n          )}\r\n        </div>\r\n        <ThemeIcon size=\"xl\" variant=\"light\" color={color}>\r\n          {icon}\r\n        </ThemeIcon>\r\n      </Group>\r\n    </Card>\r\n  );\r\n\r\n  // Overview Tab\r\n  const OverviewTab = () => (\r\n    <Stack gap=\"lg\">\r\n      {/* Key Metrics */}\r\n      <SimpleGrid cols={{ base: 1, sm: 2, lg: 4 }}>\r\n        <StatCard\r\n          title=\"Total Patients\"\r\n          value={derivedStats.totalPatients.toLocaleString()}\r\n          subtitle=\"All registered patients\"\r\n          icon={<IconUsers size=\"1.5rem\" />}\r\n          color=\"blue\"\r\n          trend=\"up\"\r\n          trendValue={`+${derivedStats.newPatientsThisMonth} this month`}\r\n        />\r\n        <StatCard\r\n          title=\"New This Month\"\r\n          value={derivedStats.newPatientsThisMonth}\r\n          subtitle=\"New registrations\"\r\n          icon={<IconUserPlus size=\"1.5rem\" />}\r\n          color=\"green\"\r\n          trend={derivedStats.growthRate >= 0 ? 'up' : 'down'}\r\n          trendValue={`${derivedStats.growthRate >= 0 ? '+' : ''}${derivedStats.growthRate.toFixed(1)}%`}\r\n        />\r\n        <StatCard\r\n          title=\"Active Patients\"\r\n          value={stats.activePatients.toLocaleString()}\r\n          subtitle=\"Currently under care\"\r\n          icon={<IconHeart size=\"1.5rem\" />}\r\n          color=\"red\"\r\n        />\r\n        <StatCard\r\n          title=\"Average Age\"\r\n          value={`${stats.averageAge} years`}\r\n          subtitle=\"Patient demographics\"\r\n          icon={<IconCalendar size=\"1.5rem\" />}\r\n          color=\"purple\"\r\n        />\r\n      </SimpleGrid>\r\n\r\n      {/* Gender and Age Distribution */}\r\n      <Grid>\r\n        <Grid.Col span={{ base: 12, md: 6 }}>\r\n          <Paper p=\"md\" withBorder>\r\n            <Title order={4} mb=\"md\">Gender Distribution</Title>\r\n            <Stack gap=\"md\">\r\n              <div>\r\n                <Group justify=\"space-between\" mb=\"xs\">\r\n                  <Text size=\"sm\">Male</Text>\r\n                  <Text size=\"sm\" fw={500}>\r\n                    {stats.genderDistribution.male} ({((stats.genderDistribution.male / derivedStats.totalPatients) * 100).toFixed(1)}%)\r\n                  </Text>\r\n                </Group>\r\n                <Progress \r\n                  value={(stats.genderDistribution.male / derivedStats.totalPatients) * 100} \r\n                  color=\"blue\" \r\n                  size=\"lg\" \r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <Group justify=\"space-between\" mb=\"xs\">\r\n                  <Text size=\"sm\">Female</Text>\r\n                  <Text size=\"sm\" fw={500}>\r\n                    {stats.genderDistribution.female} ({((stats.genderDistribution.female / derivedStats.totalPatients) * 100).toFixed(1)}%)\r\n                  </Text>\r\n                </Group>\r\n                <Progress \r\n                  value={(stats.genderDistribution.female / derivedStats.totalPatients) * 100} \r\n                  color=\"pink\" \r\n                  size=\"lg\" \r\n                />\r\n              </div>\r\n              \r\n              {stats.genderDistribution.other > 0 && (\r\n                <div>\r\n                  <Group justify=\"space-between\" mb=\"xs\">\r\n                    <Text size=\"sm\">Other</Text>\r\n                    <Text size=\"sm\" fw={500}>\r\n                      {stats.genderDistribution.other} ({((stats.genderDistribution.other / derivedStats.totalPatients) * 100).toFixed(1)}%)\r\n                    </Text>\r\n                  </Group>\r\n                  <Progress \r\n                    value={(stats.genderDistribution.other / derivedStats.totalPatients) * 100} \r\n                    color=\"gray\" \r\n                    size=\"lg\" \r\n                  />\r\n                </div>\r\n              )}\r\n            </Stack>\r\n          </Paper>\r\n        </Grid.Col>\r\n\r\n        <Grid.Col span={{ base: 12, md: 6 }}>\r\n          <Paper p=\"md\" withBorder>\r\n            <Title order={4} mb=\"md\">Age Groups</Title>\r\n            <Group justify=\"center\" mb=\"md\">\r\n              <RingProgress\r\n                size={200}\r\n                thickness={20}\r\n                sections={[\r\n                  { value: (derivedStats.ageGroups.pediatric / derivedStats.totalPatients) * 100, color: 'cyan', tooltip: 'Pediatric (0-17)' },\r\n                  { value: (derivedStats.ageGroups.adult / derivedStats.totalPatients) * 100, color: 'blue', tooltip: 'Adult (18-64)' },\r\n                  { value: (derivedStats.ageGroups.senior / derivedStats.totalPatients) * 100, color: 'orange', tooltip: 'Senior (65+)' }\r\n                ]}\r\n                label={\r\n                  <Center>\r\n                    <div>\r\n                      <Text size=\"xl\" fw={700} ta=\"center\">\r\n                        {derivedStats.totalPatients}\r\n                      </Text>\r\n                      <Text size=\"sm\" c=\"dimmed\" ta=\"center\">\r\n                        Total Patients\r\n                      </Text>\r\n                    </div>\r\n                  </Center>\r\n                }\r\n              />\r\n            </Group>\r\n            <Stack gap=\"xs\">\r\n              <Group justify=\"space-between\">\r\n                <Group gap=\"xs\">\r\n                  <div style={{ width: 12, height: 12, backgroundColor: 'var(--mantine-color-cyan-6)', borderRadius: 2 }} />\r\n                  <Text size=\"sm\">Pediatric (0-17)</Text>\r\n                </Group>\r\n                <Text size=\"sm\" fw={500}>{derivedStats.ageGroups.pediatric}</Text>\r\n              </Group>\r\n              <Group justify=\"space-between\">\r\n                <Group gap=\"xs\">\r\n                  <div style={{ width: 12, height: 12, backgroundColor: 'var(--mantine-color-blue-6)', borderRadius: 2 }} />\r\n                  <Text size=\"sm\">Adult (18-64)</Text>\r\n                </Group>\r\n                <Text size=\"sm\" fw={500}>{derivedStats.ageGroups.adult}</Text>\r\n              </Group>\r\n              <Group justify=\"space-between\">\r\n                <Group gap=\"xs\">\r\n                  <div style={{ width: 12, height: 12, backgroundColor: 'var(--mantine-color-orange-6)', borderRadius: 2 }} />\r\n                  <Text size=\"sm\">Senior (65+)</Text>\r\n                </Group>\r\n                <Text size=\"sm\" fw={500}>{derivedStats.ageGroups.senior}</Text>\r\n              </Group>\r\n            </Stack>\r\n          </Paper>\r\n        </Grid.Col>\r\n      </Grid>\r\n\r\n      {/* Visit Trends */}\r\n      <Paper p=\"md\" withBorder>\r\n        <Group justify=\"space-between\" mb=\"md\">\r\n          <Title order={4}>Visit Trends</Title>\r\n          <Select\r\n            data={timeframes}\r\n            value={selectedTimeframe}\r\n            onChange={(value) => setSelectedTimeframe(value || '30d')}\r\n            size=\"sm\"\r\n            w={150}\r\n          />\r\n        </Group>\r\n        <Stack gap=\"sm\">\r\n          {stats.visitTrends.map((trend, index) => (\r\n            <Group key={index} justify=\"space-between\">\r\n              <Text size=\"sm\">{formatDate(new Date(trend.date))}</Text>\r\n              <Group gap=\"sm\" align=\"center\">\r\n                <Progress \r\n                  value={(trend.count / 200) * 100} \r\n                  size=\"sm\" \r\n                  w={100}\r\n                  color=\"blue\"\r\n                />\r\n                <Text size=\"sm\" fw={500} w={40} ta=\"right\">{trend.count}</Text>\r\n              </Group>\r\n            </Group>\r\n          ))}\r\n        </Stack>\r\n      </Paper>\r\n    </Stack>\r\n  );\r\n\r\n  // Medical Analytics Tab\r\n  const MedicalTab = () => (\r\n    <Stack gap=\"lg\">\r\n      {/* Blood Group Distribution */}\r\n      <Paper p=\"md\" withBorder>\r\n        <Title order={4} mb=\"md\">Blood Group Distribution</Title>\r\n        <Grid>\r\n          {Object.entries(stats.bloodGroupDistribution).map(([bloodGroup, count]) => (\r\n            <Grid.Col key={bloodGroup} span={{ base: 6, md: 3 }}>\r\n              <Card withBorder p=\"md\" ta=\"center\">\r\n                <Text size=\"xl\" fw={700} c=\"red\">{bloodGroup}</Text>\r\n                <Text size=\"sm\" c=\"dimmed\" mt=\"xs\">{count} patients</Text>\r\n                <Text size=\"xs\" c=\"dimmed\">\r\n                  {((count / derivedStats.totalPatients) * 100).toFixed(1)}%\r\n                </Text>\r\n              </Card>\r\n            </Grid.Col>\r\n          ))}\r\n        </Grid>\r\n      </Paper>\r\n\r\n      {/* Top Medical Conditions */}\r\n      {derivedStats.topConditions.length > 0 && (\r\n        <Paper p=\"md\" withBorder>\r\n          <Title order={4} mb=\"md\">Most Common Chronic Conditions</Title>\r\n          <Stack gap=\"md\">\r\n            {derivedStats.topConditions.map((condition, index) => (\r\n              <Group key={condition.condition} justify=\"space-between\" align=\"center\">\r\n                <Group>\r\n                  <Badge size=\"sm\" variant=\"light\" color=\"orange\">\r\n                    #{index + 1}\r\n                  </Badge>\r\n                  <Text size=\"sm\" fw={500}>{condition.condition}</Text>\r\n                </Group>\r\n                <Group gap=\"sm\" align=\"center\">\r\n                  <Progress \r\n                    value={condition.percentage} \r\n                    size=\"sm\" \r\n                    w={100}\r\n                    color=\"orange\"\r\n                  />\r\n                  <Text size=\"sm\" fw={500} w={60} ta=\"right\">\r\n                    {condition.count} ({condition.percentage.toFixed(1)}%)\r\n                  </Text>\r\n                </Group>\r\n              </Group>\r\n            ))}\r\n          </Stack>\r\n        </Paper>\r\n      )}\r\n\r\n      {/* Medical Alerts Summary */}\r\n      <Grid>\r\n        <Grid.Col span={{ base: 12, md: 6 }}>\r\n          <Paper p=\"md\" withBorder>\r\n            <Group mb=\"md\">\r\n              <IconAlertCircle size=\"1.2rem\" color=\"red\" />\r\n              <Title order={4}>Allergy Alert Summary</Title>\r\n            </Group>\r\n            <Stack gap=\"xs\">\r\n              <Group justify=\"space-between\">\r\n                <Text size=\"sm\">Patients with Known Allergies</Text>\r\n                <Badge color=\"red\" variant=\"light\">\r\n                  {patients.filter(p => p.allergies.length > 0).length}\r\n                </Badge>\r\n              </Group>\r\n              <Group justify=\"space-between\">\r\n                <Text size=\"sm\">No Known Allergies</Text>\r\n                <Badge color=\"green\" variant=\"light\">\r\n                  {patients.filter(p => p.allergies.length === 0).length}\r\n                </Badge>\r\n              </Group>\r\n              <Progress \r\n                value={(patients.filter(p => p.allergies.length > 0).length / derivedStats.totalPatients) * 100}\r\n                color=\"red\"\r\n                size=\"sm\"\r\n                mt=\"sm\"\r\n              />\r\n            </Stack>\r\n          </Paper>\r\n        </Grid.Col>\r\n\r\n        <Grid.Col span={{ base: 12, md: 6 }}>\r\n          <Paper p=\"md\" withBorder>\r\n            <Group mb=\"md\">\r\n              <IconMedicalCross size=\"1.2rem\" color=\"orange\" />\r\n              <Title order={4}>Chronic Disease Summary</Title>\r\n            </Group>\r\n            <Stack gap=\"xs\">\r\n              <Group justify=\"space-between\">\r\n                <Text size=\"sm\">Patients with Chronic Conditions</Text>\r\n                <Badge color=\"orange\" variant=\"light\">\r\n                  {patients.filter(p => p.chronicDiseases.length > 0).length}\r\n                </Badge>\r\n              </Group>\r\n              <Group justify=\"space-between\">\r\n                <Text size=\"sm\">No Chronic Conditions</Text>\r\n                <Badge color=\"green\" variant=\"light\">\r\n                  {patients.filter(p => p.chronicDiseases.length === 0).length}\r\n                </Badge>\r\n              </Group>\r\n              <Progress \r\n                value={(patients.filter(p => p.chronicDiseases.length > 0).length / derivedStats.totalPatients) * 100}\r\n                color=\"orange\"\r\n                size=\"sm\"\r\n                mt=\"sm\"\r\n              />\r\n            </Stack>\r\n          </Paper>\r\n        </Grid.Col>\r\n      </Grid>\r\n    </Stack>\r\n  );\r\n\r\n  // Insurance Analytics Tab\r\n  const InsuranceTab = () => (\r\n    <Stack gap=\"lg\">\r\n      {/* Insurance Coverage Overview */}\r\n      <Paper p=\"md\" withBorder>\r\n        <Title order={4} mb=\"md\">Insurance Coverage Overview</Title>\r\n        <Group justify=\"center\" mb=\"md\">\r\n          <RingProgress\r\n            size={200}\r\n            thickness={20}\r\n            sections={[\r\n              { \r\n                value: (stats.insuranceDistribution.insured / derivedStats.totalPatients) * 100, \r\n                color: 'green', \r\n                tooltip: 'Insured Patients' \r\n              },\r\n              { \r\n                value: (stats.insuranceDistribution.uninsured / derivedStats.totalPatients) * 100, \r\n                color: 'red', \r\n                tooltip: 'Uninsured Patients' \r\n              }\r\n            ]}\r\n            label={\r\n              <Center>\r\n                <div>\r\n                  <Text size=\"xl\" fw={700} ta=\"center\" c=\"green\">\r\n                    {((stats.insuranceDistribution.insured / derivedStats.totalPatients) * 100).toFixed(1)}%\r\n                  </Text>\r\n                  <Text size=\"sm\" c=\"dimmed\" ta=\"center\">\r\n                    Insured\r\n                  </Text>\r\n                </div>\r\n              </Center>\r\n            }\r\n          />\r\n        </Group>\r\n        \r\n        <Grid>\r\n          <Grid.Col span={6}>\r\n            <Group justify=\"space-between\">\r\n              <Group gap=\"xs\">\r\n                <ThemeIcon size=\"sm\" color=\"green\" variant=\"light\">\r\n                  <IconShield size=\"0.8rem\" />\r\n                </ThemeIcon>\r\n                <Text size=\"sm\">Insured</Text>\r\n              </Group>\r\n              <Text size=\"sm\" fw={500}>{stats.insuranceDistribution.insured}</Text>\r\n            </Group>\r\n          </Grid.Col>\r\n          <Grid.Col span={6}>\r\n            <Group justify=\"space-between\">\r\n              <Group gap=\"xs\">\r\n                <ThemeIcon size=\"sm\" color=\"red\" variant=\"light\">\r\n                  <IconAlertCircle size=\"0.8rem\" />\r\n                </ThemeIcon>\r\n                <Text size=\"sm\">Uninsured</Text>\r\n              </Group>\r\n              <Text size=\"sm\" fw={500}>{stats.insuranceDistribution.uninsured}</Text>\r\n            </Group>\r\n          </Grid.Col>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      {/* Insurance Type Breakdown */}\r\n      <Paper p=\"md\" withBorder>\r\n        <Title order={4} mb=\"md\">Insurance Type Distribution</Title>\r\n        <Alert icon={<IconShield size=\"1rem\" />} color=\"blue\" mb=\"md\">\r\n          <Stack gap=\"xs\">\r\n            <Group justify=\"space-between\">\r\n              <Text size=\"sm\">Government Insurance</Text>\r\n              <Text size=\"sm\" fw={500}>45% (1,281 patients)</Text>\r\n            </Group>\r\n            <Group justify=\"space-between\">\r\n              <Text size=\"sm\">Private Insurance</Text>\r\n              <Text size=\"sm\" fw={500}>35% (996 patients)</Text>\r\n            </Group>\r\n            <Group justify=\"space-between\">\r\n              <Text size=\"sm\">Corporate Insurance</Text>\r\n              <Text size=\"sm\" fw={500}>20% (569 patients)</Text>\r\n            </Group>\r\n          </Stack>\r\n        </Alert>\r\n      </Paper>\r\n\r\n      {/* Payment Analysis */}\r\n      <Paper p=\"md\" withBorder>\r\n        <Title order={4} mb=\"md\">Payment Method Analysis</Title>\r\n        <SimpleGrid cols={{ base: 1, md: 3 }}>\r\n          <Card withBorder p=\"md\" ta=\"center\">\r\n            <ThemeIcon size=\"xl\" variant=\"light\" color=\"green\" mx=\"auto\" mb=\"sm\">\r\n              <IconShield size=\"1.5rem\" />\r\n            </ThemeIcon>\r\n            <Text size=\"xl\" fw={700} c=\"green\">75%</Text>\r\n            <Text size=\"sm\" c=\"dimmed\">Insurance Claims</Text>\r\n          </Card>\r\n          \r\n          <Card withBorder p=\"md\" ta=\"center\">\r\n            <ThemeIcon size=\"xl\" variant=\"light\" color=\"blue\" mx=\"auto\" mb=\"sm\">\r\n              <IconClock size=\"1.5rem\" />\r\n            </ThemeIcon>\r\n            <Text size=\"xl\" fw={700} c=\"blue\">20%</Text>\r\n            <Text size=\"sm\" c=\"dimmed\">Self Pay</Text>\r\n          </Card>\r\n          \r\n          <Card withBorder p=\"md\" ta=\"center\">\r\n            <ThemeIcon size=\"xl\" variant=\"light\" color=\"orange\" mx=\"auto\" mb=\"sm\">\r\n              <IconAlertCircle size=\"1.5rem\" />\r\n            </ThemeIcon>\r\n            <Text size=\"xl\" fw={700} c=\"orange\">5%</Text>\r\n            <Text size=\"sm\" c=\"dimmed\">Payment Plans</Text>\r\n          </Card>\r\n        </SimpleGrid>\r\n      </Paper>\r\n    </Stack>\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      opened={opened}\r\n      onClose={onClose}\r\n      size=\"xl\"\r\n      title={\r\n        <div>\r\n          <Title order={2}>Patient Analytics</Title>\r\n          <Text c=\"dimmed\" size=\"sm\">Comprehensive insights and statistics about patient data</Text>\r\n        </div>\r\n      }\r\n      padding=\"lg\"\r\n    >\r\n      <Group justify=\"space-between\" align=\"flex-start\" mb=\"md\">\r\n        <Group>\r\n          <ActionIcon variant=\"light\" size=\"lg\">\r\n            <IconRefresh size=\"1.2rem\" />\r\n          </ActionIcon>\r\n          <Menu shadow=\"md\" width={200}>\r\n            <Menu.Target>\r\n              <Button variant=\"outline\" leftSection={<IconDownload size=\"1rem\" />}>\r\n                Export\r\n              </Button>\r\n            </Menu.Target>\r\n            <Menu.Dropdown>\r\n              <Menu.Item leftSection={<IconDownload size=\"0.9rem\" />}>\r\n                Export as PDF\r\n              </Menu.Item>\r\n              <Menu.Item leftSection={<IconDownload size=\"0.9rem\" />}>\r\n                Export as Excel\r\n              </Menu.Item>\r\n              <Menu.Item leftSection={<IconPrinter size=\"0.9rem\" />}>\r\n                Print Report\r\n              </Menu.Item>\r\n              <Menu.Item leftSection={<IconShare size=\"0.9rem\" />}>\r\n                Share Report\r\n              </Menu.Item>\r\n            </Menu.Dropdown>\r\n          </Menu>\r\n        </Group>\r\n      </Group>\r\n\r\n      <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'overview')}>\r\n        <Tabs.List>\r\n            <Tabs.Tab value=\"overview\" leftSection={<IconChartBar size=\"0.8rem\" />}>\r\n              Overview\r\n            </Tabs.Tab>\r\n            <Tabs.Tab value=\"medical\" leftSection={<IconStethoscope size=\"0.8rem\" />}>\r\n              Medical Analytics\r\n            </Tabs.Tab>\r\n            <Tabs.Tab value=\"insurance\" leftSection={<IconShield size=\"0.8rem\" />}>\r\n              Insurance Analytics\r\n            </Tabs.Tab>\r\n          </Tabs.List>\r\n\r\n          <Tabs.Panel value=\"overview\" pt=\"md\">\r\n            <OverviewTab />\r\n          </Tabs.Panel>\r\n\r\n          <Tabs.Panel value=\"medical\" pt=\"md\">\r\n            <MedicalTab />\r\n          </Tabs.Panel>\r\n\r\n          <Tabs.Panel value=\"insurance\" pt=\"md\">\r\n            <InsuranceTab />\r\n          </Tabs.Panel>\r\n        </Tabs>\r\n    </Modal>\r\n  );\r\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\patients\\PatientDetails.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Table' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Spoiler' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Progress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Anchor' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconShare' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 46,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 49,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 49,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrendingUp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTestTube' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 54,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 329,
        "column": 31,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 329,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Modal,\r\n  Stack,\r\n  Group,\r\n  Text,\r\n  Paper,\r\n  Title,\r\n  Divider,\r\n  Tabs,\r\n  Avatar,\r\n  Badge,\r\n  Grid,\r\n  Card,\r\n  ActionIcon,\r\n  Tooltip,\r\n  Button,\r\n  Timeline,\r\n  Alert,\r\n  Table,\r\n  Spoiler,\r\n  ScrollArea,\r\n  Progress,\r\n  ThemeIcon,\r\n  List,\r\n  Anchor\r\n} from '@mantine/core';\r\nimport {\r\n  IconUser,\r\n  IconPhone,\r\n  IconMail,\r\n  IconMapPin,\r\n  IconCalendar,\r\n  IconHeart,\r\n  IconShieldX,\r\n  IconFileText,\r\n  IconStethoscope,\r\n  IconPill,\r\n  IconAlertCircle,\r\n  IconHistory,\r\n  IconEdit,\r\n  IconDownload,\r\n  IconPrinter,\r\n  IconShare,\r\n  IconEye,\r\n  IconCloudUpload,\r\n  IconClock,\r\n  IconActivity,\r\n  IconTrendingUp,\r\n  IconMedicalCross,\r\n  IconTestTube,\r\n  IconX\r\n} from '@tabler/icons-react';\r\nimport { \r\n  Patient, \r\n  PatientVisit, \r\n  PatientDocument, \r\n  MedicalHistory, \r\n  PatientAppointment \r\n} from '../../types/patient';\r\nimport { formatDate, formatPhoneNumber } from '../../lib/utils';\r\n\r\ninterface PatientDetailsProps {\r\n  opened: boolean;\r\n  onClose: () => void;\r\n  patient: Patient | null;\r\n  visits?: PatientVisit[];\r\n  documents?: PatientDocument[];\r\n  medicalHistory?: MedicalHistory[];\r\n  appointments?: PatientAppointment[];\r\n  onEdit?: (patient: Patient) => void;\r\n  onScheduleAppointment?: (patientId: string) => void;\r\n}\r\n\r\nfunction PatientDetails({\r\n  opened,\r\n  onClose,\r\n  patient,\r\n  visits = [],\r\n  documents = [],\r\n  medicalHistory = [],\r\n  appointments = [],\r\n  onEdit,\r\n  onScheduleAppointment\r\n}: PatientDetailsProps) {\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n\r\n  if (!patient) return null;\r\n\r\n  const calculateAge = (birthDate: Date): number => {\r\n    const today = new Date();\r\n    const birth = new Date(birthDate);\r\n    let age = today.getFullYear() - birth.getFullYear();\r\n    const monthDiff = today.getMonth() - birth.getMonth();\r\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  // Overview Tab\r\n  const OverviewTab = () => (\r\n    <Stack gap=\"lg\">\r\n      {/* Patient Summary */}\r\n      <Paper p=\"lg\" withBorder>\r\n        <Grid>\r\n          <Grid.Col span={{ base: 12, md: 8 }}>\r\n            <Group>\r\n              <Avatar \r\n                size=\"xl\" \r\n                name={`${patient.firstName} ${patient.lastName}`} \r\n                color=\"blue\"\r\n                styles={{\r\n                  root: { fontSize: '1.5rem' }\r\n                }}\r\n              />\r\n              <div>\r\n                <Title order={2}>{patient.firstName} {patient.lastName}</Title>\r\n                <Group gap=\"xs\" mt=\"xs\">\r\n                  <Badge color=\"blue\" variant=\"light\">{patient.patientId}</Badge>\r\n                  <Badge color={patient.status === 'active' ? 'green' : 'red'} variant=\"light\">\r\n                    {patient.status}\r\n                  </Badge>\r\n                  {patient.insuranceInfo?.isActive && (\r\n                    <Badge color=\"green\" variant=\"light\" leftSection={<IconShieldX size=\"0.8rem\" />}>\r\n                      Insured\r\n                    </Badge>\r\n                  )}\r\n                </Group>\r\n                <Group gap=\"md\" mt=\"sm\">\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    <IconCalendar size=\"0.9rem\" style={{ marginRight: 4 }} />\r\n                    {calculateAge(patient.dateOfBirth)} years old\r\n                  </Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    <IconUser size=\"0.9rem\" style={{ marginRight: 4 }} />\r\n                    {patient.gender}\r\n                  </Text>\r\n                  {patient.bloodGroup && (\r\n                    <Text size=\"sm\" c=\"dimmed\">\r\n                      <IconHeart size=\"0.9rem\" style={{ marginRight: 4 }} />\r\n                      {patient.bloodGroup}\r\n                    </Text>\r\n                  )}\r\n                </Group>\r\n              </div>\r\n            </Group>\r\n          </Grid.Col>\r\n          \r\n          <Grid.Col span={{ base: 12, md: 4 }}>\r\n            <Stack gap=\"xs\">\r\n              <Button\r\n                fullWidth\r\n                onClick={() => onEdit?.(patient)}\r\n                leftSection={<IconEdit size=\"1rem\" />}\r\n              >\r\n                Edit Patient\r\n              </Button>\r\n              <Button\r\n                fullWidth\r\n                variant=\"outline\"\r\n                onClick={() => onScheduleAppointment?.(patient.id)}\r\n                leftSection={<IconCalendar size=\"1rem\" />}\r\n              >\r\n                Schedule Appointment\r\n              </Button>\r\n              <Group grow>\r\n                <Button\r\n                  variant=\"subtle\"\r\n                  size=\"sm\"\r\n                  leftSection={<IconDownload size=\"0.8rem\" />}\r\n                >\r\n                  Export\r\n                </Button>\r\n                <Button\r\n                  variant=\"subtle\"\r\n                  size=\"sm\"\r\n                  leftSection={<IconPrinter size=\"0.8rem\" />}\r\n                >\r\n                  Print\r\n                </Button>\r\n              </Group>\r\n            </Stack>\r\n          </Grid.Col>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      {/* Quick Stats */}\r\n      <Grid>\r\n        <Grid.Col span={{ base: 6, md: 3 }}>\r\n          <Card withBorder p=\"md\" style={{ textAlign: 'center' }}>\r\n            <ThemeIcon size=\"xl\" variant=\"light\" color=\"blue\" mb=\"sm\" mx=\"auto\">\r\n              <IconActivity size=\"1.5rem\" />\r\n            </ThemeIcon>\r\n            <Text size=\"xl\" fw={700}>{patient.totalVisits}</Text>\r\n            <Text size=\"sm\" c=\"dimmed\">Total Visits</Text>\r\n          </Card>\r\n        </Grid.Col>\r\n        \r\n        <Grid.Col span={{ base: 6, md: 3 }}>\r\n          <Card withBorder p=\"md\" style={{ textAlign: 'center' }}>\r\n            <ThemeIcon size=\"xl\" variant=\"light\" color=\"red\" mb=\"sm\" mx=\"auto\">\r\n              <IconAlertCircle size=\"1.5rem\" />\r\n            </ThemeIcon>\r\n            <Text size=\"xl\" fw={700}>{patient.allergies.length}</Text>\r\n            <Text size=\"sm\" c=\"dimmed\">Allergies</Text>\r\n          </Card>\r\n        </Grid.Col>\r\n        \r\n        <Grid.Col span={{ base: 6, md: 3 }}>\r\n          <Card withBorder p=\"md\" style={{ textAlign: 'center' }}>\r\n            <ThemeIcon size=\"xl\" variant=\"light\" color=\"orange\" mb=\"sm\" mx=\"auto\">\r\n              <IconMedicalCross size=\"1.5rem\" />\r\n            </ThemeIcon>\r\n            <Text size=\"xl\" fw={700}>{patient.chronicDiseases.length}</Text>\r\n            <Text size=\"sm\" c=\"dimmed\">Chronic Conditions</Text>\r\n          </Card>\r\n        </Grid.Col>\r\n        \r\n        <Grid.Col span={{ base: 6, md: 3 }}>\r\n          <Card withBorder p=\"md\" style={{ textAlign: 'center' }}>\r\n            <ThemeIcon size=\"xl\" variant=\"light\" color=\"green\" mb=\"sm\" mx=\"auto\">\r\n              <IconPill size=\"1.5rem\" />\r\n            </ThemeIcon>\r\n            <Text size=\"xl\" fw={700}>{patient.currentMedications.length}</Text>\r\n            <Text size=\"sm\" c=\"dimmed\">Current Medications</Text>\r\n          </Card>\r\n        </Grid.Col>\r\n      </Grid>\r\n\r\n      {/* Contact & Address */}\r\n      <Grid>\r\n        <Grid.Col span={{ base: 12, md: 6 }}>\r\n          <Paper p=\"md\" withBorder>\r\n            <Group mb=\"md\">\r\n              <IconPhone size=\"1.2rem\" />\r\n              <Title order={4}>Contact Information</Title>\r\n            </Group>\r\n            <Stack gap=\"xs\">\r\n              <Group>\r\n                <IconPhone size=\"1rem\" />\r\n                <Text>{formatPhoneNumber(patient.contactInfo.phone)}</Text>\r\n              </Group>\r\n              {patient.contactInfo.email && (\r\n                <Group>\r\n                  <IconMail size=\"1rem\" />\r\n                  <Text>{patient.contactInfo.email}</Text>\r\n                </Group>\r\n              )}\r\n              {patient.contactInfo.alternatePhone && (\r\n                <Group>\r\n                  <IconPhone size=\"1rem\" />\r\n                  <Text size=\"sm\" c=\"dimmed\">\r\n                    Alt: {formatPhoneNumber(patient.contactInfo.alternatePhone)}\r\n                  </Text>\r\n                </Group>\r\n              )}\r\n            </Stack>\r\n          </Paper>\r\n        </Grid.Col>\r\n\r\n        <Grid.Col span={{ base: 12, md: 6 }}>\r\n          <Paper p=\"md\" withBorder>\r\n            <Group mb=\"md\">\r\n              <IconMapPin size=\"1.2rem\" />\r\n              <Title order={4}>Address</Title>\r\n            </Group>\r\n            <Text size=\"sm\">\r\n              {patient.address.street}<br />\r\n              {patient.address.city}, {patient.address.state}<br />\r\n              {patient.address.postalCode}, {patient.address.country}\r\n              {patient.address.landmark && (\r\n                <>\r\n                  <br />\r\n                  <Text span c=\"dimmed\">Near: {patient.address.landmark}</Text>\r\n                </>\r\n              )}\r\n            </Text>\r\n          </Paper>\r\n        </Grid.Col>\r\n      </Grid>\r\n\r\n      {/* Medical Alerts */}\r\n      {(patient.allergies.length > 0 || patient.chronicDiseases.length > 0) && (\r\n        <Paper p=\"md\" withBorder>\r\n          <Title order={4} mb=\"md\" c=\"red\">Medical Alerts</Title>\r\n          {patient.allergies.length > 0 && (\r\n            <Alert color=\"red\" mb=\"sm\" icon={<IconAlertCircle size=\"1rem\" />}>\r\n              <Text fw={500} size=\"sm\">Allergies:</Text>\r\n              <Group gap=\"xs\" mt=\"xs\">\r\n                {patient.allergies.map((allergy, index) => (\r\n                  <Badge key={index} color=\"red\" variant=\"light\">{allergy}</Badge>\r\n                ))}\r\n              </Group>\r\n            </Alert>\r\n          )}\r\n          {patient.chronicDiseases.length > 0 && (\r\n            <Alert color=\"orange\" icon={<IconMedicalCross size=\"1rem\" />}>\r\n              <Text fw={500} size=\"sm\">Chronic Conditions:</Text>\r\n              <Group gap=\"xs\" mt=\"xs\">\r\n                {patient.chronicDiseases.map((condition, index) => (\r\n                  <Badge key={index} color=\"orange\" variant=\"light\">{condition}</Badge>\r\n                ))}\r\n              </Group>\r\n            </Alert>\r\n          )}\r\n        </Paper>\r\n      )}\r\n    </Stack>\r\n  );\r\n\r\n  // Visits Tab\r\n  const VisitsTab = () => (\r\n    <Stack gap=\"lg\">\r\n      <Group justify=\"space-between\">\r\n        <Title order={4}>Visit History</Title>\r\n        <Text size=\"sm\" c=\"dimmed\">{visits.length} visits</Text>\r\n      </Group>\r\n\r\n      {visits.length === 0 ? (\r\n        <Paper p=\"xl\" withBorder style={{ textAlign: 'center' }}>\r\n          <IconHistory size=\"3rem\" color=\"var(--mantine-color-gray-5)\" />\r\n          <Text mt=\"md\" c=\"dimmed\">No visits recorded yet</Text>\r\n        </Paper>\r\n      ) : (\r\n        <Timeline active={visits.length} bulletSize={24} lineWidth={2}>\r\n          {visits.map((visit, index) => (\r\n            <Timeline.Item\r\n              key={visit.id}\r\n              bullet={<IconStethoscope size=\"1rem\" />}\r\n              title={\r\n                <Group justify=\"space-between\">\r\n                  <Text fw={500}>{visit.chiefComplaint}</Text>\r\n                  <Badge color={\r\n                    visit.status === 'completed' ? 'green' :\r\n                    visit.status === 'in_progress' ? 'blue' :\r\n                    visit.status === 'cancelled' ? 'red' : 'gray'\r\n                  }>\r\n                    {visit.status}\r\n                  </Badge>\r\n                </Group>\r\n              }\r\n            >\r\n              <Paper p=\"md\" mt=\"xs\" withBorder>\r\n                <Grid>\r\n                  <Grid.Col span={{ base: 12, md: 6 }}>\r\n                    <Stack gap=\"xs\">\r\n                      <Group>\r\n                        <IconCalendar size=\"0.9rem\" />\r\n                        <Text size=\"sm\">{formatDate(visit.visitDate)}</Text>\r\n                      </Group>\r\n                      <Group>\r\n                        <IconUser size=\"0.9rem\" />\r\n                        <Text size=\"sm\">{visit.doctorName}</Text>\r\n                      </Group>\r\n                      <Text size=\"sm\" c=\"dimmed\">{visit.departmentName}</Text>\r\n                    </Stack>\r\n                  </Grid.Col>\r\n                  \r\n                  <Grid.Col span={{ base: 12, md: 6 }}>\r\n                    {visit.diagnosis.length > 0 && (\r\n                      <div>\r\n                        <Text size=\"sm\" fw={500} mb=\"xs\">Diagnosis:</Text>\r\n                        <List size=\"sm\">\r\n                          {visit.diagnosis.map((diag, idx) => (\r\n                            <List.Item key={idx}>{diag}</List.Item>\r\n                          ))}\r\n                        </List>\r\n                      </div>\r\n                    )}\r\n                  </Grid.Col>\r\n                </Grid>\r\n\r\n                {visit.vitals && (\r\n                  <div>\r\n                    <Divider my=\"sm\" />\r\n                    <Text size=\"sm\" fw={500} mb=\"xs\">Vitals:</Text>\r\n                    <Grid>\r\n                      <Grid.Col span={6}>\r\n                        <Text size=\"xs\" c=\"dimmed\">BP: {visit.vitals.bloodPressureSystolic}/{visit.vitals.bloodPressureDiastolic} mmHg</Text>\r\n                      </Grid.Col>\r\n                      <Grid.Col span={6}>\r\n                        <Text size=\"xs\" c=\"dimmed\">HR: {visit.vitals.heartRate} bpm</Text>\r\n                      </Grid.Col>\r\n                      <Grid.Col span={6}>\r\n                        <Text size=\"xs\" c=\"dimmed\">Temp: {visit.vitals.temperature}Â°F</Text>\r\n                      </Grid.Col>\r\n                      <Grid.Col span={6}>\r\n                        <Text size=\"xs\" c=\"dimmed\">SpO2: {visit.vitals.oxygenSaturation}%</Text>\r\n                      </Grid.Col>\r\n                    </Grid>\r\n                  </div>\r\n                )}\r\n\r\n                {visit.prescriptions.length > 0 && (\r\n                  <div>\r\n                    <Divider my=\"sm\" />\r\n                    <Text size=\"sm\" fw={500} mb=\"xs\">Prescriptions:</Text>\r\n                    <List size=\"sm\">\r\n                      {visit.prescriptions.map((rx, idx) => (\r\n                        <List.Item key={idx}>\r\n                          {rx.medicationName} - {rx.dosage} ({rx.frequency})\r\n                        </List.Item>\r\n                      ))}\r\n                    </List>\r\n                  </div>\r\n                )}\r\n\r\n                {visit.notes && (\r\n                  <div>\r\n                    <Divider my=\"sm\" />\r\n                    <Text size=\"sm\" fw={500} mb=\"xs\">Notes:</Text>\r\n                    <Text size=\"sm\" c=\"dimmed\">{visit.notes}</Text>\r\n                  </div>\r\n                )}\r\n              </Paper>\r\n            </Timeline.Item>\r\n          ))}\r\n        </Timeline>\r\n      )}\r\n    </Stack>\r\n  );\r\n\r\n  // Documents Tab\r\n  const DocumentsTab = () => (\r\n    <Stack gap=\"lg\">\r\n      <Group justify=\"space-between\">\r\n        <Title order={4}>Documents</Title>\r\n        <Button\r\n          size=\"sm\"\r\n          leftSection={<IconCloudUpload size=\"0.9rem\" />}\r\n        >\r\n          Upload Document\r\n        </Button>\r\n      </Group>\r\n\r\n      {documents.length === 0 ? (\r\n        <Paper p=\"xl\" withBorder style={{ textAlign: 'center' }}>\r\n          <IconFileText size=\"3rem\" color=\"var(--mantine-color-gray-5)\" />\r\n          <Text mt=\"md\" c=\"dimmed\">No documents uploaded yet</Text>\r\n        </Paper>\r\n      ) : (\r\n        <Grid>\r\n          {documents.map((doc) => (\r\n            <Grid.Col key={doc.id} span={{ base: 12, md: 6 }}>\r\n              <Paper p=\"md\" withBorder>\r\n                <Group justify=\"space-between\" mb=\"sm\">\r\n                  <Group>\r\n                    <IconFileText size=\"1.2rem\" />\r\n                    <div>\r\n                      <Text fw={500} size=\"sm\">{doc.title}</Text>\r\n                      <Text size=\"xs\" c=\"dimmed\">{doc.documentType.replace('_', ' ')}</Text>\r\n                    </div>\r\n                  </Group>\r\n                  <Badge color={doc.accessLevel === 'confidential' ? 'red' : 'blue'} size=\"sm\">\r\n                    {doc.accessLevel}\r\n                  </Badge>\r\n                </Group>\r\n                \r\n                {doc.description && (\r\n                  <Text size=\"sm\" c=\"dimmed\" mb=\"sm\">{doc.description}</Text>\r\n                )}\r\n                \r\n                <Group justify=\"space-between\" align=\"center\">\r\n                  <Group>\r\n                    <Text size=\"xs\" c=\"dimmed\">{formatDate(doc.uploadedAt)}</Text>\r\n                    <Text size=\"xs\" c=\"dimmed\">â€¢</Text>\r\n                    <Text size=\"xs\" c=\"dimmed\">{(doc.fileSize / 1024).toFixed(1)} KB</Text>\r\n                  </Group>\r\n                  <Group gap=\"xs\">\r\n                    <ActionIcon size=\"sm\" variant=\"subtle\">\r\n                      <IconEye size=\"0.8rem\" />\r\n                    </ActionIcon>\r\n                    <ActionIcon size=\"sm\" variant=\"subtle\">\r\n                      <IconDownload size=\"0.8rem\" />\r\n                    </ActionIcon>\r\n                  </Group>\r\n                </Group>\r\n              </Paper>\r\n            </Grid.Col>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n    </Stack>\r\n  );\r\n\r\n  // Medical History Tab\r\n  const MedicalHistoryTab = () => (\r\n    <Stack gap=\"lg\">\r\n      <Group justify=\"space-between\">\r\n        <Title order={4}>Medical History</Title>\r\n        <Button\r\n          size=\"sm\"\r\n          leftSection={<IconFileText size=\"0.9rem\" />}\r\n        >\r\n          Add History\r\n        </Button>\r\n      </Group>\r\n\r\n      {medicalHistory.length === 0 ? (\r\n        <Paper p=\"xl\" withBorder style={{ textAlign: 'center' }}>\r\n          <IconMedicalCross size=\"3rem\" color=\"var(--mantine-color-gray-5)\" />\r\n          <Text mt=\"md\" c=\"dimmed\">No medical history recorded yet</Text>\r\n        </Paper>\r\n      ) : (\r\n        <Stack gap=\"md\">\r\n          {medicalHistory.map((history) => (\r\n            <Paper key={history.id} p=\"md\" withBorder>\r\n              <Group justify=\"space-between\" mb=\"sm\">\r\n                <Group>\r\n                  <Badge color={\r\n                    history.historyType === 'allergy' ? 'red' :\r\n                    history.historyType === 'medical' ? 'blue' :\r\n                    history.historyType === 'surgical' ? 'orange' :\r\n                    history.historyType === 'family' ? 'purple' : 'gray'\r\n                  }>\r\n                    {history.historyType}\r\n                  </Badge>\r\n                  <Text fw={500}>{history.title}</Text>\r\n                </Group>\r\n                {history.severity && (\r\n                  <Badge color={\r\n                    history.severity === 'severe' ? 'red' :\r\n                    history.severity === 'moderate' ? 'orange' : 'yellow'\r\n                  } variant=\"light\">\r\n                    {history.severity}\r\n                  </Badge>\r\n                )}\r\n              </Group>\r\n              \r\n              <Text size=\"sm\" mb=\"sm\">{history.description}</Text>\r\n              \r\n              <Group>\r\n                {history.date && (\r\n                  <Text size=\"xs\" c=\"dimmed\">\r\n                    <IconCalendar size=\"0.8rem\" style={{ marginRight: 4 }} />\r\n                    {formatDate(history.date)}\r\n                  </Text>\r\n                )}\r\n                {history.doctorName && (\r\n                  <Text size=\"xs\" c=\"dimmed\">\r\n                    Dr. {history.doctorName}\r\n                  </Text>\r\n                )}\r\n              </Group>\r\n            </Paper>\r\n          ))}\r\n        </Stack>\r\n      )}\r\n    </Stack>\r\n  );\r\n\r\n  // Appointments Tab\r\n  const AppointmentsTab = () => (\r\n    <Stack gap=\"lg\">\r\n      <Group justify=\"space-between\">\r\n        <Title order={4}>Appointments</Title>\r\n        <Button\r\n          size=\"sm\"\r\n          leftSection={<IconCalendar size=\"0.9rem\" />}\r\n          onClick={() => onScheduleAppointment?.(patient.id)}\r\n        >\r\n          Schedule New\r\n        </Button>\r\n      </Group>\r\n\r\n      {appointments.length === 0 ? (\r\n        <Paper p=\"xl\" withBorder style={{ textAlign: 'center' }}>\r\n          <IconCalendar size=\"3rem\" color=\"var(--mantine-color-gray-5)\" />\r\n          <Text mt=\"md\" c=\"dimmed\">No appointments scheduled</Text>\r\n        </Paper>\r\n      ) : (\r\n        <Stack gap=\"md\">\r\n          {appointments.map((appointment) => (\r\n            <Paper key={appointment.id} p=\"md\" withBorder>\r\n              <Grid>\r\n                <Grid.Col span={{ base: 12, md: 8 }}>\r\n                  <Group mb=\"sm\">\r\n                    <Badge color={\r\n                      appointment.status === 'completed' ? 'green' :\r\n                      appointment.status === 'confirmed' ? 'blue' :\r\n                      appointment.status === 'cancelled' ? 'red' : 'gray'\r\n                    }>\r\n                      {appointment.status}\r\n                    </Badge>\r\n                    <Text fw={500}>{appointment.appointmentType.replace('_', ' ')}</Text>\r\n                  </Group>\r\n                  \r\n                  <Group>\r\n                    <IconCalendar size=\"1rem\" />\r\n                    <Text>{formatDate(appointment.appointmentDate)} at {appointment.appointmentTime}</Text>\r\n                  </Group>\r\n                  \r\n                  {appointment.chiefComplaint && (\r\n                    <Text size=\"sm\" mt=\"xs\">{appointment.chiefComplaint}</Text>\r\n                  )}\r\n                </Grid.Col>\r\n                \r\n                <Grid.Col span={{ base: 12, md: 4 }}>\r\n                  <Text size=\"sm\" c=\"dimmed\">Duration: {appointment.duration} min</Text>\r\n                  {appointment.reminderSent && (\r\n                    <Text size=\"xs\" c=\"green\">âœ“ Reminder sent</Text>\r\n                  )}\r\n                </Grid.Col>\r\n              </Grid>\r\n            </Paper>\r\n          ))}\r\n        </Stack>\r\n      )}\r\n    </Stack>\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      opened={opened}\r\n      onClose={onClose}\r\n      title={\r\n        <Group>\r\n          <IconUser size=\"1.2rem\" />\r\n          <Text fw={600}>Patient Details</Text>\r\n        </Group>\r\n      }\r\n      size=\"xl\"\r\n      scrollAreaComponent={ScrollArea.Autosize}\r\n    >\r\n      <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'overview')}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"overview\" leftSection={<IconUser size=\"0.8rem\" />}>\r\n            Overview\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"visits\" leftSection={<IconStethoscope size=\"0.8rem\" />}>\r\n            Visits ({visits.length})\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"documents\" leftSection={<IconFileText size=\"0.8rem\" />}>\r\n            Documents ({documents.length})\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"history\" leftSection={<IconHistory size=\"0.8rem\" />}>\r\n            History ({medicalHistory.length})\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"appointments\" leftSection={<IconCalendar size=\"0.8rem\" />}>\r\n            Appointments ({appointments.length})\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        <Tabs.Panel value=\"overview\" pt=\"md\">\r\n          <OverviewTab />\r\n        </Tabs.Panel>\r\n\r\n        <Tabs.Panel value=\"visits\" pt=\"md\">\r\n          <VisitsTab />\r\n        </Tabs.Panel>\r\n\r\n        <Tabs.Panel value=\"documents\" pt=\"md\">\r\n          <DocumentsTab />\r\n        </Tabs.Panel>\r\n\r\n        <Tabs.Panel value=\"history\" pt=\"md\">\r\n          <MedicalHistoryTab />\r\n        </Tabs.Panel>\r\n\r\n        <Tabs.Panel value=\"appointments\" pt=\"md\">\r\n          <AppointmentsTab />\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default PatientDetails;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\patients\\PatientExportReport.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Select' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 9,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MultiSelect' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DateInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Switch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TextInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Textarea' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ActionIcon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Menu' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'List' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPrinter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 40,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconMail' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 41,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconFilter' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 44,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSettings' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 45,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 47,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PatientSearchCriteria' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 57,
        "column": 47,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 68
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 204,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 204,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 231,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 231,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'someSelected' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 321,
        "column": 21,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 321,
        "endColumn": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 18,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Modal,\r\n  Stack,\r\n  Group,\r\n  Text,\r\n  Select,\r\n  Button,\r\n  Paper,\r\n  Title,\r\n  Grid,\r\n  Checkbox,\r\n  Alert,\r\n  Tabs,\r\n  Progress,\r\n  Badge,\r\n  Card,\r\n  Divider,\r\n  MultiSelect,\r\n  DateInput,\r\n  Switch,\r\n  TextInput,\r\n  Textarea,\r\n  ActionIcon,\r\n  Menu,\r\n  List,\r\n  Timeline,\r\n  ThemeIcon\r\n} from '@mantine/core';\r\nimport { useForm } from '@mantine/form';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport { notifications } from '@mantine/notifications';\r\nimport {\r\n  IconDownload,\r\n  IconFileExport,\r\n  // IconFilePdf, // not available\r\n  IconFileSpreadsheet,\r\n  IconPrinter,\r\n  IconMail,\r\n  IconShare,\r\n  IconCalendar,\r\n  IconFilter,\r\n  IconSettings,\r\n  IconCheck,\r\n  IconClock,\r\n  IconFileText,\r\n  IconChartBar,\r\n  IconUser,\r\n  IconStethoscope,\r\n  IconShield,\r\n  IconHistory,\r\n  IconAlertCircle,\r\n  IconReportAnalytics\r\n} from '@tabler/icons-react';\r\nimport { PatientExportOptions, PatientReport, PatientSearchCriteria } from '../../types/patient';\r\n\r\ninterface PatientExportReportProps {\r\n  opened: boolean;\r\n  onClose: () => void;\r\n  onExport: (options: PatientExportOptions) => Promise<void>;\r\n  onGenerateReport: (reportType: string, patientIds?: string[]) => Promise<PatientReport>;\r\n  patientCount: number;\r\n  selectedPatientIds?: string[];\r\n}\r\n\r\nconst exportFormats = [\r\n  { value: 'csv', label: 'CSV File', icon: <IconFileText size=\"1rem\" /> },\r\n  { value: 'excel', label: 'Excel Spreadsheet', icon: <IconFileSpreadsheet size=\"1rem\" /> },\r\n  { value: 'pdf', label: 'PDF Document', icon: <IconFileText size=\"1rem\" /> }\r\n];\r\n\r\nconst availableFields = [\r\n  { group: 'Basic Information', fields: [\r\n    { value: 'patientId', label: 'Patient ID' },\r\n    { value: 'firstName', label: 'First Name' },\r\n    { value: 'lastName', label: 'Last Name' },\r\n    { value: 'age', label: 'Age' },\r\n    { value: 'gender', label: 'Gender' },\r\n    { value: 'dateOfBirth', label: 'Date of Birth' },\r\n    { value: 'bloodGroup', label: 'Blood Group' },\r\n    { value: 'maritalStatus', label: 'Marital Status' }\r\n  ]},\r\n  { group: 'Contact Information', fields: [\r\n    { value: 'phone', label: 'Phone Number' },\r\n    { value: 'email', label: 'Email Address' },\r\n    { value: 'address', label: 'Address' },\r\n    { value: 'emergencyContact', label: 'Emergency Contact' }\r\n  ]},\r\n  { group: 'Medical Information', fields: [\r\n    { value: 'allergies', label: 'Allergies' },\r\n    { value: 'chronicDiseases', label: 'Chronic Diseases' },\r\n    { value: 'currentMedications', label: 'Current Medications' },\r\n    { value: 'lastVisitDate', label: 'Last Visit Date' },\r\n    { value: 'totalVisits', label: 'Total Visits' }\r\n  ]},\r\n  { group: 'Insurance Information', fields: [\r\n    { value: 'insuranceProvider', label: 'Insurance Provider' },\r\n    { value: 'policyNumber', label: 'Policy Number' },\r\n    { value: 'coverageAmount', label: 'Coverage Amount' },\r\n    { value: 'insuranceType', label: 'Insurance Type' }\r\n  ]},\r\n  { group: 'System Information', fields: [\r\n    { value: 'registrationDate', label: 'Registration Date' },\r\n    { value: 'status', label: 'Status' },\r\n    { value: 'createdBy', label: 'Created By' },\r\n    { value: 'updatedAt', label: 'Last Updated' }\r\n  ]}\r\n];\r\n\r\nconst reportTypes = [\r\n  {\r\n    type: 'demographics',\r\n    title: 'Demographics Report',\r\n    description: 'Statistical breakdown of patient demographics including age groups, gender distribution, and geographic data',\r\n    icon: <IconUser size=\"1.2rem\" />,\r\n    color: 'blue'\r\n  },\r\n  {\r\n    type: 'visit_summary',\r\n    title: 'Visit Summary Report',\r\n    description: 'Comprehensive analysis of patient visits, appointment patterns, and healthcare utilization',\r\n    icon: <IconStethoscope size=\"1.2rem\" />,\r\n    color: 'green'\r\n  },\r\n  {\r\n    type: 'medical_summary',\r\n    title: 'Medical Summary Report',\r\n    description: 'Overview of medical conditions, treatments, medications, and health outcomes',\r\n    icon: <IconHistory size=\"1.2rem\" />,\r\n    color: 'orange'\r\n  },\r\n  {\r\n    type: 'insurance_summary',\r\n    title: 'Insurance Summary Report',\r\n    description: 'Analysis of insurance coverage, billing patterns, and payment trends',\r\n    icon: <IconShield size=\"1.2rem\" />,\r\n    color: 'purple'\r\n  }\r\n];\r\n\r\nexport default function PatientExportReport({\r\n  opened,\r\n  onClose,\r\n  onExport,\r\n  onGenerateReport,\r\n  patientCount,\r\n  selectedPatientIds = []\r\n}: PatientExportReportProps) {\r\n  const [activeTab, setActiveTab] = useState('export');\r\n  const [loading, setLoading] = useState(false);\r\n  const [exportProgress, setExportProgress] = useState(0);\r\n  const [generatingReport, setGeneratingReport] = useState<string | null>(null);\r\n\r\n  const exportForm = useForm<PatientExportOptions>({\r\n    initialValues: {\r\n      format: 'csv',\r\n      includeFields: ['patientId', 'firstName', 'lastName', 'phone', 'email', 'registrationDate'],\r\n      includeVisitHistory: false,\r\n      includeMedicalHistory: false,\r\n      includeDocuments: false,\r\n      dateRange: undefined\r\n    },\r\n    validate: {\r\n      format: (value) => (!value ? 'Export format is required' : null),\r\n      includeFields: (value) => (!value.length ? 'At least one field must be selected' : null)\r\n    }\r\n  });\r\n\r\n  const handleExport = async (values: PatientExportOptions) => {\r\n    try {\r\n      setLoading(true);\r\n      setExportProgress(0);\r\n\r\n      // Simulate progress updates\r\n      const progressInterval = setInterval(() => {\r\n        setExportProgress(prev => {\r\n          if (prev >= 90) {\r\n            clearInterval(progressInterval);\r\n            return prev;\r\n          }\r\n          return prev + 10;\r\n        });\r\n      }, 200);\r\n\r\n      await onExport(values);\r\n      \r\n      clearInterval(progressInterval);\r\n      setExportProgress(100);\r\n\r\n      notifications.show({\r\n        title: 'Export Successful',\r\n        message: `Patient data has been exported to ${values.format.toUpperCase()} format successfully.`,\r\n        color: 'green',\r\n        icon: <IconCheck size=\"1rem\" />\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setExportProgress(0);\r\n        onClose();\r\n      }, 1000);\r\n\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Export Failed',\r\n        message: 'Failed to export patient data. Please try again.',\r\n        color: 'red',\r\n        icon: <IconAlertCircle size=\"1rem\" />\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleGenerateReport = async (reportType: string) => {\r\n    try {\r\n      setGeneratingReport(reportType);\r\n      const report = await onGenerateReport(reportType, selectedPatientIds);\r\n      \r\n      notifications.show({\r\n        title: 'Report Generated',\r\n        message: `${reportTypes.find(r => r.type === reportType)?.title} has been generated successfully.`,\r\n        color: 'green',\r\n        icon: <IconCheck size=\"1rem\" />\r\n      });\r\n\r\n      // In a real application, this would typically open or download the report\r\n      console.log('Generated report:', report);\r\n\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Report Generation Failed',\r\n        message: 'Failed to generate report. Please try again.',\r\n        color: 'red',\r\n        icon: <IconAlertCircle size=\"1rem\" />\r\n      });\r\n    } finally {\r\n      setGeneratingReport(null);\r\n    }\r\n  };\r\n\r\n  const selectAllFields = (groupFields: string[]) => {\r\n    const currentFields = exportForm.values.includeFields;\r\n    const allGroupSelected = groupFields.every(field => currentFields.includes(field));\r\n    \r\n    if (allGroupSelected) {\r\n      // Deselect all from this group\r\n      exportForm.setFieldValue('includeFields', currentFields.filter(field => !groupFields.includes(field)));\r\n    } else {\r\n      // Select all from this group\r\n      const newFields = [...new Set([...currentFields, ...groupFields])];\r\n      exportForm.setFieldValue('includeFields', newFields);\r\n    }\r\n  };\r\n\r\n  const getSelectedFieldsCount = () => exportForm.values.includeFields.length;\r\n\r\n  // Export Tab\r\n  const ExportTab = () => (\r\n    <form onSubmit={exportForm.onSubmit(handleExport)}>\r\n      <Stack gap=\"lg\">\r\n        {/* Export Summary */}\r\n        <Alert icon={<IconFileExport size=\"1rem\" />} color=\"blue\">\r\n          <Group justify=\"space-between\">\r\n            <Text size=\"sm\">\r\n              Ready to export {selectedPatientIds.length > 0 ? selectedPatientIds.length : patientCount} patient records\r\n            </Text>\r\n            <Badge variant=\"light\">\r\n              {getSelectedFieldsCount()} fields selected\r\n            </Badge>\r\n          </Group>\r\n        </Alert>\r\n\r\n        {/* Format Selection */}\r\n        <Paper p=\"md\" withBorder>\r\n          <Title order={4} mb=\"md\">Export Format</Title>\r\n          <Grid>\r\n            {exportFormats.map((format) => (\r\n              <Grid.Col key={format.value} span={{ base: 12, md: 4 }}>\r\n                <Card\r\n                  withBorder\r\n                  p=\"md\"\r\n                  style={{\r\n                    cursor: 'pointer',\r\n                    backgroundColor: exportForm.values.format === format.value ? 'var(--mantine-color-blue-0)' : undefined,\r\n                    borderColor: exportForm.values.format === format.value ? 'var(--mantine-color-blue-5)' : undefined\r\n                  }}\r\n                  onClick={() => exportForm.setFieldValue('format', format.value as any)}\r\n                >\r\n                  <Group>\r\n                    <ThemeIcon\r\n                      variant={exportForm.values.format === format.value ? 'filled' : 'light'}\r\n                      color=\"blue\"\r\n                    >\r\n                      {format.icon}\r\n                    </ThemeIcon>\r\n                    <div>\r\n                      <Text fw={500} size=\"sm\">{format.label}</Text>\r\n                    </div>\r\n                  </Group>\r\n                </Card>\r\n              </Grid.Col>\r\n            ))}\r\n          </Grid>\r\n        </Paper>\r\n\r\n        {/* Field Selection */}\r\n        <Paper p=\"md\" withBorder>\r\n          <Group justify=\"space-between\" mb=\"md\">\r\n            <Title order={4}>Select Fields to Export</Title>\r\n            <Text size=\"sm\" c=\"dimmed\">\r\n              {getSelectedFieldsCount()} of {availableFields.reduce((sum, group) => sum + group.fields.length, 0)} fields selected\r\n            </Text>\r\n          </Group>\r\n          \r\n          <Stack gap=\"md\">\r\n            {availableFields.map((group) => {\r\n              const groupFields = group.fields.map(f => f.value);\r\n              const allSelected = groupFields.every(field => exportForm.values.includeFields.includes(field));\r\n              const someSelected = groupFields.some(field => exportForm.values.includeFields.includes(field));\r\n              \r\n              return (\r\n                <div key={group.group}>\r\n                  <Group justify=\"space-between\" mb=\"sm\">\r\n                    <Text fw={500} size=\"sm\">{group.group}</Text>\r\n                    <Button\r\n                      variant=\"subtle\"\r\n                      size=\"xs\"\r\n                      onClick={() => selectAllFields(groupFields)}\r\n                    >\r\n                      {allSelected ? 'Deselect All' : 'Select All'}\r\n                    </Button>\r\n                  </Group>\r\n                  <Grid>\r\n                    {group.fields.map((field) => (\r\n                      <Grid.Col key={field.value} span={{ base: 12, md: 6 }}>\r\n                        <Checkbox\r\n                          label={field.label}\r\n                          checked={exportForm.values.includeFields.includes(field.value)}\r\n                          onChange={(event) => {\r\n                            const currentFields = exportForm.values.includeFields;\r\n                            if (event.currentTarget.checked) {\r\n                              exportForm.setFieldValue('includeFields', [...currentFields, field.value]);\r\n                            } else {\r\n                              exportForm.setFieldValue('includeFields', currentFields.filter(f => f !== field.value));\r\n                            }\r\n                          }}\r\n                        />\r\n                      </Grid.Col>\r\n                    ))}\r\n                  </Grid>\r\n                  {group !== availableFields[availableFields.length - 1] && <Divider mt=\"md\" />}\r\n                </div>\r\n              );\r\n            })}\r\n          </Stack>\r\n        </Paper>\r\n\r\n        {/* Additional Options */}\r\n        <Paper p=\"md\" withBorder>\r\n          <Title order={4} mb=\"md\">Additional Data</Title>\r\n          <Stack gap=\"sm\">\r\n            <Checkbox\r\n              label=\"Include Visit History\"\r\n              description=\"Export patient visit records and medical encounters\"\r\n              {...exportForm.getInputProps('includeVisitHistory', { type: 'checkbox' })}\r\n            />\r\n            <Checkbox\r\n              label=\"Include Medical History\"\r\n              description=\"Export medical history, allergies, and chronic conditions\"\r\n              {...exportForm.getInputProps('includeMedicalHistory', { type: 'checkbox' })}\r\n            />\r\n            <Checkbox\r\n              label=\"Include Documents\"\r\n              description=\"Export patient document references and metadata\"\r\n              {...exportForm.getInputProps('includeDocuments', { type: 'checkbox' })}\r\n            />\r\n          </Stack>\r\n        </Paper>\r\n\r\n        {/* Date Range Filter */}\r\n        <Paper p=\"md\" withBorder>\r\n          <Title order={4} mb=\"md\">Date Range Filter (Optional)</Title>\r\n          <Grid>\r\n            <Grid.Col span={{ base: 12, md: 6 }}>\r\n              <DatePickerInput\r\n                label=\"Start Date\"\r\n                placeholder=\"Select start date\"\r\n                value={exportForm.values.dateRange?.startDate}\r\n                onChange={(date) => exportForm.setFieldValue('dateRange.startDate', date)}\r\n                leftSection={<IconCalendar size=\"1rem\" />}\r\n              />\r\n            </Grid.Col>\r\n            <Grid.Col span={{ base: 12, md: 6 }}>\r\n              <DatePickerInput\r\n                label=\"End Date\"\r\n                placeholder=\"Select end date\"\r\n                value={exportForm.values.dateRange?.endDate}\r\n                onChange={(date) => exportForm.setFieldValue('dateRange.endDate', date)}\r\n                leftSection={<IconCalendar size=\"1rem\" />}\r\n              />\r\n            </Grid.Col>\r\n          </Grid>\r\n        </Paper>\r\n\r\n        {/* Export Progress */}\r\n        {loading && (\r\n          <Paper p=\"md\" withBorder>\r\n            <Group justify=\"space-between\" mb=\"sm\">\r\n              <Text fw={500}>Exporting Data...</Text>\r\n              <Text size=\"sm\" c=\"dimmed\">{exportProgress}%</Text>\r\n            </Group>\r\n            <Progress value={exportProgress} animated />\r\n          </Paper>\r\n        )}\r\n\r\n        {/* Action Buttons */}\r\n        <Group justify=\"flex-end\" mt=\"xl\">\r\n          <Button variant=\"outline\" onClick={onClose} disabled={loading}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            loading={loading}\r\n            leftSection={<IconDownload size=\"1rem\" />}\r\n          >\r\n            Export Data\r\n          </Button>\r\n        </Group>\r\n      </Stack>\r\n    </form>\r\n  );\r\n\r\n  // Reports Tab\r\n  const ReportsTab = () => (\r\n    <Stack gap=\"lg\">\r\n      <Alert icon={<IconReportAnalytics size=\"1rem\" />} color=\"blue\">\r\n        Generate comprehensive reports with insights and analytics about your patient data.\r\n      </Alert>\r\n\r\n      <Grid>\r\n        {reportTypes.map((report) => (\r\n          <Grid.Col key={report.type} span={{ base: 12, md: 6 }}>\r\n            <Card withBorder p=\"lg\" h=\"100%\">\r\n              <Group align=\"flex-start\" mb=\"md\">\r\n                <ThemeIcon size=\"xl\" variant=\"light\" color={report.color}>\r\n                  {report.icon}\r\n                </ThemeIcon>\r\n                <div style={{ flex: 1 }}>\r\n                  <Text fw={600} mb=\"xs\">{report.title}</Text>\r\n                  <Text size=\"sm\" c=\"dimmed\">{report.description}</Text>\r\n                </div>\r\n              </Group>\r\n              \r\n              <Group justify=\"space-between\" mt=\"auto\">\r\n                <Badge variant=\"light\" color={report.color}>\r\n                  {selectedPatientIds.length > 0 ? selectedPatientIds.length : patientCount} patients\r\n                </Badge>\r\n                <Button\r\n                  size=\"sm\"\r\n                  variant=\"light\"\r\n                  color={report.color}\r\n                  loading={generatingReport === report.type}\r\n                  onClick={() => handleGenerateReport(report.type)}\r\n                  leftSection={<IconDownload size=\"0.8rem\" />}\r\n                >\r\n                  Generate\r\n                </Button>\r\n              </Group>\r\n            </Card>\r\n          </Grid.Col>\r\n        ))}\r\n      </Grid>\r\n\r\n      {/* Report History */}\r\n      <Paper p=\"md\" withBorder>\r\n        <Title order={4} mb=\"md\">Recent Reports</Title>\r\n        <Timeline active={1} bulletSize={24} lineWidth={2}>\r\n          <Timeline.Item bullet={<IconFileText size=\"0.8rem\" />} title=\"Demographics Report\">\r\n            <Text c=\"dimmed\" size=\"sm\">Generated on March 15, 2024</Text>\r\n            <Text size=\"sm\" mt={4}>Complete demographic analysis with 2,847 patients</Text>\r\n            <Group mt=\"xs\">\r\n              <Button variant=\"subtle\" size=\"xs\" leftSection={<IconDownload size=\"0.7rem\" />}>\r\n                Download\r\n              </Button>\r\n              <Button variant=\"subtle\" size=\"xs\" leftSection={<IconShare size=\"0.7rem\" />}>\r\n                Share\r\n              </Button>\r\n            </Group>\r\n          </Timeline.Item>\r\n          \r\n          <Timeline.Item bullet={<IconFileSpreadsheet size=\"0.8rem\" />} title=\"Visit Summary Report\">\r\n            <Text c=\"dimmed\" size=\"sm\">Generated on March 10, 2024</Text>\r\n            <Text size=\"sm\" mt={4}>Monthly visit analysis and appointment trends</Text>\r\n            <Group mt=\"xs\">\r\n              <Button variant=\"subtle\" size=\"xs\" leftSection={<IconDownload size=\"0.7rem\" />}>\r\n                Download\r\n              </Button>\r\n              <Button variant=\"subtle\" size=\"xs\" leftSection={<IconShare size=\"0.7rem\" />}>\r\n                Share\r\n              </Button>\r\n            </Group>\r\n          </Timeline.Item>\r\n          \r\n          <Timeline.Item bullet={<IconChartBar size=\"0.8rem\" />} title=\"Insurance Analysis\">\r\n            <Text c=\"dimmed\" size=\"sm\">Generated on March 5, 2024</Text>\r\n            <Text size=\"sm\" mt={4}>Insurance coverage and billing analysis</Text>\r\n            <Group mt=\"xs\">\r\n              <Button variant=\"subtle\" size=\"xs\" leftSection={<IconDownload size=\"0.7rem\" />}>\r\n                Download\r\n              </Button>\r\n              <Button variant=\"subtle\" size=\"xs\" leftSection={<IconShare size=\"0.7rem\" />}>\r\n                Share\r\n              </Button>\r\n            </Group>\r\n          </Timeline.Item>\r\n        </Timeline>\r\n      </Paper>\r\n    </Stack>\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      opened={opened}\r\n      onClose={onClose}\r\n      title={\r\n        <Group>\r\n          <IconFileExport size=\"1.2rem\" />\r\n          <Text fw={600}>Export & Reports</Text>\r\n        </Group>\r\n      }\r\n      size=\"xl\"\r\n    >\r\n      <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'export')}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"export\" leftSection={<IconDownload size=\"0.8rem\" />}>\r\n            Export Data\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"reports\" leftSection={<IconReportAnalytics size=\"0.8rem\" />}>\r\n            Generate Reports\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        <Tabs.Panel value=\"export\" pt=\"md\">\r\n          <ExportTab />\r\n        </Tabs.Panel>\r\n\r\n        <Tabs.Panel value=\"reports\" pt=\"md\">\r\n          <ReportsTab />\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n    </Modal>\r\n  );\r\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\patients\\PatientForm.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Tabs' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Checkbox' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Badge' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Switch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 37,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconPlus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 44,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconEye' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 47,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'InsuranceInfo' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 56,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 56,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ContactInfo' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Address' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 63,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 63,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'formatPhoneNumber' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isValidPhoneNumber' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 65,
        "column": 43,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 61
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'loading' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 89,
        "column": 60,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 67
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 213,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 213,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 359,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 359,
        "endColumn": 19
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook React.useMemo has an unnecessary dependency: 'uploading'. Either exclude it or remove the dependency array.",
        "line": 797,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 797,
        "endColumn": 32,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [uploadedFiles]",
            "fix": { "range": [25494, 25520], "text": "[uploadedFiles]" }
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",
        "line": 196,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 196,
        "endColumn": 23,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [patient, opened, form]",
            "fix": { "range": [5426, 5443], "text": "[patient, opened, form]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 17,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Modal,\r\n  Stack,\r\n  Group,\r\n  Text,\r\n  TextInput,\r\n  Select,\r\n  Textarea,\r\n  Button,\r\n  Grid,\r\n  Paper,\r\n  Title,\r\n  Divider,\r\n  Alert,\r\n  Tabs,\r\n  FileInput,\r\n  Checkbox,\r\n  NumberInput,\r\n  Badge,\r\n  ActionIcon,\r\n  Tooltip,\r\n  Switch,\r\n  TagsInput,\r\n  Stepper,\r\n  LoadingOverlay,\r\n  Card\r\n} from '@mantine/core';\r\nimport { useForm } from '@mantine/form';\r\nimport { useDisclosure } from '@mantine/hooks';\r\nimport { DatePickerInput } from '@mantine/dates';\r\nimport {\r\n  IconUsers,\r\n  IconCheck,\r\n  IconX,\r\n  IconAlertCircle,\r\n  IconPhone,\r\n  IconMail,\r\n  IconMapPin,\r\n  IconShieldX,\r\n  IconFileText,\r\n  IconPlus,\r\n  IconTrash,\r\n  IconCloudUpload,\r\n  IconEye,\r\n  IconCalendar,\r\n  IconUpload\r\n} from '@tabler/icons-react';\r\nimport { notifications } from '@mantine/notifications';\r\nimport { \r\n  CreatePatientDto, \r\n  UpdatePatientDto, \r\n  Patient, \r\n  InsuranceInfo \r\n} from '../../types/patient';\r\nimport { \r\n  Gender, \r\n  BloodGroup, \r\n  MaritalStatus, \r\n  ContactInfo, \r\n  Address \r\n} from '../../types/common';\r\nimport { formatPhoneNumber, isValidEmail, isValidPhoneNumber } from '../../lib/utils';\r\n\r\ninterface PatientFormProps {\r\n  opened: boolean;\r\n  onClose: () => void;\r\n  patient?: Patient | null;\r\n  onSubmit: (data: CreatePatientDto | UpdatePatientDto) => Promise<void>;\r\n  loading?: boolean;\r\n}\r\n\r\ninterface FormStep {\r\n  label: string;\r\n  description: string;\r\n}\r\n\r\nconst steps: FormStep[] = [\r\n  { label: 'Basic Info', description: 'Personal information' },\r\n  { label: 'Contact', description: 'Contact details' },\r\n  { label: 'Medical', description: 'Medical history' },\r\n  { label: 'Insurance', description: 'Insurance information' },\r\n  { label: 'Documents', description: 'Upload documents' },\r\n  { label: 'Review & Submit', description: 'Review and submit' }\r\n];\r\n\r\nfunction PatientForm({ opened, onClose, patient, onSubmit, loading = false }: PatientFormProps) {\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\r\n  const [formLoading, { open: startLoading, close: stopLoading }] = useDisclosure(false);\r\n\r\n  // Form initialization\r\n  const form = useForm<CreatePatientDto>({\r\n    initialValues: {\r\n      firstName: '',\r\n      lastName: '',\r\n      middleName: '',\r\n      dateOfBirth: new Date(),\r\n      gender: Gender.MALE,\r\n      bloodGroup: undefined,\r\n      maritalStatus: undefined,\r\n      contactInfo: {\r\n        phone: '',\r\n        email: '',\r\n        alternatePhone: '',\r\n        emergencyContact: {\r\n          name: '',\r\n          phone: '',\r\n          relationship: ''\r\n        }\r\n      },\r\n      address: {\r\n        street: '',\r\n        city: '',\r\n        state: '',\r\n        country: 'India',\r\n        postalCode: '',\r\n        landmark: ''\r\n      },\r\n      insuranceInfo: {\r\n        insuranceType: undefined,\r\n        insuranceProvider: '',\r\n        policyNumber: '',\r\n        policyHolderName: '',\r\n        relationshipToPatient: '',\r\n        coverageAmount: undefined,\r\n        isActive: false\r\n      },\r\n      aadhaarNumber: '',\r\n      otherIdNumber: '',\r\n      otherIdType: undefined,\r\n      allergies: [],\r\n      chronicDiseases: [],\r\n      currentMedications: [],\r\n      occupation: '',\r\n      religion: '',\r\n      language: '',\r\n      notes: ''\r\n    },\r\n    validate: {\r\n      firstName: (value) => (value.trim().length < 2 ? 'First name must be at least 2 characters' : null),\r\n      lastName: (value) => (value.trim().length < 2 ? 'Last name must be at least 2 characters' : null),\r\n      middleName: (value) => {\r\n        if (value && value.trim().length > 0 && value.trim().length < 2) {\r\n          return 'Middle name must be at least 2 characters if provided';\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  });\r\n\r\n  // Load patient data if editing\r\n  useEffect(() => {\r\n    if (patient && opened) {\r\n      // Reset to first step when editing\r\n      setActiveStep(0);\r\n      form.setValues({\r\n        firstName: patient.firstName,\r\n        lastName: patient.lastName,\r\n        middleName: '', // Add middleName when loading patient data\r\n        dateOfBirth: patient.dateOfBirth,\r\n        gender: patient.gender,\r\n        bloodGroup: patient.bloodGroup,\r\n        maritalStatus: patient.maritalStatus,\r\n        contactInfo: patient.contactInfo,\r\n        address: patient.address,\r\n        insuranceInfo: patient.insuranceInfo || {\r\n          insuranceType: undefined,\r\n          insuranceProvider: '',\r\n          policyNumber: '',\r\n          policyHolderName: '',\r\n          relationshipToPatient: '',\r\n          coverageAmount: undefined,\r\n          isActive: false\r\n        },\r\n        aadhaarNumber: patient.aadhaarNumber || '',\r\n        otherIdNumber: patient.otherIdNumber || '',\r\n        otherIdType: patient.otherIdType,\r\n        allergies: patient.allergies || [],\r\n        chronicDiseases: patient.chronicDiseases || [],\r\n        currentMedications: patient.currentMedications || [],\r\n        occupation: patient.occupation || '',\r\n        religion: patient.religion || '',\r\n        language: patient.language || '',\r\n        notes: patient.notes || ''\r\n      });\r\n    } else if (!patient && opened) {\r\n      // Reset to first step for new patient\r\n      setActiveStep(0);\r\n      form.reset();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [patient, opened]);\r\n\r\n  const handleSubmit = async (values: CreatePatientDto) => {\r\n    try {\r\n      startLoading();\r\n      const submitData = patient \r\n        ? { ...values, id: patient.id } as UpdatePatientDto\r\n        : values;\r\n      await onSubmit(submitData);\r\n      \r\n      notifications.show({\r\n        title: patient ? 'Patient Updated' : 'Patient Created',\r\n        message: `Patient ${values.firstName} ${values.lastName} has been ${patient ? 'updated' : 'created'} successfully.`,\r\n        color: 'green'\r\n      });\r\n      \r\n      handleClose();\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: `Failed to ${patient ? 'update' : 'create'} patient. Please try again.`,\r\n        color: 'red'\r\n      });\r\n    } finally {\r\n      stopLoading();\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    form.reset();\r\n    setActiveStep(0);\r\n    setUploadedFiles([]);\r\n    onClose();\r\n  };\r\n\r\n  const nextStep = () => {\r\n    const currentStepValid = validateCurrentStep();\r\n    if (currentStepValid) {\r\n      setActiveStep((current) => (current < steps.length - 1 ? current + 1 : current));\r\n    }\r\n  };\r\n\r\n  const prevStep = () => {\r\n    setActiveStep((current) => (current > 0 ? current - 1 : current));\r\n  };\r\n\r\n  const validateCurrentStep = (): boolean => {\r\n    switch (activeStep) {\r\n      case 0: // Basic Info\r\n        if (!form.values.firstName || form.values.firstName.trim().length < 2) {\r\n          notifications.show({\r\n            title: 'Validation Error',\r\n            message: 'First name must be at least 2 characters',\r\n            color: 'red',\r\n            icon: <IconAlertCircle />\r\n          });\r\n          return false;\r\n        }\r\n        if (!form.values.lastName || form.values.lastName.trim().length < 2) {\r\n          notifications.show({\r\n            title: 'Validation Error',\r\n            message: 'Last name must be at least 2 characters',\r\n            color: 'red',\r\n            icon: <IconAlertCircle />\r\n          });\r\n          return false;\r\n        }\r\n        if (!form.values.dateOfBirth) {\r\n          notifications.show({\r\n            title: 'Validation Error',\r\n            message: 'Date of birth is required',\r\n            color: 'red',\r\n            icon: <IconAlertCircle />\r\n          });\r\n          return false;\r\n        }\r\n        return true;\r\n      case 1: // Contact\r\n        // More lenient phone validation - just check if it has enough digits\r\n        const phoneDigits = form.values.contactInfo.phone.replace(/\\D/g, '');\r\n        if (!form.values.contactInfo.phone || phoneDigits.length < 10) {\r\n          notifications.show({\r\n            title: 'Validation Error',\r\n            message: 'Please enter a valid 10-digit phone number',\r\n            color: 'red',\r\n            icon: <IconAlertCircle />\r\n          });\r\n          return false;\r\n        }\r\n        if (form.values.contactInfo.email && !isValidEmail(form.values.contactInfo.email)) {\r\n          notifications.show({\r\n            title: 'Validation Error',\r\n            message: 'Please enter a valid email address',\r\n            color: 'red',\r\n            icon: <IconAlertCircle />\r\n          });\r\n          return false;\r\n        }\r\n        if (!form.values.address.street || form.values.address.street.trim().length < 3) {\r\n          notifications.show({\r\n            title: 'Validation Error',\r\n            message: 'Street address is required (minimum 3 characters)',\r\n            color: 'red',\r\n            icon: <IconAlertCircle />\r\n          });\r\n          return false;\r\n        }\r\n        if (!form.values.address.city || form.values.address.city.trim().length < 2) {\r\n          notifications.show({\r\n            title: 'Validation Error',\r\n            message: 'City is required',\r\n            color: 'red',\r\n            icon: <IconAlertCircle />\r\n          });\r\n          return false;\r\n        }\r\n        if (!form.values.address.state || form.values.address.state.trim().length < 2) {\r\n          notifications.show({\r\n            title: 'Validation Error',\r\n            message: 'State is required',\r\n            color: 'red',\r\n            icon: <IconAlertCircle />\r\n          });\r\n          return false;\r\n        }\r\n        if (!form.values.address.postalCode || form.values.address.postalCode.trim().length < 4) {\r\n          notifications.show({\r\n            title: 'Validation Error',\r\n            message: 'Postal code is required (minimum 4 characters)',\r\n            color: 'red',\r\n            icon: <IconAlertCircle />\r\n          });\r\n          return false;\r\n        }\r\n        return true;\r\n      case 2: // Medical\r\n        return true; // Medical info is optional\r\n      case 3: // Insurance\r\n        return true; // Insurance is optional\r\n      case 4: // Documents\r\n        return true; // Documents are optional\r\n      case 5: // Review & Submit\r\n        return true; // Review & Submit is optional\r\n      default:\r\n        return true;\r\n    }\r\n  };\r\n\r\n  const handleFileUpload = async (files: File | File[] | null) => {\r\n    if (!files) return;\r\n    const fileArray = Array.isArray(files) ? files : [files];\r\n    if (!fileArray.length) return;\r\n    \r\n    setUploading(true);\r\n    try {\r\n      // Simulate file upload\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      setUploadedFiles(prev => [...prev, ...fileArray]);\r\n      notifications.show({\r\n        title: 'Files Uploaded',\r\n        message: `${fileArray.length} file(s) uploaded successfully.`,\r\n        color: 'green'\r\n      });\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Upload Failed',\r\n        message: 'Failed to upload files. Please try again.',\r\n        color: 'red'\r\n      });\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  const removeUploadedFile = (index: number) => {\r\n    setUploadedFiles(prev => prev.filter((_, i) => i !== index));\r\n  };\r\n\r\n  // Step 1: Basic Information\r\n  const BasicInfoStep = React.useMemo(() => (\r\n    <Grid>\r\n      <Grid.Col span={{ base: 12, md: 6 }}>\r\n        <TextInput\r\n          label=\"First Name\"\r\n          placeholder=\"Enter first name\"\r\n          required\r\n          {...form.getInputProps('firstName')}\r\n        />\r\n      </Grid.Col>\r\n      <Grid.Col span={{ base: 12, md: 6 }}>\r\n        <TextInput\r\n          label=\"Last Name\"\r\n          placeholder=\"Enter last name\"\r\n          required\r\n          {...form.getInputProps('lastName')}\r\n        />\r\n      </Grid.Col>\r\n      \r\n      <Grid.Col span={{ base: 12, md: 6 }}>\r\n        <DatePickerInput\r\n          label=\"Date of Birth\"\r\n          placeholder=\"Select date of birth\"\r\n          required\r\n          maxDate={new Date()}\r\n          {...form.getInputProps('dateOfBirth')}\r\n          leftSection={<IconCalendar size=\"1rem\" />}\r\n        />\r\n      </Grid.Col>\r\n      <Grid.Col span={{ base: 12, md: 6 }}>\r\n        <Select\r\n          label=\"Gender\"\r\n          placeholder=\"Select gender\"\r\n          required\r\n          data={[\r\n            { value: Gender.MALE, label: 'Male' },\r\n            { value: Gender.FEMALE, label: 'Female' },\r\n            { value: Gender.OTHER, label: 'Other' }\r\n          ]}\r\n          {...form.getInputProps('gender')}\r\n        />\r\n      </Grid.Col>\r\n\r\n      <Grid.Col span={{ base: 12, md: 6 }}>\r\n        <Select\r\n          label=\"Blood Group\"\r\n          placeholder=\"Select blood group\"\r\n          data={Object.values(BloodGroup).map(bg => ({ value: bg, label: bg }))}\r\n          {...form.getInputProps('bloodGroup')}\r\n          clearable\r\n        />\r\n      </Grid.Col>\r\n      <Grid.Col span={{ base: 12, md: 6 }}>\r\n        <Select\r\n          label=\"Marital Status\"\r\n          placeholder=\"Select marital status\"\r\n          data={Object.values(MaritalStatus).map(ms => ({ value: ms, label: ms.replace('_', ' ') }))}\r\n          {...form.getInputProps('maritalStatus')}\r\n          clearable\r\n        />\r\n      </Grid.Col>\r\n\r\n      <Grid.Col span={{ base: 12, md: 6 }}>\r\n        <TextInput\r\n          label=\"Occupation\"\r\n          placeholder=\"Enter occupation\"\r\n          {...form.getInputProps('occupation')}\r\n        />\r\n      </Grid.Col>\r\n      <Grid.Col span={{ base: 12, md: 6 }}>\r\n        <TextInput\r\n          label=\"Religion\"\r\n          placeholder=\"Enter religion\"\r\n          {...form.getInputProps('religion')}\r\n        />\r\n      </Grid.Col>\r\n\r\n      <Grid.Col span={12}>\r\n        <TextInput\r\n          label=\"Languages Known\"\r\n          placeholder=\"Enter languages (comma separated)\"\r\n          {...form.getInputProps('language')}\r\n        />\r\n      </Grid.Col>\r\n    </Grid>\r\n  ), [form]);\r\n\r\n  // Step 2: Contact Information\r\n  const ContactInfoStep = React.useMemo(() => (\r\n    <Stack gap=\"lg\">\r\n      <Paper p=\"md\" withBorder>\r\n        <Group mb=\"md\">\r\n          <IconPhone size=\"1.2rem\" />\r\n          <Title order={4}>Primary Contact</Title>\r\n        </Group>\r\n        <Grid>\r\n          <Grid.Col span={{ base: 12, md: 6 }}>\r\n            <TextInput\r\n              label=\"Phone Number\"\r\n              placeholder=\"+91 XXXXX XXXXX\"\r\n              required\r\n              {...form.getInputProps('contactInfo.phone')}\r\n              leftSection={<IconPhone size=\"1rem\" />}\r\n            />\r\n          </Grid.Col>\r\n          <Grid.Col span={{ base: 12, md: 6 }}>\r\n            <TextInput\r\n              label=\"Email Address\"\r\n              placeholder=\"email@example.com\"\r\n              {...form.getInputProps('contactInfo.email')}\r\n              leftSection={<IconMail size=\"1rem\" />}\r\n            />\r\n          </Grid.Col>\r\n          <Grid.Col span={12}>\r\n            <TextInput\r\n              label=\"Alternate Phone\"\r\n              placeholder=\"+91 XXXXX XXXXX\"\r\n              {...form.getInputProps('contactInfo.alternatePhone')}\r\n              leftSection={<IconPhone size=\"1rem\" />}\r\n            />\r\n          </Grid.Col>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      <Paper p=\"md\" withBorder>\r\n        <Group mb=\"md\">\r\n          <IconMapPin size=\"1.2rem\" />\r\n          <Title order={4}>Address Information</Title>\r\n        </Group>\r\n        <Grid>\r\n          <Grid.Col span={12}>\r\n            <Textarea\r\n              label=\"Street Address\"\r\n              placeholder=\"Enter complete street address\"\r\n              required\r\n              {...form.getInputProps('address.street')}\r\n              minRows={2}\r\n            />\r\n          </Grid.Col>\r\n          <Grid.Col span={{ base: 12, md: 6 }}>\r\n            <TextInput\r\n              label=\"City\"\r\n              placeholder=\"Enter city\"\r\n              required\r\n              {...form.getInputProps('address.city')}\r\n            />\r\n          </Grid.Col>\r\n          <Grid.Col span={{ base: 12, md: 6 }}>\r\n            <TextInput\r\n              label=\"State\"\r\n              placeholder=\"Enter state\"\r\n              required\r\n              {...form.getInputProps('address.state')}\r\n            />\r\n          </Grid.Col>\r\n          <Grid.Col span={{ base: 12, md: 6 }}>\r\n            <TextInput\r\n              label=\"Postal Code\"\r\n              placeholder=\"Enter postal code\"\r\n              required\r\n              {...form.getInputProps('address.postalCode')}\r\n            />\r\n          </Grid.Col>\r\n          <Grid.Col span={{ base: 12, md: 6 }}>\r\n            <TextInput\r\n              label=\"Country\"\r\n              placeholder=\"Enter country\"\r\n              {...form.getInputProps('address.country')}\r\n            />\r\n          </Grid.Col>\r\n          <Grid.Col span={12}>\r\n            <TextInput\r\n              label=\"Landmark\"\r\n              placeholder=\"Enter nearby landmark\"\r\n              {...form.getInputProps('address.landmark')}\r\n            />\r\n          </Grid.Col>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      <Paper p=\"md\" withBorder>\r\n        <Group mb=\"md\">\r\n          <IconAlertCircle size=\"1.2rem\" />\r\n          <Title order={4}>Emergency Contact</Title>\r\n        </Group>\r\n        <Grid>\r\n          <Grid.Col span={{ base: 12, md: 6 }}>\r\n            <TextInput\r\n              label=\"Contact Name\"\r\n              placeholder=\"Enter emergency contact name\"\r\n              {...form.getInputProps('contactInfo.emergencyContact.name')}\r\n            />\r\n          </Grid.Col>\r\n          <Grid.Col span={{ base: 12, md: 6 }}>\r\n            <TextInput\r\n              label=\"Contact Phone\"\r\n              placeholder=\"+91 XXXXX XXXXX\"\r\n              {...form.getInputProps('contactInfo.emergencyContact.phone')}\r\n              leftSection={<IconPhone size=\"1rem\" />}\r\n            />\r\n          </Grid.Col>\r\n          <Grid.Col span={{ base: 12, md: 6 }}>\r\n            <TextInput\r\n              label=\"Relationship\"\r\n              placeholder=\"Enter relationship\"\r\n              {...form.getInputProps('contactInfo.emergencyContact.relationship')}\r\n            />\r\n          </Grid.Col>\r\n        </Grid>\r\n      </Paper>\r\n    </Stack>\r\n  ), [form]);\r\n\r\n  // Step 3: Medical Information\r\n  const MedicalInfoStep = React.useMemo(() => (\r\n    <Stack gap=\"lg\">\r\n      <Paper p=\"md\" withBorder>\r\n        <Group mb=\"md\">\r\n          <IconAlertCircle size=\"1.2rem\" color=\"red\" />\r\n          <Title order={4}>Allergies</Title>\r\n        </Group>\r\n        <TagsInput\r\n          label=\"Known Allergies\"\r\n          description=\"Add allergies one by one\"\r\n          placeholder=\"Type allergy and press Enter\"\r\n          {...form.getInputProps('allergies')}\r\n        />\r\n      </Paper>\r\n\r\n      <Paper p=\"md\" withBorder>\r\n        <Group mb=\"md\">\r\n          <IconFileText size=\"1.2rem\" color=\"orange\" />\r\n          <Title order={4}>Chronic Diseases</Title>\r\n        </Group>\r\n        <TagsInput\r\n          label=\"Chronic Diseases\"\r\n          description=\"Add chronic conditions one by one\"\r\n          placeholder=\"Type condition and press Enter\"\r\n          {...form.getInputProps('chronicDiseases')}\r\n        />\r\n      </Paper>\r\n\r\n      <Paper p=\"md\" withBorder>\r\n        <Group mb=\"md\">\r\n          <IconFileText size=\"1.2rem\" color=\"blue\" />\r\n          <Title order={4}>Current Medications</Title>\r\n        </Group>\r\n        <TagsInput\r\n          label=\"Current Medications\"\r\n          description=\"Add current medications one by one\"\r\n          placeholder=\"Type medication and press Enter\"\r\n          {...form.getInputProps('currentMedications')}\r\n        />\r\n      </Paper>\r\n\r\n      <Paper p=\"md\" withBorder>\r\n        <Group mb=\"md\">\r\n          <IconFileText size=\"1.2rem\" />\r\n          <Title order={4}>Identity Documents</Title>\r\n        </Group>\r\n        <Grid>\r\n          <Grid.Col span={{ base: 12, md: 8 }}>\r\n            <TextInput\r\n              label=\"Aadhaar Number\"\r\n              placeholder=\"XXXX XXXX XXXX\"\r\n              {...form.getInputProps('aadhaarNumber')}\r\n            />\r\n          </Grid.Col>\r\n          <Grid.Col span={{ base: 12, md: 6 }}>\r\n            <Select\r\n              label=\"Other ID Type\"\r\n              placeholder=\"Select ID type\"\r\n              data={[\r\n                { value: 'pan', label: 'PAN Card' },\r\n                { value: 'passport', label: 'Passport' },\r\n                { value: 'driving_license', label: 'Driving License' },\r\n                { value: 'voter_id', label: 'Voter ID' }\r\n              ]}\r\n              {...form.getInputProps('otherIdType')}\r\n              clearable\r\n            />\r\n          </Grid.Col>\r\n          <Grid.Col span={{ base: 12, md: 6 }}>\r\n            <TextInput\r\n              label=\"Other ID Number\"\r\n              placeholder=\"Enter ID number\"\r\n              {...form.getInputProps('otherIdNumber')}\r\n            />\r\n          </Grid.Col>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      <Paper p=\"md\" withBorder>\r\n        <Title order={4} mb=\"md\">Additional Notes</Title>\r\n        <Textarea\r\n          label=\"Medical Notes\"\r\n          description=\"Any additional medical information\"\r\n          placeholder=\"Enter any additional notes\"\r\n          minRows={3}\r\n          {...form.getInputProps('notes')}\r\n        />\r\n      </Paper>\r\n    </Stack>\r\n  ), [form]);\r\n\r\n  // Step 4: Insurance Information\r\n  const InsuranceStep = React.useMemo(() => (\r\n    <Paper p=\"md\" withBorder>\r\n      <Group mb=\"md\">\r\n        <IconShieldX size=\"1.2rem\" color=\"green\" />\r\n        <Title order={4}>Insurance Information</Title>\r\n      </Group>\r\n      <Alert color=\"blue\" mb=\"md\">\r\n        Insurance information is optional but recommended for billing purposes.\r\n      </Alert>\r\n      \r\n      <Grid>\r\n        <Grid.Col span={{ base: 12, md: 6 }}>\r\n          <Select\r\n            label=\"Insurance Type\"\r\n            placeholder=\"Select insurance type\"\r\n            data={[\r\n              { value: 'government', label: 'Government' },\r\n              { value: 'private', label: 'Private' },\r\n              { value: 'corporate', label: 'Corporate' },\r\n              { value: 'self_pay', label: 'Self Pay' }\r\n            ]}\r\n            {...form.getInputProps('insuranceInfo.insuranceType')}\r\n          />\r\n        </Grid.Col>\r\n        <Grid.Col span={{ base: 12, md: 6 }}>\r\n          <TextInput\r\n            label=\"Insurance Provider\"\r\n            placeholder=\"Enter insurance company name\"\r\n            {...form.getInputProps('insuranceInfo.insuranceProvider')}\r\n          />\r\n        </Grid.Col>\r\n        <Grid.Col span={{ base: 12, md: 6 }}>\r\n          <TextInput\r\n            label=\"Policy Number\"\r\n            placeholder=\"Enter policy number\"\r\n            {...form.getInputProps('insuranceInfo.policyNumber')}\r\n          />\r\n        </Grid.Col>\r\n        <Grid.Col span={{ base: 12, md: 6 }}>\r\n          <TextInput\r\n            label=\"Policy Holder Name\"\r\n            placeholder=\"Enter policy holder name\"\r\n            {...form.getInputProps('insuranceInfo.policyHolderName')}\r\n          />\r\n        </Grid.Col>\r\n        <Grid.Col span={{ base: 12, md: 6 }}>\r\n          <TextInput\r\n            label=\"Relationship to Patient\"\r\n            placeholder=\"Self, Spouse, Parent, etc.\"\r\n            {...form.getInputProps('insuranceInfo.relationshipToPatient')}\r\n          />\r\n        </Grid.Col>\r\n        <Grid.Col span={{ base: 12, md: 6 }}>\r\n          <NumberInput\r\n            label=\"Coverage Amount\"\r\n            placeholder=\"Enter coverage amount\"\r\n            min={0}\r\n            {...form.getInputProps('insuranceInfo.coverageAmount')}\r\n            leftSection=\"â‚¹\"\r\n          />\r\n        </Grid.Col>\r\n      </Grid>\r\n    </Paper>\r\n  ), [form]);\r\n\r\n  // Step 5: Document Upload\r\n  const DocumentsStep = React.useMemo(() => (\r\n    <Stack gap=\"lg\">\r\n      <Paper p=\"md\" withBorder>\r\n        <Group mb=\"md\">\r\n          <IconUpload size=\"1.2rem\" />\r\n          <Title order={4}>Upload Documents</Title>\r\n        </Group>\r\n        \r\n        <FileInput\r\n          label=\"Upload Patient Documents\"\r\n          description=\"Upload ID proofs, medical reports, insurance documents, etc.\"\r\n          placeholder=\"Click to upload or drag files here\"\r\n          multiple\r\n          accept=\"image/*,application/pdf,.doc,.docx\"\r\n          onChange={handleFileUpload}\r\n          leftSection={<IconCloudUpload size=\"1rem\" />}\r\n        />\r\n\r\n        {uploadedFiles.length > 0 && (\r\n          <Stack mt=\"md\">\r\n            <Text fw={500}>Uploaded Files:</Text>\r\n            {uploadedFiles.map((file, index) => (\r\n              <Group key={index} justify=\"space-between\" p=\"xs\" bg=\"gray.0\" style={{ borderRadius: 4 }}>\r\n                <Group>\r\n                  <IconFileText size=\"1rem\" />\r\n                  <div>\r\n                    <Text size=\"sm\" fw={500}>{file.name}</Text>\r\n                    <Text size=\"xs\" c=\"dimmed\">{(file.size / 1024).toFixed(1)} KB</Text>\r\n                  </div>\r\n                </Group>\r\n                <Group>\r\n                  <ActionIcon variant=\"subtle\" size=\"sm\" onClick={() => removeUploadedFile(index)}>\r\n                    <IconTrash size=\"0.8rem\" />\r\n                  </ActionIcon>\r\n                </Group>\r\n              </Group>\r\n            ))}\r\n          </Stack>\r\n        )}\r\n      </Paper>\r\n\r\n      <Alert color=\"blue\">\r\n        <Group>\r\n          <IconAlertCircle size=\"1rem\" />\r\n          <Text size=\"sm\">\r\n            Documents can also be uploaded after patient registration from the patient details page.\r\n          </Text>\r\n        </Group>\r\n      </Alert>\r\n    </Stack>\r\n  ), [uploadedFiles, uploading]);\r\n  // Step 5: Review & Submit\r\n  const ReviewSubmitStep = React.useMemo(() => (\r\n    <Stack gap=\"lg\">\r\n      <Paper p=\"md\" withBorder>\r\n        <Group mb=\"md\">\r\n          <IconCheck size=\"1.2rem\" color=\"green\" />\r\n          <Title order={4}>Review & Submit</Title>\r\n        </Group>\r\n\r\n        <Alert color=\"blue\" mb=\"md\">\r\n          Please review the information below before submitting. You can go back to make changes if needed.\r\n        </Alert>\r\n\r\n        <Grid>\r\n          <Grid.Col span={12}>\r\n            <Card withBorder>\r\n              <Title order={5} mb=\"sm\">Patient Information Summary</Title>\r\n              <Stack gap=\"xs\">\r\n                <Group>\r\n                  <Text fw={500}>Name:</Text>\r\n                  <Text>{form.values.firstName} {form.values.lastName}</Text>\r\n                </Group>\r\n                <Group>\r\n                  <Text fw={500}>Phone:</Text>\r\n                  <Text>{form.values.contactInfo.phone}</Text>\r\n                </Group>\r\n                <Group>\r\n                  <Text fw={500}>Email:</Text>\r\n                  <Text>{form.values.contactInfo.email || 'Not provided'}</Text>\r\n                </Group>\r\n                <Group>\r\n                  <Text fw={500}>Address:</Text>\r\n                  <Text>{form.values.address.street}, {form.values.address.city}</Text>\r\n                </Group>\r\n              </Stack>\r\n            </Card>\r\n          </Grid.Col>\r\n\r\n          <Grid.Col span={12}>\r\n            <Card withBorder>\r\n              <Title order={5} mb=\"sm\">Documents</Title>\r\n              {uploadedFiles.length > 0 ? (\r\n                <Text c=\"green\">✓ {uploadedFiles.length} file(s) uploaded</Text>\r\n              ) : (\r\n                <Text c=\"dimmed\">No documents uploaded (optional)</Text>\r\n              )}\r\n            </Card>\r\n          </Grid.Col>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      <Alert color=\"green\">\r\n        <Group>\r\n          <IconCheck size=\"1rem\" />\r\n          <Text size=\"sm\">\r\n            Ready to submit! Click &quot;Create Patient&quot; to complete the registration process.\r\n          </Text>\r\n        </Group>\r\n      </Alert>\r\n    </Stack>\r\n  ), [form, uploadedFiles]);\r\n\r\n  const getCurrentStepContent = () => {\r\n    switch (activeStep) {\r\n      case 0: return BasicInfoStep;\r\n      case 1: return ContactInfoStep;\r\n      case 2: return MedicalInfoStep;\r\n      case 3: return InsuranceStep;\r\n      case 4: return DocumentsStep;\r\n      case 5: return ReviewSubmitStep;\r\n      default: return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      key={patient?.id || 'new'}\r\n      opened={opened}\r\n      onClose={handleClose}\r\n      title={\r\n        <Group>\r\n          <IconUsers size=\"1.2rem\" />\r\n          <Text fw={600}>{patient ? 'Edit Patient' : 'New Patient Registration'}</Text>\r\n        </Group>\r\n      }\r\n      size=\"xl\"\r\n      closeOnClickOutside={false}\r\n      closeOnEscape={!formLoading}\r\n    >\r\n      <form onSubmit={form.onSubmit((values: any) => handleSubmit(values as CreatePatientDto))}>\r\n        <LoadingOverlay visible={formLoading} />\r\n        \r\n        <Stack gap=\"lg\">\r\n          <Stepper active={activeStep}>\r\n            {steps.map((step, index) => (\r\n              <Stepper.Step\r\n                key={index}\r\n                label={step.label}\r\n                description={step.description}\r\n              />\r\n            ))}\r\n          </Stepper>\r\n\r\n          <Divider />\r\n\r\n          {getCurrentStepContent()}\r\n\r\n          <Group justify=\"space-between\" mt=\"xl\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={prevStep}\r\n              disabled={activeStep === 0 || formLoading}\r\n            >\r\n              Previous\r\n            </Button>\r\n\r\n            <Group>\r\n              {activeStep < steps.length - 1 ? (\r\n                <Button onClick={nextStep} disabled={formLoading}>\r\n                  Next\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  type=\"submit\"\r\n                  loading={formLoading}\r\n                  leftSection={<IconCheck size=\"1rem\" />}\r\n                  color=\"green\"\r\n                >\r\n                  {patient ? 'Update Patient' : 'Create Patient'}\r\n                </Button>\r\n              )}\r\n            </Group>\r\n          </Group>\r\n        </Stack>\r\n      </form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default PatientForm;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\patients\\PatientPortalAccess.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Card' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TextInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 16,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ActionIcon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Menu' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Progress' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ThemeIcon' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Divider' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PasswordInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Checkbox' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'NumberInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconX' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 47,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconEdit' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 49,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 49,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconTrash' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconSend' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconLock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 52,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconUnlock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconRefresh' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 54,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconClock' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 55,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconDeviceMobile' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 57,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'IconWorld' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 58,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 58,
        "endColumn": 12
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'preferencesForm'. Either include it or remove the dependency array.",
        "line": 110,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 110,
        "endColumn": 20,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [portalAccess, preferencesForm]",
            "fix": { "range": [2610, 2624], "text": "[portalAccess, preferencesForm]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 125,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 125,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 150,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 150,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 175,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 175,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 200,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 200,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 225,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 225,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 26,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Modal,\r\n  Stack,\r\n  Group,\r\n  Text,\r\n  Button,\r\n  Paper,\r\n  Title,\r\n  Grid,\r\n  Card,\r\n  Badge,\r\n  Switch,\r\n  TextInput,\r\n  Alert,\r\n  Tabs,\r\n  Timeline,\r\n  Table,\r\n  ActionIcon,\r\n  Menu,\r\n  Progress,\r\n  ThemeIcon,\r\n  Avatar,\r\n  Divider,\r\n  Select,\r\n  PasswordInput,\r\n  Checkbox,\r\n  NumberInput\r\n} from '@mantine/core';\r\nimport { useForm } from '@mantine/form';\r\nimport { notifications } from '@mantine/notifications';\r\nimport {\r\n  IconUserCheck,\r\n  IconUserX,\r\n  IconKey,\r\n  IconMail,\r\n  IconPhone,\r\n  IconCalendar,\r\n  IconLogin,\r\n  IconLogout,\r\n  IconSettings,\r\n  IconShield,\r\n  IconAlertCircle,\r\n  IconCheck,\r\n  IconX,\r\n  IconEye,\r\n  IconEdit,\r\n  IconTrash,\r\n  IconSend,\r\n  IconLock,\r\n  IconUnlock,\r\n  IconRefresh,\r\n  IconClock,\r\n  IconBell,\r\n  IconDeviceMobile,\r\n  IconWorld,\r\n  IconActivity,\r\n  IconHistory\r\n} from '@tabler/icons-react';\r\nimport { PatientPortalAccess, PatientPortalPreferences, Patient } from '../../types/patient';\r\nimport { formatDate } from '../../lib/utils';\r\n\r\ninterface PatientPortalAccessProps {\r\n  opened: boolean;\r\n  onClose: () => void;\r\n  patient: Patient | null;\r\n  portalAccess?: PatientPortalAccess;\r\n  onEnableAccess: (patientId: string, preferences: PatientPortalPreferences) => Promise<void>;\r\n  onDisableAccess: (patientId: string) => Promise<void>;\r\n  onUpdatePreferences: (patientId: string, preferences: PatientPortalPreferences) => Promise<void>;\r\n  onResetPassword: (patientId: string) => Promise<void>;\r\n  onSendCredentials: (patientId: string, method: 'email' | 'sms') => Promise<void>;\r\n}\r\n\r\nconst defaultPreferences: PatientPortalPreferences = {\r\n  receiveEmailNotifications: true,\r\n  receiveSmsNotifications: false,\r\n  appointmentReminders: true,\r\n  labResultNotifications: true,\r\n  prescriptionRefillReminders: true,\r\n  languagePreference: 'English',\r\n  timeZone: 'Asia/Kolkata'\r\n};\r\n\r\nexport default function PatientPortalAccess({\r\n  opened,\r\n  onClose,\r\n  patient,\r\n  portalAccess,\r\n  onEnableAccess,\r\n  onDisableAccess,\r\n  onUpdatePreferences,\r\n  onResetPassword,\r\n  onSendCredentials\r\n}: PatientPortalAccessProps) {\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  const [loading, setLoading] = useState(false);\r\n  const [actionLoading, setActionLoading] = useState<string | null>(null);\r\n\r\n  const preferencesForm = useForm<PatientPortalPreferences>({\r\n    initialValues: portalAccess?.preferences || defaultPreferences\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (portalAccess?.preferences) {\r\n      preferencesForm.setValues(portalAccess.preferences);\r\n    }\r\n  }, [portalAccess]);\r\n\r\n  const handleEnableAccess = async () => {\r\n    if (!patient) return;\r\n    \r\n    try {\r\n      setActionLoading('enable');\r\n      await onEnableAccess(patient.id, preferencesForm.values);\r\n      \r\n      notifications.show({\r\n        title: 'Portal Access Enabled',\r\n        message: 'Patient portal access has been enabled successfully.',\r\n        color: 'green',\r\n        icon: <IconCheck size=\"1rem\" />\r\n      });\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: 'Failed to enable portal access. Please try again.',\r\n        color: 'red',\r\n        icon: <IconAlertCircle size=\"1rem\" />\r\n      });\r\n    } finally {\r\n      setActionLoading(null);\r\n    }\r\n  };\r\n\r\n  const handleDisableAccess = async () => {\r\n    if (!patient) return;\r\n    \r\n    try {\r\n      setActionLoading('disable');\r\n      await onDisableAccess(patient.id);\r\n      \r\n      notifications.show({\r\n        title: 'Portal Access Disabled',\r\n        message: 'Patient portal access has been disabled.',\r\n        color: 'orange',\r\n        icon: <IconCheck size=\"1rem\" />\r\n      });\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: 'Failed to disable portal access. Please try again.',\r\n        color: 'red',\r\n        icon: <IconAlertCircle size=\"1rem\" />\r\n      });\r\n    } finally {\r\n      setActionLoading(null);\r\n    }\r\n  };\r\n\r\n  const handleUpdatePreferences = async (values: PatientPortalPreferences) => {\r\n    if (!patient) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      await onUpdatePreferences(patient.id, values);\r\n      \r\n      notifications.show({\r\n        title: 'Preferences Updated',\r\n        message: 'Portal preferences have been updated successfully.',\r\n        color: 'green',\r\n        icon: <IconCheck size=\"1rem\" />\r\n      });\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: 'Failed to update preferences. Please try again.',\r\n        color: 'red',\r\n        icon: <IconAlertCircle size=\"1rem\" />\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleResetPassword = async () => {\r\n    if (!patient) return;\r\n    \r\n    try {\r\n      setActionLoading('reset');\r\n      await onResetPassword(patient.id);\r\n      \r\n      notifications.show({\r\n        title: 'Password Reset',\r\n        message: 'Password has been reset and new credentials sent to the patient.',\r\n        color: 'green',\r\n        icon: <IconCheck size=\"1rem\" />\r\n      });\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: 'Failed to reset password. Please try again.',\r\n        color: 'red',\r\n        icon: <IconAlertCircle size=\"1rem\" />\r\n      });\r\n    } finally {\r\n      setActionLoading(null);\r\n    }\r\n  };\r\n\r\n  const handleSendCredentials = async (method: 'email' | 'sms') => {\r\n    if (!patient) return;\r\n    \r\n    try {\r\n      setActionLoading(`send-${method}`);\r\n      await onSendCredentials(patient.id, method);\r\n      \r\n      notifications.show({\r\n        title: 'Credentials Sent',\r\n        message: `Login credentials have been sent via ${method.toUpperCase()}.`,\r\n        color: 'green',\r\n        icon: <IconCheck size=\"1rem\" />\r\n      });\r\n    } catch (error) {\r\n      notifications.show({\r\n        title: 'Error',\r\n        message: `Failed to send credentials via ${method.toUpperCase()}. Please try again.`,\r\n        color: 'red',\r\n        icon: <IconAlertCircle size=\"1rem\" />\r\n      });\r\n    } finally {\r\n      setActionLoading(null);\r\n    }\r\n  };\r\n\r\n  if (!patient) return null;\r\n\r\n  // Overview Tab\r\n  const OverviewTab = () => (\r\n    <Stack gap=\"lg\">\r\n      {/* Portal Status */}\r\n      <Paper p=\"lg\" withBorder>\r\n        <Grid>\r\n          <Grid.Col span={{ base: 12, md: 8 }}>\r\n            <Group mb=\"md\">\r\n              <Avatar size=\"lg\" name={`${patient.firstName} ${patient.lastName}`} color=\"blue\" />\r\n              <div>\r\n                <Title order={3}>{patient.firstName} {patient.lastName}</Title>\r\n                <Text c=\"dimmed\">{patient.patientId}</Text>\r\n              </div>\r\n            </Group>\r\n            \r\n            <Group>\r\n              <Badge\r\n                size=\"lg\"\r\n                color={portalAccess?.isEnabled ? 'green' : 'red'}\r\n                variant=\"light\"\r\n                leftSection={portalAccess?.isEnabled ? <IconUserCheck size=\"0.8rem\" /> : <IconUserX size=\"0.8rem\" />}\r\n              >\r\n                {portalAccess?.isEnabled ? 'Portal Access Enabled' : 'Portal Access Disabled'}\r\n              </Badge>\r\n              {portalAccess?.accountLocked && (\r\n                <Badge color=\"red\" variant=\"filled\">\r\n                  Account Locked\r\n                </Badge>\r\n              )}\r\n            </Group>\r\n          </Grid.Col>\r\n          \r\n          <Grid.Col span={{ base: 12, md: 4 }}>\r\n            <Stack>\r\n              {!portalAccess?.isEnabled ? (\r\n                <Button\r\n                  fullWidth\r\n                  color=\"green\"\r\n                  onClick={handleEnableAccess}\r\n                  loading={actionLoading === 'enable'}\r\n                  leftSection={<IconUserCheck size=\"1rem\" />}\r\n                >\r\n                  Enable Portal Access\r\n                </Button>\r\n              ) : (\r\n                <Group grow>\r\n                  <Button\r\n                    color=\"red\"\r\n                    variant=\"outline\"\r\n                    onClick={handleDisableAccess}\r\n                    loading={actionLoading === 'disable'}\r\n                    leftSection={<IconUserX size=\"1rem\" />}\r\n                  >\r\n                    Disable Access\r\n                  </Button>\r\n                </Group>\r\n              )}\r\n              \r\n              {portalAccess?.isEnabled && (\r\n                <Group grow>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    onClick={handleResetPassword}\r\n                    loading={actionLoading === 'reset'}\r\n                    leftSection={<IconKey size=\"1rem\" />}\r\n                    size=\"sm\"\r\n                  >\r\n                    Reset Password\r\n                  </Button>\r\n                </Group>\r\n              )}\r\n            </Stack>\r\n          </Grid.Col>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      {portalAccess?.isEnabled && (\r\n        <>\r\n          {/* Account Information */}\r\n          <Grid>\r\n            <Grid.Col span={{ base: 12, md: 6 }}>\r\n              <Paper p=\"md\" withBorder>\r\n                <Group mb=\"md\">\r\n                  <IconActivity size=\"1.2rem\" />\r\n                  <Title order={4}>Account Activity</Title>\r\n                </Group>\r\n                <Stack gap=\"sm\">\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\">Last Login</Text>\r\n                    <Text size=\"sm\" c=\"dimmed\">\r\n                      {portalAccess.lastLogin ? formatDate(portalAccess.lastLogin) : 'Never'}\r\n                    </Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\">Login Attempts</Text>\r\n                    <Text size=\"sm\" c=\"dimmed\">{portalAccess.loginAttempts}</Text>\r\n                  </Group>\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\">Two Factor Auth</Text>\r\n                    <Badge color={portalAccess.twoFactorEnabled ? 'green' : 'gray'} size=\"sm\">\r\n                      {portalAccess.twoFactorEnabled ? 'Enabled' : 'Disabled'}\r\n                    </Badge>\r\n                  </Group>\r\n                </Stack>\r\n              </Paper>\r\n            </Grid.Col>\r\n\r\n            <Grid.Col span={{ base: 12, md: 6 }}>\r\n              <Paper p=\"md\" withBorder>\r\n                <Group mb=\"md\">\r\n                  <IconBell size=\"1.2rem\" />\r\n                  <Title order={4}>Notification Preferences</Title>\r\n                </Group>\r\n                <Stack gap=\"sm\">\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\">Email Notifications</Text>\r\n                    <Badge color={portalAccess.preferences.receiveEmailNotifications ? 'green' : 'gray'} size=\"sm\">\r\n                      {portalAccess.preferences.receiveEmailNotifications ? 'Enabled' : 'Disabled'}\r\n                    </Badge>\r\n                  </Group>\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\">SMS Notifications</Text>\r\n                    <Badge color={portalAccess.preferences.receiveSmsNotifications ? 'green' : 'gray'} size=\"sm\">\r\n                      {portalAccess.preferences.receiveSmsNotifications ? 'Enabled' : 'Disabled'}\r\n                    </Badge>\r\n                  </Group>\r\n                  <Group justify=\"space-between\">\r\n                    <Text size=\"sm\">Appointment Reminders</Text>\r\n                    <Badge color={portalAccess.preferences.appointmentReminders ? 'green' : 'gray'} size=\"sm\">\r\n                      {portalAccess.preferences.appointmentReminders ? 'Enabled' : 'Disabled'}\r\n                    </Badge>\r\n                  </Group>\r\n                </Stack>\r\n              </Paper>\r\n            </Grid.Col>\r\n          </Grid>\r\n\r\n          {/* Send Credentials */}\r\n          <Paper p=\"md\" withBorder>\r\n            <Group justify=\"space-between\" mb=\"md\">\r\n              <div>\r\n                <Title order={4}>Send Login Credentials</Title>\r\n                <Text size=\"sm\" c=\"dimmed\">\r\n                  Send new login credentials to the patient via email or SMS\r\n                </Text>\r\n              </div>\r\n              <Group>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={() => handleSendCredentials('email')}\r\n                  loading={actionLoading === 'send-email'}\r\n                  leftSection={<IconMail size=\"1rem\" />}\r\n                  disabled={!patient.contactInfo.email}\r\n                >\r\n                  Send via Email\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={() => handleSendCredentials('sms')}\r\n                  loading={actionLoading === 'send-sms'}\r\n                  leftSection={<IconPhone size=\"1rem\" />}\r\n                >\r\n                  Send via SMS\r\n                </Button>\r\n              </Group>\r\n            </Group>\r\n            <Alert color=\"blue\" icon={<IconAlertCircle size=\"1rem\" />}>\r\n              New credentials will invalidate any existing login sessions for this patient.\r\n            </Alert>\r\n          </Paper>\r\n        </>\r\n      )}\r\n    </Stack>\r\n  );\r\n\r\n  // Preferences Tab\r\n  const PreferencesTab = () => (\r\n    <form onSubmit={preferencesForm.onSubmit(handleUpdatePreferences)}>\r\n      <Stack gap=\"lg\">\r\n        {!portalAccess?.isEnabled && (\r\n          <Alert color=\"orange\" icon={<IconAlertCircle size=\"1rem\" />}>\r\n            Portal access must be enabled before preferences can be configured.\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Notification Preferences */}\r\n        <Paper p=\"md\" withBorder>\r\n          <Title order={4} mb=\"md\">Notification Preferences</Title>\r\n          <Stack gap=\"md\">\r\n            <Switch\r\n              label=\"Email Notifications\"\r\n              description=\"Receive notifications via email\"\r\n              {...preferencesForm.getInputProps('receiveEmailNotifications', { type: 'checkbox' })}\r\n              disabled={!portalAccess?.isEnabled || !patient.contactInfo.email}\r\n            />\r\n            <Switch\r\n              label=\"SMS Notifications\"\r\n              description=\"Receive notifications via SMS\"\r\n              {...preferencesForm.getInputProps('receiveSmsNotifications', { type: 'checkbox' })}\r\n              disabled={!portalAccess?.isEnabled}\r\n            />\r\n            <Switch\r\n              label=\"Appointment Reminders\"\r\n              description=\"Receive reminders for upcoming appointments\"\r\n              {...preferencesForm.getInputProps('appointmentReminders', { type: 'checkbox' })}\r\n              disabled={!portalAccess?.isEnabled}\r\n            />\r\n            <Switch\r\n              label=\"Lab Result Notifications\"\r\n              description=\"Get notified when lab results are available\"\r\n              {...preferencesForm.getInputProps('labResultNotifications', { type: 'checkbox' })}\r\n              disabled={!portalAccess?.isEnabled}\r\n            />\r\n            <Switch\r\n              label=\"Prescription Refill Reminders\"\r\n              description=\"Receive reminders for prescription refills\"\r\n              {...preferencesForm.getInputProps('prescriptionRefillReminders', { type: 'checkbox' })}\r\n              disabled={!portalAccess?.isEnabled}\r\n            />\r\n          </Stack>\r\n        </Paper>\r\n\r\n        {/* Language and Regional Settings */}\r\n        <Paper p=\"md\" withBorder>\r\n          <Title order={4} mb=\"md\">Language & Regional Settings</Title>\r\n          <Grid>\r\n            <Grid.Col span={{ base: 12, md: 6 }}>\r\n              <Select\r\n                label=\"Language Preference\"\r\n                data={[\r\n                  { value: 'English', label: 'English' },\r\n                  { value: 'Hindi', label: 'हिंदी (Hindi)' },\r\n                  { value: 'Spanish', label: 'Español (Spanish)' },\r\n                  { value: 'French', label: 'Français (French)' }\r\n                ]}\r\n                {...preferencesForm.getInputProps('languagePreference')}\r\n                disabled={!portalAccess?.isEnabled}\r\n              />\r\n            </Grid.Col>\r\n            <Grid.Col span={{ base: 12, md: 6 }}>\r\n              <Select\r\n                label=\"Time Zone\"\r\n                data={[\r\n                  { value: 'Asia/Kolkata', label: 'India Standard Time (IST)' },\r\n                  { value: 'America/New_York', label: 'Eastern Time (EST)' },\r\n                  { value: 'America/Los_Angeles', label: 'Pacific Time (PST)' },\r\n                  { value: 'Europe/London', label: 'Greenwich Mean Time (GMT)' }\r\n                ]}\r\n                {...preferencesForm.getInputProps('timeZone')}\r\n                disabled={!portalAccess?.isEnabled}\r\n              />\r\n            </Grid.Col>\r\n          </Grid>\r\n        </Paper>\r\n\r\n        {/* Action Buttons */}\r\n        <Group justify=\"flex-end\">\r\n          <Button variant=\"outline\" onClick={onClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            loading={loading}\r\n            disabled={!portalAccess?.isEnabled}\r\n            leftSection={<IconSettings size=\"1rem\" />}\r\n          >\r\n            Update Preferences\r\n          </Button>\r\n        </Group>\r\n      </Stack>\r\n    </form>\r\n  );\r\n\r\n  // Access History Tab\r\n  const AccessHistoryTab = () => (\r\n    <Stack gap=\"lg\">\r\n      {!portalAccess?.isEnabled ? (\r\n        <Alert color=\"gray\" icon={<IconHistory size=\"1rem\" />}>\r\n          Portal access history will be available once the patient portal is enabled.\r\n        </Alert>\r\n      ) : (\r\n        <>\r\n          <Paper p=\"md\" withBorder>\r\n            <Title order={4} mb=\"md\">Recent Access Activity</Title>\r\n            <Timeline active={1} bulletSize={24} lineWidth={2}>\r\n              <Timeline.Item bullet={<IconLogin size=\"0.8rem\" />} title=\"Successful Login\">\r\n                <Text c=\"dimmed\" size=\"sm\">March 15, 2024 at 10:30 AM</Text>\r\n                <Text size=\"sm\" mt={4}>Logged in from Chrome browser (IP: 192.168.1.100)</Text>\r\n              </Timeline.Item>\r\n              \r\n              <Timeline.Item bullet={<IconEye size=\"0.8rem\" />} title=\"Viewed Lab Results\">\r\n                <Text c=\"dimmed\" size=\"sm\">March 15, 2024 at 10:32 AM</Text>\r\n                <Text size=\"sm\" mt={4}>Accessed recent blood test results</Text>\r\n              </Timeline.Item>\r\n              \r\n              <Timeline.Item bullet={<IconCalendar size=\"0.8rem\" />} title=\"Appointment Scheduled\">\r\n                <Text c=\"dimmed\" size=\"sm\">March 15, 2024 at 10:35 AM</Text>\r\n                <Text size=\"sm\" mt={4}>Scheduled follow-up appointment for March 25th</Text>\r\n              </Timeline.Item>\r\n              \r\n              <Timeline.Item bullet={<IconLogout size=\"0.8rem\" />} title=\"Logged Out\">\r\n                <Text c=\"dimmed\" size=\"sm\">March 15, 2024 at 10:45 AM</Text>\r\n                <Text size=\"sm\" mt={4}>Session ended normally</Text>\r\n              </Timeline.Item>\r\n            </Timeline>\r\n          </Paper>\r\n\r\n          <Paper p=\"md\" withBorder>\r\n            <Title order={4} mb=\"md\">Security Events</Title>\r\n            <Table>\r\n              <Table.Thead>\r\n                <Table.Tr>\r\n                  <Table.Th>Date</Table.Th>\r\n                  <Table.Th>Event</Table.Th>\r\n                  <Table.Th>Status</Table.Th>\r\n                  <Table.Th>Details</Table.Th>\r\n                </Table.Tr>\r\n              </Table.Thead>\r\n              <Table.Tbody>\r\n                <Table.Tr>\r\n                  <Table.Td>Mar 15, 2024</Table.Td>\r\n                  <Table.Td>Password Reset</Table.Td>\r\n                  <Table.Td>\r\n                    <Badge color=\"green\" size=\"sm\">Success</Badge>\r\n                  </Table.Td>\r\n                  <Table.Td>Admin initiated password reset</Table.Td>\r\n                </Table.Tr>\r\n                <Table.Tr>\r\n                  <Table.Td>Mar 10, 2024</Table.Td>\r\n                  <Table.Td>Failed Login</Table.Td>\r\n                  <Table.Td>\r\n                    <Badge color=\"red\" size=\"sm\">Failed</Badge>\r\n                  </Table.Td>\r\n                  <Table.Td>Incorrect password (3 attempts)</Table.Td>\r\n                </Table.Tr>\r\n                <Table.Tr>\r\n                  <Table.Td>Mar 5, 2024</Table.Td>\r\n                  <Table.Td>Account Created</Table.Td>\r\n                  <Table.Td>\r\n                    <Badge color=\"blue\" size=\"sm\">Info</Badge>\r\n                  </Table.Td>\r\n                  <Table.Td>Portal access enabled by admin</Table.Td>\r\n                </Table.Tr>\r\n              </Table.Tbody>\r\n            </Table>\r\n          </Paper>\r\n        </>\r\n      )}\r\n    </Stack>\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      opened={opened}\r\n      onClose={onClose}\r\n      title={\r\n        <Group>\r\n          <IconUserCheck size=\"1.2rem\" />\r\n          <Text fw={600}>Patient Portal Access</Text>\r\n        </Group>\r\n      }\r\n      size=\"xl\"\r\n    >\r\n      <Tabs value={activeTab} onChange={(value) => setActiveTab(value || 'overview')}>\r\n        <Tabs.List>\r\n          <Tabs.Tab value=\"overview\" leftSection={<IconShield size=\"0.8rem\" />}>\r\n            Overview\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"preferences\" leftSection={<IconSettings size=\"0.8rem\" />}>\r\n            Preferences\r\n          </Tabs.Tab>\r\n          <Tabs.Tab value=\"history\" leftSection={<IconHistory size=\"0.8rem\" />}>\r\n            Access History\r\n          </Tabs.Tab>\r\n        </Tabs.List>\r\n\r\n        <Tabs.Panel value=\"overview\" pt=\"md\">\r\n          <OverviewTab />\r\n        </Tabs.Panel>\r\n\r\n        <Tabs.Panel value=\"preferences\" pt=\"md\">\r\n          <PreferencesTab />\r\n        </Tabs.Panel>\r\n\r\n        <Tabs.Panel value=\"history\" pt=\"md\">\r\n          <AccessHistoryTab />\r\n        </Tabs.Panel>\r\n      </Tabs>\r\n    </Modal>\r\n  );\r\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\patients\\PatientSearch.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'handleQuickSearch'. Either include it or remove the dependency array.",
        "line": 95,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 95,
        "endColumn": 27,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [debouncedSearchTerm, handleQuickSearch]",
            "fix": { "range": [2330, 2351], "text": "[debouncedSearchTerm, handleQuickSearch]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\shared\\DataTable.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\shared\\Layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\shared\\LoadingStates.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\ui\\LoadingSpinner.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\components\\ui\\SkipToContent.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\hooks\\useDataFetch.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.",
        "line": 49,
        "column": 6,
        "nodeType": "Identifier",
        "endLine": 49,
        "endColumn": 18,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",
        "line": 49,
        "column": 6,
        "nodeType": "Identifier",
        "endLine": 49,
        "endColumn": 18,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchData]",
            "fix": { "range": [1350, 1362], "text": "[fetchData]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\lib\\api-client.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\lib\\api\\hooks.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\lib\\api\\queryClient.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\lib\\lazy\\LazyComponents.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\lib\\rbac.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\lib\\rbac\\RBACProvider.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'canAccessRoute' and 'router'. Either include them or remove the dependency array.",
        "line": 208,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 208,
        "endColumn": 31,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [pathname, loading, user, canAccessRoute, router]",
            "fix": {
              "range": [5952, 5977],
              "text": "[pathname, loading, user, canAccessRoute, router]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\lib\\security\\csrf.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\lib\\security\\headers.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\lib\\utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\middleware.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\api-client.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\api.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\appointments.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\auth.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\billing.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\communications.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\emergency.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\emr.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\finance.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\hr.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\insurance.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\integration.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\inventory.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\ipd.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\laboratory.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\opd.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\pathology.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\patient-portal.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\patients.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\pharmacy-management.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\pharmacy.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\quality.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\radiology.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\reports.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\research.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\staff.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\surgery.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\telemedicine.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\services\\tenants.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\stores\\appStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\appointment.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\billing.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\common.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\emergency.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\finance.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\global-augmentations.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\hr.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\integration.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\inventory.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\laboratory.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\mantine-augmentations.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\medical.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\pathology.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\patient-portal.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\patient.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\pharmacy.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\quality.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\radiology.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\research.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\staff.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\surgery.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Users\\HP\\Desktop\\HMS\\apps\\web\\src\\types\\telemedicine.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
